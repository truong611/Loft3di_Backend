using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime;
using TN.TNM.DataAccess.Databases.Entities;
using TN.TNM.DataAccess.Interfaces;
using TN.TNM.DataAccess.Messages.Parameters.Manufacture;
using TN.TNM.DataAccess.Messages.Results.Manufacture;
using TN.TNM.DataAccess.Models;
using TN.TNM.DataAccess.Models.Manufacture;
using TN.TNM.DataAccess.Models.Note;
using TN.TNM.DataAccess.Models.Order;

namespace TN.TNM.DataAccess.Databases.DAO
{
    public class ManufactureDAO : BaseDAO, IManufactureDataAccess
    {
        private readonly IHostingEnvironment hostingEnvironment;

        public ManufactureDAO(TNTN8Context _context, IHostingEnvironment _hostingEnvironment)
        {
            this.context = _context;
            this.hostingEnvironment = _hostingEnvironment;
        }

        public GetMasterDataCreateProductOrderWorkflowResult GetMasterDataCreateProductOrderWorkflow(
            GetMasterDataCreateProductOrderWorkflowParameter parameter)
        {
            try
            {
                var listCode = context.ProductOrderWorkflow.Select(x => x.Code.ToLower().Trim()).ToList();

                return new GetMasterDataCreateProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success",
                    ListCode = listCode
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateProductOrderWorkflowResult CreateProductOrderWorkflow(CreateProductOrderWorkflowParameter parameter)
        {
            try
            {
                #region Kiểm tra mã Quy trình đã tồn tại chưa

                var duplicateCode =
                    context.ProductOrderWorkflow.FirstOrDefault(x => x.Code == parameter.ProductOrderWorkflow.Code);

                if (duplicateCode != null)
                {
                    return new CreateProductOrderWorkflowResult()
                    {
                        Status = false,
                        Message = "Mã Quy trình đã tồn tại trên hệ thống"
                    };
                }

                #endregion

                var productOrderWorkflow = new ProductOrderWorkflow();

                productOrderWorkflow.ProductOrderWorkflowId = Guid.NewGuid();
                productOrderWorkflow.Code = parameter.ProductOrderWorkflow.Code.Trim();
                productOrderWorkflow.Name = parameter.ProductOrderWorkflow.Name.Trim();
                productOrderWorkflow.IsDefault = parameter.ProductOrderWorkflow.IsDefault;
                productOrderWorkflow.Active = parameter.ProductOrderWorkflow.Active;
                productOrderWorkflow.Description = parameter.ProductOrderWorkflow.Description?.Trim();
                productOrderWorkflow.CreatedById = parameter.UserId;
                productOrderWorkflow.CreatedDate = DateTime.Now;

                if (productOrderWorkflow.IsDefault == true)
                {
                    var listQT = context.ProductOrderWorkflow.ToList();
                    listQT.ForEach(item => { item.IsDefault = false; });
                    context.ProductOrderWorkflow.UpdateRange(listQT);
                }

                context.ProductOrderWorkflow.Add(productOrderWorkflow);
                context.SaveChanges();

                var listCode = context.ProductOrderWorkflow.Select(x => x.Code.ToLower().Trim()).ToList();

                return new CreateProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductOrderWorkflowId = productOrderWorkflow.ProductOrderWorkflowId,
                    ListCode = listCode
                };
            }
            catch (Exception e)
            {
                return new CreateProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CheckIsDefaultProductOrderWorkflowResult CheckIsDefaultProductOrderWorkflow(
            CheckIsDefaultProductOrderWorkflowParameter parameter)
        {
            try
            {
                var isDefaultExists = false;
                var check = context.ProductOrderWorkflow.FirstOrDefault(x => x.IsDefault == true);

                if (check != null)
                {
                    isDefaultExists = true;
                }

                return new CheckIsDefaultProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success",
                    IsDefaultExists = isDefaultExists
                };
            }
            catch (Exception e)
            {
                return new CheckIsDefaultProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetProductOrderWorkflowByIdResult GetProductOrderWorkflowById(GetProductOrderWorkflowByIdParameter parameter)
        {
            try
            {
                var listAllTechniqueRequest = context.TechniqueRequest.ToList();

                var productOrderWorkflow = context.ProductOrderWorkflow.Where(x =>
                    x.ProductOrderWorkflowId == parameter.ProductOrderWorkflowId).Select(y =>
                    new ProductOrderWorkflowEntityModel
                    {
                        ProductOrderWorkflowId = y.ProductOrderWorkflowId,
                        Code = y.Code,
                        Name = y.Name,
                        Description = y.Description,
                        IsDefault = y.IsDefault,
                        Active = y.Active,
                        CreatedById = y.CreatedById,
                        CreatedDate = y.CreatedDate
                    }).FirstOrDefault();

                var listOrderTechniqueMapping = new List<OrderTechniqueMappingEntityModel>();
                listOrderTechniqueMapping = context.OrderTechniqueMapping
                    .Where(x => x.ProductOrderWorkflowId == productOrderWorkflow.ProductOrderWorkflowId).Select(y =>
                        new OrderTechniqueMappingEntityModel
                        {
                            OrderTechniqueMappingId = y.OrderTechniqueMappingId,
                            ProductOrderWorkflowId = y.ProductOrderWorkflowId,
                            TechniqueRequestId = y.TechniqueRequestId,
                            TechniqueOrder = y.TechniqueOrder,
                            Rate = y.Rate,
                            IsDefault = y.IsDefault,
                            CreatedDate = y.CreatedDate,
                            CreatedById = y.CreatedById
                        }).OrderBy(z => z.TechniqueOrder).ToList();

                listOrderTechniqueMapping.ForEach(item =>
                {
                    var technique =
                        listAllTechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == item.TechniqueRequestId);

                    item.TechniqueName = technique == null ? null : technique.TechniqueName;
                });

                var listCode = context.ProductOrderWorkflow
                    .Where(x => x.ProductOrderWorkflowId != productOrderWorkflow.ProductOrderWorkflowId)
                    .Select(y => y.Code.ToLower().Trim()).ToList();

                var listTechniqueRequestId = listOrderTechniqueMapping.Select(x => x.TechniqueRequestId).ToList();

                var listTechniqueRequest =
                    listAllTechniqueRequest.Where(x =>
                            x.ParentId == null && x.Active == true &&
                            (listTechniqueRequestId.Count == 0 ||
                             !listTechniqueRequestId.Contains(x.TechniqueRequestId)))
                        .Select(y =>
                            new TechniqueRequestEntityModel
                            {
                                TechniqueRequestId = y.TechniqueRequestId,
                                ParentId = y.ParentId,
                                OrganizationId = y.OrganizationId,
                                TechniqueName = y.TechniqueName,
                                Description = y.Description
                            }).OrderBy(z => z.TechniqueName).ToList();

                var listIgnoreTechniqueRequest = new List<TechniqueRequestEntityModel>();

                if (listTechniqueRequestId.Count > 0)
                {
                    listIgnoreTechniqueRequest = listAllTechniqueRequest.Where(x =>
                            x.ParentId == null && x.Active == true &&
                            listTechniqueRequestId.Contains(x.TechniqueRequestId))
                        .Select(y =>
                            new TechniqueRequestEntityModel
                            {
                                TechniqueRequestId = y.TechniqueRequestId,
                                ParentId = y.ParentId,
                                OrganizationId = y.OrganizationId,
                                TechniqueName = y.TechniqueName,
                                Description = y.Description
                            }).OrderBy(z => z.TechniqueName).ToList();
                }

                return new GetProductOrderWorkflowByIdResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductOrderWorkflow = productOrderWorkflow,
                    ListOrderTechniqueMapping = listOrderTechniqueMapping,
                    ListCode = listCode,
                    ListTechniqueRequest = listTechniqueRequest,
                    ListIgnoreTechniqueRequest = listIgnoreTechniqueRequest
                };
            }
            catch (Exception e)
            {
                return new GetProductOrderWorkflowByIdResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductOrderWorkflowResult UpdateProductOrderWorkflow(UpdateProductOrderWorkflowParameter parameter)
        {
            try
            {
                var productOrderWorkflow = context.ProductOrderWorkflow.FirstOrDefault(x =>
                    x.ProductOrderWorkflowId == parameter.ProductOrderWorkflow.ProductOrderWorkflowId);

                #region Kiểm tra Code đã tồn tại trên hệ thống chưa

                var check = context.ProductOrderWorkflow.FirstOrDefault(x =>
                    x.Code == parameter.ProductOrderWorkflow.Code &&
                    x.ProductOrderWorkflowId != productOrderWorkflow.ProductOrderWorkflowId);

                if (check != null)
                {
                    return new UpdateProductOrderWorkflowResult()
                    {
                        Status = false,
                        Message = "Mã Quy trình đã tồn tại trên hệ thống"
                    };
                }

                #endregion

                #region Kiểm tra Quy trình đã được dùng trong lệnh sản xuất chưa

                var check_exist = context.ProductionOrderMapping.FirstOrDefault(x =>
                    x.ProductOrderWorkflowId == parameter.ProductOrderWorkflow.ProductOrderWorkflowId);

                if (check_exist != null)
                {
                    return new UpdateProductOrderWorkflowResult()
                    {
                        Status = false,
                        Message = "Quy trình đã được sử dụng không thể sửa"
                    };
                }

                #endregion

                productOrderWorkflow.Code = parameter.ProductOrderWorkflow.Code;
                productOrderWorkflow.Name = parameter.ProductOrderWorkflow.Name;
                productOrderWorkflow.Description = parameter.ProductOrderWorkflow.Description;
                productOrderWorkflow.Active = parameter.ProductOrderWorkflow.Active;
                productOrderWorkflow.UpdatedById = parameter.UserId;
                productOrderWorkflow.UpdatedDate = DateTime.Now;

                if (parameter.ProductOrderWorkflow.IsDefault == true)
                {
                    var listQT = context.ProductOrderWorkflow.ToList();
                    listQT.ForEach(item => { item.IsDefault = false; });
                    context.ProductOrderWorkflow.UpdateRange(listQT);
                }

                productOrderWorkflow.IsDefault = parameter.ProductOrderWorkflow.IsDefault;

                context.ProductOrderWorkflow.Update(productOrderWorkflow);

                var list_current = context.OrderTechniqueMapping
                    .Where(x => x.ProductOrderWorkflowId == productOrderWorkflow.ProductOrderWorkflowId).ToList();
                context.OrderTechniqueMapping.RemoveRange(list_current);

                var listOrderTechniqueMapping = new List<OrderTechniqueMapping>();
                parameter.ListOrderTechniqueMapping.ForEach(item =>
                {
                    var orderTechniqueMapping = new OrderTechniqueMapping();

                    orderTechniqueMapping.OrderTechniqueMappingId = Guid.NewGuid();
                    orderTechniqueMapping.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                    orderTechniqueMapping.TechniqueRequestId = item.TechniqueRequestId;
                    orderTechniqueMapping.TechniqueOrder = item.TechniqueOrder;
                    orderTechniqueMapping.Rate = 1; //item.Rate;
                    orderTechniqueMapping.IsDefault = item.IsDefault;
                    orderTechniqueMapping.Active = true;
                    orderTechniqueMapping.CreatedById = parameter.UserId;
                    orderTechniqueMapping.CreatedDate = item.CreatedDate;
                    orderTechniqueMapping.UpdatedById = parameter.UserId;
                    orderTechniqueMapping.UpdatedDate = DateTime.Now;

                    listOrderTechniqueMapping.Add(orderTechniqueMapping);
                });
                context.OrderTechniqueMapping.AddRange(listOrderTechniqueMapping);
                context.SaveChanges();

                var listCode = context.ProductOrderWorkflow
                    .Where(x => x.ProductOrderWorkflowId != productOrderWorkflow.ProductOrderWorkflowId)
                    .Select(y => y.Code.ToLower().Trim()).ToList();

                return new UpdateProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success",
                    ListCode = listCode
                };
            }
            catch (Exception e)
            {
                return new UpdateProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataSearchProductOrderWorkflowResult GetMasterDataSearchProductOrderWorkflow(
            GetMasterDataSearchProductOrderWorkflowParameter parameter)
        {
            try
            {

                return new GetMasterDataSearchProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataSearchProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public SearchProductOrderWorkflowResult SearchProductOrderWorkflow(SearchProductOrderWorkflowParameter parameter)
        {
            try
            {
                var productOrderWorkflowList = new List<ProductOrderWorkflowEntityModel>();

                productOrderWorkflowList = context.ProductOrderWorkflow
                    .Where(x =>
                        (parameter.Code == null || x.Code.ToLower().Trim().Contains(parameter.Code.ToLower().Trim())) &&
                        (parameter.Name == null || x.Name.ToLower().Trim().Contains(parameter.Name.ToLower().Trim())) &&
                        (parameter.Active == null || x.Active == parameter.Active) &&
                        (parameter.Description == null || x.Description.ToLower().Trim()
                             .Contains(parameter.Description.ToLower().Trim())) &&
                        x.ParentId == null)
                    .Select(y =>
                        new ProductOrderWorkflowEntityModel
                        {
                            ProductOrderWorkflowId = y.ProductOrderWorkflowId,
                            Code = y.Code,
                            Name = y.Name,
                            IsDefault = y.IsDefault,
                            Active = y.Active,
                            Description = y.Description,
                            CreatedDate = y.CreatedDate
                        }).OrderByDescending(z => z.CreatedDate).ToList();

                var isDefault = productOrderWorkflowList.FirstOrDefault(x => x.IsDefault == true);

                if (isDefault != null)
                {
                    productOrderWorkflowList.Remove(isDefault);
                    productOrderWorkflowList.Insert(0, isDefault);
                }

                return new SearchProductOrderWorkflowResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductOrderWorkflowList = productOrderWorkflowList
                };
            }
            catch (Exception e)
            {
                return new SearchProductOrderWorkflowResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductOrderWorkflowDefaultResult UpdateProductOrderWorkflowDefault(
            UpdateProductOrderWorkflowDefaultParameter parameter)
        {
            try
            {
                var listItem = context.ProductOrderWorkflow.ToList();
                listItem.ForEach(item =>
                {
                    if (item.ProductOrderWorkflowId == parameter.ProductOrderWorkflowId)
                    {
                        item.IsDefault = parameter.IsDefault;
                        item.UpdatedById = parameter.UserId;
                        item.UpdatedDate = DateTime.Now;
                    }
                    else
                    {
                        item.IsDefault = false;
                    }
                });

                context.ProductOrderWorkflow.UpdateRange(listItem);
                context.SaveChanges();

                return new UpdateProductOrderWorkflowDefaultResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateProductOrderWorkflowDefaultResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductOrderWorkflowActiveResult UpdateProductOrderWorkflowActive(
            UpdateProductOrderWorkflowActiveParameter parameter)
        {
            try
            {
                var item = context.ProductOrderWorkflow.FirstOrDefault(x =>
                    x.ProductOrderWorkflowId == parameter.ProductOrderWorkflowId);

                item.Active = parameter.Active;

                context.ProductOrderWorkflow.Update(item);
                context.SaveChanges();

                return new UpdateProductOrderWorkflowActiveResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateProductOrderWorkflowActiveResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataCreateTechniqueRequestResult GetMasterDataCreateTechniqueRequest(
            GetMasterDataCreateTechniqueRequestParameter parameter)
        {
            try
            {
                var listOrganization = new List<OrganizationEntityModel>();
                listOrganization = context.Organization.Where(x => x.Active == true).Select(y =>
                    new OrganizationEntityModel
                    {
                        OrganizationId = y.OrganizationId,
                        OrganizationName = y.OrganizationName
                    }).OrderByDescending(z => z.ParentId).ToList();

                var listParent = new List<TechniqueRequestEntityModel>();
                listParent = context.TechniqueRequest.Where(x => x.Active == true && x.ParentId == null).Select(y =>
                    new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName
                    }).ToList();

                return new GetMasterDataCreateTechniqueRequestResult()
                {
                    Status = true,
                    Message = "Success",
                    ListOrganization = listOrganization,
                    ListParent = listParent
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateTechniqueRequestResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateTechniqueRequestResult CreateTechniqueRequest(CreateTechniqueRequestParameter parameter)
        {
            try
            {
                var techniqueRequest = new TechniqueRequest();

                techniqueRequest.TechniqueRequestId = Guid.NewGuid();
                techniqueRequest.ParentId = parameter.TechniqueRequest.ParentId;
                techniqueRequest.OrganizationId = parameter.TechniqueRequest.OrganizationId;

                if (techniqueRequest.ParentId != null)
                {
                    //Nếu là tiến trình đặc biệt thì Phòng ban của nó là phòng ban của Cha nó
                    var parent_technique_request =
                        context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == techniqueRequest.ParentId);
                    techniqueRequest.OrganizationId = parent_technique_request.OrganizationId;
                }

                techniqueRequest.TechniqueName = parameter.TechniqueRequest.TechniqueName;
                techniqueRequest.Description = parameter.TechniqueRequest.Description;
                techniqueRequest.Active = true;
                techniqueRequest.CreatedDate = DateTime.Now;
                techniqueRequest.CreatedById = parameter.UserId;

                context.TechniqueRequest.Add(techniqueRequest);
                context.SaveChanges();

                var listParent = new List<TechniqueRequestEntityModel>();
                listParent = context.TechniqueRequest.Where(x => x.Active == true && x.ParentId == null).Select(y =>
                    new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName
                    }).ToList();

                return new CreateTechniqueRequestResult()
                {
                    Status = true,
                    Message = "Success",
                    TechniqueRequestId = techniqueRequest.TechniqueRequestId,
                    ListParent = listParent
                };
            }
            catch (Exception e)
            {
                return new CreateTechniqueRequestResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataSearchTechniqueRequestResult GetMasterDataSearchTechniqueRequest(
            GetMasterDataSearchTechniqueRequestParameter parameter)
        {
            try
            {
                var listOrganization = new List<OrganizationEntityModel>();
                listOrganization = context.Organization.Where(x => x.Active == true).Select(y =>
                    new OrganizationEntityModel
                    {
                        OrganizationId = y.OrganizationId,
                        OrganizationName = y.OrganizationName
                    }).OrderByDescending(z => z.ParentId).ToList();

                var listParent = new List<TechniqueRequestEntityModel>();
                listParent = context.TechniqueRequest.Where(x => x.Active == true && x.ParentId == null).Select(y =>
                    new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName
                    }).ToList();

                return new GetMasterDataSearchTechniqueRequestResult()
                {
                    Status = true,
                    Message = "Success",
                    ListOrganization = listOrganization,
                    ListParent = listParent
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataSearchTechniqueRequestResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public SearchTechniqueRequestResult SearchTechniqueRequest(SearchTechniqueRequestParameter parameter)
        {
            try
            {
                var listOrganization = context.Organization.ToList();
                var listRequestList = context.TechniqueRequest.ToList();

                var techniqueRequestList = new List<TechniqueRequestEntityModel>();
                techniqueRequestList = listRequestList.Where(x =>
                    x.Active == true &&
                    (parameter.TechniqueName == null || x.TechniqueName.ToLower().Trim()
                         .Contains(parameter.TechniqueName.ToLower().Trim())) &&
                    (parameter.OrganizationId == null || x.OrganizationId == parameter.OrganizationId) &&
                    (parameter.Description == null ||
                     (x.Description ?? "").ToLower().Trim().Contains(parameter.Description.ToLower().Trim()))).Select(
                    y =>
                        new TechniqueRequestEntityModel
                        {
                            TechniqueRequestId = y.TechniqueRequestId,
                            TechniqueName = y.TechniqueName,
                            OrganizationId = y.OrganizationId,
                            ParentId = y.ParentId,
                            Description = y.Description,
                            ParentName = "",
                            OrganizationName = ""
                        }).ToList();

                techniqueRequestList.ForEach(item =>
                {
                    var organization = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                    item.OrganizationName = organization == null
                        ? "" : organization.OrganizationName;

                    var parent = listRequestList.FirstOrDefault(x => x.TechniqueRequestId == item.ParentId);
                    item.ParentName =
                        parent == null ? null : parent.TechniqueName;
                });

                #region Sắp xếp lại dữ liệu

                var _listResult = new List<TechniqueRequestEntityModel>();

                techniqueRequestList.ForEach(item =>
                {
                    if (item.ParentId == null)
                    {
                        _listResult.Add(item);
                        _listResult.AddRange(techniqueRequestList.Where(x => x.ParentId == item.TechniqueRequestId));
                    }
                });

                techniqueRequestList.ForEach(item =>
                {
                    var _temp = _listResult.FirstOrDefault(x => x.TechniqueRequestId == item.TechniqueRequestId);

                    if (_temp == null)
                    {
                        _listResult.Add(item);
                    }
                });

                #endregion

                return new SearchTechniqueRequestResult()
                {
                    Status = true,
                    Message = "Succcess",
                    TechniqueRequestList = _listResult
                };
            }
            catch (Exception e)
            {
                return new SearchTechniqueRequestResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataCreateProductionOrderResult GetMasterDataCreateProductionOrder(
            GetMasterDataCreateProductionOrderParameter parameter)
        {
            try
            {
                #region Lấy list order status

                var listOrderStatus = new List<OrderStatus>();
                listOrderStatus = context.OrderStatus.Where(x => x.Active).OrderBy(z => z.Description).ToList();

                #endregion

                #region Lấy thông tin order

                var customerOrder = new OrderGetByIdEntityModel();
                var order = context.CustomerOrder.FirstOrDefault(c => c.OrderId == parameter.OrderId);
                var customerOrderDetailList = new List<OrderDetailEntityModel>();
                if (order != null)
                {
                    customerOrder.ApprovedDate = order.ApprovedDate;
                    customerOrder.CustomerCode = order.CustomerCode;
                    customerOrder.CustomerName = order.CustomerName;
                    customerOrder.CustomerNumber = order.CustomerNumber;
                    customerOrder.Description = order.Description;
                    customerOrder.ManufactureDate = order.ManufactureDate;
                    customerOrder.NoteTechnique = order.NoteTechnique;
                    customerOrder.OrderDate = order.OrderDate;
                    customerOrder.PlaceOfDelivery = order.PlaceOfDelivery;
                    customerOrder.ReceivedDate = order.ReceivedDate;
                    customerOrder.OrderId = order.OrderId;
                    var status = listOrderStatus.FirstOrDefault(c => c.OrderStatusId == order.StatusId);
                    if (status != null)
                    {
                        customerOrder.StatusName = status.Description;
                    }

                    customerOrder.OrderCode = order.OrderCode;

                    #region Lấy thông tin order detail

                    customerOrderDetailList = context.CustomerOrderDetail.Where(c => c.OrderId == customerOrder.OrderId).Select(item => new OrderDetailEntityModel()
                    {
                        OrderDetailId = item.OrderDetailId,
                        ProductCode = item.ProductCode,
                        ProductColor = item.ProductColor,
                        ProductColorCode = item.ProductColorCode,
                        ProductLength = item.ProductLength,
                        ProductName = item.ProductName,
                        ProductThickness = item.ProductThickness,
                        ProductWidth = item.ProductWidth,
                        Quantity = item.Quantity,
                        TechniqueDescription = item.TechniqueDescription,
                        TotalArea = item.TotalArea,
                        UnitName = item.UnitName,
                        Borehole = item.Borehole,
                        ProductGroupCode = item.ProductGroupCode,
                        Hole = item.Hole,
                        Grind = item.Grind,
                        Stt = item.Stt
                    }).OrderBy(x => x.Stt).ToList();

                    #endregion
                }

                #endregion

                #region Lấy danh sách mapping tiến trình với quy trình

                var listMappingOrder = new List<MappingOrderTechniqueEntityModel>();

                var listProductOrderWorkflow = context.ProductOrderWorkflow.Where(x => x.Active == true && x.ParentId == null).ToList();
                var listProductOrderWorkflowId = listProductOrderWorkflow.Select(x => x.ProductOrderWorkflowId).ToList();
                var listMappingOrderTechnique = context.OrderTechniqueMapping.Where(x => listProductOrderWorkflowId.Contains(x.ProductOrderWorkflowId)).ToList();
                var listTechniqueRequest = context.TechniqueRequest.Where(x => x.Active == true).ToList();
                // Lấy danh sách quy trình

                listProductOrderWorkflow.ForEach(item =>
                {
                    listMappingOrder.Add(new MappingOrderTechniqueEntityModel()
                    {
                        ProductOrderWorkflowId = item.ProductOrderWorkflowId,
                        IsDefault = item.IsDefault,
                        Name = item.Name,
                        ListTechniqueRequest = new List<TechniqueRequestEntityModel>()
                    });
                });

                // Lấy thứ tự của từng tiến trình và id
                listMappingOrder.ForEach(item =>
                {
                    var mappingOrderTechnique = listMappingOrderTechnique.Where(x => x.ProductOrderWorkflowId == item.ProductOrderWorkflowId).ToList();
                    if (mappingOrderTechnique.Count > 0)
                    {
                        mappingOrderTechnique.ForEach(x =>
                        {
                            var techniqueRequest = new TechniqueRequestEntityModel();
                            techniqueRequest.TechniqueOrder = x.TechniqueOrder;
                            techniqueRequest.TechniqueRequestId = x.TechniqueRequestId;
                            techniqueRequest.Rate = x.Rate;
                            var technique = listTechniqueRequest.FirstOrDefault(y => y.TechniqueRequestId == techniqueRequest.TechniqueRequestId);
                            if (technique != null)
                            {
                                techniqueRequest.TechniqueName = technique.TechniqueName;
                                techniqueRequest.ParentId = technique.ParentId;
                                techniqueRequest.Active = technique.Active;
                                techniqueRequest.Description = technique.Description;
                                techniqueRequest.OrganizationId = technique.OrganizationId;
                            }
                            item.ListTechniqueRequest.Add(techniqueRequest);
                        });
                    }
                });

                listMappingOrder.ForEach(item =>
                {
                    item.ListTechniqueRequest = item.ListTechniqueRequest.OrderBy(x => x.TechniqueOrder).ToList();
                });

                #endregion

                #region Lấy danh sách tất cả tiến trình 

                var listTechniqueRequestResult = listTechniqueRequest.Where(x => x.ParentId != null).Select(item =>

                      new TechniqueRequestEntityModel()
                      {
                          ParentId = item.ParentId,
                          TechniqueName = item.TechniqueName,
                          TechniqueRequestId = item.TechniqueRequestId
                      }
                ).ToList();

                #endregion

                return new GetMasterDataCreateProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListOrderDetail = customerOrderDetailList,
                    Order = customerOrder,
                    ListMappingOrder = listMappingOrder,
                    ListTechniqueRequest = listTechniqueRequestResult
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataCreateTotalProductionOrderResult GetMasterDataCreateTotalProductionOrder(
            GetMasterDataCreateTotalProductionOrderParameter parameter)
        {
            try
            {
                var listStatus = new List<CategoryEntityModel>();

                var statusCategoryType =
                    context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TLT" && x.Active == true);
                listStatus = context.Category.Where(x =>
                    x.CategoryTypeId == statusCategoryType.CategoryTypeId && x.Active == true).Select(y =>
                    new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                        IsDefault = y.IsDefauld
                    }).ToList();

                #region Lấy danh sách Lệnh sản xuất

                var statusType_lsx = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusType_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                var listAllStatus_lsx = context.Category
                    .Where(x => x.CategoryTypeId == statusType_lsx.CategoryTypeId).ToList();
                var status_comp_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;
                var status_canc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;
                var status_new_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;
                var status_pend_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                var status_proc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                var status_dela_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "DELA").CategoryId;

                var listAllStatus_item = context.Category
                    .Where(x => x.CategoryTypeId == statusType_item.CategoryTypeId).ToList();

                //Chỉ lấy những item có trạng thái: Mới tạo, Đang sản xuất, Hoãn
                var list_status_item_pass = listAllStatus_item
                    .Where(x => x.CategoryCode != "CANC").Select(y => y.CategoryId).ToList();

                var listIgnoreStatus_lsx = new List<Guid>() { status_comp_lsx_id, status_canc_lsx_id };

                //Lấy những lệnh sản xuất có trạng thái khác Hoàn thành và Hủy, không lấy lệnh bổ sung
                var listProductionOrder = context.ProductionOrder
                    .Where(x => !listIgnoreStatus_lsx.Contains(x.StatusId))
                    .OrderBy(z => z.EndDate).Select(y => new ProductionOrderEntityModel
                    {
                        ProductionOrderId = y.ProductionOrderId,
                        ProductionOrderCode = y.ProductionOrderCode,
                        CustomerName = y.CustomerName,
                        RemainQuantity = 0,
                        RemainTotalArea = 0,
                        EndDate = y.EndDate,
                        StatusId = y.StatusId,
                        StatusName = "",
                        NoteTechnique = y.NoteTechnique,
                        ParentId = y.ParentId,
                        Especially = y.Especially,
                        IsIgnore = false
                    }).ToList();

                #region Tính số tấm chưa làm của mỗi lệnh sản xuất

                var listAllItem = context.ProductionOrderMapping.ToList();
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();
                var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                listProductionOrder.ForEach(productOrder =>
                {
                    var status = listAllStatus_lsx.FirstOrDefault(x => x.CategoryId == productOrder.StatusId);
                    productOrder.StatusName = status.CategoryName;

                    var listItemChild = listAllItem.Where(x =>
                            x.ProductionOrderId == productOrder.ProductionOrderId &&
                            list_status_item_pass.Contains(x.StatusId))
                        .ToList();

                    double remain_quantity = 0; //Tổng số tấm thành phẩm cần phải làm
                    double remain_totalArea = 0;    //Tổng số m2 thành phẩm cần phải làm

                    if (listItemChild.Count > 0)
                    {
                        if (productOrder.ParentId != null)
                        {
                            //Nếu là lệnh bổ sung thì số lượng tấm sẽ không tính vào thống kê
                            productOrder.IsIgnore = true;

                            //Tính số tấm và số m2 phải làm của lệnh bổ sung

                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            var checkParent = listItemChild.FirstOrDefault(x => x.IsParent == true);
                            var checkSubParent = listItemChild.FirstOrDefault(x => x.IsSubParent == true);
                            var otherItem = listItemChild.FirstOrDefault();

                            if (checkParent != null)
                            {
                                /* Item cha gốc */

                                /* Chỉ tính số tấm phải làm của Item cha gốc */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkParent.ProductLength.Value / 1000) *
                                    (checkParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion

                            }
                            else if (checkParent == null && checkSubParent != null)
                            {
                                /* Item bán thành phẩm có con */

                                /* Chỉ tính số tấm phải làm của Item bán thành phẩm có con */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkSubParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkSubParent.ProductLength.Value / 1000) *
                                    (checkSubParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                            else
                            {
                                /* - Item bán thành phẩm không có con hoặc
                                 * - Item không có bán thành phẩm
                                 */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = otherItem.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (otherItem.ProductLength.Value / 1000) *
                                    (otherItem.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                        }
                        else
                        {
                            //Nếu là lệnh sản xuất
                            //Phải phân loại Item
                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            //Lấy các Item cha gốc
                            var listItem = listItemChild.Where(x => x.IsParent == true).ToList();
                            var listItemParentId = listItem.Select(x => x.ProductionOrderMappingId).ToList();

                            //Lấy ra các Item bán thành phẩm cấp 1 của các Item cha gốc
                            var listSubParentId = new List<Guid>();
                            if (listItem.Count > 0)
                            {
                                var listSubParent = listItemChild
                                    .Where(x => x.ParentPartId != null &&
                                                listItemParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId = listSubParent.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lấy ra các Item bán thành phẩm cấp 2 của các Item cha gốc
                            var listSubParentId_2 = new List<Guid>();
                            if (listSubParentId.Count > 0)
                            {
                                var listSubParent_2 = listItemChild
                                    .Where(x => x.ParentPartId != null &&
                                                listSubParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId_2 = listSubParent_2.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lọc ra các Item cha gốc và các Item con của nó
                            var listPrentIgnoreId = new List<Guid>();
                            listItemParentId.AddRange(listSubParentId);
                            listItemParentId.AddRange(listSubParentId_2);
                            listPrentIgnoreId = listItemParentId;

                            //Lấy ra list Item không có bán thành phẩm
                            var listItem_1 = new List<ProductionOrderMapping>();

                            if (listPrentIgnoreId.Count > 0)
                            {
                                listItem_1 = listItemChild
                                    .Where(x => x.ProductionOrderMappingId != null &&
                                                !listPrentIgnoreId.Contains(x.ProductionOrderMappingId)).ToList();
                            }
                            else
                            {
                                listItem_1 = listItemChild.ToList();
                            }

                            //Gộp các Item cha gốc và các Item không có bán thành phẩm để tính số tấm và số m2
                            listItem.AddRange(listItem_1);

                            #region Tính số tấm và số m2 của các Item cha gốc và Item không có bán thành phẩm

                            listItem.ForEach(item =>
                            {
                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = item.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (item.ProductLength.Value / 1000) *
                                    (item.ProductWidth.Value / 1000);

                                remain_quantity += current_quantity;
                                remain_totalArea += current_totalArea;
                            });

                            #endregion
                        }

                        productOrder.RemainQuantity = Math.Round(remain_quantity, 2);
                        productOrder.RemainTotalArea = Math.Round(remain_totalArea, 2);
                    }
                });

                #endregion

                #region Sắp xếp lại list lệnh sản xuất

                //Lấy các lệnh sản xuất và lệnh tổng có trạng thái Hoãn, Hoàn thành, Hủy
                var listProductionOrder_by_status = listProductionOrder.Where(x =>
                    x.StatusId == status_pend_lsx_id || x.StatusId == status_comp_lsx_id ||
                    x.StatusId == status_canc_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoãn
                var list_lsx_pend = listProductionOrder_by_status.Where(x => x.StatusId == status_pend_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoàn thành
                var list_lsx_comp = listProductionOrder_by_status.Where(x => x.StatusId == status_comp_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hủy
                var list_lsx_canc = listProductionOrder_by_status.Where(x => x.StatusId == status_canc_lsx_id).ToList();

                var list_lsx_step_1 = new List<ProductionOrderEntityModel>();
                //list_lsx_step_1.AddRange(list_lsx_pend);
                list_lsx_step_1.AddRange(list_lsx_comp);
                list_lsx_step_1.AddRange(list_lsx_canc);

                //Lấy lại list tổng
                listProductionOrder = listProductionOrder.Where(x =>
                    x.StatusId != status_pend_lsx_id && x.StatusId != status_comp_lsx_id &&
                    x.StatusId != status_canc_lsx_id).ToList();

                //Các lsx bình thường được ưu tiên -> trong đó sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lsx = listProductionOrder.Where(x => x.Especially == true && x.ParentId == null)
                    .OrderBy(z => z.EndDate)
                    .ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lsx
                var list_ignore_lsx = new List<Guid>();

                var new_list_lsx = new List<ProductionOrderEntityModel>();
                new_list_lsx = OrderListByStatus(list_lsx, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lsx = new_list_lsx.Select(y => y.ProductionOrderId).ToList();

                #endregion

                //Các lsx bổ sung -> sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lbs = listProductionOrder.Where(x => x.ParentId != null).OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lbs
                var list_ignore_lbs = new List<Guid>();

                var new_list_lbs = new List<ProductionOrderEntityModel>();
                new_list_lbs = OrderListByStatus(list_lbs, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lbs = new_list_lbs.Select(y => y.ProductionOrderId).ToList();

                #endregion

                list_ignore_lsx.AddRange(list_ignore_lbs);
                var list_ignore = list_ignore_lsx;

                //Các lệnh sản xuất có ngày trả hàng gần nhất
                listProductionOrder = listProductionOrder
                    .Where(x => list_ignore.Count == 0 || !list_ignore.Contains(x.ProductionOrderId))
                    .OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                var new_list_lsx_step_3 = new List<ProductionOrderEntityModel>();
                new_list_lsx_step_3 =
                    OrderListByStatus(listProductionOrder, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                #endregion

                //Sắp xếp lại danh sách cần trả về
                var new_list_result = new List<ProductionOrderEntityModel>();
                new_list_result.AddRange(new_list_lsx);
                new_list_result.AddRange(new_list_lbs);
                new_list_result.AddRange(new_list_lsx_step_3);
                new_list_result.AddRange(list_lsx_step_1);

                #endregion

                #endregion

                return new GetMasterDataCreateTotalProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListStatus = listStatus,
                    ListProductionOrder = new_list_result
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateTotalProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataProductionOrderDetailResult GetMasterDataProductionOrderDetail(GetMasterDataProductionOrderDetailParameter parameter)
        {
            try
            {
                #region Lấy danh sách trạng thái của lệnh sản xuất

                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var listStatus = context.Category.Where(x => x.CategoryTypeId == statusType.CategoryTypeId).Select(item => new CategoryEntityModel()
                {
                    CategoryId = item.CategoryId,
                    CategoryName = item.CategoryName,
                    CategoryCode = item.CategoryCode
                }).ToList();

                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                var listStatusItem = context.Category.Where(x => x.CategoryTypeId == statusItemType.CategoryTypeId).Select(item => new CategoryEntityModel()
                {
                    CategoryId = item.CategoryId,
                    CategoryName = item.CategoryName,
                    CategoryCode = item.CategoryCode
                }).ToList();

                #endregion

                #region  Lấy thông tin của lệnh sản xuất

                var test = context.ProductionOrder.ToList();
                var commonProductionOrder = context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == parameter.ProductionOrderId);
                var productionOrder = new ProductionOrderEntityModel();
                var listNote = new List<NoteEntityModel>();
                var listProductItem = new List<ProductionOrderMappingEntityModel>();

                // Check có tồn tại lệnh sản xuất không
                if (commonProductionOrder != null)
                {
                    productionOrder.CreatedById = commonProductionOrder.CreatedById;
                    productionOrder.CreatedDate = commonProductionOrder.CreatedDate;
                    productionOrder.Especially = commonProductionOrder.Especially;
                    productionOrder.Note = commonProductionOrder.Note;
                    productionOrder.NoteTechnique = commonProductionOrder.NoteTechnique;
                    productionOrder.OrderId = commonProductionOrder.OrderId;
                    productionOrder.PlaceOfDelivery = commonProductionOrder.PlaceOfDelivery;
                    productionOrder.ProductionOrderCode = commonProductionOrder.ProductionOrderCode;
                    productionOrder.ProductionOrderId = commonProductionOrder.ProductionOrderId;
                    productionOrder.ReceivedDate = commonProductionOrder.ReceivedDate;
                    productionOrder.StartDate = commonProductionOrder.StartDate;
                    productionOrder.StatusId = commonProductionOrder.StatusId;
                    productionOrder.CustomerNumber = commonProductionOrder.CustomerNumber;
                    productionOrder.EndDate = commonProductionOrder.EndDate;
                    productionOrder.CustomerName = commonProductionOrder.CustomerName;
                    productionOrder.ParentId = commonProductionOrder.ParentId;

                    // Check coi nếu là lệnh bổ sung thì lấy thêm thông tin mô tả lỗi và tên tổ gây lỗi
                    if (commonProductionOrder.ParentId != null)
                    {
                        var history = context.ProductionOrderHistory.FirstOrDefault(x =>
                            x.ProductionOrderHistoryId == commonProductionOrder.ProductionOrderHistoryId);
                        if (history != null)
                        {
                            productionOrder.DescriptionError = history.Description;
                            var id = context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == history.TechniqueRequestId).OrganizationId;
                            productionOrder.NameOrganization = context.Organization.FirstOrDefault(x => x.OrganizationId == id).OrganizationName;
                        }
                    }
                    #region Lấy list product item

                    listProductItem = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == parameter.ProductionOrderId).
                    Select(item => new ProductionOrderMappingEntityModel()
                    {
                        ParentId = item.ParentId,
                        ProductColor = item.ProductColor,
                        ProductColorCode = item.ProductColorCode,
                        ProductId = item.ProductId,
                        ProductionOrderId = item.ProductionOrderId,
                        ProductionOrderMappingId = item.ProductionOrderMappingId,
                        ProductLength = item.ProductLength,
                        ProductName = item.ProductName,
                        ProductThickness = item.ProductThickness,
                        ProductWidth = item.ProductWidth,
                        Quantity = item.Quantity,
                        StatusId = item.StatusId,
                        TechniqueDescription = item.TechniqueDescription,
                        TotalArea = item.TotalArea,
                        ProductCode = item.ProductCode,
                        ProductOrderWorkflowId = item.ProductOrderWorkflowId,
                        ProductGroupCode = item.ProductGroupCode,
                        Borehole = item.Borehole,
                        Hole = item.Hole,
                        ParentPartId = item.ParentPartId,
                        Grind = item.Grind,
                        Stt = item.Stt

                    }).OrderBy(z => z.Stt).ToList();

                    listProductItem.ForEach(x =>
                    {
                        var statusItem = listStatusItem.FirstOrDefault(c => c.CategoryId == x.StatusId);
                        x.StatusCode = statusItem.CategoryCode;
                    });

                    #endregion

                    #region Lấy danh sách tiến trình gắn với product item 

                    var listProductItemId = listProductItem.Select(x => x.ProductionOrderMappingId).ToList();
                    var listTechniqueRequest = context.TechniqueRequestMapping.Where(x => listProductItemId.Contains(x.ProductionOrderMappingId)).ToList();
                    listProductItem.ForEach(item =>
                    {
                        item.ListTechnique = new List<TechniqueRequestEntityModel>();
                        item.ListTechnique = listTechniqueRequest.Where(x => x.ParentId == null && x.ProductionOrderMappingId == item.ProductionOrderMappingId).Select(y => new TechniqueRequestEntityModel()
                        {
                            CreatedById = y.CreatedById,
                            ParentId = y.ParentId,
                            Rate = y.Rate,
                            TechniqueName = y.TechniqueName,
                            TechniqueOrder = y.TechniqueOrder,
                            TechniqueRequestId = y.TechniqueRequestId,
                            TechniqueValue = y.TechniqueValue
                        }).ToList();
                    });

                    #endregion

                    #region Lấy danh sách note 

                    listNote = context.Note
                        .Where(x => x.ObjectId == parameter.ProductionOrderId && x.ObjectType == "PROOR" && x.Active == true).Select(
                            y => new NoteEntityModel
                            {
                                NoteId = y.NoteId,
                                Description = y.Description,
                                Type = y.Type,
                                ObjectId = y.ObjectId,
                                ObjectType = y.ObjectType,
                                NoteTitle = y.NoteTitle,
                                Active = y.Active,
                                CreatedById = y.CreatedById,
                                CreatedDate = y.CreatedDate,
                                UpdatedById = y.UpdatedById,
                                UpdatedDate = y.UpdatedDate,
                                ResponsibleName = "",
                                ResponsibleAvatar = "",
                                NoteDocList = new List<NoteDocumentEntityModel>()
                            }).ToList();

                    if (listNote.Count > 0)
                    {
                        var listNoteId = listNote.Select(x => x.NoteId).ToList();
                        var listUser = context.User.ToList();
                        var _listAllEmployee = context.Employee.ToList();
                        var listNoteDocument = context.NoteDocument.Where(x => listNoteId.Contains(x.NoteId)).Select(
                            y => new NoteDocumentEntityModel
                            {
                                DocumentName = y.DocumentName,
                                DocumentSize = y.DocumentSize,
                                DocumentUrl = y.DocumentUrl,
                                CreatedById = y.CreatedById,
                                CreatedDate = y.CreatedDate,
                                UpdatedById = y.UpdatedById,
                                UpdatedDate = y.UpdatedDate,
                                NoteDocumentId = y.NoteDocumentId,
                                NoteId = y.NoteId
                            }).ToList();

                        listNote.ForEach(item =>
                        {
                            var _user = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                            var _employee = _listAllEmployee.FirstOrDefault(x => x.EmployeeId == _user.EmployeeId);
                            item.ResponsibleName = _employee.EmployeeName;
                            item.NoteDocList = listNoteDocument.Where(x => x.NoteId == item.NoteId)
                                .OrderByDescending(z => z.UpdatedDate).ToList();
                        });

                        //Sắp xếp lại listNote
                        listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();
                    }
                    #endregion
                }

                #endregion

                #region Lấy danh sách mapping tiến trình với quy trình

                var listMappingOrder = new List<MappingOrderTechniqueEntityModel>();

                var listProductOrderWorkflow = context.ProductOrderWorkflow.Where(x => x.Active == true).ToList();
                var listProductOrderWorkflowId = context.ProductOrderWorkflow.Select(x => x.ProductOrderWorkflowId).ToList();
                var listMappingOrderTechnique = context.OrderTechniqueMapping.Where(x => listProductOrderWorkflowId.Contains(x.ProductOrderWorkflowId)).ToList();
                var listTechnique = context.TechniqueRequest.Where(x => x.Active == true).ToList();
                // Lấy danh sách quy trình

                listProductOrderWorkflow.ForEach(item =>
                {
                    listMappingOrder.Add(new MappingOrderTechniqueEntityModel()
                    {
                        ProductOrderWorkflowId = item.ProductOrderWorkflowId,
                        IsDefault = item.IsDefault,
                        Name = item.Name,
                        ParentId = item.ParentId,
                        ListTechniqueRequest = new List<TechniqueRequestEntityModel>()
                    });
                });

                // Lấy thứ tự của từng tiến trình và id
                listMappingOrder.ForEach(item =>
                {
                    var mappingOrderTechnique = listMappingOrderTechnique.Where(x => x.ProductOrderWorkflowId == item.ProductOrderWorkflowId).ToList();
                    if (mappingOrderTechnique.Count > 0)
                    {
                        mappingOrderTechnique.ForEach(x =>
                        {
                            var techniqueRequest = new TechniqueRequestEntityModel();
                            techniqueRequest.TechniqueOrder = x.TechniqueOrder;
                            techniqueRequest.TechniqueRequestId = x.TechniqueRequestId;
                            techniqueRequest.Rate = x.Rate;
                            var technique = listTechnique.FirstOrDefault(y => y.TechniqueRequestId == techniqueRequest.TechniqueRequestId);
                            if (technique != null)
                            {
                                techniqueRequest.TechniqueName = technique.TechniqueName;
                                techniqueRequest.ParentId = technique.ParentId;
                                techniqueRequest.Active = technique.Active;
                                techniqueRequest.Description = technique.Description;
                                techniqueRequest.OrganizationId = technique.OrganizationId;
                            }
                            item.ListTechniqueRequest.Add(techniqueRequest);
                        });
                    }
                });

                listMappingOrder.ForEach(item =>
                {
                    item.ListTechniqueRequest = item.ListTechniqueRequest.OrderBy(x => x.TechniqueOrder).ToList();
                });

                #endregion

                #region Lấy danh sách tất cả các tiến trình đặc biệt

                var listTechniqueRequestSpecial = context.TechniqueRequest.Where(x => x.ParentId != null).Select(item =>

                      new TechniqueRequestEntityModel()
                      {
                          ParentId = item.ParentId,
                          TechniqueName = item.TechniqueName,
                          TechniqueRequestId = item.TechniqueRequestId
                      }
                ).ToList();

                #endregion

                return new GetMasterDataProductionOrderDetailResult()
                {
                    Status = true,
                    Message = "Success",
                    ListNote = listNote,
                    ListProductItem = listProductItem,
                    ProductionOrder = productionOrder,
                    ListStatus = listStatus,
                    ListStatusItem = listStatusItem,
                    ListMappingOrder = listMappingOrder,
                    ListTechniqueRequest = listTechniqueRequestSpecial
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataProductionOrderDetailResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetAllProductionOrderResult GetAllProductionOrder(GetAllProductionOrderParameter parameter)
        {
            try
            {
                #region Lấy danh sách lệnh sản xuât

                var categoryType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var listStatus = context.Category.Where(x => x.CategoryTypeId == categoryType.CategoryTypeId);
                var status_new_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;
                var status_pend_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                var status_proc_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                var status_dela_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "DELA").CategoryId;
                var status_comp_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;
                var status_canc_lsx_id = listStatus.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;
                var commonProductionOrder = context.ProductionOrder.ToList();
                var listAllMinusItemMapping = context.MinusItemMapping.ToList();

                var listProductionOrder = new List<ProductionOrderEntityModel>();
                if (parameter.Type == true)
                {
                    var listProductionOrderHistoryId = new List<Guid>();
                    if (parameter.ListOrgan.Count > 0)
                    {
                        var listTechniqueId = context.TechniqueRequest
                            .Where(x => x.OrganizationId != null &&
                                        parameter.ListOrgan.Contains((Guid) x.OrganizationId))
                            .Select(z => z.TechniqueRequestId).ToList();
                        listProductionOrderHistoryId = context.ProductionOrderHistory
                            .Where(x => listTechniqueId.Contains(x.TechniqueRequestId))
                            .Select(z => z.ProductionOrderHistoryId).ToList();
                    }

                    listProductionOrder = commonProductionOrder.Where(x =>
                        (x.ParentId != null) &&
                        (parameter.ListOrgan.Count == 0 ||
                         (x.ProductionOrderHistoryId != null &&
                          listProductionOrderHistoryId.Contains((Guid) x.ProductionOrderHistoryId))) &&
                        (parameter.CustomerName == "" || x.CustomerName.Contains(parameter.CustomerName)) &&
                        (parameter.ProductionOrderCode == "" ||
                         x.ProductionOrderCode.Contains(parameter.ProductionOrderCode)) &&
                        (parameter.TechniqueDescription == "" ||
                         x.NoteTechnique.Contains(parameter.TechniqueDescription)) &&
                        (parameter.StartDate == null || parameter.StartDate.Value.Date == x.StartDate.Value.Date) &&
                        (parameter.EndDate == null || parameter.EndDate.Value.Date == x.EndDate.Value.Date) &&
                        (parameter.ListStatusId.Count == 0 || parameter.ListStatusId.Contains(x.StatusId))).Select(
                        item =>
                            new ProductionOrderEntityModel()
                            {
                                CustomerName = item.CustomerName,
                                EndDate = item.EndDate,
                                CustomerNumber = item.CustomerNumber,
                                Note = item.Note,
                                NoteTechnique = item.NoteTechnique,
                                PlaceOfDelivery = item.PlaceOfDelivery,
                                ProductionOrderCode = item.ProductionOrderCode,
                                ProductionOrderId = item.ProductionOrderId,
                                ReceivedDate = item.ReceivedDate,
                                StartDate = item.StartDate,
                                StatusId = item.StatusId,
                                CreatedDate = item.CreatedDate,
                                CreatedById = item.CreatedById,
                                Especially = item.Especially,
                                OrderId = item.OrderId,
                                ParentId = item.ParentId,
                                UpdatedById = item.UpdatedById,
                                UpdatedDate = item.UpdatedDate,
                                IsChangeTech = listAllMinusItemMapping.FirstOrDefault(c => c.ProductionOrderId == item.ProductionOrderId && c.IsWork == false) != null ? true : false
                            }
                    ).ToList();
                }
                else
                {
                    listProductionOrder = commonProductionOrder.Where(x =>
                        (parameter.Type == null || x.ParentId == null) &&
                        (parameter.CustomerName == "" || x.CustomerName.Contains(parameter.CustomerName)) &&
                        (parameter.ProductionOrderCode == "" ||
                         x.ProductionOrderCode.Contains(parameter.ProductionOrderCode)) &&
                        (parameter.TechniqueDescription == "" ||
                         x.NoteTechnique.Contains(parameter.TechniqueDescription)) &&
                        (parameter.StartDate == null || parameter.StartDate.Value.Date == x.StartDate.Value.Date) &&
                        (parameter.EndDate == null || parameter.EndDate.Value.Date == x.EndDate.Value.Date) &&
                        (parameter.ListStatusId.Count == 0 || parameter.ListStatusId.Contains(x.StatusId))).Select(
                        item =>
                            new ProductionOrderEntityModel()
                            {
                                CustomerName = item.CustomerName,
                                EndDate = item.EndDate,
                                CustomerNumber = item.CustomerNumber,
                                Note = item.Note,
                                NoteTechnique = item.NoteTechnique,
                                PlaceOfDelivery = item.PlaceOfDelivery,
                                ProductionOrderCode = item.ProductionOrderCode,
                                ProductionOrderId = item.ProductionOrderId,
                                ReceivedDate = item.ReceivedDate,
                                StartDate = item.StartDate,
                                StatusId = item.StatusId,
                                CreatedDate = item.CreatedDate,
                                CreatedById = item.CreatedById,
                                Especially = item.Especially,
                                OrderId = item.OrderId,
                                ParentId = item.ParentId,
                                UpdatedById = item.UpdatedById,
                                UpdatedDate = item.UpdatedDate,
                                IsChangeTech = listAllMinusItemMapping.FirstOrDefault(c => c.ProductionOrderId == item.ProductionOrderId && c.IsWork == false) != null ? true : false
                            }
                    ).ToList();
                }

                // Lấy danh sach id lênh sản xuất ở đã thêm vào lệnh tổng hoặc chưa được thêm 
                var totalProductionOrderIdList = context.TotalProductionOrder.Where(x =>
                        parameter.TotalProductionOrderCode == "" || x.Code.Contains(parameter.TotalProductionOrderCode))
                    .Select(y => y.TotalProductionOrderId).ToList();

                if (parameter.TotalProductionOrderCode != "")
                {
                    if (totalProductionOrderIdList.Count > 0)
                    {
                        // Lấy danh sách lệnh tổng model( mã lệnh tông, id lệnh tổng id lệnh sản xuất)
                        var listTotaProductionOrderlModel = context.TotalProductionOrderMapping.Where(x =>
                                totalProductionOrderIdList.Contains(x.TotalProductionOrderId))
                            .Select(y => new TotaProductionOrderlModel()
                            {
                                ProductionOrderId = y.ProductionOrderId,
                                TotalProductionOrderId = y.TotalProductionOrderId,
                                TotalProductionOrderCode = null
                            }).ToList();

                        #region Lấy mã lệnh tổng

                        if (listTotaProductionOrderlModel.Count > 0)
                        {
                            var commonTotalProductionOrder = context.TotalProductionOrder.ToList();
                            listTotaProductionOrderlModel.ForEach(item =>
                            {
                                var total = commonTotalProductionOrder.FirstOrDefault(x =>
                                    x.TotalProductionOrderId == item.TotalProductionOrderId);
                                if (total != null)
                                {
                                    item.TotalProductionOrderCode = total.Code;
                                }
                            });

                            listProductionOrder.ForEach(item =>
                            {
                                item.TotalProductionOrderCode = new List<string>();

                                var total = listTotaProductionOrderlModel
                                    .Where(x => x.ProductionOrderId == item.ProductionOrderId)
                                    .Select(z => z.TotalProductionOrderCode).ToList();

                                if (total.Count > 0)
                                {
                                    item.TotalProductionOrderCode.AddRange(total);
                                }
                            });

                            if (parameter.TotalProductionOrderCode != "")
                            {
                                listProductionOrder = listProductionOrder
                                    .Where(x => x.TotalProductionOrderCode.Count > 0)
                                    .ToList();
                            }
                        }

                        #endregion
                    }
                    else
                    {
                        return new GetAllProductionOrderResult()
                        {
                            Status = true,
                            Message = "Success",
                            ListProductionOrder = new List<ProductionOrderEntityModel>()
                        };
                    }
                }
                else
                {
                    if (totalProductionOrderIdList.Count > 0)
                    {
                        // Lấy danh sách lệnh tổng model( mã lệnh tông, id lệnh tổng id lệnh sản xuất)
                        var listTotaProductionOrderlModel = context.TotalProductionOrderMapping.Where(x =>
                                totalProductionOrderIdList.Contains(x.TotalProductionOrderId))
                            .Select(y => new TotaProductionOrderlModel()
                            {
                                ProductionOrderId = y.ProductionOrderId,
                                TotalProductionOrderId = y.TotalProductionOrderId,
                                TotalProductionOrderCode = null
                            }).ToList();

                        #region Lấy mã lệnh tổng

                        if (listTotaProductionOrderlModel.Count > 0)
                        {
                            var commonTotalProductionOrder = context.TotalProductionOrder.ToList();
                            listTotaProductionOrderlModel.ForEach(item =>
                            {
                                var total = commonTotalProductionOrder.FirstOrDefault(x =>
                                    x.TotalProductionOrderId == item.TotalProductionOrderId);
                                if (total != null)
                                {
                                    item.TotalProductionOrderCode = total.Code;
                                }
                            });

                            listProductionOrder.ForEach(item =>
                            {
                                item.TotalProductionOrderCode = new List<string>();

                                var total = listTotaProductionOrderlModel
                                    .Where(x => x.ProductionOrderId == item.ProductionOrderId)
                                    .Select(z => z.TotalProductionOrderCode).ToList();

                                if (total.Count > 0)
                                {
                                    item.TotalProductionOrderCode.AddRange(total);
                                }
                            });
                        }

                        #endregion
                    }
                }

                #region Lấy tên status

                listProductionOrder.ForEach(item =>
                {
                    var status = listStatus.FirstOrDefault(x => x.CategoryId == item.StatusId);
                    if (status != null)
                    {
                        item.StatusName = status.CategoryName;
                    }
                });

                #endregion

                var listProductionOrderResult = new List<ProductionOrderEntityModel>();
                var commonHistory = context.ProductionOrderHistory
                    .Where(x => x.IsError == true && x.CalculatorType != true && x.IsAdd != true).ToList();
                // Get All
                if (parameter.ProductionOrderCode == "")
                {
                    #region Giang comment

                    //// Sắp xếp danh sách lệnh theo ngày dự kiến trả
                    //listProductionOrder = listProductionOrder.OrderByDescending(x => x.ReceivedDate).ToList();

                    //// Lấy danh sách lệnh sx ưu tiên sắp xếp theo 
                    //var listProductionOrder1 = listProductionOrder.Where(x => x.Especially == true).ToList();
                    //foreach (var item in listProductionOrder1)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái chậm tiến độ
                    //var status2 = listStatus.FirstOrDefault(x => x.CategoryCode == "DELA");
                    //var listProductionOrder3 = listProductionOrder.Where(x => x.StatusId == status2.CategoryId).ToList();
                    //foreach (var item in listProductionOrder3)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái hoãn
                    //var status3 = listStatus.FirstOrDefault(x => x.CategoryCode == "PEND");
                    //var listProductionOrder4 = listProductionOrder.Where(x => x.StatusId == status3.CategoryId).ToList();
                    //foreach (var item in listProductionOrder4)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái tạo mới
                    //var status4 = listStatus.FirstOrDefault(x => x.CategoryCode == "NEW");
                    //var listProductionOrder5 = listProductionOrder.Where(x => x.StatusId == status4.CategoryId).ToList();
                    //foreach (var item in listProductionOrder5)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái đang sản xuất
                    //var status1 = listStatus.FirstOrDefault(x => x.CategoryCode == "PROC");
                    //var listProductionOrder2 = listProductionOrder.Where(x => x.StatusId == status1.CategoryId).ToList();
                    //foreach (var item in listProductionOrder2)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái hoàn thành
                    //var status5 = listStatus.FirstOrDefault(x => x.CategoryCode == "COMP");
                    //var listProductionOrder6 = listProductionOrder.Where(x => x.StatusId == status5.CategoryId).ToList();
                    //foreach (var item in listProductionOrder6)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //// Lấy danh sách lệnh sx có trạng thái hủy
                    //var status6 = listStatus.FirstOrDefault(x => x.CategoryCode == "CANC");
                    //var listProductionOrder7 = listProductionOrder.Where(x => x.StatusId == status6.CategoryId).ToList();
                    //foreach (var item in listProductionOrder7)
                    //{
                    //    listProductionOrderResult.Add(item);
                    //}

                    //listProductionOrderResult = listProductionOrderResult.Distinct().ToList();

                    #endregion

                    #region Sắp xếp danh sách lệnh sản xuất

                    //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hoãn
                    var list_pend = listProductionOrder.Where(x => x.StatusId == status_pend_lsx_id).ToList();

                    //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hoàn thành
                    var list_comp = listProductionOrder.Where(x => x.StatusId == status_comp_lsx_id).ToList();

                    //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hủy
                    var list_canc = listProductionOrder.Where(x => x.StatusId == status_canc_lsx_id).ToList();

                    listProductionOrder = listProductionOrder.Where(x =>
                        x.StatusId != status_pend_lsx_id && x.StatusId != status_comp_lsx_id &&
                        x.StatusId != status_canc_lsx_id).ToList();

                    //Danh sách lệnh sản xuất ưu tiên -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                    var list_lsx = listProductionOrder.Where(x => x.Especially == true && x.ParentId == null)
                        .OrderBy(z => z.EndDate).ToList();

                    //Danh sách lệnh bổ sung -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                    var list_lbs = listProductionOrder.Where(x => x.ParentId != null)
                        .OrderBy(z => z.EndDate).ToList();

                    //Danh sách lệnh sản xuất không tích ưu tiên -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                    var list_lsx_bt = listProductionOrder.Where(x => x.Especially != true && x.ParentId == null)
                        .OrderBy(z => z.EndDate).ToList();

                    //Gộp các danh sách lại
                    listProductionOrderResult.AddRange(list_lsx);
                    listProductionOrderResult.AddRange(list_lbs);
                    listProductionOrderResult.AddRange(list_lsx_bt);
                    listProductionOrderResult.AddRange(list_pend);
                    listProductionOrderResult.AddRange(list_comp);
                    listProductionOrderResult.AddRange(list_canc);

                    #endregion

                    // Gán mã trạng thái lệnh sản xuất và check coi lệnh sản xuất có lỗi item k
                    // Lấy số lệnh bổ sung cho lệnh sản xuất
                    listProductionOrderResult.ForEach(item =>
                    {
                        var status = listStatus.FirstOrDefault(x => x.CategoryId == item.StatusId);
                        item.StatusCode = status.CategoryCode;
                        var check = commonHistory.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                        if (check != null)
                        {
                            item.IsError = true;
                        }
                        item.NumberProductionOrder = GetProductionOrderAdditional(commonProductionOrder, item);
                    });

                    if (parameter.IsError == true)
                    {
                        listProductionOrderResult =
                            listProductionOrderResult.Where(x => x.IsError == parameter.IsError).ToList();
                    }

                    return new GetAllProductionOrderResult()
                    {
                        Status = true,
                        Message = "Success",
                        ListProductionOrder = listProductionOrderResult
                    };
                }

                // Search
                listProductionOrder = listProductionOrder.Where(x => x.TotalProductionOrderCode != null).ToList();

                #region Giang comment

                //// Sắp xếp danh sách lệnh theo ngày dự kiến trả
                //listProductionOrder = listProductionOrder.OrderByDescending(x => x.ReceivedDate).ToList();

                //// Lấy danh sách lệnh sx ưu tiên sắp xếp theo 
                //var listProductionOrderByEspecially = listProductionOrder.Where(x => x.Especially == true).ToList();
                //foreach (var item in listProductionOrderByEspecially)
                //{
                //    listProductionOrderResult.Add(item);
                //}


                //// Lấy danh sách lệnh sx có trạng thái chậm tiến độ
                //var statusDELA = listStatus.FirstOrDefault(x => x.CategoryCode == "DELA");
                //var listProductionOrderDELA = listProductionOrder.Where(x => x.StatusId == statusDELA.CategoryId).ToList();
                //foreach (var item in listProductionOrderDELA)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                //// Lấy danh sách lệnh sx có trạng thái hoãn
                //var statusPEND = listStatus.FirstOrDefault(x => x.CategoryCode == "PEND");
                //var listProductionOrderPEND = listProductionOrder.Where(x => x.StatusId == statusPEND.CategoryId).ToList();
                //foreach (var item in listProductionOrderPEND)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                //// Lấy danh sách lệnh sx có trạng thái tạo mới
                //var statusNEW = listStatus.FirstOrDefault(x => x.CategoryCode == "NEW");
                //var listProductionOrderNEW = listProductionOrder.Where(x => x.StatusId == statusNEW.CategoryId).ToList();
                //foreach (var item in listProductionOrderNEW)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                //// Lấy danh sách lệnh sx có trạng thái đang sản xuất
                //var statusPROC = listStatus.FirstOrDefault(x => x.CategoryCode == "PROC");
                //var listProductionOrderPROC = listProductionOrder.Where(x => x.StatusId == statusPROC.CategoryId).ToList();
                //foreach (var item in listProductionOrderPROC)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                //// Lấy danh sách lệnh sx có trạng thái hoàn thành
                //var statusCOMP = listStatus.FirstOrDefault(x => x.CategoryCode == "COMP");
                //var listProductionOrderCOMP = listProductionOrder.Where(x => x.StatusId == statusCOMP.CategoryId).ToList();
                //foreach (var item in listProductionOrderCOMP)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                //// Lấy danh sách lệnh sx có trạng thái hủy
                //var statusCANC = listStatus.FirstOrDefault(x => x.CategoryCode == "CANC");
                //var listProductionOrderCANC = listProductionOrder.Where(x => x.StatusId == statusCANC.CategoryId).ToList();
                //foreach (var item in listProductionOrderCANC)
                //{
                //    listProductionOrderResult.Add(item);
                //}

                #endregion

                #region Sắp xếp danh sách lệnh sản xuất

                //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hoãn
                var _list_pend = listProductionOrder.Where(x => x.StatusId == status_pend_lsx_id).ToList();

                //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hoàn thành
                var _list_comp = listProductionOrder.Where(x => x.StatusId == status_comp_lsx_id).ToList();

                //Lấy các lệnh sản xuất và lệnh bổ sung có trạng thái Hủy
                var _list_canc = listProductionOrder.Where(x => x.StatusId == status_canc_lsx_id).ToList();

                listProductionOrder = listProductionOrder.Where(x =>
                    x.StatusId != status_pend_lsx_id && x.StatusId != status_comp_lsx_id &&
                    x.StatusId != status_canc_lsx_id).ToList();

                //Danh sách lệnh sản xuất ưu tiên -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                var _list_lsx = listProductionOrder.Where(x => x.Especially == true && x.ParentId == null)
                    .OrderBy(z => z.EndDate).ToList();

                //Danh sách lệnh bổ sung -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                var _list_lbs = listProductionOrder.Where(x => x.ParentId != null)
                    .OrderBy(z => z.EndDate).ToList();

                //Danh sách lệnh sản xuất không tích ưu tiên -> sắp xếp theo ngày trả hàng nhỏ nhất lên đầu
                var _list_lsx_bt = listProductionOrder.Where(x => x.Especially != true && x.ParentId == null)
                    .OrderBy(z => z.EndDate).ToList();

                //Gộp các danh sách lại
                listProductionOrderResult.AddRange(_list_lsx);
                listProductionOrderResult.AddRange(_list_lbs);
                listProductionOrderResult.AddRange(_list_lsx_bt);
                listProductionOrderResult.AddRange(_list_pend);
                listProductionOrderResult.AddRange(_list_comp);
                listProductionOrderResult.AddRange(_list_canc);

                #endregion

                #endregion

                listProductionOrderResult = listProductionOrderResult.Distinct().ToList();
                listProductionOrderResult.ForEach(item =>
                {
                    var status = listStatus.FirstOrDefault(x => x.CategoryId == item.StatusId);
                    item.StatusCode = status.CategoryCode;
                    var check = commonHistory.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                    if (check != null)
                    {
                        item.IsError = true;
                    }
                    item.NumberProductionOrder = GetProductionOrderAdditional(commonProductionOrder, item);
                });

                if (parameter.IsError == true)
                {
                    listProductionOrderResult =
                        listProductionOrderResult.Where(x => x.IsError == parameter.IsError).ToList();
                }

                return new GetAllProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListProductionOrder = listProductionOrderResult
                };


            }
            catch (Exception e)
            {
                return new GetAllProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataListSearchProductionOrderResult GetMasterDataListSearchProductionOrder(GetMasterDataListSearchProductionOrderParameter parameter)
        {
            try
            {
                #region Lấy danh sách status của lệnh sản xuất

                var categoryType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var listStatus = context.Category.Where(x => x.CategoryTypeId == categoryType.CategoryTypeId).ToList();

                #endregion

                #region Lấy danh sách tất cả các tổ gây lỗi

                // Lấy danh sách tất cả các lệnh bổ sung
                var listHistory = context.ProductionOrder.Where(x => x.ParentId != null).ToList();
                var listOrgan = new List<Organization>();
                if (listHistory.Count > 0)
                {
                    var listHistoryId = listHistory.Select(x => x.ProductionOrderHistoryId).ToList();
                    var listTechniqueId = context.ProductionOrderHistory.Where(x => listHistoryId.Contains(x.ProductionOrderHistoryId)).Select(y => y.TechniqueRequestId).ToList();
                    var listTechnique = context.TechniqueRequest.Where(x => listTechniqueId.Contains(x.TechniqueRequestId)).ToList();
                    var listOrganId = listTechnique.Select(x => x.OrganizationId).ToList();
                    listOrgan = context.Organization.Where(x => listOrganId.Contains(x.OrganizationId)).ToList();
                }

                #endregion

                return new GetMasterDataListSearchProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListStatus = listStatus,
                    Organizations = listOrgan
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataListSearchProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetTechniqueRequestByIdResult GetTechniqueRequestById(GetTechniqueRequestByIdParameter parameter)
        {
            try
            {
                var techniqueRequest = new TechniqueRequestEntityModel();
                techniqueRequest =
                    context.TechniqueRequest.Where(x => x.TechniqueRequestId == parameter.TechniqueRequestId).Select(
                        y => new TechniqueRequestEntityModel
                        {
                            TechniqueRequestId = y.TechniqueRequestId,
                            ParentId = y.ParentId,
                            OrganizationId = y.OrganizationId,
                            TechniqueName = y.TechniqueName,
                            Description = y.Description,
                            CreatedDate = y.CreatedDate,
                            CreatedById = y.CreatedById,
                            TechniqueRequestCode = y.TechniqueRequestCode
                        }).FirstOrDefault();

                var listOrganization = new List<OrganizationEntityModel>();
                listOrganization = context.Organization.Where(x => x.Active == true).Select(y =>
                    new OrganizationEntityModel
                    {
                        OrganizationId = y.OrganizationId,
                        OrganizationName = y.OrganizationName
                    }).OrderByDescending(z => z.ParentId).ToList();

                var listParent = new List<TechniqueRequestEntityModel>();
                listParent = context.TechniqueRequest.Where(x => x.Active == true && x.ParentId == null).Select(y =>
                    new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName
                    }).ToList();


                return new GetTechniqueRequestByIdResult()
                {
                    Status = true,
                    Message = "Success",
                    TechniqueRequest = techniqueRequest,
                    ListOrganization = listOrganization,
                    ListParent = listParent
                };
            }
            catch (Exception e)
            {
                return new GetTechniqueRequestByIdResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateTechniqueRequestResult UpdateTechniqueRequest(UpdateTechniqueRequestParameter parameter)
        {
            try
            {
                var techniqueRequest = context.TechniqueRequest.FirstOrDefault(x =>
                    x.TechniqueRequestId == parameter.TechniqueRequest.TechniqueRequestId);

                techniqueRequest.ParentId = parameter.TechniqueRequest.ParentId;

                if (parameter.TechniqueRequest.ParentId == null &&
                    techniqueRequest.OrganizationId != parameter.TechniqueRequest.OrganizationId)
                {
                    //Cập nhật lại phòng ban của các tiến trình con
                    var listChild = context.TechniqueRequest
                        .Where(x => x.ParentId == parameter.TechniqueRequest.TechniqueRequestId).ToList();

                    listChild.ForEach(item => { item.OrganizationId = parameter.TechniqueRequest.OrganizationId; });
                    context.TechniqueRequest.UpdateRange(listChild);
                }

                techniqueRequest.OrganizationId = parameter.TechniqueRequest.OrganizationId;
                techniqueRequest.TechniqueName = parameter.TechniqueRequest.TechniqueName;
                techniqueRequest.TechniqueRequestCode = parameter.TechniqueRequest.TechniqueRequestCode?.Trim();
                techniqueRequest.Description = parameter.TechniqueRequest.Description;
                techniqueRequest.Active = true;
                techniqueRequest.UpdatedById = parameter.UserId;
                techniqueRequest.UpdatedDate = DateTime.Now;

                context.TechniqueRequest.Update(techniqueRequest);
                context.SaveChanges();

                return new UpdateTechniqueRequestResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateTechniqueRequestResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductionOrderEspeciallyResult UpdateProductionOrderEspecially(UpdateProductionOrderEspeciallyParameter parameter)
        {
            try
            {
                var commonProductionOrder = context.ProductionOrder.ToList();
                var commonProductItem = context.ProductionOrderMapping.ToList();
                var productionOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == parameter.ProductionOrderId);


                if (productionOrder == null)
                {
                    return new UpdateProductionOrderEspeciallyResult()
                    {
                        Status = false,
                        Message = "Fail"
                    };
                }
                var commonCategory = context.Category.ToList();
                // Lấy trạng thái của lệnh sản xuất
                var commonCategoryTypeProductionOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                // Lấy danh sách trạng thái của lệnh sản xuất
                var statusCANC = commonCategory.FirstOrDefault(x => x.CategoryCode == "CANC" &&
                                                                    x.CategoryTypeId == commonCategoryTypeProductionOrder.CategoryTypeId).CategoryId;
                var statusCOMP = commonCategory.FirstOrDefault(x => x.CategoryCode == "COMP" &&
                                                                    x.CategoryTypeId == commonCategoryTypeProductionOrder.CategoryTypeId).CategoryId;
                var statusPEND = commonCategory.FirstOrDefault(x => x.CategoryCode == "PEND" &&
                                                                    x.CategoryTypeId == commonCategoryTypeProductionOrder.CategoryTypeId).CategoryId;
                // Lấy trạng thái của item trong lệnh sản xuất
                var commonCategoryTypeItem = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusItemCANC = commonCategory.FirstOrDefault(x => x.CategoryCode == "CANC" &&
                                                                   x.CategoryTypeId == commonCategoryTypeItem.CategoryTypeId).CategoryId;
                var statusItemCOMP = commonCategory.FirstOrDefault(x => x.CategoryCode == "COMP" &&
                                                                    x.CategoryTypeId == commonCategoryTypeItem.CategoryTypeId).CategoryId;
                var statusItemPEND = commonCategory.FirstOrDefault(x => x.CategoryCode == "PEND" &&
                                                                    x.CategoryTypeId == commonCategoryTypeItem.CategoryTypeId).CategoryId;

                if (productionOrder.StatusId == statusCANC || productionOrder.StatusId == statusCOMP || productionOrder.StatusId == statusPEND)
                {

                    return new UpdateProductionOrderEspeciallyResult()
                    {
                        Status = false,
                        Message = "Không thể sửa lệnh sản xuất ở trạng thái này"
                    };
                }
                productionOrder.Especially = parameter.Especially;

                context.ProductionOrder.Update(productionOrder);

                //Lấy tất cả Id lệnh sản xuất và Id lệnh bổ sung
                var listProductionOrderId = new List<Guid>();
                listProductionOrderId.Add(productionOrder.ProductionOrderId);

                // Lấy tất cả các lệnh sản xuất con
                var listProductionOrderChildren = GetListChildrenProductionOrder(commonProductionOrder, productionOrder);
                listProductionOrderChildren.ForEach(item =>
                {
                    listProductionOrderId.Add(item.ProductionOrderId);

                    if (item.StatusId != statusCANC && item.StatusId != statusCOMP && item.StatusId != statusPEND)
                    {
                        item.Especially = parameter.Especially;
                        item.UpdatedById = parameter.UserId;
                        item.UpdatedDate = DateTime.Now;
                        context.ProductionOrder.Update(item);
                    }
                });

                //Lấy tất cả Item thuộc list Id lệnh sản xuất
                var listItem = context.ProductionOrderMapping
                    .Where(x => listProductionOrderId.Contains(x.ProductionOrderId)).ToList();

                listItem.ForEach(item =>
                {
                    if (item.StatusId != statusItemCANC && item.StatusId != statusItemCOMP &&
                        item.StatusId != statusItemPEND)
                    {
                        item.Especially = parameter.Especially;
                        item.UpdatedById = parameter.UserId;
                        item.UpdatedDate = DateTime.Now;

                        context.ProductionOrderMapping.Update(item);
                    }
                });

                //var listProduct = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == parameter.ProductionOrderId).ToList();
                //listProduct.ForEach(item =>
                //{
                //    if (item.StatusId != statusItemCANC && item.StatusId != statusItemCOMP && item.StatusId != statusItemPEND)
                //    {
                //        item.Especially = parameter.Especially;
                //        item.UpdatedById = parameter.UserId;
                //        item.UpdatedDate = DateTime.Now;

                //        // Lấy tất cả các item con
                //        var listChildrenItem = GetListChildrenItem(commonProductItem, item);
                //        listChildrenItem.ForEach(children =>
                //        {
                //            if (children.StatusId != statusItemCANC && children.StatusId != statusItemCOMP && children.StatusId != statusItemPEND)
                //            {
                //                children.Especially = parameter.Especially;
                //                children.UpdatedById = parameter.UserId;
                //                children.UpdatedDate = DateTime.Now;

                //                context.ProductionOrderMapping.Update(children);
                //            }
                //        });

                //        context.ProductionOrderMapping.Update(item);
                //    }
                //});

                context.SaveChanges();

                return new UpdateProductionOrderEspeciallyResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateProductionOrderEspeciallyResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }
        public CreateTotalProductionOrderResult CreateTotalProductionOrder(CreateTotalProductionOrderParameter parameter)
        {
            try
            {
                var totalProductionOrder = new TotalProductionOrder();

                totalProductionOrder.TotalProductionOrderId = Guid.NewGuid();
                totalProductionOrder.Code = "";
                totalProductionOrder.PeriodId = null;
                totalProductionOrder.StartDate = parameter.TotalProductionOrder.StartDate;
                totalProductionOrder.CreatedDate = DateTime.Now;
                totalProductionOrder.CreatedById = parameter.UserId;

                var day = parameter.TotalProductionOrder.StartDate.Value.Day;
                var month = parameter.TotalProductionOrder.StartDate.Value.Month;
                var year = parameter.TotalProductionOrder.StartDate.Value.Year;

                totalProductionOrder.Code =
                    day.ToString("D2") + month.ToString("D2") + year.ToString();

                var dublicate = context.TotalProductionOrder.FirstOrDefault(x =>
                    x.Code == totalProductionOrder.Code);

                if (dublicate != null)
                {
                    return new CreateTotalProductionOrderResult()
                    {
                        Status = false,
                        Message = "Lệnh tổng cho lịch làm việc này đã được tạo"
                    };
                }

                context.TotalProductionOrder.Add(totalProductionOrder);

                #region kiểm tra trạng thái của lệnh sản xuất trước khi lưu

                //Chỉ chấp nhận các trạng thái của lệnh sản xuất: Mới tạo, Đang sản xuất, Chậm tiến độ
                var statusProductionOrderType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusProductionOrder_New = context.Category.FirstOrDefault(x =>
                    x.CategoryCode == "NEW" && x.CategoryTypeId == statusProductionOrderType.CategoryTypeId).CategoryId;
                var statusProductionOrder_Proc = context.Category.FirstOrDefault(x =>
                    x.CategoryCode == "PROC" && x.CategoryTypeId == statusProductionOrderType.CategoryTypeId).CategoryId;
                var statusProductionOrder_Dela = context.Category.FirstOrDefault(x =>
                    x.CategoryCode == "DELA" && x.CategoryTypeId == statusProductionOrderType.CategoryTypeId).CategoryId;

                if (parameter.ListProductionOrderId.Count > 0)
                {
                    var listProductionOrder = context.ProductionOrder
                        .Where(x => parameter.ListProductionOrderId.Contains(x.ProductionOrderId)).ToList();

                    var check = true;
                    listProductionOrder.ForEach(item =>
                    {
                        if (item.StatusId != statusProductionOrder_New && item.StatusId != statusProductionOrder_Proc &&
                            item.StatusId != statusProductionOrder_Dela)
                        {
                            check = false;
                        }
                    });

                    if (check == false)
                    {
                        return new CreateTotalProductionOrderResult()
                        {
                            Status = false,
                            Message = "Có Lệnh sản xuất có trạng thái không hợp lệ"
                        };
                    }
                }

                #endregion

                var listTotalProductionOrderMapping = new List<TotalProductionOrderMapping>();
                parameter.ListProductionOrderId.ForEach(item =>
                {
                    var totalProductionOrderMapping = new TotalProductionOrderMapping();
                    totalProductionOrderMapping.TotalProductionOrderMappingId = Guid.NewGuid();
                    totalProductionOrderMapping.TotalProductionOrderId = totalProductionOrder.TotalProductionOrderId;
                    totalProductionOrderMapping.ProductionOrderId = item;
                    totalProductionOrderMapping.CreatedDate = DateTime.Now;
                    totalProductionOrderMapping.CreatedById = parameter.UserId;

                    listTotalProductionOrderMapping.Add(totalProductionOrderMapping);
                });

                context.TotalProductionOrderMapping.AddRange(listTotalProductionOrderMapping);
                context.SaveChanges();

                return new CreateTotalProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    TotalProductionOrderId = totalProductionOrder.TotalProductionOrderId
                };
            }
            catch (Exception e)
            {
                return new CreateTotalProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetTotalProductionOrderByIdResult GetTotalProductionOrderById(GetTotalProductionOrderByIdParameter parameter)
        {
            try
            {
                var totalProductionOrder = new TotalProductionOrderEntityModel();
                totalProductionOrder = context.TotalProductionOrder.Where(x =>
                    x.TotalProductionOrderId == parameter.TotalProductionOrderId).Select(y =>
                    new TotalProductionOrderEntityModel
                    {
                        TotalProductionOrderId = y.TotalProductionOrderId,
                        Code = y.Code,
                        PeriodId = y.PeriodId,
                        StartDate = y.StartDate,
                        CreatedDate = y.CreatedDate,
                        CreatedById = y.CreatedById
                    }).FirstOrDefault();

                var listProductionOrder = new List<ProductionOrderEntityModel>();

                var listProductionOrderId = new List<Guid>();
                listProductionOrderId = context.TotalProductionOrderMapping
                    .Where(x => x.TotalProductionOrderId == parameter.TotalProductionOrderId)
                    .Select(y => y.ProductionOrderId).ToList();

                if (listProductionOrderId.Count > 0)
                {
                    listProductionOrder = context.ProductionOrder
                        .Where(x => listProductionOrderId.Contains(x.ProductionOrderId))
                        .OrderBy(z => z.EndDate).Select(y => new ProductionOrderEntityModel
                        {
                            ProductionOrderId = y.ProductionOrderId,
                            ProductionOrderCode = y.ProductionOrderCode,
                            CustomerName = y.CustomerName,
                            RemainQuantity = 0,
                            RemainTotalArea = 0,
                            EndDate = y.EndDate,
                            StatusId = y.StatusId,
                            StatusName = "",
                            NoteTechnique = y.NoteTechnique,
                            Especially = y.Especially,
                            ParentId = y.ParentId,
                            ListTechniqueRequest = new List<TechniqueRequestEntityModel>(),
                            IsIgnore = false
                        }).ToList();
                }

                #region Tính số tấm chưa làm của mỗi lệnh sản xuất

                var listAllItem = context.ProductionOrderMapping.ToList();
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();
                var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                var statusType_lsx = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusType_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                var listAllStatus_lsx = context.Category
                    .Where(x => x.CategoryTypeId == statusType_lsx.CategoryTypeId).ToList();
                var status_new_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;
                var status_pend_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                var status_proc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                var status_dela_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "DELA").CategoryId;
                var status_comp_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;
                var status_canc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;

                var listAllStatus_item = context.Category
                    .Where(x => x.CategoryTypeId == statusType_item.CategoryTypeId).ToList();

                //Chỉ lấy những item có trạng thái: Mới tạo, Đang sản xuất, Hoãn, Đã hoàn thành
                var list_status_item_pass = listAllStatus_item
                    .Where(x => x.CategoryCode != "CANC").Select(y => y.CategoryId)
                    .ToList();

                //Lấy tất cả action theo lệnh sản xuất
                var listAllProductionOrderHistoryForLsx = listAllProductionOrderHistory.Where(x =>
                    listProductionOrderId.Contains(x.ProductionOrderId)).ToList();

                listProductionOrder.ForEach(productOrder =>
                {
                    var status = listAllStatus_lsx.FirstOrDefault(x => x.CategoryId == productOrder.StatusId);
                    productOrder.StatusName = status.CategoryName;

                    var listItemChild = listAllItem.Where(x =>
                            x.ProductionOrderId == productOrder.ProductionOrderId &&
                            list_status_item_pass.Contains(x.StatusId))
                        .ToList();

                    double remain_quantity = 0; //Tổng số tấm thành phẩm cần phải làm
                    double remain_totalArea = 0;    //Tổng số m2 thành phẩm cần phải làm

                    if (listItemChild.Count > 0)
                    {
                        if (productOrder.ParentId != null)
                        {
                            //Nếu là lệnh bổ sung thì số lượng tấm sẽ không tính vào thống kê
                            productOrder.IsIgnore = true;

                            //Tính số tấm và số m2 phải làm của lệnh bổ sung

                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            var checkParent = listItemChild.FirstOrDefault(x => x.IsParent == true);
                            var checkSubParent = listItemChild.FirstOrDefault(x => x.IsSubParent == true);
                            var otherItem = listItemChild.FirstOrDefault();

                            if (checkParent != null)
                            {
                                /* Item cha gốc */

                                /* Chỉ tính số tấm phải làm của Item cha gốc */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkParent.ProductLength.Value / 1000) *
                                    (checkParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion

                            }
                            else if (checkParent == null && checkSubParent != null)
                            {
                                /* Item bán thành phẩm có con */

                                /* Chỉ tính số tấm phải làm của Item bán thành phẩm có con */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkSubParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkSubParent.ProductLength.Value / 1000) *
                                    (checkSubParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                            else
                            {
                                /* - Item bán thành phẩm không có con hoặc
                                 * - Item không có bán thành phẩm
                                 */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = otherItem.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (otherItem.ProductLength.Value / 1000) *
                                    (otherItem.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                        }
                        else
                        {
                            //Nếu là lệnh sản xuất
                            //Phải phân loại Item
                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            //Lấy các Item cha gốc
                            var listItem = listItemChild.Where(x => x.IsParent == true).ToList();
                            var listItemParentId = listItem.Select(x => x.ProductionOrderMappingId).ToList();

                            //Lấy ra các Item bán thành phẩm cấp 1 của các Item cha gốc
                            var listSubParentId = new List<Guid>();
                            if (listItem.Count > 0)
                            {
                                var listSubParent = listItemChild
                                    .Where(x => x.ParentPartId != null &&
                                                listItemParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId = listSubParent.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lấy ra các Item bán thành phẩm cấp 2 của các Item cha gốc
                            var listSubParentId_2 = new List<Guid>();
                            if (listSubParentId.Count > 0)
                            {
                                var listSubParent_2 = listItemChild
                                    .Where(x => x.ParentPartId != null &&
                                                listSubParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId_2 = listSubParent_2.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lọc ra các Item cha gốc và các Item con của nó
                            var listPrentIgnoreId = new List<Guid>();
                            listItemParentId.AddRange(listSubParentId);
                            listItemParentId.AddRange(listSubParentId_2);
                            listPrentIgnoreId = listItemParentId;

                            //Lấy ra list Item không có bán thành phẩm
                            var listItem_1 = new List<ProductionOrderMapping>();

                            if (listPrentIgnoreId.Count > 0)
                            {
                                listItem_1 = listItemChild
                                    .Where(x => x.ProductionOrderMappingId != null &&
                                                !listPrentIgnoreId.Contains(x.ProductionOrderMappingId)).ToList();
                            }
                            else
                            {
                                listItem_1 = listItemChild.ToList();
                            }

                            //Gộp các Item cha gốc và các Item không có bán thành phẩm để tính số tấm và số m2
                            listItem.AddRange(listItem_1);

                            #region Tính số tấm và số m2 của các Item cha gốc và Item không có bán thành phẩm

                            listItem.ForEach(item =>
                            {
                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = item.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (item.ProductLength.Value / 1000) *
                                    (item.ProductWidth.Value / 1000);

                                remain_quantity += current_quantity;
                                remain_totalArea += current_totalArea;
                            });

                            #endregion
                        }

                        productOrder.RemainQuantity = Math.Round(remain_quantity, 2);
                        productOrder.RemainTotalArea = Math.Round(remain_totalArea, 2);
                    }
                });

                #endregion

                #region Sắp xếp lại list lệnh sản xuất

                //Lấy các lệnh sản xuất và lệnh tổng có trạng thái Hoãn, Hoàn thành, Hủy
                var listProductionOrder_by_status = listProductionOrder.Where(x =>
                    x.StatusId == status_pend_lsx_id || x.StatusId == status_comp_lsx_id ||
                    x.StatusId == status_canc_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoãn
                var list_lsx_pend = listProductionOrder_by_status.Where(x => x.StatusId == status_pend_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoàn thành
                var list_lsx_comp = listProductionOrder_by_status.Where(x => x.StatusId == status_comp_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hủy
                var list_lsx_canc = listProductionOrder_by_status.Where(x => x.StatusId == status_canc_lsx_id).ToList();

                var list_lsx_step_1 = new List<ProductionOrderEntityModel>();
                list_lsx_step_1.AddRange(list_lsx_pend);
                list_lsx_step_1.AddRange(list_lsx_comp);
                list_lsx_step_1.AddRange(list_lsx_canc);

                //Lấy lại list tổng
                listProductionOrder = listProductionOrder.Where(x =>
                    x.StatusId != status_pend_lsx_id && x.StatusId != status_comp_lsx_id &&
                    x.StatusId != status_canc_lsx_id).ToList();

                //Các lsx bình thường được ưu tiên -> trong đó sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lsx = listProductionOrder.Where(x => x.Especially == true && x.ParentId == null)
                    .OrderBy(z => z.EndDate)
                    .ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lsx
                var list_ignore_lsx = new List<Guid>();

                var new_list_lsx = new List<ProductionOrderEntityModel>();
                new_list_lsx = OrderListByStatus(list_lsx, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lsx = new_list_lsx.Select(y => y.ProductionOrderId).ToList();

                #endregion

                //Các lsx bổ sung -> sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lbs = listProductionOrder.Where(x => x.ParentId != null).OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lbs
                var list_ignore_lbs = new List<Guid>();

                var new_list_lbs = new List<ProductionOrderEntityModel>();
                new_list_lbs = OrderListByStatus(list_lbs, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lbs = new_list_lbs.Select(y => y.ProductionOrderId).ToList();

                #endregion

                list_ignore_lsx.AddRange(list_ignore_lbs);
                var list_ignore = list_ignore_lsx;

                //Các lệnh sản xuất có ngày trả hàng gần nhất
                listProductionOrder = listProductionOrder
                    .Where(x => list_ignore.Count == 0 || !list_ignore.Contains(x.ProductionOrderId))
                    .OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                var new_list_lsx_step_3 = new List<ProductionOrderEntityModel>();
                new_list_lsx_step_3 =
                    OrderListByStatus(listProductionOrder, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                #endregion

                //Sắp xếp lại danh sách cần trả về
                var new_list_result = new List<ProductionOrderEntityModel>();
                new_list_result.AddRange(new_list_lsx);
                new_list_result.AddRange(new_list_lbs);
                new_list_result.AddRange(new_list_lsx_step_3);
                new_list_result.AddRange(list_lsx_step_1);

                #endregion

                #region Lấy master data

                var listStatus = new List<CategoryEntityModel>();
                var listStatusItem = new List<CategoryEntityModel>();

                var statusCategoryType =
                    context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TLT" && x.Active == true);
                listStatus = context.Category.Where(x =>
                    x.CategoryTypeId == statusCategoryType.CategoryTypeId && x.Active == true).Select(y =>
                    new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                        IsDefault = y.IsDefauld
                    }).ToList();

                var statusItemCategoryType =
                    context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX" && x.Active == true);
                listStatusItem = context.Category
                    .Where(x => x.CategoryTypeId == statusItemCategoryType.CategoryTypeId && x.Active == true).Select(
                        y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName,
                            IsDefault = y.IsDefauld
                        }).ToList();

                #endregion

                return new GetTotalProductionOrderByIdResult()
                {
                    Status = true,
                    Message = "Success",
                    TotalProductionOrder = totalProductionOrder,
                    ListProductionOrder = new_list_result,
                    ListStatus = listStatus,
                    ListStatusItem = listStatusItem
                };
            }
            catch (Exception e)
            {
                return new GetTotalProductionOrderByIdResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        private List<ProductionOrderEntityModel> OrderListByStatus(List<ProductionOrderEntityModel> List, 
            Guid status_dela_lsx_id, Guid status_proc_lsx_id, Guid status_new_lsx_id)
        {
            var result_list = new List<ProductionOrderEntityModel>();

            var listDate = List.Select(y => y.EndDate.Value.Date).Distinct().ToList();
            
            listDate.ForEach(_endDate =>
            {
                //Lấy ra list lsx có cùng ngày đang được duyệt
                var list_lsx_by_date = List.Where(x => x.EndDate.Value.Date == _endDate).ToList();

                //Trong list lấy được lọc ra các lsx có trạng thái Chậm tiến độ
                var list_lsx_by_dela = list_lsx_by_date.Where(x => x.StatusId == status_dela_lsx_id).ToList();

                //Trong list lấy được lọc ra các lsx có trạng thái Đang sản xuất
                var list_lsx_by_proc = list_lsx_by_date.Where(x => x.StatusId == status_proc_lsx_id).ToList();

                //Trong list lấy được lọc ra các lsx có trạng thái Mới tạo
                var list_lsx_by_new = list_lsx_by_date.Where(x => x.StatusId == status_new_lsx_id).ToList();

                result_list.AddRange(list_lsx_by_dela);
                result_list.AddRange(list_lsx_by_proc);
                result_list.AddRange(list_lsx_by_new);
            });

            return result_list;
        }

        public UpdateTotalProductionOrderResult UpdateTotalProductionOrder(UpdateTotalProductionOrderParameter parameter)
        {
            try
            {
                var totalProductionOrder = context.TotalProductionOrder.FirstOrDefault(x =>
                    x.TotalProductionOrderId == parameter.TotalProductionOrder.TotalProductionOrderId);

                //var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TLT");
                //var listStatus = context.Category.Where(x => x.CategoryTypeId == statusType.CategoryTypeId).ToList();
                //var statusCancId = listStatus.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;

                //var oldStatus = listStatus.FirstOrDefault(x => x.CategoryId == totalProductionOrder.StatusId);
                //var newStatus = listStatus.FirstOrDefault(x => x.CategoryId == parameter.TotalProductionOrder.StatusId);

                #region Kiểm tra trạng thái lệnh tổng có hợp lệ không

                //switch (oldStatus.CategoryCode)
                //{
                //    case "CANC":
                //        return new UpdateTotalProductionOrderResult()
                //        {
                //            Status = false,
                //            Message = "Trạng thái " + oldStatus.CategoryName + " không được phép sửa"
                //        };
                //    case "COMP":
                //        return new UpdateTotalProductionOrderResult()
                //        {
                //            Status = false,
                //            Message = "Trạng thái " + oldStatus.CategoryName + " không được phép sửa"
                //        };
                //    case "PEND":
                //        if (newStatus.CategoryCode != "PEND" && newStatus.CategoryCode != "CANC" &&
                //            newStatus.CategoryCode != "PROC")
                //        {
                //            return new UpdateTotalProductionOrderResult()
                //            {
                //                Status = false,
                //                Message = "Trạng thái " + oldStatus.CategoryName + " không được phép chuyển sang trạng thái " + newStatus.CategoryName
                //            };
                //        }
                //        break;
                //    case "NEW":
                //        if (newStatus.CategoryCode != "NEW" && newStatus.CategoryCode != "CANC" &&
                //            newStatus.CategoryCode != "PEND")
                //        {
                //            return new UpdateTotalProductionOrderResult()
                //            {
                //                Status = false,
                //                Message = "Trạng thái " + oldStatus.CategoryName + " không được phép chuyển sang trạng thái " + newStatus.CategoryName
                //            };
                //        }
                //        break;
                //    case "PROC":
                //        if (newStatus.CategoryCode != "PROC" && newStatus.CategoryCode != "CANC" &&
                //            newStatus.CategoryCode != "PEND")
                //        {
                //            return new UpdateTotalProductionOrderResult()
                //            {
                //                Status = false,
                //                Message = "Trạng thái " + oldStatus.CategoryName + " không được phép chuyển sang trạng thái " + newStatus.CategoryName
                //            };
                //        }
                //        break;
                //}

                #endregion

                #region Kiểm tra xem bản ghi đã bị thay đổi trạng thái hay chưa

                //if (oldStatus.CategoryCode != parameter.OldStatusCodeFe)
                //{
                //    return new UpdateTotalProductionOrderResult()
                //    {
                //        Status = false,
                //        Message = "Trạng thái của lệnh tổng đã bị thay đổi hãy load lại trang"
                //    };
                //}

                #endregion

                #region Thay đổi trạng thái của Lệnh sản xuất và của Item khi Lệnh tổng thay đổi trạng thái

                //var statusType_lsx = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                //var listStatus_lsx = context.Category.Where(x => x.CategoryTypeId == statusType_lsx.CategoryTypeId)
                //    .ToList();
                //var statusPendId_lsx = listStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                //var statusProcId_lsx = listStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;

                //var statusType_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                //var listStatus_item = context.Category.Where(x => x.CategoryTypeId == statusType_item.CategoryTypeId)
                //    .ToList();
                //var statusPendId_item = listStatus_item.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                //var statusProcId_item = listStatus_item.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;

                ////Lấy tất cả các lệnh sản xuất thuộc lệnh tổng
                //var listProductionOrderId = context.TotalProductionOrderMapping
                //    .Where(x => x.TotalProductionOrderId == totalProductionOrder.TotalProductionOrderId)
                //    .Select(y => y.ProductionOrderId).ToList();

                //var listProductionOrder = context.ProductionOrder
                //    .Where(x => listProductionOrderId.Contains(x.ProductionOrderId)).ToList();

                //if (newStatus.CategoryCode == "PEND")
                //{
                //    //Khi Lệnh tổng thay đổi sang trạng thái Hoãn

                //    //Lấy tất cả các Id lệnh sản xuất phải thay đổi trạng thái
                //    var listProductOrderIdChange = new List<Guid>();

                //    listProductionOrder.ForEach(item =>
                //    {
                //        var status_lsx_code = listStatus_lsx.FirstOrDefault(x => x.CategoryId == item.StatusId)
                //            .CategoryCode;

                //        if (status_lsx_code == "NEW" || status_lsx_code == "PROC" || status_lsx_code == "DELA")
                //        {
                //            item.StatusId = statusPendId_lsx;
                //            listProductOrderIdChange.Add(item.ProductionOrderId);
                //        }
                //    });

                //    context.ProductionOrder.UpdateRange(listProductionOrder);

                //    //Lấy tất cả item thuộc list Id lệnh sản xuất vừa được thay đổi trạng thái
                //    if (listProductOrderIdChange.Count > 0)
                //    {
                //        var listProductionOrderMapping = context.ProductionOrderMapping
                //            .Where(x => listProductOrderIdChange.Contains(x.ProductionOrderId)).ToList();

                //        listProductionOrderMapping.ForEach(item =>
                //        {
                //            var status_item_code = listStatus_item.FirstOrDefault(x => x.CategoryId == item.StatusId)
                //                .CategoryCode;

                //            if (status_item_code == "NEW" || status_item_code == "PROC")
                //            {
                //                item.StatusId = statusPendId_item;
                //            }
                //        });

                //        context.ProductionOrderMapping.UpdateRange(listProductionOrderMapping);
                //    }
                //}
                //else if (newStatus.CategoryCode == "PROC")
                //{
                //    //Khi Lệnh tổng thay đổi sang trạng thái Đang sản xuất

                //    //Lấy tất cả các Id lệnh sản xuất phải thay đổi trạng thái
                //    var listProductOrderIdChange = new List<Guid>();

                //    listProductionOrder.ForEach(item =>
                //    {
                //        var status_lsx_code = listStatus_lsx.FirstOrDefault(x => x.CategoryId == item.StatusId)
                //            .CategoryCode;

                //        if (status_lsx_code == "NEW" || status_lsx_code == "PEND" || status_lsx_code == "DELA")
                //        {
                //            item.StatusId = statusProcId_lsx;
                //            listProductOrderIdChange.Add(item.ProductionOrderId);
                //        }
                //    });

                //    context.ProductionOrder.UpdateRange(listProductionOrder);

                //    //Lấy tất cả item thuộc list Id lệnh sản xuất vừa được thay đổi trạng thái
                //    if (listProductOrderIdChange.Count > 0)
                //    {
                //        var listProductionOrderMapping = context.ProductionOrderMapping
                //            .Where(x => listProductOrderIdChange.Contains(x.ProductionOrderId)).ToList();

                //        listProductionOrderMapping.ForEach(item =>
                //        {
                //            var status_item_code = listStatus_item.FirstOrDefault(x => x.CategoryId == item.StatusId)
                //                .CategoryCode;

                //            if (status_item_code == "NEW" || status_item_code == "PEND")
                //            {
                //                item.StatusId = statusProcId_item;
                //            }
                //        });

                //        context.ProductionOrderMapping.UpdateRange(listProductionOrderMapping);
                //    }
                //}

                #endregion

                #region Cập nhật bảng lệnh tổng

                totalProductionOrder.StartDate = parameter.TotalProductionOrder.StartDate;
                //totalProductionOrder.StatusId = parameter.TotalProductionOrder.StatusId;
                totalProductionOrder.UpdatedById = parameter.UserId;
                totalProductionOrder.UpdatedDate = DateTime.Now;

                var day = parameter.TotalProductionOrder.StartDate.Value.Day;
                var month = parameter.TotalProductionOrder.StartDate.Value.Month;
                var year = parameter.TotalProductionOrder.StartDate.Value.Year;

                totalProductionOrder.Code =
                    day.ToString("D2") + month.ToString("D2") + year.ToString();

                var dublicate = context.TotalProductionOrder.FirstOrDefault(x =>
                    x.Code == totalProductionOrder.Code &&
                    x.TotalProductionOrderId != totalProductionOrder.TotalProductionOrderId);

                if (dublicate != null)
                {
                    return new UpdateTotalProductionOrderResult()
                    {
                        Status = false,
                        Message = "Lệnh tổng cho lịch làm việc này đã được tạo"
                    };
                }

                #endregion

                #region Cập nhật bảng mapping

                var listOldItem = context.TotalProductionOrderMapping
                    .Where(x => x.TotalProductionOrderId == totalProductionOrder.TotalProductionOrderId).ToList();

                context.TotalProductionOrderMapping.RemoveRange(listOldItem);

                var listTotalProductionOrderMapping = new List<TotalProductionOrderMapping>();
                parameter.ListProductionOrderId.ForEach(item =>
                {
                    var totalProductionOrderMapping = new TotalProductionOrderMapping();
                    totalProductionOrderMapping.TotalProductionOrderMappingId = Guid.NewGuid();
                    totalProductionOrderMapping.TotalProductionOrderId = totalProductionOrder.TotalProductionOrderId;
                    totalProductionOrderMapping.ProductionOrderId = item;
                    totalProductionOrderMapping.CreatedDate = DateTime.Now;
                    totalProductionOrderMapping.CreatedById = parameter.UserId;

                    listTotalProductionOrderMapping.Add(totalProductionOrderMapping);
                });

                context.TotalProductionOrderMapping.AddRange(listTotalProductionOrderMapping);
                context.SaveChanges();

                #endregion

                return new UpdateTotalProductionOrderResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateTotalProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataAddProductionOrderDialogResult GetMasterDataAddProductionOrderDialog(
            GetMasterDataAddProductionOrderDialogParameter parameter)
        {
            try
            {
                #region Lấy danh sách Lệnh sản xuất

                var statusType_lsx = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusType_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                var listAllStatus_lsx = context.Category
                    .Where(x => x.CategoryTypeId == statusType_lsx.CategoryTypeId).ToList();
                var status_comp_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;
                var status_canc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;
                var status_new_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;
                var status_pend_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                var status_proc_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                var status_dela_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "DELA").CategoryId;

                var listAllStatus_item = context.Category
                    .Where(x => x.CategoryTypeId == statusType_item.CategoryTypeId).ToList();

                //Chỉ lấy những item có trạng thái: Mới tạo, Đang sản xuất, Hoãn
                var list_status_item_pass = listAllStatus_item
                    .Where(x => x.CategoryCode != "CANC").Select(y => y.CategoryId).ToList();

                var listIgnoreStatus_lsx = new List<Guid>() { status_comp_lsx_id, status_canc_lsx_id };

                var listProductionOrder = context.ProductionOrder
                    .Where(x => !listIgnoreStatus_lsx.Contains(x.StatusId))
                    .OrderBy(z => z.EndDate).Select(y => new ProductionOrderEntityModel
                    {
                        ProductionOrderId = y.ProductionOrderId,
                        ProductionOrderCode = y.ProductionOrderCode,
                        CustomerName = y.CustomerName,
                        RemainQuantity = 0,
                        RemainTotalArea = 0,
                        EndDate = y.EndDate,
                        StatusId = y.StatusId,
                        StatusName = "",
                        NoteTechnique = y.NoteTechnique,
                        Especially = y.Especially,
                        ParentId = y.ParentId,
                        IsIgnore = false
                    }).ToList();

                #region Tính số tấm chưa làm của mỗi lệnh sản xuất

                var listAllItem = context.ProductionOrderMapping.ToList();
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();
                var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                listProductionOrder.ForEach(productOrder =>
                {
                    var status = listAllStatus_lsx.FirstOrDefault(x => x.CategoryId == productOrder.StatusId);
                    productOrder.StatusName = status.CategoryName;

                    var listItemChild = listAllItem.Where(x =>
                            x.ProductionOrderId == productOrder.ProductionOrderId &&
                            list_status_item_pass.Contains(x.StatusId))
                        .ToList();

                    double remain_quantity = 0; //Tổng số tấm thành phẩm cần phải làm
                    double remain_totalArea = 0; //Tổng số m2 thành phẩm cần phải làm

                    if (listItemChild.Count > 0)
                    {
                        if (productOrder.ParentId != null)
                        {
                            //Nếu là lệnh bổ sung thì số lượng tấm sẽ không tính vào thống kê
                            productOrder.IsIgnore = true;

                            //Tính số tấm và số m2 phải làm của lệnh bổ sung

                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            var checkParent = listItemChild.FirstOrDefault(x => x.IsParent == true);
                            var checkSubParent = listItemChild.FirstOrDefault(x => x.IsSubParent == true);
                            var otherItem = listItemChild.FirstOrDefault();

                            if (checkParent != null)
                            {
                                /* Item cha gốc */

                                /* Chỉ tính số tấm phải làm của Item cha gốc */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkParent.ProductLength.Value / 1000) *
                                    (checkParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion

                            }
                            else if (checkParent == null && checkSubParent != null)
                            {
                                /* Item bán thành phẩm có con */

                                /* Chỉ tính số tấm phải làm của Item bán thành phẩm có con */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = checkSubParent.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == checkSubParent.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == checkSubParent.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (checkSubParent.ProductLength.Value / 1000) *
                                    (checkSubParent.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                            else
                            {
                                /* - Item bán thành phẩm không có con hoặc
                                 * - Item không có bán thành phẩm
                                 */

                                #region Tính số tấm và số m2 còn phải làm của Item

                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = otherItem.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == otherItem.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == otherItem.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (otherItem.ProductLength.Value / 1000) *
                                    (otherItem.ProductWidth.Value / 1000);

                                remain_quantity = current_quantity;
                                remain_totalArea = current_totalArea;

                                #endregion
                            }
                        }
                        else
                        {
                            //Nếu là lệnh sản xuất
                            //Phải phân loại Item
                            //Có 4 trường hợp:
                            //- Item cha gốc (có các bán thành phẩm)
                            //- Item không có bán thành phẩm
                            //- Item bán thành phẩm có con (có bán thành phẩm con)
                            //- Item bán thành phẩm không có con

                            //Lấy các Item cha gốc
                            var listItem = listItemChild.Where(x => x.IsParent == true).ToList();
                            var listItemParentId = listItem.Select(x => x.ProductionOrderMappingId).ToList();

                            //Lấy ra các Item bán thành phẩm cấp 1 của các Item cha gốc
                            var listSubParentId = new List<Guid>();
                            if (listItem.Count > 0)
                            {
                                var listSubParent = listItemChild
                                    .Where(x => x.ParentPartId != null && listItemParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId = listSubParent.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lấy ra các Item bán thành phẩm cấp 2 của các Item cha gốc
                            var listSubParentId_2 = new List<Guid>();
                            if (listSubParentId.Count > 0)
                            {
                                var listSubParent_2 = listItemChild
                                    .Where(x => x.ParentPartId != null && listSubParentId.Contains(x.ParentPartId.Value))
                                    .ToList();
                                listSubParentId_2 = listSubParent_2.Select(x => x.ProductionOrderMappingId).ToList();
                            }

                            //Lọc ra các Item cha gốc và các Item con của nó
                            var listPrentIgnoreId = new List<Guid>();
                            listItemParentId.AddRange(listSubParentId);
                            listItemParentId.AddRange(listSubParentId_2);
                            listPrentIgnoreId = listItemParentId;

                            //Lấy ra list Item không có bán thành phẩm
                            var listItem_1 = new List<ProductionOrderMapping>();

                            if (listPrentIgnoreId.Count > 0)
                            {
                                listItem_1 = listItemChild
                                    .Where(x => x.ProductionOrderMappingId != null &&
                                                !listPrentIgnoreId.Contains(x.ProductionOrderMappingId)).ToList();
                            }
                            else
                            {
                                listItem_1 = listItemChild.ToList();
                            }

                            //Gộp các Item cha gốc và các Item không có bán thành phẩm để tính số tấm và số m2
                            listItem.AddRange(listItem_1);

                            #region Tính số tấm và số m2 của các Item cha gốc và Item không có bán thành phẩm

                            listItem.ForEach(item =>
                            {
                                //Tìm tiến trình cuối cùng mà item đi qua
                                var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                    .FirstOrDefault();

                                //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                var m = item.Quantity;

                                //Tìm số a (Số tấm đơn vị được cộng)
                                var tong_cong = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm cộng bổ sung
                                var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Tìm số b (Số tấm đơn vị được trừ)
                                var tong_tru = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm trừ bổ sung
                                var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                    x.TechniqueRequestId == techniqueRequestIdFinal &&
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.CalculatorType == false).ToList().Count();

                                var current_quantity =
                                    m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                               Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                var current_totalArea =
                                    current_quantity * (item.ProductLength.Value / 1000) *
                                    (item.ProductWidth.Value / 1000);

                                remain_quantity += current_quantity;
                                remain_totalArea += current_totalArea;
                            });

                            #endregion
                        }

                        productOrder.RemainQuantity = Math.Round(remain_quantity, 2);
                        productOrder.RemainTotalArea = Math.Round(remain_totalArea, 2);
                    }
                });

                #endregion

                #region Sắp xếp lại list lệnh sản xuất

                //Lấy các lệnh sản xuất và lệnh tổng có trạng thái Hoãn, Hoàn thành, Hủy
                var listProductionOrder_by_status = listProductionOrder.Where(x =>
                    x.StatusId == status_pend_lsx_id || x.StatusId == status_comp_lsx_id ||
                    x.StatusId == status_canc_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoãn
                var list_lsx_pend = listProductionOrder_by_status.Where(x => x.StatusId == status_pend_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hoàn thành
                var list_lsx_comp = listProductionOrder_by_status.Where(x => x.StatusId == status_comp_lsx_id).ToList();

                //Lấy riêng các lệnh sản xuất có trạng thái Hủy
                var list_lsx_canc = listProductionOrder_by_status.Where(x => x.StatusId == status_canc_lsx_id).ToList();

                var list_lsx_step_1 = new List<ProductionOrderEntityModel>();
                //list_lsx_step_1.AddRange(list_lsx_pend);
                list_lsx_step_1.AddRange(list_lsx_comp);
                list_lsx_step_1.AddRange(list_lsx_canc);

                //Lấy lại list tổng
                listProductionOrder = listProductionOrder.Where(x =>
                    x.StatusId != status_pend_lsx_id && x.StatusId != status_comp_lsx_id &&
                    x.StatusId != status_canc_lsx_id).ToList();

                //Các lsx bình thường được ưu tiên -> trong đó sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lsx = listProductionOrder.Where(x => x.Especially == true && x.ParentId == null)
                    .OrderBy(z => z.EndDate)
                    .ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lsx
                var list_ignore_lsx = new List<Guid>();

                var new_list_lsx = new List<ProductionOrderEntityModel>();
                new_list_lsx = OrderListByStatus(list_lsx, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lsx = new_list_lsx.Select(y => y.ProductionOrderId).ToList();

                #endregion

                //Các lsx bổ sung -> sắp xếp theo ngày trả hàng gần nhất lên đầu
                var list_lbs = listProductionOrder.Where(x => x.ParentId != null).OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                //Danh sách bỏ qua của lbs
                var list_ignore_lbs = new List<Guid>();

                var new_list_lbs = new List<ProductionOrderEntityModel>();
                new_list_lbs = OrderListByStatus(list_lbs, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                list_ignore_lbs = new_list_lbs.Select(y => y.ProductionOrderId).ToList();

                #endregion

                list_ignore_lsx.AddRange(list_ignore_lbs);
                var list_ignore = list_ignore_lsx;

                //Các lệnh sản xuất có ngày trả hàng gần nhất
                listProductionOrder = listProductionOrder
                    .Where(x => list_ignore.Count == 0 || !list_ignore.Contains(x.ProductionOrderId))
                    .OrderBy(z => z.EndDate).ToList();

                #region Nếu có cùng ngày trả hàng thì sắp xếp theo trạng thái

                var new_list_lsx_step_3 = new List<ProductionOrderEntityModel>();
                new_list_lsx_step_3 =
                    OrderListByStatus(listProductionOrder, status_dela_lsx_id, status_proc_lsx_id, status_new_lsx_id);

                #endregion

                //Sắp xếp lại danh sách cần trả về
                var new_list_result = new List<ProductionOrderEntityModel>();
                new_list_result.AddRange(new_list_lsx);
                new_list_result.AddRange(new_list_lbs);
                new_list_result.AddRange(new_list_lsx_step_3);
                new_list_result.AddRange(list_lsx_step_1);

                //Loại những Lệnh sản xuất đã có trong lệnh tổng
                if (parameter.ListIgnore.Count > 0)
                {
                    new_list_result = new_list_result
                        .Where(x => !parameter.ListIgnore.Contains(x.ProductionOrderId)).ToList();
                }

                #endregion

                #endregion

                return new GetMasterDataAddProductionOrderDialogResult()
                {
                    Status = true,
                    Message = "Success",
                    ListProductionOrder = new_list_result
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataAddProductionOrderDialogResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataSearchTotalProductionOrderResult GetMasterDataSearchTotalProductionOrder(
            GetMasterDataSearchTotalProductionOrderParameter parameter)
        {
            try
            {
                var listStatus = new List<CategoryEntityModel>();
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TLT");
                listStatus = context.Category.Where(x => x.CategoryTypeId == statusType.CategoryTypeId).Select(y =>
                    new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                return new GetMasterDataSearchTotalProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListStatus = listStatus
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataSearchTotalProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public SearchTotalProductionOrderResult SearchTotalProductionOrder(SearchTotalProductionOrderParameter parameter)
        {
            try
            {
                var listTotalProductionOrder = new List<TotalProductionOrderEntityModel>();
                listTotalProductionOrder = context.TotalProductionOrder.Where(x =>
                    (parameter.Code == null || x.Code.Contains(parameter.Code)) &&
                    (parameter.StartDate == null || parameter.StartDate == DateTime.MinValue ||
                     x.StartDate.Value.Date == parameter.StartDate.Value.Date)).Select(y =>
                    new TotalProductionOrderEntityModel
                    {
                        TotalProductionOrderId = y.TotalProductionOrderId,
                        Code = y.Code,
                        StartDate = y.StartDate,
                        StatusName = "",
                        TotalQuantity = 0,
                        TotalArea = 0,
                        MaxEndDate = null,
                        MinEndDate = null
                    }).ToList();

                #region Xử lý phân trang

                var totalRecords = listTotalProductionOrder.Count;

                var remainRecords = totalRecords - parameter.FirstNumber;

                if (remainRecords == 0)
                {
                    parameter.FirstNumber = 0;
                    parameter.Rows = 0;
                }
                else if (remainRecords < 0)
                {
                    parameter.FirstNumber = 0;
                    parameter.Rows = totalRecords;
                }
                else if (remainRecords > 0 && remainRecords <= parameter.Rows)
                {
                    parameter.Rows = remainRecords;
                }

                listTotalProductionOrder =
                    listTotalProductionOrder.Skip(parameter.FirstNumber).Take(parameter.Rows).ToList();

                #endregion

                //Giới hạn số bản ghi phải xử lý
                var listTotalProductionOrderId =
                    listTotalProductionOrder.Select(y => y.TotalProductionOrderId).ToList();

                var listAllTotalProductionOrderMapping = context.TotalProductionOrderMapping
                    .Where(x => listTotalProductionOrderId.Contains(x.TotalProductionOrderId)).ToList();

                var _listProductionOrderId = listAllTotalProductionOrderMapping.Select(y => y.ProductionOrderId)
                    .Distinct().ToList();

                //Giới hạn bản ghi phải xử lý
                var listAllProductionOrder = context.ProductionOrder
                    .Where(x => _listProductionOrderId.Contains(x.ProductionOrderId) && x.ParentId == null).ToList();

                var listAllProductionOrderId = listAllProductionOrder.Select(y => y.ProductionOrderId).ToList();

                //Giới hạn bản ghi phải xử lý của Item
                var listAllItem = context.ProductionOrderMapping
                    .Where(x => listAllProductionOrderId.Contains(x.ProductionOrderId) &&
                                x.ParentPartId == null).ToList();

                var listAllItemId = listAllItem.Select(y => y.ProductionOrderMappingId).ToList();

                //Giới hạn bản ghi phải xử lý của tiến trình gắn với Item
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping
                    .Where(x => listAllItemId.Contains(x.ProductionOrderMappingId)).ToList();

                var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                //Giới hạn bản ghi phải xử lý của danh sách action
                var listHandleHistory = listAllProductionOrderHistory
                    .Where(x => listAllItemId.Contains(x.ProductionOrderMappingId) ||
                                (x.ParentId != null && listAllItemId.Contains(x.ParentId.Value)))
                    .ToList();

                var statusType_lsx = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusType_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                var listAllStatus_lsx = context.Category
                    .Where(x => x.CategoryTypeId == statusType_lsx.CategoryTypeId).ToList();
                var status_new_lsx_id = listAllStatus_lsx.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;

                var listAllStatus_item = context.Category
                    .Where(x => x.CategoryTypeId == statusType_item.CategoryTypeId).ToList();

                //Chỉ lấy những item có trạng thái: Mới tạo, Đang sản xuất, Hoãn, Đã hoàn thành
                var list_status_item_pass = listAllStatus_item
                    .Where(x => x.CategoryCode != "CANC").Select(y => y.CategoryId)
                    .ToList();

                listTotalProductionOrder.ForEach(totalProductionOrder =>
                {
                    var totalProductionOrderId = totalProductionOrder.TotalProductionOrderId;

                    var listProductionOrderId = new List<Guid>();
                    //Lấy list lệnh sản xuất trong lệnh tổng
                    listProductionOrderId = listAllTotalProductionOrderMapping
                        .Where(x => x.TotalProductionOrderId == totalProductionOrderId)
                        .Select(y => y.ProductionOrderId).ToList();

                    var listProductionOrder = new List<ProductionOrderEntityModel>();

                    if (listProductionOrderId.Count > 0)
                    {
                        listProductionOrder = listAllProductionOrder
                            .Where(x => listProductionOrderId.Contains(x.ProductionOrderId))
                            .OrderBy(z => z.EndDate).Select(y => new ProductionOrderEntityModel
                            {
                                ProductionOrderId = y.ProductionOrderId,
                                RemainQuantity = 0,
                                RemainTotalArea = 0,
                                EndDate = y.EndDate,
                                ParentId = y.ParentId,
                                IsIgnore = false
                            }).ToList();

                        #region Tính số tấm chưa làm của mỗi lệnh sản xuất

                        listProductionOrder.ForEach(productOrder =>
                        {
                            var listItemChild = listAllItem.Where(x =>
                                    x.ProductionOrderId == productOrder.ProductionOrderId &&
                                    list_status_item_pass.Contains(x.StatusId))
                                .ToList();

                            double remain_quantity = 0; //Tổng số tấm thành phẩm cần phải làm
                            double remain_totalArea = 0; //Tổng số m2 thành phẩm cần phải làm

                            //Chỉ tính số tấm đã hoàn thành của lệnh sản xuất
                            if (productOrder.ParentId == null)
                            {
                                if (listItemChild.Count > 0)
                                {
                                    //Nếu là lệnh sản xuất
                                    //Phải phân loại Item
                                    //Có 4 trường hợp:
                                    //- Item cha gốc (có các bán thành phẩm)
                                    //- Item không có bán thành phẩm
                                    //- Item bán thành phẩm có con (có bán thành phẩm con)
                                    //- Item bán thành phẩm không có con

                                    var listItem = listItemChild.Where(x => x.ParentPartId == null).ToList();

                                    #region Tính số tấm và số m2 của các Item cha gốc và Item không có bán thành phẩm

                                    listItem.ForEach(item =>
                                    {
                                        //Tìm tiến trình cuối cùng mà item đi qua
                                        var techniqueRequestIdFinal = listAllTechniqueRequestMapping
                                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                            .OrderByDescending(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId)
                                            .FirstOrDefault();

                                        //Tìm số m (Tổng số đặt hàng) của mỗi Item trong lệnh sản xuất;
                                        var m = item.Quantity;

                                        //Tìm số a (Số tấm đơn vị được cộng)
                                        var tong_cong = listHandleHistory.Where(x =>
                                            x.TechniqueRequestId == techniqueRequestIdFinal &&
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.ProductionOrderId == productOrder.ProductionOrderId &&
                                            x.CalculatorType == true).ToList().Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listHandleHistory.Where(x =>
                                            x.TechniqueRequestId == techniqueRequestIdFinal &&
                                            x.ParentId == item.ProductionOrderMappingId &&
                                            x.CalculatorType == true).ToList().Count();

                                        //Tìm số b (Số tấm đơn vị được trừ)
                                        var tong_tru = listHandleHistory.Where(x =>
                                            x.TechniqueRequestId == techniqueRequestIdFinal &&
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.ProductionOrderId == productOrder.ProductionOrderId &&
                                            x.CalculatorType == false).ToList().Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listHandleHistory.Where(x =>
                                            x.TechniqueRequestId == techniqueRequestIdFinal &&
                                            x.ParentId == item.ProductionOrderMappingId &&
                                            x.CalculatorType == false).ToList().Count();

                                        var current_quantity =
                                            m.Value - (Convert.ToDouble(tong_cong + tong_cong_bo_sung) -
                                                       Convert.ToDouble(tong_tru + tong_tru_bo_sung));
                                        var current_totalArea =
                                            current_quantity * (item.ProductLength.Value / 1000) *
                                            (item.ProductWidth.Value / 1000);

                                        remain_quantity += current_quantity;
                                        remain_totalArea += current_totalArea;
                                    });

                                    #endregion
                                }

                                productOrder.RemainQuantity = Math.Round(remain_quantity, 2);
                                productOrder.RemainTotalArea = Math.Round(remain_totalArea, 2);
                            }
                        });

                        totalProductionOrder.TotalQuantity = listProductionOrder.Sum(x => x.RemainQuantity);
                        totalProductionOrder.TotalArea = listProductionOrder.Sum(x => x.RemainTotalArea);
                        totalProductionOrder.MaxEndDate = listProductionOrder.Select(y => y.EndDate).Max();
                        totalProductionOrder.MinEndDate = listProductionOrder.Select(y => y.EndDate).Min();

                        #endregion
                    }
                });

                listTotalProductionOrder = listTotalProductionOrder.Where(x =>
                        (parameter.TotalQuantity == null || x.TotalQuantity == parameter.TotalQuantity) &&
                        (parameter.TotalArea == null || x.TotalArea == parameter.TotalArea) &&
                        (parameter.MinEndDate == null || parameter.MinEndDate == DateTime.MinValue ||
                         x.MinEndDate.Value.Date == parameter.MinEndDate.Value.Date) &&
                        (parameter.MaxEndDate == null || parameter.MaxEndDate == DateTime.MinValue ||
                         x.MaxEndDate.Value.Date == parameter.MaxEndDate.Value.Date))
                    .OrderByDescending(z => z.StartDate)
                    .ToList();

                return new SearchTotalProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListTotalProductionOrder = listTotalProductionOrder,
                    TotalRecords = totalRecords
                };
            }
            catch (Exception e)
            {
                return new SearchTotalProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetTrackProductionResult GetTrackProduction(GetTrackProductionParameter parameter)
        {
            try
            {
                //Lấy ra Tiến trình của người đang đăng nhập (hiện tại thuộc tổ nào )
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                var organizationId = employee.OrganizationId;
                int totalRecords = 0;
                var listUniqueProductionOrder = new List<ProductionOrderEntityModel>();

                //List Item
                var listProductionOrderMapping = new List<TrackProductionEntityModel>();

                //Lấy list lệnh tổng có ngày sản xuất đến ngày hiện tại
                var listTotalProductionOrderId = context.TotalProductionOrder.Where(x => x.StartDate <= DateTime.Now)
                    .Select(y => y.TotalProductionOrderId).ToList();

                //Lấy list lệnh sản xuất đã được gán vào lệnh tổng
                var listProductionOrderId = new List<Guid>();

                if (listTotalProductionOrderId.Count > 0)
                {
                    listProductionOrderId =
                        context.TotalProductionOrderMapping
                            .Where(x => listTotalProductionOrderId.Contains(x.TotalProductionOrderId))
                            .Select(y => y.ProductionOrderId).ToList();
                }

                //Lấy những lệnh sản xuất
                var listProductionOrder = new List<ProductionOrder>();

                listProductionOrder = context.ProductionOrder.Select(prod => new ProductionOrder
                    {
                        ProductionOrderId = prod.ProductionOrderId,
                        ProductionOrderCode = prod.ProductionOrderCode,
                        EndDate = prod.EndDate,
                        Especially = prod.Especially,
                        ParentId = prod.ParentId,
                        StatusId = prod.StatusId,
                        Note = prod.Note
                    }).ToList();

                if (parameter.ListProductionOrderId.Count == 0)
                {
                    listProductionOrder = (from prod in listProductionOrder
                        join prodId in listProductionOrderId on prod.ProductionOrderId equals prodId
                        where
                            ((parameter.EndDate == null || parameter.EndDate == DateTime.MinValue ||
                              prod.EndDate.Value.Date == parameter.EndDate.Value.Date) &&

                             (parameter.FromDate == null || parameter.FromDate == DateTime.MinValue ||
                              prod.CreatedDate >= parameter.FromDate) &&
                             (parameter.ToDate == null || parameter.ToDate == DateTime.MinValue ||
                              prod.CreatedDate <= parameter.ToDate))
                        select new ProductionOrder
                        {
                            ProductionOrderId = prod.ProductionOrderId,
                            ProductionOrderCode = prod.ProductionOrderCode,
                            EndDate = prod.EndDate,
                            Especially = prod.Especially,
                            ParentId = prod.ParentId,
                            StatusId = prod.StatusId,
                            Note = prod.Note
                        }).ToList();
                }
                else
                {
                    listProductionOrder = (from prod in listProductionOrder
                        join prodId in listProductionOrderId on prod.ProductionOrderId equals prodId
                        join paraProdId in parameter.ListProductionOrderId on prod.ProductionOrderId equals paraProdId
                        where
                            ((parameter.EndDate == null || parameter.EndDate == DateTime.MinValue ||
                              prod.EndDate.Value.Date == parameter.EndDate.Value.Date) &&

                             (parameter.FromDate == null || parameter.FromDate == DateTime.MinValue ||
                              prod.CreatedDate >= parameter.FromDate) &&
                             (parameter.ToDate == null || parameter.ToDate == DateTime.MinValue ||
                              prod.CreatedDate <= parameter.ToDate))
                        select new ProductionOrder
                        {
                            ProductionOrderId = prod.ProductionOrderId,
                            ProductionOrderCode = prod.ProductionOrderCode,
                            EndDate = prod.EndDate,
                            Especially = prod.Especially,
                            ParentId = prod.ParentId,
                            StatusId = prod.StatusId,
                            Note = prod.Note
                        }).ToList();
                }

                listProductionOrderId = listProductionOrder.Select(y => y.ProductionOrderId).ToList();

                //Với mỗi Id lệnh sản xuất lấy ra list Item thuộc lệnh sản xuất
                if (listProductionOrderId.Count > 0)
                {
                    //Lấy tất cả trạng thái của Item
                    var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var listAllStatusItem = context.Category
                        .Where(x => x.CategoryTypeId == statusItemType.CategoryTypeId).ToList();
                    var status_proc_item_id =
                        listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                    var status_new_item_id =
                        listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "NEW").CategoryId;

                    var listAllProductionOrderMapping = context.ProductionOrderMapping.ToList();

                    //Lấy list trạng thái lệnh sản xuất
                    var lsx_type = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                    var listAllStatus_lsx = context.Category.Where(x => x.CategoryTypeId == lsx_type.CategoryTypeId)
                        .ToList();

                    var _listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();

                    //Lấy ra tiến trình cha hiện tại của người đang đăng nhâp
                    var currentTechniqueRequest =
                        context.TechniqueRequest
                            .FirstOrDefault(x => x.OrganizationId == organizationId && x.ParentId == null);

                    //Lấy list Item
                    listProductionOrderMapping = listAllProductionOrderMapping
                        .Where(x => listProductionOrderId.Contains(x.ProductionOrderId))
                        .Select(y => new TrackProductionEntityModel
                        {
                            ProductionOrderMappingId = y.ProductionOrderMappingId,
                            ParentId = y.ParentId,
                            ParentType = y.ParentType,
                            TechniqueRequestId = Guid.Empty,
                            ProductionOrderId = y.ProductionOrderId,
                            Code = "",
                            EndDate = null,
                            ProductName = y.ProductName,
                            ProductLength = y.ProductLength,
                            ProductWidth = y.ProductWidth,
                            ProductThickness = y.ProductThickness,
                            TechniqueDescription = y.TechniqueDescription,
                            Rate = 0,
                            PreCompleteQuantity = 0,
                            Quantity = y.Quantity,
                            CompleteQuantity = 0,
                            UnitQuantity = 0,
                            ActionQuantity = 0,
                            StatusItemId = y.StatusId,
                            StatusCode = "",
                            StatusItemName = "",
                            IsShow = true,
                            TotalErrPre = 0,
                            OriginalId = y.OriginalId,
                            TechniqueOrder = 0,
                            IsParent = y.IsParent,
                            IsSubParent = y.IsSubParent,
                            ParentPartId = y.ParentPartId,
                            Type = 0,
                            ParentExtendId = y.ParentExtendId,
                            Borehole = y.Borehole,
                            Hole = y.Hole,
                            ProductColor = y.ProductColor,
                            IsAddPart = y.IsAddPart,
                            TextColorMode = "",
                            Note = "",
                            Present = y.Present,
                            OrderType = 0,
                        }).ToList();

                    var _listAllProductionOrderMapping = listProductionOrderMapping;

                    listProductionOrderMapping.ForEach(item =>
                    {
                        item.Code = listProductionOrder.FirstOrDefault(p =>
                            p.ProductionOrderId == item.ProductionOrderId)?.ProductionOrderCode;
                        item.EndDate = GetEndDate(listProductionOrder, item.ProductionOrderId);

                        var status = listAllStatusItem
                            .FirstOrDefault(t => t.CategoryId == item.StatusItemId);

                        item.StatusCode = status.CategoryCode;
                        item.StatusItemName = status.CategoryName;
                        item.OrderType = GetOrderType(listProductionOrder, item.ProductionOrderId);
                    });

                    var ___listAllProductionOrderMappingId =
                        listProductionOrderMapping.Select(y => y.ProductionOrderMappingId).ToList();

                    //Lấy ra các record của bảng mapping giữa Item và Tiến trình (lọc theo list Id Item ở trên)
                    var listAllTechniqueRequestMapping = _listAllTechniqueRequestMapping
                        .Where(x => ___listAllProductionOrderMappingId.Contains(x.ProductionOrderMappingId)).ToList();

                    //
                    var _listHandleCheckShowTechniqueRequestMapping = _listAllTechniqueRequestMapping
                        .Where(x => x.TechniqueRequestId == currentTechniqueRequest.TechniqueRequestId).ToList();

                    listProductionOrderMapping.ForEach(item =>
                        {
                            item.IsShow = CheckIsShowItem(_listHandleCheckShowTechniqueRequestMapping,
                                item.ProductionOrderMappingId);
                        });

                    //Lấy ra list Id của Item
                    var listProductionOrderMappingId =
                        listProductionOrderMapping.Select(y => y.ProductionOrderMappingId).ToList();

                    if (currentTechniqueRequest == null)
                    {
                        return new GetTrackProductionResult()
                        {
                            Status = false,
                            Message = "Người dùng không thuộc tổ sản xuất",
                            ListTrackProduction = new List<TrackProductionEntityModel>()
                        };
                    }

                    if (listProductionOrderMappingId.Count > 0)
                    {
                        //List all action history 
                        var listAllProductionOrderHistory = context.ProductionOrderHistory.Select(y =>
                            new ProductionOrderHistory
                            {
                                ProductionOrderMappingId = y.ProductionOrderMappingId,
                                TechniqueRequestId = y.TechniqueRequestId,
                                CalculatorType = y.CalculatorType,
                                ParentId = y.ParentId,
                                IsError = y.IsError,
                                IsErrorPre = y.IsErrorPre,
                                QuantityUnitErr = y.QuantityUnitErr
                            }).ToList();

                        //List tất cả bán thành phẩm lỗi
                        var listAllPartItemMapping = context.PartItemMapping.ToList();

                        //Lọc list lịch sử theo dõi theo list Id item

                        var listProductionOrderHistory = (from y in listAllProductionOrderHistory
                            join c in listProductionOrderMappingId on y.ProductionOrderMappingId equals c
                            select new ProductionOrderHistory
                            {
                                ProductionOrderMappingId = y.ProductionOrderMappingId,
                                TechniqueRequestId = y.TechniqueRequestId,
                                CalculatorType = y.CalculatorType,
                                ParentId = y.ParentId,
                                IsError = y.IsError,
                                IsErrorPre = y.IsErrorPre,
                                QuantityUnitErr = y.QuantityUnitErr
                            }).ToList();

                        #region Lọc ra những item không thuộc tiến trình hiện tại

                        listProductionOrderMapping =
                            listProductionOrderMapping.Where(x => x.IsShow == true &&
                                                                  (parameter.ProductThickness == null ||
                                                                   x.ProductThickness == parameter.ProductThickness) &&
                                                                  (parameter.ProductName == null ||
                                                                   parameter.ProductName == "" ||
                                                                   x.ProductName.Trim().ToLower()
                                                                       .Contains(parameter.ProductName.ToLower())) &&
                                                                  (parameter.ListStatusItem.Count == 0 ||
                                                                   parameter.ListStatusItem.Contains(x.StatusItemId
                                                                       .Value)) &&
                                                                  (parameter.ProductLength == null ||
                                                                   x.ProductLength == parameter.ProductLength) &&
                                                                  (parameter.ProductWidth == null ||
                                                                   x.ProductWidth == parameter.ProductWidth))
                                .OrderBy(z => z.EndDate).ToList();

                        #region Sắp xếp lại danh sách

                        //Danh sách các item có trạng thái Hoãn
                        var list_item_pend = listProductionOrderMapping.Where(x => x.StatusCode == "PEND").ToList();

                        //Danh sách các item có trạng thái Hoàn thành
                        var list_item_comp = listProductionOrderMapping.Where(x => x.StatusCode == "COMP").ToList();

                        //Danh sách các item có trạng thái Hủy
                        var list_item_canc = listProductionOrderMapping.Where(x => x.StatusCode == "CANC").ToList();

                        //Lọc lại list
                        listProductionOrderMapping = listProductionOrderMapping.Where(x =>
                            x.StatusCode != "PEND" && x.StatusCode != "COMP" && x.StatusCode != "CANC").ToList();

                        //Lấy ra danh sách item thuộc lệnh sản xuất ưu tiên -> Sắp xếp theo ngày trả hàng nhỏ nhất
                        var list_item_lsx_ut = listProductionOrderMapping.Where(x => x.OrderType == 1)
                            .OrderBy(z => z.EndDate).ToList();

                        var _list_item_lsx_ut =
                            OrderListTrackByStatus(list_item_lsx_ut, status_proc_item_id, status_new_item_id);

                        //Lấy ra danh sách item thuộc lệnh bổ sung -> Sắp xếp theo ngày trả hàng nhỏ nhất
                        var list_item_lbs = listProductionOrderMapping.Where(x => x.OrderType == 2)
                            .OrderBy(z => z.EndDate).ToList();

                        var _list_item_lbs =
                            OrderListTrackByStatus(list_item_lbs, status_proc_item_id, status_new_item_id);

                        //Lấy danh sách item thuộc lệnh sản xuất không phải ưu tiên -> Sắp xếp theo ngày trả hàng nhỏ nhất
                        var list_item_lsx = listProductionOrderMapping.Where(x => x.OrderType == 3)
                            .OrderBy(z => z.EndDate).ToList();

                        var _list_item_lsx =
                            OrderListTrackByStatus(list_item_lsx, status_proc_item_id, status_new_item_id);

                        var list_result = new List<TrackProductionEntityModel>();
                        list_result.AddRange(_list_item_lsx_ut);
                        list_result.AddRange(_list_item_lbs);
                        list_result.AddRange(_list_item_lsx);
                        list_result.AddRange(list_item_pend);
                        list_result.AddRange(list_item_comp);
                        list_result.AddRange(list_item_canc);

                        listProductionOrderMapping = list_result;

                        #endregion

                        #region Lấy danh sách lệnh sản xuất

                        var listUniqueProductionOrderId = listProductionOrderMapping.Select(y => y.ProductionOrderId)
                            .Distinct().ToList();

                        listUniqueProductionOrder = listProductionOrder
                            .Where(x => listUniqueProductionOrderId.Contains(x.ProductionOrderId)).Select(y =>
                                new ProductionOrderEntityModel
                                {
                                    ProductionOrderId = y.ProductionOrderId,
                                    ProductionOrderCode = y.ProductionOrderCode
                                }).ToList();

                        #endregion

                        #region Xử lý phân trang

                        totalRecords = listProductionOrderMapping.Count;

                        var remainRecords = totalRecords - parameter.FirstNumber;

                        if (remainRecords == 0)
                        {
                            parameter.FirstNumber = 0;
                            parameter.Rows = 0;
                        }
                        else if (remainRecords < 0)
                        {
                            parameter.FirstNumber = 0;
                            parameter.Rows = totalRecords;
                        }
                        else if (remainRecords > 0 && remainRecords <= parameter.Rows)
                        {
                            parameter.Rows = remainRecords;
                        }

                        listProductionOrderMapping =
                            listProductionOrderMapping.Skip(parameter.FirstNumber).Take(parameter.Rows).ToList();

                        #endregion

                        #endregion

                        for (var m = 0; m < listProductionOrderMapping.Count; m++)
                        {
                            var item = listProductionOrderMapping[m];

                            item.TechniqueRequestId = currentTechniqueRequest.TechniqueRequestId;
                            //Dựa vào Id lệnh sản xuất lấy ra ngày trả hàng (EndDate)
                            var productionOrder =
                                listProductionOrder.FirstOrDefault(x =>
                                    x.ProductionOrderId == item.ProductionOrderId);

                            var productionOrderStatusCode =
                                listAllStatus_lsx.FirstOrDefault(x => x.CategoryId == productionOrder.StatusId)
                                    .CategoryCode;
                            
                            item.Note = productionOrder.Note;

                            #region Chỉnh màu của Item khi hiển thị

                            if (item.StatusCode == "CANC")
                            {
                                item.TextColorMode = "a"; //Màu xám
                            }
                            else if (item.StatusCode == "PEND")
                            {
                                item.TextColorMode = "b"; //Màu đỏ
                            }
                            else if (productionOrder.Especially == true || productionOrderStatusCode == "DELA")
                            {
                                if (item.StatusCode == "NEW" || item.StatusCode == "PROC")
                                {
                                    item.TextColorMode = "c"; //Màu xanh
                                }
                            }

                            #endregion

                            item.ListTechniqueRequest = new List<TechniqueRequestEntityModel>();

                            //Lấy ra list Tiến trình và Rate của nó theo Item
                            var listCurrentTechniqueRequest = listAllTechniqueRequestMapping
                                .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.ParentId == null).Select(y => new TechniqueRequestMappingEntityModel
                                            {
                                                TechniqueRequestId = y.TechniqueRequestId,
                                                TechniqueName = y.TechniqueName,
                                                TechniqueOrder = y.TechniqueOrder,
                                                Rate = y.Rate,
                                                UnitQuantity = 0,
                                            }).OrderByDescending(z => z.TechniqueOrder).ToList();

                            //Tiến trình cuối của Item
                            var final_technique_request_id =
                                listCurrentTechniqueRequest.FirstOrDefault().TechniqueRequestId;

                            var count = listCurrentTechniqueRequest.Count;

                            var preTechniqueRequestId = Guid.Empty;

                            //Tính số lượng đơn vị của tiến trình
                            if (count > 0)
                            {
                                for (var i = 0; i <= count - 1; i++)
                                {
                                    if (i == 0)
                                    {
                                        listCurrentTechniqueRequest[0].UnitQuantity = item.Quantity;
                                    }
                                    else
                                    {
                                        listCurrentTechniqueRequest[i].UnitQuantity =
                                            listCurrentTechniqueRequest[i - 1].UnitQuantity *
                                            listCurrentTechniqueRequest[i - 1].Rate;
                                    }
                                }

                                item.UnitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                        x.TechniqueRequestId == currentTechniqueRequest.TechniqueRequestId)
                                    .UnitQuantity;
                            }

                            #region Tính số lượng đơn vị đã hoàn thành của tiến trình trước nếu có

                            var currentTechnique = listCurrentTechniqueRequest
                                    .FirstOrDefault(x =>
                                        x.TechniqueRequestId == currentTechniqueRequest.TechniqueRequestId);

                            item.Rate = currentTechnique.Rate;
                            item.TechniqueOrder = currentTechnique.TechniqueOrder;

                            if (currentTechnique.TechniqueOrder == 1)
                            {
                                //Nếu tiến trình hiện tại không có tiến trình đứng trước:
                                item.PreCompleteQuantity = null;
                            }
                            else
                            {
                                //Lấy ra tiến trình đứng trước của tiến trình hiện tại
                                var preTechniqueRequest =
                                    listCurrentTechniqueRequest.FirstOrDefault(x =>
                                        x.TechniqueOrder == currentTechnique.TechniqueOrder - 1);

                                preTechniqueRequestId = preTechniqueRequest.TechniqueRequestId;

                                var listHistoryPreTechniqueByItem = listProductionOrderHistory.Where(x =>
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.TechniqueRequestId == preTechniqueRequest.TechniqueRequestId).ToList();

                                //Số tấm cộng
                                var tong_cong_pre = listHistoryPreTechniqueByItem.Where(x => x.CalculatorType == true)
                                    .ToList().Count();

                                //Số tấm trừ
                                var tong_tru_pre = listHistoryPreTechniqueByItem.Where(x => x.CalculatorType == false)
                                    .ToList().Count();

                                //Số tấm đã hoàn thành
                                item.PreCompleteQuantity =
                                    Math.Round(Convert.ToDouble(tong_cong_pre - tong_tru_pre), 2);

                                //Tính tổng số tấm lỗi của tiến trình trước
                                item.TotalErrPre = listProductionOrderHistory
                                    .Where(x => x.CalculatorType == false && x.IsErrorPre != true &&
                                                x.IsError == true &&
                                                x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                                x.TechniqueRequestId == currentTechniqueRequest.TechniqueRequestId)
                                    .ToList().Count();
                            }

                            #endregion

                            #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                            var listHistoryItem = listProductionOrderHistory.Where(x =>
                                x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                x.TechniqueRequestId == currentTechniqueRequest.TechniqueRequestId).ToList();

                            //Số tấm cộng
                            var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList().Count();

                            //Số tấm trừ
                            var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList().Count();

                            //Số tấm đã hoàn thành
                            item.CompleteQuantity = Math.Round(Convert.ToDouble(tong_cong - tong_tru), 2);

                            //Số tấm đã thao tác = Số tấm cộng - Số tấm trừ (trường hợp nhầm)
                            var tong_tru_nham = listHistoryItem
                                .Where(x => x.CalculatorType == false && x.IsError == false).ToList().Count();

                            //Số lần Lỗi ở đơn vị trước
                            var tong_so_tam_loi_dv_truoc = listHistoryItem
                                .Where(x => x.CalculatorType == false && x.IsError == true && x.IsErrorPre == true)
                                .Sum(z => z.QuantityUnitErr);

                            //Số tấm lỗi ở đơn vị trước
                            var tong_tru_dv_truoc = listHistoryItem.Where(x =>
                                    x.CalculatorType == false && x.IsError == true && x.IsErrorPre == true).ToList()
                                .Count();

                            item.ActionQuantity = tong_cong - (tong_tru_nham + tong_tru_dv_truoc);

                            //Tính lại số đã hoàn thành của tiến trình trước
                            #region Tính số tấm hoàn thành tiến trình trước

                            item.PreCompleteQuantity =
                                    item.PreCompleteQuantity - tong_so_tam_loi_dv_truoc;

                            //Lấy list Item 
                            var listItem_bs = listAllProductionOrderMapping
                                .Where(x => x.ParentId == item.ProductionOrderMappingId).ToList();

                            var listItemId = new List<Guid>();
                            listItem_bs.ForEach(_item =>
                            {
                                //Lấy ra tiến trình cuối cùng của Item: listAllTechniqueRequestMapping
                                var _tem_final_technique = _listAllTechniqueRequestMapping
                                    .Where(x => x.ProductionOrderMappingId == _item.ProductionOrderMappingId)
                                    .OrderByDescending(y => y.TechniqueOrder).FirstOrDefault();

                                if (_tem_final_technique.TechniqueRequestId == preTechniqueRequestId)
                                {
                                    listItemId.Add(_item.ProductionOrderMappingId);
                                }
                            });

                            //Lấy tổng cộng và tổng trừ của các Item bổ sung
                            if (listItemId.Count > 0)
                            {
                                var tong_cong_bs_item = listAllProductionOrderHistory.Where(x =>
                                        listItemId.Contains(x.ProductionOrderMappingId) &&
                                        x.CalculatorType == true &&
                                        x.TechniqueRequestId == preTechniqueRequestId)
                                    .ToList().Count();

                                var tong_tru_bs_item = listAllProductionOrderHistory.Where(x =>
                                        listItemId.Contains(x.ProductionOrderMappingId) &&
                                        x.CalculatorType == false &&
                                        x.TechniqueRequestId == preTechniqueRequestId)
                                    .ToList().Count();

                                var tong_hoan_thanh_bs_item = tong_cong_bs_item - tong_tru_bs_item;

                                item.PreCompleteQuantity = item.PreCompleteQuantity + tong_hoan_thanh_bs_item;
                            }

                            #endregion

                            #endregion

                            #region Kiểm tra item có phải item cha hay không?

                            item.ListRateChild = new List<double>();
                            if (item.IsParent == true || item.IsSubParent == true)
                            {
                                //Lấy ra tiến trình đầu tiên của Item cha (có bán thành phẩm)
                                var firstTechniqueRequest = listCurrentTechniqueRequest.OrderBy(z => z.TechniqueOrder)
                                    .FirstOrDefault();

                                if (firstTechniqueRequest.TechniqueRequestId ==
                                    currentTechniqueRequest.TechniqueRequestId)
                                {
                                    item.Type = 1;
                                    //Lấy ra list ItemId bán thành phẩm
                                    var listItemChild = _listAllProductionOrderMapping.Where(x =>
                                        x.ParentPartId == item.ProductionOrderMappingId && x.ParentId == null).ToList();

                                    var listItemIdChild = listItemChild.Select(y => y.ProductionOrderMappingId).ToList();

                                    listItemIdChild.ForEach(_itemIdChild =>
                                    {
                                        //Lấy ra tiến trình cuối cùng của Bán thành phẩm
                                        var finalTechniqueRequestItemChild = listAllTechniqueRequestMapping
                                            .Where(x => x.ProductionOrderMappingId == _itemIdChild)
                                            .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                        //Tổng cộng của Item bán thành phẩm ở tiến trình cuối cùng
                                        var tong_cong_item_btp = listAllProductionOrderHistory.Where(x =>
                                                x.ProductionOrderMappingId == _itemIdChild && x.CalculatorType == true &&
                                                x.TechniqueRequestId == finalTechniqueRequestItemChild.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Tổng cộng của Item bán thành phẩm bổ sung ở tiến trình cuối cùng
                                        var tong_cong_item_btp_bs = listAllProductionOrderHistory.Where(x =>
                                                x.ParentId == _itemIdChild && x.CalculatorType == true &&
                                                x.TechniqueRequestId == finalTechniqueRequestItemChild.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Tổng trừ của Item bán thành phẩm ở tiến trình cuối cùng
                                        var tong_tru_item_btp = listAllProductionOrderHistory.Where(x =>
                                                x.ProductionOrderMappingId == _itemIdChild && x.CalculatorType == false &&
                                                x.TechniqueRequestId == finalTechniqueRequestItemChild.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Tổng trừ của Item bán thành phẩm bổ sung ở tiến trình cuối cùng
                                        var tong_tru_item_btp_bs = listAllProductionOrderHistory.Where(x =>
                                                x.ParentId == _itemIdChild && x.CalculatorType == false &&
                                                x.TechniqueRequestId == finalTechniqueRequestItemChild.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        var tong_tru_cua_item_cha = listAllPartItemMapping.Where(x =>
                                            x.ParentId == item.ProductionOrderMappingId &&
                                            x.ProductionOrderMappingId == _itemIdChild).ToList().Count();

                                        var tong_hoan_thanh_item_btp =
                                            (tong_cong_item_btp + tong_cong_item_btp_bs) -
                                            (tong_tru_item_btp + tong_tru_item_btp_bs + tong_tru_cua_item_cha);
                                        item.ListRateChild.Add(tong_hoan_thanh_item_btp);
                                    });
                                }
                            }

                            #endregion
                        }
                    }
                }

                return new GetTrackProductionResult()
                {
                    Status = true,
                    Message = "Success",
                    ListTrackProduction = listProductionOrderMapping,
                    TotalRecords = totalRecords,
                    ListProductionOrder = listUniqueProductionOrder
                };
            }
            catch (Exception e)
            {
                return new GetTrackProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        private DateTime? GetEndDate(List<ProductionOrder> listProductionOrder, Guid ProductionOrderId)
        {
            var productionOrder =
                listProductionOrder.FirstOrDefault(x =>
                    x.ProductionOrderId == ProductionOrderId);

            var EndDate = productionOrder == null
                ? null
                : (productionOrder.EndDate == null ? null : productionOrder.EndDate);

            return EndDate;
        }

        private int GetOrderType(List<ProductionOrder> listProductionOrder, Guid ProductionOrderId)
        {
            int OrderType = 0;

            #region Phân loại item để sắp xếp

            var productionOrder =
                listProductionOrder.FirstOrDefault(x =>
                    x.ProductionOrderId == ProductionOrderId);

            if (productionOrder == null)
            {
                return OrderType;
            }

            if (productionOrder.Especially == true && productionOrder.ParentId == null)
            {
                OrderType = 1;
            }
            else if (productionOrder.ParentId != null)
            {
                OrderType = 2;
            }
            else if (productionOrder.Especially != true && productionOrder.ParentId == null)
            {
                OrderType = 3;
            }

            #endregion

            return OrderType;
        }

        private bool CheckIsShowItem(List<TechniqueRequestMapping> listAllTechniqueRequestMapping, Guid ProductionOrderMappingId)
        {
            bool IsShow = true;

            var checkIsShow = listAllTechniqueRequestMapping
                .Find(x => x.ProductionOrderMappingId == ProductionOrderMappingId);

            //Kiểm tra item có thuộc tiến trình hiện tại không?
            //var checkIsShow = listCurrentTechniqueRequest.Find(x =>
            //    x.TechniqueRequestId == TechniqueRequestId);

            if (checkIsShow == null)
            {
                IsShow = false;
            }

            return IsShow;
        }

        private List<TrackProductionEntityModel> OrderListTrackByStatus(List<TrackProductionEntityModel> List,
            Guid status_proc_item_id, Guid status_new_item_id)
        {
            var result_list = new List<TrackProductionEntityModel>();

            var listDate = List.Select(y => y.EndDate.Value.Date).Distinct().ToList();

            listDate.ForEach(_endDate =>
            {
                //Lấy ra list item có cùng ngày đang được duyệt
                var list_item_by_date = List.Where(x => x.EndDate.Value.Date == _endDate).ToList();

                //Trong list lấy được lọc ra các item có trạng thái Đang sản xuất
                var list_item_by_proc = list_item_by_date.Where(x => x.StatusItemId == status_proc_item_id).ToList();

                //Trong list lấy được lọc ra các item có trạng thái Mới tạo
                var list_item_by_new = list_item_by_date.Where(x => x.StatusItemId == status_new_item_id).ToList();

                result_list.AddRange(list_item_by_proc);
                result_list.AddRange(list_item_by_new);
            });

            return result_list;
        }

        //Tính tổng số tấm đã hoàn thành của lệnh bổ sung cho tiến trình trước
        private List<Guid> GetListParentId(List<ProductionOrderHistory> listAllProductionOrderHistory,
            Guid techniqueRequestId, Guid ParentId)
        {
            var _listParentId = new List<Guid>();

            var listParent = listAllProductionOrderHistory.Where(x =>
                    x.TechniqueRequestId == techniqueRequestId && x.ParentId == ParentId && x.ParentType == true)
                .OrderBy(z => z.CreatedDate)
                .Select(y => y.ParentId).ToList();

            listParent.ForEach(iParent =>
            {
                _listParentId.Add(iParent.Value);
            });

            var _listIdChild = listAllProductionOrderHistory.Where(x =>
                    x.TechniqueRequestId == techniqueRequestId && x.ParentId == ParentId && x.ParentType == true)
                .Select(y => y.ProductionOrderMappingId).ToList();

            _listIdChild.ForEach(_parentId =>
            {
                GetListParentId(listAllProductionOrderHistory, techniqueRequestId, _parentId).ForEach(
                    item =>
                    {
                        _listParentId.Add(item);
                    });
            });

            return _listParentId;
        }

        public CreateProductionOrderResult CreateProductionOrder(CreateProductionOrderParameter parameter)
        {
            try
            {
                var duplicateCode = context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderCode == parameter.ProductionOrder.ProductionOrderCode);
                if (duplicateCode != null)
                {
                    return new CreateProductionOrderResult()
                    {
                        Status = false,
                        Message = "Mã Lệnh sản xuất đã tồn tại trên hệ thống"
                    };
                }

                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                // Lấy danh sách trạng thái của lệnh sản xuất
                var statusNewId = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusNewIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;


                var productionOrder = new ProductionOrder();
                productionOrder.StatusId = statusNewId;
                productionOrder.CreatedById = parameter.UserId;
                productionOrder.CreatedDate = DateTime.Now;
                productionOrder.CustomerName = parameter.ProductionOrder.CustomerName.Trim();
                productionOrder.CustomerNumber = parameter.ProductionOrder.CustomerNumber;
                productionOrder.EndDate = parameter.ProductionOrder.EndDate;
                productionOrder.Especially = parameter.ProductionOrder.Especially;
                productionOrder.Note = parameter.ProductionOrder.Note == null ? null : parameter.ProductionOrder.Note.Trim();
                productionOrder.NoteTechnique = parameter.ProductionOrder.NoteTechnique == null ? null : parameter.ProductionOrder.NoteTechnique.Trim();
                productionOrder.OrderId = parameter.ProductionOrder.OrderId;
                productionOrder.PlaceOfDelivery = parameter.ProductionOrder.PlaceOfDelivery == null ? null : parameter.ProductionOrder.PlaceOfDelivery.Trim();
                productionOrder.ProductionOrderCode = parameter.ProductionOrder.ProductionOrderCode;
                productionOrder.ProductionOrderId = Guid.NewGuid();
                productionOrder.ReceivedDate = parameter.ProductionOrder.ReceivedDate;
                productionOrder.StartDate = parameter.ProductionOrder.StartDate;

                context.ProductionOrder.Add(productionOrder);

                // Lấy danh sách tất cả các tiến trình 
                var listTechnique = context.TechniqueRequest.ToList();
                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                // Thêm vào bảng ProductionOrderMapping và bảng TechniqueRequestMapping
                parameter.ListProduct.ForEach(item =>
                {
                    #region Thêm vào bảng ProductionOrderMapping và TechniqueRequestMapping với quy trình bình thường

                    var product = new ProductionOrderMapping();
                    product.CreatedById = parameter.UserId;
                    product.CreatedDate = DateTime.Now;
                    product.ParentId = null;
                    product.ParentType = null;
                    product.ProductColor = item.ProductColor;
                    product.ProductColorCode = item.ProductColorCode;
                    product.ProductionOrderId = productionOrder.ProductionOrderId;
                    product.ProductId = null;
                    product.ProductionOrderMappingId = Guid.NewGuid();
                    product.ProductLength = item.ProductLength;
                    product.ProductName = item.ProductName;
                    product.ProductThickness = item.ProductThickness;
                    product.ProductWidth = item.ProductWidth;
                    product.Quantity = item.Quantity;
                    product.StatusId = statusNewIdProduct;
                    product.TechniqueDescription = item.TechniqueDescription;
                    product.TotalArea = item.TotalArea;
                    product.ProductCode = item.ProductCode;
                    product.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                    product.Borehole = item.Borehole == null ? 0 : item.Borehole;
                    product.Hole = item.Hole == null ? 0 : item.Hole;
                    product.ProductGroupCode = item.ProductGroupCode;
                    product.IsSubParent = false;
                    product.Grind = item.Grind;
                    product.Stt = item.Stt;

                    var listChildren = parameter.ListProductChildren.Where(x => x.ParentIndex == item.Index).ToList();
                    if (listChildren.Count > 0)
                    {
                        product.IsParent = true;
                    }
                    var techniqueTemp2 = item.ListTechnique.OrderBy(x => x.TechniqueOrder).ToList();
                    if (techniqueTemp2.Count > 0)
                    {
                        product.StartId = techniqueTemp2[0].TechniqueRequestId;
                    }

                    context.ProductionOrderMapping.Add(product);

                    var productGroupCode = item.ProductGroupCode != null ? item.ProductGroupCode.Trim().ToLower() : string.Empty;

                    if (item.TechniqueDescription == null)
                    {
                        item.TechniqueDescription = "";
                    }
                    var listTechniqueDescription = item.TechniqueDescription.ToLower().Split(' ').ToList();

                    var techniqueDescription = "";
                    listTechniqueDescription.ForEach(e =>
                    {
                        techniqueDescription = techniqueDescription + e + " ";
                    });

                    // Thêm TechniqueRequestMapping (tiến trình)
                    item.ListTechnique.ForEach(tech =>
                    {
                        var techniqueRequest = new TechniqueRequestMapping();
                        techniqueRequest.CreatedById = parameter.UserId;
                        techniqueRequest.CreatedDate = DateTime.Now;
                        techniqueRequest.IsDefault = true;
                        techniqueRequest.ParentId = null;
                        techniqueRequest.ProductionOrderMappingId = product.ProductionOrderMappingId;
                        techniqueRequest.Rate = tech.Rate;
                        techniqueRequest.TechniqueName = tech.TechniqueName;
                        techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                        techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                        techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                        techniqueRequest.TechniqueValue = null;
                        var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCode, techniqueDescription, product, thichness);
                        techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                        techniqueRequest.Thick = techniqueTemp.Thick;
                        techniqueRequest.Thin = techniqueTemp.Thin;
                        techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                        techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                        techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                        techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                        techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;

                        context.TechniqueRequestMapping.Add(techniqueRequest);
                    });

                    #endregion

                    #region Thêm vào bảng ProductionOrderMapping và TechniqueRequestMapping với quy trình bán thành phẩm

                    // Bán thành phẩm 
                    listChildren.ForEach(x =>
                    {
                        var productChidren = new ProductionOrderMapping();
                        productChidren.CreatedById = parameter.UserId;
                        productChidren.CreatedDate = DateTime.Now;
                        productChidren.ParentPartId = product.ProductionOrderMappingId;
                        productChidren.ParentType = false;
                        productChidren.ProductColor = x.ProductColor;
                        productChidren.ProductColorCode = x.ProductColorCode;
                        productChidren.ProductionOrderId = productionOrder.ProductionOrderId;
                        productChidren.ProductId = null;
                        productChidren.ProductionOrderMappingId = Guid.NewGuid();
                        productChidren.ProductLength = x.ProductLength;
                        productChidren.ProductName = x.ProductName;
                        productChidren.ProductThickness = x.ProductThickness;
                        productChidren.ProductWidth = x.ProductWidth;
                        productChidren.Quantity = x.Quantity;
                        productChidren.StatusId = statusNewIdProduct;
                        productChidren.TechniqueDescription = x.TechniqueDescription;
                        productChidren.TotalArea = x.TotalArea;
                        productChidren.ProductCode = x.ProductCode;
                        productChidren.ProductOrderWorkflowId = x.ProductOrderWorkflowId;
                        productChidren.ProductGroupCode = x.ProductGroupCode;
                        productChidren.Borehole = x.Borehole == null ? 0 : x.Borehole;
                        productChidren.Hole = x.Hole == null ? 0 : x.Hole;
                        productChidren.IsParent = false;
                        var listChildrenChildren = parameter.ListProductChildrenChildren.Where(z => z.ParentIndex == x.Index).ToList();

                        if (listChildrenChildren.Count > 0)
                        {
                            productChidren.IsSubParent = true;

                        }
                        var tec = x.ListTechnique.OrderBy(cs => cs.TechniqueOrder).ToList();
                        if (tec.Count > 0)
                        {
                            productChidren.StartId = tec[0].TechniqueRequestId;
                        }

                        context.ProductionOrderMapping.Add(productChidren);

                        var productGroupCodeChildren = productChidren.ProductGroupCode.Trim().ToLower();

                        if (productChidren.TechniqueDescription == null)
                        {
                            productChidren.TechniqueDescription = "";
                        }
                        var listTechniqueDescriptionChildren = productChidren.TechniqueDescription.ToLower().Split(' ').ToList();

                        var techniqueDescriptionChildren = "";
                        listTechniqueDescriptionChildren.ForEach(e =>
                        {
                            techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                        });

                        // Thêm TechniqueRequestMapping (tiến trình)
                        x.ListTechnique.ForEach(tech =>
                        {
                            var techniqueRequest = new TechniqueRequestMapping();
                            techniqueRequest.CreatedById = parameter.UserId;
                            techniqueRequest.CreatedDate = DateTime.Now;
                            techniqueRequest.IsDefault = true;
                            techniqueRequest.ParentId = null;
                            techniqueRequest.ProductionOrderMappingId = productChidren.ProductionOrderMappingId;
                            techniqueRequest.Rate = tech.Rate;
                            techniqueRequest.TechniqueName = tech.TechniqueName;
                            techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                            techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                            techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                            techniqueRequest.TechniqueValue = null;
                            var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCodeChildren, techniqueDescriptionChildren, productChidren, thichness);
                            techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                            techniqueRequest.Thick = techniqueTemp.Thick;
                            techniqueRequest.Thin = techniqueTemp.Thin;
                            techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                            techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                            techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                            techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                            techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;
                            context.TechniqueRequestMapping.Add(techniqueRequest);
                        });


                        // Bán thành phẩm của bàn thành phẩm
                        listChildrenChildren.ForEach(z =>
                        {
                            var productChidrenChildren = new ProductionOrderMapping();
                            productChidrenChildren.CreatedById = parameter.UserId;
                            productChidrenChildren.CreatedDate = DateTime.Now;
                            productChidrenChildren.ParentPartId = productChidren.ProductionOrderMappingId;
                            productChidrenChildren.ParentType = false;
                            productChidrenChildren.ProductColor = z.ProductColor;
                            productChidrenChildren.ProductColorCode = z.ProductColorCode;
                            productChidrenChildren.ProductionOrderId = productionOrder.ProductionOrderId;
                            productChidrenChildren.ProductId = null;
                            productChidrenChildren.ProductionOrderMappingId = Guid.NewGuid();
                            productChidrenChildren.ProductLength = z.ProductLength;
                            productChidrenChildren.ProductName = z.ProductName;
                            productChidrenChildren.ProductThickness = z.ProductThickness;
                            productChidrenChildren.ProductWidth = z.ProductWidth;
                            productChidrenChildren.Quantity = z.Quantity;
                            productChidrenChildren.StatusId = statusNewIdProduct;
                            productChidrenChildren.TechniqueDescription = z.TechniqueDescription;
                            productChidrenChildren.TotalArea = z.TotalArea;
                            productChidrenChildren.ProductCode = z.ProductCode;
                            productChidrenChildren.ProductOrderWorkflowId = z.ProductOrderWorkflowId;
                            productChidrenChildren.ProductGroupCode = z.ProductGroupCode;
                            productChidrenChildren.Borehole = z.Borehole == null ? 0 : z.Borehole;
                            productChidrenChildren.Hole = z.Hole == null ? 0 : z.Hole;

                            productChidrenChildren.IsParent = false;
                            productChidrenChildren.IsSubParent = false;
                            var tecc = z.ListTechnique.OrderBy(cs => cs.TechniqueOrder).ToList();
                            if (tecc.Count > 0)
                            {
                                productChidrenChildren.StartId = tecc[0].TechniqueRequestId;
                            }


                            context.ProductionOrderMapping.Add(productChidrenChildren);

                            var productGroupCodeChildrenChildren = productChidrenChildren.ProductGroupCode.Trim().ToLower();

                            if (productChidrenChildren.TechniqueDescription == null)
                            {
                                productChidrenChildren.TechniqueDescription = "";
                            }
                            var listTechniqueDescriptionChildrenChildren = productChidrenChildren.TechniqueDescription.ToLower().Split(' ').ToList();

                            var techniqueDescriptionChildren2 = "";
                            listTechniqueDescriptionChildrenChildren.ForEach(e =>
                            {
                                techniqueDescriptionChildren2 = techniqueDescriptionChildren2 + e + " ";
                            });

                            // Thêm TechniqueRequestMapping (tiến trình)
                            z.ListTechnique.ForEach(tech =>
                            {
                                var techniqueRequest = new TechniqueRequestMapping();
                                techniqueRequest.CreatedById = parameter.UserId;
                                techniqueRequest.CreatedDate = DateTime.Now;
                                techniqueRequest.IsDefault = true;
                                techniqueRequest.ParentId = null;
                                techniqueRequest.ProductionOrderMappingId = productChidrenChildren.ProductionOrderMappingId;
                                techniqueRequest.Rate = tech.Rate;
                                techniqueRequest.TechniqueName = tech.TechniqueName;
                                techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                                techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                                techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                                techniqueRequest.TechniqueValue = null;
                                var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCodeChildrenChildren, techniqueDescriptionChildren2, productChidrenChildren, thichness);
                                techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                techniqueRequest.Thick = techniqueTemp.Thick;
                                techniqueRequest.Thin = techniqueTemp.Thin;
                                techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                                techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                                techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                                techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;
                                context.TechniqueRequestMapping.Add(techniqueRequest);
                            });
                        });

                    });

                    #endregion
                });

                context.SaveChanges();
                return new CreateProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductionOrderId = productionOrder.ProductionOrderId
                };
            }
            catch (Exception e)
            {
                return new CreateProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductionOrderResult UpdateProductionOrder(UpdateProductionOrderParameter parameter)
        {
            try
            {
                var commonProductOrderMapping = context.ProductionOrderMapping.ToList();
                var commonTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();
                var commonProductionOrder = context.ProductionOrder.ToList();
                var productionOrder = commonProductionOrder.FirstOrDefault(x =>
                    x.ProductionOrderId == parameter.ProductionOrder.ProductionOrderId);
                if (productionOrder == null)
                {
                    return new UpdateProductionOrderResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy lệnh sản xuát để sửa!"
                    };
                }
                var commonCategory = context.Category.ToList();
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                // Lấy danh sách trạng thái của lệnh sản xuất
                var statusCANCId = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusCOMPId = commonCategory.FirstOrDefault(x =>
                  x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                var statusPENDId = commonCategory.FirstOrDefault(x =>
                 x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;

                var statusPROCId = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "PROC").CategoryId;

                var statusNEWId = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                var statusDELAId = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "DELA").CategoryId;

                // Lấy trạng thái của item trong lệnh sản xuất
                var commonCategoryTypeItem = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusItemCANC = commonCategory.FirstOrDefault(x => x.CategoryCode == "CANC" &&
                                                                        x.CategoryTypeId == commonCategoryTypeItem
                                                                            .CategoryTypeId).CategoryId;
                var statusItemCOMP = commonCategory.FirstOrDefault(x => x.CategoryCode == "COMP" &&
                                                                        x.CategoryTypeId == commonCategoryTypeItem
                                                                            .CategoryTypeId).CategoryId;
                var statusItemPEND = commonCategory.FirstOrDefault(x => x.CategoryCode == "PEND" &&
                                                                        x.CategoryTypeId == commonCategoryTypeItem
                                                                            .CategoryTypeId).CategoryId;

                if (productionOrder.StatusId == statusCANCId || productionOrder.StatusId == statusCOMPId)
                {
                    return new UpdateProductionOrderResult()
                    {
                        Status = false,
                        Message = "Không thể sửa lệnh sản xuất có trạng thái này"
                    };
                }

                var isUpdateStausProduct = false;
                var isEspecially = false;
                var isEditNoteTechnique = false;

                #region Update danh lệnh sản xuất

                //Nếu trạng thái Lệnh sản xuất là Đang sản xuất
                if (productionOrder.StatusId == statusPROCId)
                {
                    if (parameter.ProductionOrder.StatusId == statusNEWId)
                    {
                        return new UpdateProductionOrderResult()
                        {
                            Status = false,
                            Message = "Trạng thái lệnh sản xuất đã thay đổi"
                        };
                    }

                    productionOrder.UpdatedById = parameter.UserId;
                    productionOrder.UpdatedDate = DateTime.Now;

                    if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                        productionOrder.StatusId == statusCOMPId)
                    {
                        productionOrder.Especially = false;
                    }

                    // Check xem đặc biệt có đổi k
                    if (productionOrder.Especially != parameter.ProductionOrder.Especially)
                    {
                        isEspecially = true;
                    }

                    // Check xem trạng thái của lệnh sản xuất có đổi k
                    if (productionOrder.StatusId != parameter.ProductionOrder.StatusId)
                    {
                        isUpdateStausProduct = true;
                    }

                    productionOrder.StatusId = parameter.ProductionOrder.StatusId;
                    productionOrder.Especially = parameter.ProductionOrder.Especially;
                }
                //Nếu trạng thái Lệnh sản xuất là Mới tạo
                else if (productionOrder.StatusId == statusNEWId)
                {
                    productionOrder.UpdatedById = parameter.UserId;
                    productionOrder.UpdatedDate = DateTime.Now;
                    productionOrder.CustomerName = parameter.ProductionOrder.CustomerName.Trim();
                    productionOrder.CustomerNumber = parameter.ProductionOrder.CustomerNumber;
                    productionOrder.EndDate = parameter.ProductionOrder.EndDate;

                    productionOrder.Note = parameter.ProductionOrder.Note == null
                        ? null
                        : parameter.ProductionOrder.Note.Trim();
                    if (productionOrder.NoteTechnique != parameter.ProductionOrder.NoteTechnique)
                    {
                        isEditNoteTechnique = true;
                    }

                    productionOrder.NoteTechnique = parameter.ProductionOrder.NoteTechnique == null
                        ? null
                        : parameter.ProductionOrder.NoteTechnique.Trim();
                    productionOrder.OrderId = parameter.ProductionOrder.OrderId;
                    productionOrder.PlaceOfDelivery = parameter.ProductionOrder.PlaceOfDelivery == null
                        ? null
                        : parameter.ProductionOrder.PlaceOfDelivery.Trim();
                    productionOrder.ProductionOrderCode = parameter.ProductionOrder.ProductionOrderCode;
                    productionOrder.ProductionOrderId = parameter.ProductionOrder.ProductionOrderId;
                    productionOrder.ReceivedDate = parameter.ProductionOrder.ReceivedDate;
                    productionOrder.StartDate = parameter.ProductionOrder.StartDate;

                    if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                        productionOrder.StatusId == statusCOMPId)
                    {
                        productionOrder.Especially = false;
                    }

                    // Check xem đặc biệt có đổi k
                    if (productionOrder.Especially != parameter.ProductionOrder.Especially)
                    {
                        isEspecially = true;
                    }

                    // Check xem trạng thái của lệnh sản xuất có đổi k
                    if (productionOrder.StatusId != parameter.ProductionOrder.StatusId)
                    {
                        isUpdateStausProduct = true;
                    }

                    productionOrder.StatusId = parameter.ProductionOrder.StatusId;
                    productionOrder.Especially = parameter.ProductionOrder.Especially;
                }
                //Nếu trạng thái Lệnh sản xuất là Hoãn
                else if (productionOrder.StatusId == statusPENDId)
                {
                    if (parameter.ProductionOrder.StatusId == statusNEWId)
                    {
                        return new UpdateProductionOrderResult()
                        {
                            Status = false,
                            Message = "Trạng thái lệnh sản xuất đã thay đổi, bạn hãy tải lại trang"
                        };
                    }

                    productionOrder.UpdatedById = parameter.UserId;
                    productionOrder.UpdatedDate = DateTime.Now;

                    if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                        productionOrder.StatusId == statusCOMPId)
                    {
                        productionOrder.Especially = false;
                    }

                    // Check xem trạng thái của lệnh sản xuất có đổi k
                    if (productionOrder.StatusId != parameter.ProductionOrder.StatusId)
                    {
                        isUpdateStausProduct = true;
                    }

                    productionOrder.StatusId = parameter.ProductionOrder.StatusId;
                }
                //Nếu trạng thái Lệnh sản xuất là Chậm tiến độ
                else if (productionOrder.StatusId == statusDELAId)
                {
                    if (parameter.ProductionOrder.StatusId == statusNEWId)
                    {
                        return new UpdateProductionOrderResult()
                        {
                            Status = false,
                            Message = "Trạng thái lệnh sản xuất đã thay đổi, bạn hãy tải lại trang"
                        };
                    }

                    productionOrder.UpdatedById = parameter.UserId;
                    productionOrder.UpdatedDate = DateTime.Now;

                    if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                        productionOrder.StatusId == statusCOMPId)
                    {
                        productionOrder.Especially = false;
                    }

                    // Check xem đặc biệt có đổi k
                    if (productionOrder.Especially != parameter.ProductionOrder.Especially)
                    {
                        isEspecially = true;
                    }

                    // Check xem trạng thái của lệnh sản xuất có đổi k
                    if (productionOrder.StatusId != parameter.ProductionOrder.StatusId)
                    {
                        isUpdateStausProduct = true;
                    }

                    productionOrder.StatusId = parameter.ProductionOrder.StatusId;
                    productionOrder.Especially = parameter.ProductionOrder.Especially;
                }

                #endregion

                context.ProductionOrder.Update(productionOrder);

                if (isEditNoteTechnique)
                {
                    var listProductItem = commonProductOrderMapping
                        .Where(x => x.ProductionOrderId == productionOrder.ProductionOrderId).ToList();
                    listProductItem.ForEach(item =>
                    {
                        item.TechniqueDescription =
                            item.TechniqueDescription.Substring(0, item.TechniqueDescription.LastIndexOf(";") + 1) +
                            productionOrder.NoteTechnique;
                    });

                }

                // Lấy mã trạng thái lệnh sản xuất khi update
                var statusCodeResult = context.Category.FirstOrDefault(x => x.CategoryId == productionOrder.StatusId)
                    .CategoryCode;

                // Check coi có được sửa trạng thái của item trong lệnh sản xuất k
                if (isUpdateStausProduct)
                {
                    #region Update trạng thái của item khi lệnh sản xuất thay đổi trạng thái

                    // Lấy danh sách tất cả các item trong lệnh sản xuât
                    var listProductItem = commonProductOrderMapping
                        .Where(x => x.ProductionOrderId == productionOrder.ProductionOrderId).ToList();
                    // Đổi trạng thái tất cả các item sang trạng thái lệnh sản xuât
                    listProductItem.ForEach(item =>
                    {
                        if (item.StatusId != statusItemCANC && item.StatusId != statusItemCOMP)
                        {
                            if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                                productionOrder.StatusId == statusCOMPId)
                            {
                                item.Especially = false;
                            }

                            item.StatusId = commonCategory.FirstOrDefault(x => x.CategoryCode == statusCodeResult &&
                                                                               x.CategoryTypeId ==
                                                                               commonCategoryTypeItem.CategoryTypeId)
                                .CategoryId;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;

                            context.ProductionOrderMapping.Update(item);
                        }
                    });

                    // Lấy danh sách tất cả các lệnh sản xuất bổ sung của lệnh sản xuất
                    var listProductionOrder = GetListChildrenProductionOrder(commonProductionOrder, productionOrder);
                    listProductionOrder.ForEach(item =>
                    {
                        if (item.StatusId != statusCANCId && item.StatusId != statusCOMPId)
                        {
                            if (productionOrder.StatusId == statusPENDId || productionOrder.StatusId == statusCANCId ||
                                productionOrder.StatusId == statusCOMPId)
                            {
                                item.Especially = false;
                            }
                            item.StatusId = productionOrder.StatusId;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;
                            context.ProductionOrder.Update(item);
                            var listProduct = commonProductOrderMapping
                                .Where(x => x.ProductionOrderId == item.ProductionOrderId).ToList();
                            listProduct.ForEach(x =>
                            {
                                if (x.StatusId != statusItemCANC && x.StatusId != statusItemCOMP)
                                {
                                    x.StatusId = commonCategory.FirstOrDefault(xs =>
                                        xs.CategoryCode == statusCodeResult &&
                                        xs.CategoryTypeId == commonCategoryTypeItem.CategoryTypeId).CategoryId;
                                    x.UpdatedById = parameter.UserId;
                                    x.UpdatedDate = DateTime.Now;

                                    context.ProductionOrderMapping.Update(x);
                                }
                            });
                        }
                    });

                    #endregion
                }

                // Nếu đổi đặc biệt của lệnh sản xuất thì đổi lại tất cả các lệnh bổ sung sang đặc biệt hoặc ngược lại
                if (isEspecially)
                {
                    // Lấy tất cả các lệnh sản xuất con
                    var listProductionOrderChildren =
                        GetListChildrenProductionOrder(commonProductionOrder, productionOrder);
                    listProductionOrderChildren.ForEach(item =>
                    {
                        if (item.StatusId != statusCANCId && item.StatusId != statusCOMPId &&
                            item.StatusId != statusPENDId)
                        {
                            item.Especially = productionOrder.Especially;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;
                            context.ProductionOrder.Update(item);
                        }
                    });

                    var listProduct = context.ProductionOrderMapping
                        .Where(x => x.ProductionOrderId == productionOrder.ProductionOrderId).ToList();
                    listProduct.ForEach(item =>
                    {
                        if (item.StatusId != statusItemCANC && item.StatusId != statusItemCOMP &&
                            item.StatusId != statusItemPEND)
                        {
                            item.Especially = productionOrder.Especially;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;

                            // Lấy tất cả các item con
                            var listChildrenItem = GetListChildrenItem(commonProductOrderMapping, item);
                            listChildrenItem.ForEach(children =>
                            {
                                if (children.StatusId != statusItemCANC && children.StatusId != statusItemCOMP &&
                                    children.StatusId != statusItemPEND)
                                {
                                    children.Especially = productionOrder.Especially;
                                    children.UpdatedById = parameter.UserId;
                                    children.UpdatedDate = DateTime.Now;

                                    context.ProductionOrderMapping.Update(children);
                                }
                            });

                            context.ProductionOrderMapping.Update(item);
                        }
                    });
                }

                context.SaveChanges();

                return new UpdateProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    StatusProdutionCode = statusCodeResult
                };
            }
            catch (Exception e)
            {
                return new UpdateProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateItemInProductionResult UpdateItemInProduction(UpdateItemInProductionParameter parameter)
        {
            try
            {
                // Trước khi đổi trạng thái item check xem trạng thái của lệnh sản xuất có khác hoàn thành và hủy không
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                // Lấy danh sách trạng thái của lệnh sản xuất hủy và hoàn thành
                var statusCANCId = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusCOMPId = context.Category.FirstOrDefault(x =>
                  x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                // Trạng thái của item trong lệnh sản xuất
                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                // Lấy danh sách trạng thái hoãn của item
                var statusCancelIdProduct = context.Category.FirstOrDefault(x =>
                x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusComplateIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                var statusNewIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                // Lấy item update
                var commonListProductItem = context.ProductionOrderMapping.ToList();
                var product = commonListProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == parameter.ProductItem.ProductionOrderMappingId);

                // Lấy lệnh sản xuất chứa item
                var productOrder = context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == product.ProductionOrderId);

                if (productOrder.StatusId == statusCANCId || productOrder.StatusId == statusCOMPId)
                {
                    return new UpdateItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                if (product.StatusId != statusNewIdProduct)
                {
                    return new UpdateItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item ở trạng thái này!"
                    };
                }
                if (product == null)
                {
                    return new UpdateItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy item này!"
                    };
                }

                var listTechniqueMapping = context.TechniqueRequestMapping.ToList();
                var listTechnique = context.TechniqueRequest.ToList();
                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                if (parameter.ProductItem.ParentId == null)
                {
                    var listProductChildren = commonListProductItem.Where(x => x.ParentPartId == parameter.ProductItem.ProductionOrderMappingId).ToList();
                    listProductChildren.ForEach(item =>
                    {
                        item.ProductLength = parameter.ProductItem.ProductLength;
                        item.ProductWidth = parameter.ProductItem.ProductWidth;
                        item.Quantity = parameter.ProductItem.Quantity;
                        item.TotalArea = parameter.ProductItem.TotalArea;
                        item.UpdatedById = parameter.UserId;
                        item.UpdatedDate = DateTime.Now;
                        item.Borehole = parameter.ProductItem.Borehole;
                        item.Hole = parameter.ProductItem.Hole;
                        item.ProductGroupCode = parameter.ProductItem.ProductGroupCode;

                        var productGroupCodeChildren = item.ProductGroupCode.Trim().ToLower();
                        if (item.TechniqueDescription == null)
                        {
                            item.TechniqueDescription = "";
                        }
                        var listTechniqueDescriptionChildren = item.TechniqueDescription.ToLower().Split(' ').ToList();

                        var techniqueDescriptionChildren = "";
                        listTechniqueDescriptionChildren.ForEach(e =>
                        {
                            techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                        });

                        var listTechniqueMapChildren = listTechniqueMapping.Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();
                        listTechniqueMapChildren.ForEach(technique =>
                        {
                            var techniqueTemp = AddTechnique(listTechnique, technique, productGroupCodeChildren, techniqueDescriptionChildren, item, thichness);
                            technique.EspeciallyThick = techniqueTemp.EspeciallyThick;
                            technique.Thick = techniqueTemp.Thick;
                            technique.Thin = techniqueTemp.Thin;
                            technique.EspeciallyThin = techniqueTemp.EspeciallyThin;
                            technique.BoreholeThick = techniqueTemp.BoreholeThick;
                            technique.BoreholeThin = techniqueTemp.BoreholeThin;
                            technique.OriginalThick = techniqueTemp.OriginalThick;
                            technique.OriginalThin = techniqueTemp.OriginalThin;

                            context.TechniqueRequestMapping.Update(technique);
                        });


                        context.ProductionOrderMapping.Update(item);
                    });
                    var listChildrenId = listProductChildren.Select(x => x.ProductionOrderMappingId).ToList();
                    var listProductChildrenChildren = commonListProductItem.Where(x => x.ParentPartId != null && listChildrenId.Contains((Guid)x.ParentPartId)).ToList();
                    listProductChildrenChildren.ForEach(item =>
                    {
                        item.ProductLength = parameter.ProductItem.ProductLength;
                        item.ProductWidth = parameter.ProductItem.ProductWidth;
                        item.Quantity = parameter.ProductItem.Quantity;
                        item.TotalArea = parameter.ProductItem.TotalArea;
                        item.UpdatedById = parameter.UserId;
                        item.UpdatedDate = DateTime.Now;
                        item.Borehole = parameter.ProductItem.Borehole;
                        item.Hole = parameter.ProductItem.Hole;
                        item.ProductGroupCode = parameter.ProductItem.ProductGroupCode;

                        var productGroupCodeChildren = item.ProductGroupCode.Trim().ToLower();
                        if (item.TechniqueDescription == null)
                        {
                            item.TechniqueDescription = "";
                        }
                        var listTechniqueDescriptionChildren = item.TechniqueDescription.ToLower().Split(' ').ToList();

                        var techniqueDescriptionChildren = "";
                        listTechniqueDescriptionChildren.ForEach(e =>
                        {
                            techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                        });

                        var listTechniqueMapChildren = listTechniqueMapping.Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();
                        listTechniqueMapChildren.ForEach(technique =>
                        {
                            var techniqueTemp = AddTechnique(listTechnique, technique, productGroupCodeChildren, techniqueDescriptionChildren, item, thichness);
                            technique.EspeciallyThick = techniqueTemp.EspeciallyThick;
                            technique.Thick = techniqueTemp.Thick;
                            technique.Thin = techniqueTemp.Thin;
                            technique.EspeciallyThin = techniqueTemp.EspeciallyThin;
                            technique.BoreholeThick = techniqueTemp.BoreholeThick;
                            technique.BoreholeThin = techniqueTemp.BoreholeThin;
                            technique.OriginalThick = techniqueTemp.OriginalThick;
                            technique.OriginalThin = techniqueTemp.OriginalThin;

                            context.TechniqueRequestMapping.Update(technique);
                        });


                        context.ProductionOrderMapping.Update(item);
                    });
                }


                product.ProductColorCode = parameter.ProductItem.ProductColorCode;
                product.ProductLength = parameter.ProductItem.ProductLength;
                product.ProductName = parameter.ProductItem.ProductName;
                product.ProductThickness = parameter.ProductItem.ProductThickness;
                product.ProductWidth = parameter.ProductItem.ProductWidth;
                product.Quantity = parameter.ProductItem.Quantity;
                product.StatusId = parameter.ProductItem.StatusId;
                product.TechniqueDescription = parameter.ProductItem.TechniqueDescription;
                product.TotalArea = parameter.ProductItem.TotalArea;
                product.Borehole = parameter.ProductItem.Borehole;
                product.Hole = parameter.ProductItem.Hole;
                product.ProductGroupCode = parameter.ProductItem.ProductGroupCode;
                product.UpdatedById = parameter.UserId;
                product.UpdatedDate = DateTime.Now;

                context.ProductionOrderMapping.Update(product);

                var productGroupCode = product.ProductGroupCode.Trim().ToLower();
                if (product.TechniqueDescription == null)
                {
                    product.TechniqueDescription = "";
                }
                var listTechniqueDescription = product.TechniqueDescription.ToLower().Split(' ').ToList();

                var techniqueDescription = "";
                listTechniqueDescription.ForEach(e =>
                {
                    techniqueDescription = techniqueDescription + e + " ";
                });

                var listTechniqueMap = listTechniqueMapping.Where(x => x.ProductionOrderMappingId == product.ProductionOrderMappingId).ToList();

                listTechniqueMap.ForEach(technique =>
                {
                    var techniqueTemp = AddTechnique(listTechnique, technique, productGroupCode, techniqueDescription, product, thichness);
                    technique.EspeciallyThick = techniqueTemp.EspeciallyThick;
                    technique.Thick = techniqueTemp.Thick;
                    technique.Thin = techniqueTemp.Thin;
                    technique.EspeciallyThin = techniqueTemp.EspeciallyThin;
                    technique.BoreholeThick = techniqueTemp.BoreholeThick;
                    technique.BoreholeThin = techniqueTemp.BoreholeThin;
                    technique.OriginalThick = techniqueTemp.OriginalThick;
                    technique.OriginalThin = techniqueTemp.OriginalThin;

                    context.TechniqueRequestMapping.Update(technique);
                });

                context.SaveChanges();

                return new UpdateItemInProductionResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateItemInProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }
        /// <summary>
        /// Hoãn item trong lệnh sản xuất
        /// </summary>
        /// <param name="parameter"></param>
        /// <returns></returns>
        public UpdateStatusItemStopResult UpdateStatusItemStop(UpdateStatusItemStopParameter parameter)
        {
            try
            {
                Guid? productOrderStatusId = null;
                var commonProductionOrder = context.ProductionOrder.ToList();
                // Trước khi đổi trạng thái item check xem trạng thái của lệnh sản xuất có khác hoàn thành và hủy không
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                // Lấy danh sách trạng thái của lệnh sản xuất hủy và hoàn thành
                var statusCANCId = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusCOMPId = context.Category.FirstOrDefault(x =>
                  x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                // Trạng thái của item trong lệnh sản xuất
                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                // Lấy danh sách trạng thái hoãn của item
                var statusPENDIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;

                var statusCancelIdProduct = context.Category.FirstOrDefault(x =>
                x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusComplateIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                var commonProductItem = context.ProductionOrderMapping.ToList();
                var itemUpdate = commonProductItem.FirstOrDefault(x =>
                    x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);

                // Lấy lệnh sản xuất chứa item
                var productOrder =
                    commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == itemUpdate.ProductionOrderId);
                if (productOrder.StatusId == statusCANCId || productOrder.StatusId == statusCOMPId)
                {
                    return new UpdateStatusItemStopResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                if (itemUpdate == null)
                {
                    return new UpdateStatusItemStopResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy sản phẩm này!"
                    };
                }

                if (itemUpdate.StatusId == statusCancelIdProduct || itemUpdate.StatusId == statusComplateIdProduct)
                {
                    return new UpdateStatusItemStopResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item ở trạng thái này!"
                    };
                }

                itemUpdate.StatusId = statusPENDIdProduct;
                itemUpdate.UpdatedById = parameter.UserId;
                itemUpdate.UpdatedDate = DateTime.Now;
                itemUpdate.Especially = false;

                context.ProductionOrderMapping.Update(itemUpdate);


                var listProductChildren = GetListChildrenItem(commonProductItem, itemUpdate);
                listProductChildren.ForEach(item =>
                {
                    var productionOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                    if (productionOrder.StatusId != statusCANCId && productionOrder.StatusId != statusCOMPId)
                    {
                        if (item.StatusId != statusCancelIdProduct && item.StatusId != statusComplateIdProduct)
                        {
                            item.StatusId = statusPENDIdProduct;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;
                            item.Especially = false;

                            context.ProductionOrderMapping.Update(item);

                            // Lấy danh sách tất cả các item trong lệnh sản xuất
                            var listItemProduct = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == productionOrder.ProductionOrderId).ToList();
                            bool isChange = false;

                            // Check xem tất cả trạng thái item có phải là hủy, hoãn và hoàn thành hết không 
                            var productList = listItemProduct.FirstOrDefault(x => x.StatusId != statusPENDIdProduct && x.StatusId != statusComplateIdProduct
                                                                                                    && x.StatusId != statusCancelIdProduct);
                            if (productList == null)
                            {
                                isChange = true;
                            }

                            // Nếu tất cả item ở trạng thái hủy và hoàn thành hết 
                            if (isChange)
                            {
                                var productComplate = listItemProduct.FirstOrDefault(x => x.StatusId == statusComplateIdProduct);
                                var commonProductOrder = context.ProductionOrder.ToList();
                                var statusProductionOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                                // Lấy id trạng thái lệnh sản xuất là hủy
                                var statusProductionOrderCANCId = context.Category.FirstOrDefault(x =>
                                                        x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                                // Lấy id trạng thái hoàn thành của lệnh sản xuất
                                var statusProductionOrderCOMPId = context.Category.FirstOrDefault(x =>
                                                       x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                                var statusProductionOrderPENDId = context.Category.FirstOrDefault(x =>
                                                       x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;

                                // Sửa trạng thái lệnh sản xuất sang hoãn
                                productionOrder.StatusId = statusProductionOrderPENDId;
                                productionOrder.UpdatedDate = DateTime.Now;
                                productionOrder.Especially = false;
                                productionOrder.UpdatedById = parameter.UserId;

                                context.ProductionOrder.Update(productOrder);
                            }

                        }
                    }
                });

                #region Đổi trạng thái của lệnh sản xuất sang trạng thái sang hoãn

                // Lấy danh sách tất cả các item trong lệnh sản xuất
                var listItem = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == itemUpdate.ProductionOrderId).ToList();
                bool isChangeStatusProductionOrder = false;

                // Check xem tất cả trạng thái item có phải là hủy, hoãn và hoàn thành hết không 
                var product = listItem.FirstOrDefault(x => x.StatusId != statusPENDIdProduct && x.StatusId != statusComplateIdProduct
                                                                                        && x.StatusId != statusCancelIdProduct);
                if (product == null)
                {
                    isChangeStatusProductionOrder = true;
                }

                // Nếu tất cả item ở trạng thái hủy và hoàn thành hết 
                if (isChangeStatusProductionOrder)
                {
                    var productComplate = listItem.FirstOrDefault(x => x.StatusId == statusComplateIdProduct);
                    var commonProductOrder = context.ProductionOrder.ToList();
                    var statusProductionOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                    // Lấy id trạng thái lệnh sản xuất là hủy
                    var statusProductionOrderCANCId = context.Category.FirstOrDefault(x =>
                                            x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                    // Lấy id trạng thái hoàn thành của lệnh sản xuất
                    var statusProductionOrderCOMPId = context.Category.FirstOrDefault(x =>
                                           x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                    var statusProductionOrderPENDId = context.Category.FirstOrDefault(x =>
                                           x.CategoryTypeId == statusProductionOrder.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;

                    // Sửa trạng thái lệnh sản xuất sang hoãn
                    productOrder.StatusId = statusProductionOrderPENDId;
                    productOrder.UpdatedDate = DateTime.Now;
                    productOrder.UpdatedById = parameter.UserId;
                    productOrder.Especially = false;

                    productOrderStatusId = statusProductionOrderPENDId;
                    context.ProductionOrder.Update(productOrder);
                }

                #endregion

                context.SaveChanges();

                return new UpdateStatusItemStopResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductionOrderStatusId = productOrderStatusId
                };
            }
            catch (Exception e)
            {
                return new UpdateStatusItemStopResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateStatusItemCancelResult UpdateStatusItemCancel(UpdateStatusItemCancelParameter parameter)
        {
            try
            {
                Guid? productOrderStatusId = null;
                // Trước khi đổi trạng thái item check xem trạng thái của lệnh sản xuất có khác hoàn thành và hủy không
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var commonCategory = context.Category.ToList();
                var commonProductionOrder = context.ProductionOrder.ToList();

                // Lấy danh sách trạng thái của lệnh sản xuất hủy và hoàn thành
                var statusCANCId = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusCOMPId = commonCategory.FirstOrDefault(x =>
                  x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                var statusPENDId = commonCategory.FirstOrDefault(x =>
                 x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;
                var statusPROCId = commonCategory.FirstOrDefault(x =>
                 x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "PROC").CategoryId;

                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                // Lấy danh sách trạng thái hủy và hoàn thành của item
                var statusCANCProduct = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                var statusComplateIdProduct = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                var statusPROCIdProduct = commonCategory.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "PROC").CategoryId;
                var statusPENDIdProduct = commonCategory.FirstOrDefault(x =>
                   x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "PEND").CategoryId;

                // Lấy item cần sửa
                var itemUpdate = context.ProductionOrderMapping.FirstOrDefault(x => x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);

                // Lấy lệnh sản xuất chứa item
                var productOrder = context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == itemUpdate.ProductionOrderId);
                if (productOrder.StatusId == statusCANCId || productOrder.StatusId == statusCOMPId)
                {
                    return new UpdateStatusItemCancelResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                if (itemUpdate == null)
                {
                    return new UpdateStatusItemCancelResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy sản phẩm này!"
                    };
                }

                if (itemUpdate.StatusId == statusComplateIdProduct || itemUpdate.StatusId == statusCANCProduct)
                {
                    return new UpdateStatusItemCancelResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item ở trạng thái này!"
                    };
                }

                itemUpdate.StatusId = statusCANCProduct;
                itemUpdate.UpdatedById = parameter.UserId;
                itemUpdate.Especially = false;
                itemUpdate.UpdatedDate = DateTime.Now;


                context.ProductionOrderMapping.Update(itemUpdate);

                var commonProductItem = context.ProductionOrderMapping.ToList();

                var listProductChildren = GetListChildrenItem(commonProductItem, itemUpdate);
                listProductChildren.ForEach(item =>
                {
                    var productionOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                    if (productionOrder.StatusId != statusCANCId && productionOrder.StatusId != statusCOMPId)
                    {
                        if (item.StatusId != statusCANCProduct && item.StatusId != statusComplateIdProduct)
                        {

                            item.StatusId = statusCANCProduct;
                            item.UpdatedById = parameter.UserId;
                            item.UpdatedDate = DateTime.Now;
                            item.Especially = false;

                            context.ProductionOrderMapping.Update(item);


                            // Lấy danh sách tất cả các item trong lệnh sản xuất
                            var listProductItem = commonProductItem.Where(x => x.ProductionOrderId == productionOrder.ProductionOrderId).ToList();
                            bool isChange = false;

                            // Check xem tất cả trạng thái item có phải là hủy và hoàn thành hết không 
                            var productItemList = listProductItem.Where(x => x.StatusId != statusCANCProduct && x.StatusId != statusComplateIdProduct).ToList();
                            if (productItemList.Count == 0)
                            {
                                isChange = true;
                            }

                            // Nếu tất cả item ở trạng thái hủy và hoàn thành hết 
                            if (isChange)
                            {
                                var productComplate = listProductItem.FirstOrDefault(x => x.StatusId == statusComplateIdProduct);
                                var commonProductOrder = context.ProductionOrder.ToList();

                                // Nếu tất cả item trong lệnh sản xuất là hủy 
                                if (productComplate == null)
                                {
                                    // Đổi lệnh sản xuất sang trạng thái hủy
                                    productionOrder.StatusId = statusCANCId;
                                    productionOrder.UpdatedDate = DateTime.Now;
                                    productionOrder.UpdatedById = parameter.UserId;
                                    productionOrder.Especially = false;
                                    context.ProductionOrder.Update(productionOrder);
                                    // End
                                }
                                else
                                {
                                    // Đổi lệnh sản xuất sang trạng thái hoàn thành
                                    productionOrder.StatusId = statusCOMPId;
                                    productionOrder.UpdatedDate = DateTime.Now;
                                    productionOrder.UpdatedById = parameter.UserId;
                                    productionOrder.Especially = false;
                                    context.ProductionOrder.Update(productionOrder);
                                    // End
                                }
                            }
                            else
                            {
                                // Nếu chứa 1 lệnh sản xuất là đang sản xuất thì đổi trạng thái lệnh sản xuất sang đang sản xuất
                                if (productItemList.FirstOrDefault(x => x.StatusId == statusPROCIdProduct) != null)
                                {
                                    // Đổi lệnh sản xuất sang trạng thái đang sản xuất
                                    productionOrder.StatusId = statusPROCId;
                                    productionOrder.UpdatedDate = DateTime.Now;
                                    productionOrder.UpdatedById = parameter.UserId;

                                    context.ProductionOrder.Update(productionOrder);
                                }
                                else
                                {
                                    var change = true;
                                    productItemList.ForEach(xs =>
                                    {
                                        if (xs.StatusId != statusPENDIdProduct)
                                        {
                                            change = false;
                                        }
                                    });

                                    if (change == true)
                                    {
                                        // Đổi lệnh sản xuất sang trạng thái hoãn
                                        productionOrder.StatusId = statusPENDId;
                                        productionOrder.Especially = false;
                                        productionOrder.UpdatedDate = DateTime.Now;
                                        productionOrder.UpdatedById = parameter.UserId;
                                        context.ProductionOrder.Update(productionOrder);
                                    }
                                }
                            }
                        }
                    }
                });

                #region Đổi trạng thái của lệnh sản xuất sang trạng thái đang sản xuất

                // Lấy danh sách tất cả các item trong lệnh sản xuất
                var listItem = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == itemUpdate.ProductionOrderId).ToList();
                bool isChangeStatusProductionOrder = false;

                // Check xem tất cả trạng thái item có phải là hủy và hoàn thành hết không 
                var product = listItem.Where(x => x.StatusId != statusCANCProduct && x.StatusId != statusComplateIdProduct).ToList();
                if (product.Count == 0)
                {
                    isChangeStatusProductionOrder = true;
                }

                // Nếu tất cả item ở trạng thái hủy và hoàn thành hết 
                if (isChangeStatusProductionOrder)
                {
                    var productComplate = listItem.FirstOrDefault(x => x.StatusId == statusComplateIdProduct);
                    var commonProductOrder = context.ProductionOrder.ToList();

                    // Nếu tất cả item trong lệnh sản xuất là hủy 
                    if (productComplate == null)
                    {
                        // Đổi lệnh sản xuất sang trạng thái hủy
                        productOrder.StatusId = statusCANCId;
                        productOrder.UpdatedDate = DateTime.Now;
                        productOrder.Especially = false;
                        productOrder.UpdatedById = parameter.UserId;
                        productOrderStatusId = statusCANCId;
                        context.ProductionOrder.Update(productOrder);
                        // End
                    }
                    else
                    {
                        // Đổi lệnh sản xuất sang trạng thái hoàn thành
                        productOrder.StatusId = statusCOMPId;
                        productOrder.UpdatedDate = DateTime.Now;
                        productOrder.UpdatedById = parameter.UserId;
                        productOrder.Especially = false;
                        productOrderStatusId = statusCOMPId;
                        context.ProductionOrder.Update(productOrder);
                        // End
                    }
                }
                else
                {
                    // Nếu chứa 1 lệnh sản xuất là đang sản xuất thì đổi trạng thái lệnh sản xuất sang đang sản xuất
                    if (product.FirstOrDefault(x => x.StatusId == statusPROCIdProduct) != null)
                    {
                        // Đổi lệnh sản xuất sang trạng thái đang sản xuất
                        productOrder.StatusId = statusPROCId;
                        productOrder.UpdatedDate = DateTime.Now;
                        productOrder.UpdatedById = parameter.UserId;
                        productOrderStatusId = statusPROCId;
                        context.ProductionOrder.Update(productOrder);
                    }
                    else
                    {
                        var change = true;
                        product.ForEach(item =>
                        {
                            if (item.StatusId != statusPENDIdProduct)
                            {
                                change = false;
                            }
                        });

                        if (change == true)
                        {
                            // Đổi lệnh sản xuất sang trạng thái hoàn thành
                            productOrder.StatusId = statusPENDId;
                            productOrder.UpdatedDate = DateTime.Now;
                            productOrder.UpdatedById = parameter.UserId;
                            productOrder.Especially = false;
                            productOrderStatusId = statusPENDId;
                            context.ProductionOrder.Update(productOrder);
                        }
                    }
                }

                #endregion

                context.SaveChanges();

                return new UpdateStatusItemCancelResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductionOrderStatusId = productOrderStatusId
                };
            }
            catch (Exception e)
            {
                return new UpdateStatusItemCancelResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateStatusItemWorkingResult UpdateStatusItemWorking(UpdateStatusItemWorkingParameter parameter)
        {
            try
            {
                Guid? productOrderStatusId = null;
                // Trước khi đổi trạng thái item check xem trạng thái của lệnh sản xuất có khác hoàn thành và hủy không
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                // Lấy danh sách trạng thái của lệnh sản xuất hủy và hoàn thành
                var statusCANCId = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;

                var statusCOMPId = context.Category.FirstOrDefault(x =>
                  x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;

                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                var statusPROCId = context.Category.FirstOrDefault(x =>
                                        x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "PROC").CategoryId;

                // Lấy danh sách trạng thái hủy của item
                var statusIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                var statusComplateIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                var statusPROCIdProduct = context.Category.FirstOrDefault(x =>
                  x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "PROC").CategoryId;

                var commonProductItem = context.ProductionOrderMapping.ToList();
                var itemUpdate = commonProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);

                var commonProductionOrder = context.ProductionOrder.ToList();
                var productOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == itemUpdate.ProductionOrderId);
                if (productOrder.StatusId == statusCANCId || productOrder.StatusId == statusCOMPId)
                {
                    return new UpdateStatusItemWorkingResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                if (itemUpdate == null)
                {
                    return new UpdateStatusItemWorkingResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy sản phẩm này!"
                    };
                }

                if (itemUpdate.StatusId == statusComplateIdProduct || itemUpdate.StatusId == statusIdProduct)
                {
                    return new UpdateStatusItemWorkingResult()
                    {
                        Status = false,
                        Message = "Không thể sửa item ở trạng thái này!"
                    };
                }

                itemUpdate.StatusId = statusPROCIdProduct;
                itemUpdate.UpdatedById = parameter.UserId;
                itemUpdate.UpdatedDate = DateTime.Now;

                context.ProductionOrderMapping.Update(itemUpdate);

                var listProductChildren = GetListChildrenItem(commonProductItem, itemUpdate);
                listProductChildren.ForEach(item =>
                {
                    if (item.StatusId != statusIdProduct && item.StatusId != statusComplateIdProduct)
                    {
                        #region Đổi trạng thái của item sang trạng thái đang sản xuất

                        // Đổi trạng thái lệnh sản xuất sang đang sản xuất
                        item.StatusId = statusPROCIdProduct;
                        item.UpdatedDate = DateTime.Now;
                        item.UpdatedById = parameter.UserId;
                        context.ProductionOrderMapping.Update(item);

                        #endregion
                    }

                    //var productionOrder2 =
                    //    commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                    //if (productionOrder2.StatusId != statusCANCId && productionOrder2.StatusId != statusCOMPId)
                    //{
                    //    if (item.StatusId != statusIdProduct && item.StatusId != statusComplateIdProduct)
                    //    {
                    //        #region Đổi trạng thái của lệnh sản xuất sang trạng thái đang sản xuất

                    //        // Đổi trạng thái lệnh sản xuất sang đang sản xuất
                    //        productionOrder2.StatusId = statusPROCId;
                    //        productionOrder2.UpdatedDate = DateTime.Now;
                    //        productionOrder2.UpdatedById = parameter.UserId;
                    //        context.ProductionOrder.Update(productionOrder2);

                    //        #endregion
                    //    }
                    //}
                });

                #region Đổi trạng thái của lệnh sản xuất sang trạng thái đang sản xuất

                var productionOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == itemUpdate.ProductionOrderId);

                // Đổi trạng thái lệnh sản xuất sang đang sản xuất
                productionOrder.StatusId = statusPROCId;
                productOrder.UpdatedDate = DateTime.Now;
                productOrder.UpdatedById = parameter.UserId;
                productOrderStatusId = statusPROCId;
                context.ProductionOrder.Update(productionOrder);

                #endregion

                context.SaveChanges();

                return new UpdateStatusItemWorkingResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductionOrderStatusId = productOrderStatusId
                };
            }
            catch (Exception e)
            {
                return new UpdateStatusItemWorkingResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public PlusItemResult PlusItem(PlusItemParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    var productionOrderHistory = new ProductionOrderHistory();
                    productionOrderHistory.ProductionOrderHistoryId = Guid.NewGuid();
                    productionOrderHistory.ParentId = parameter.ProductionOrderHistory.ParentId;
                    productionOrderHistory.ParentType = parameter.ProductionOrderHistory.ParentType;
                    productionOrderHistory.ProductionOrderId = parameter.ProductionOrderHistory.ProductionOrderId;
                    productionOrderHistory.ProductionOrderMappingId =
                        parameter.ProductionOrderHistory.ProductionOrderMappingId;
                    productionOrderHistory.TechniqueRequestId = parameter.ProductionOrderHistory.TechniqueRequestId;
                    productionOrderHistory.CalculatorType = parameter.ProductionOrderHistory.CalculatorType;
                    productionOrderHistory.IsError = null;
                    productionOrderHistory.Description = null;
                    productionOrderHistory.QuantityUnitErr = null;
                    productionOrderHistory.Thin = null;
                    productionOrderHistory.Thick = null;
                    productionOrderHistory.EspeciallyThin = null;
                    productionOrderHistory.EspeciallyThick = null;
                    productionOrderHistory.BoreholeThin = null;
                    productionOrderHistory.BoreholeThick = null;
                    productionOrderHistory.OriginalThin = null;
                    productionOrderHistory.OriginalThick = null;
                    productionOrderHistory.OriginalId = parameter.ProductionOrderHistory.OriginalId;
                    productionOrderHistory.IsParent = parameter.ProductionOrderHistory.IsParent;
                    productionOrderHistory.IsSubParent = parameter.ProductionOrderHistory.IsSubParent;
                    productionOrderHistory.IdChildrent = parameter.ProductionOrderHistory.IdChildrent;
                    productionOrderHistory.ParentPartId = parameter.ProductionOrderHistory.ParentPartId;
                    productionOrderHistory.ParentExtendId = parameter.ProductionOrderHistory.ParentExtendId;
                    productionOrderHistory.IsAddPart = parameter.ProductionOrderHistory.IsAddPart;
                    productionOrderHistory.Present = parameter.ProductionOrderHistory.Present;
                    productionOrderHistory.CreatedDate = DateTime.Now;
                    productionOrderHistory.CreatedById = parameter.UserId;

                    #region Lấy các giá trị đặc biệt của Item ở các tiến trình

                    var techniqueRequestMapping = context.TechniqueRequestMapping.FirstOrDefault(x =>
                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId &&
                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId);

                    productionOrderHistory.Thin = techniqueRequestMapping.Thin;
                    productionOrderHistory.Thick = techniqueRequestMapping.Thick;
                    productionOrderHistory.EspeciallyThin = techniqueRequestMapping.EspeciallyThin;
                    productionOrderHistory.EspeciallyThick = techniqueRequestMapping.EspeciallyThick;
                    productionOrderHistory.BoreholeThin = techniqueRequestMapping.BoreholeThin;
                    productionOrderHistory.BoreholeThick = techniqueRequestMapping.BoreholeThick;
                    productionOrderHistory.OriginalThin = techniqueRequestMapping.OriginalThin;
                    productionOrderHistory.OriginalThick = techniqueRequestMapping.OriginalThick;

                    #endregion

                    context.ProductionOrderHistory.Add(productionOrderHistory);
                    context.SaveChanges();

                    #region Kiểm tra và thay đổi trạng thái của Item

                    var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var statusLsxType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                    var listAllStatusItem = context.Category.Where(x => x.CategoryTypeId == statusItemType.CategoryTypeId)
                        .ToList();
                    var statusCompItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "COMP")
                        .CategoryId;
                    var statusCancItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "CANC")
                        .CategoryId;
                    var statusPendItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PEND")
                        .CategoryId;

                    var listAllStatusLsx = context.Category.Where(x => x.CategoryTypeId == statusLsxType.CategoryTypeId)
                        .ToList();
                    var statusCompLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryCode == "COMP")
                        .CategoryId;
                    var statusCancLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryCode == "CANC")
                        .CategoryId;
                    var statusPendLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryCode == "PEND")
                        .CategoryId;

                    //Lấy list all lsx
                    var listAllProductionOrder = context.ProductionOrder.ToList();

                    var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                    var listAllProductionOrderMapping = context.ProductionOrderMapping.ToList();

                    var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();

                    //Kiểm tra trạng thái của Item nếu là Mới tạo thì chuyển sang Đang sản xuất
                    var item = listAllProductionOrderMapping.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == productionOrderHistory.ProductionOrderMappingId);
                    var statusItem = listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId).CategoryCode;

                    //Lệnh sản xuất mà Item gắn với nó
                    var lsx = listAllProductionOrder.FirstOrDefault(x =>
                        x.ProductionOrderId == productionOrderHistory.ProductionOrderId);

                    #region Phân loại item

                    var isItemExtend = false; //false: Item không phải bổ sung; true: Item bổ sung

                    if (productionOrderHistory.ParentId == null)
                    {
                        isItemExtend = false;   //Item không phải bổ sung
                    }
                    else
                    {
                        isItemExtend = true;    //Item bổ sung
                    }

                    /*
                     * typeItem:
                     * - 1: Item cha gốc
                     * - 2: Item không có bán thành phẩm
                     * - 3: Item bán thành phẩm (không có con)
                     * - 4: Item bán thành phẩm (có con)
                     */
                    var typeItem = 0;
                    if (productionOrderHistory.IsParent == true)
                    {
                        typeItem = 1; //Item cha gốc
                    }
                    else if (productionOrderHistory.IsParent != true && productionOrderHistory.IsSubParent != true)
                    {
                        if (productionOrderHistory.ParentPartId != null)
                        {
                            typeItem = 3; //Item bán thành phẩm (không có con)
                        }
                        else
                        {
                            typeItem = 2; //Item không có bán thành phẩm
                        }
                    }
                    else if (productionOrderHistory.IsParent != true && productionOrderHistory.IsSubParent == true)
                    {
                        typeItem = 4; //Item bán thành phẩm (có con)
                    }

                    #endregion

                    #region Kiểm tra trạng thái Lệnh sản xuất và Lệnh tổng trước khi cập nhật

                    //Trước khi cập nhật trạng thái của Item thì kiểm tra trạng thái của Lệnh sản xuất
                    var statusLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryId == lsx.StatusId);

                    if (statusLsx.CategoryCode != "NEW" && statusLsx.CategoryCode != "PROC" &&
                        statusLsx.CategoryCode != "DELA")
                    {
                        return new PlusItemResult()
                        {
                            Status = false,
                            Message = "Không thể thao tác vì Trạng thái lệnh sản xuất đã thay đổi sang " + statusLsx.CategoryName,
                        };
                    }

                    #endregion

                    //Kiểm tra xem item có đang ở tiến trình cuối cùng trong quy trình không?
                    var finalTechniqueRequest = listAllTechniqueRequestMapping.Where(x =>
                        x.ProductionOrderMappingId == productionOrderHistory.ProductionOrderMappingId &&
                        x.ParentId == null).OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                    #region Lấy ra các Tiến trình và Rate gắn với Item

                    var listCurrentTechniqueRequest = listAllTechniqueRequestMapping
                        .Where(x => x.ProductionOrderMappingId ==
                                    productionOrderHistory.ProductionOrderMappingId && x.ParentId == null)
                        .Select(y => new TechniqueRequestMappingEntityModel
                        {
                            TechniqueRequestId = y.TechniqueRequestId,
                            TechniqueName = y.TechniqueName,
                            TechniqueOrder = y.TechniqueOrder,
                            Rate = y.Rate,
                            UnitQuantity = 0,
                        }).OrderByDescending(z => z.TechniqueOrder).ToList();

                    var count = listCurrentTechniqueRequest.Count;

                    for (var i = 0; i <= count - 1; i++)
                    {
                        if (i == 0)
                        {
                            listCurrentTechniqueRequest[0].UnitQuantity = item.Quantity;
                        }
                        else
                        {
                            listCurrentTechniqueRequest[i].UnitQuantity =
                                listCurrentTechniqueRequest[i - 1].UnitQuantity *
                                listCurrentTechniqueRequest[i - 1].Rate;
                        }
                    }

                    #endregion

                    if (isItemExtend == false)
                    {
                        //Item không phải bổ sung

                        switch (typeItem)
                        {
                            case 1:
                                if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == true &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == false &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "NEW")
                                {
                                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC")
                                        .CategoryId;
                                    item.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item);

                                    //Nếu trạng thái Lệnh sản xuất đang là Chậm tiến độ thì sau khi Item đổi trạng thái sang Đang sản xuất sẽ
                                    //đổi trạng thái của Lệnh sản xuất sang Đang sản xuất
                                    if (statusLsx.CategoryCode == "DELA")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                    }

                                    if (statusLsx.CategoryCode == "NEW")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                    }

                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity = Math.Round(Convert.ToDouble(tong_cong - tong_tru), 2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                        }

                                        #endregion
                                    }
                                }
                                break;
                            case 2:
                                if (statusItem == "NEW")
                                {
                                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC")
                                        .CategoryId;
                                    item.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item);
                                    //context.SaveChanges();

                                    //Nếu trạng thái Lệnh sản xuất đang là Chậm tiến độ thì sau khi Item đổi trạng thái sang Đang sản xuất sẽ
                                    //đổi trạng thái của Lệnh sản xuất sang Đang sản xuất
                                    if (statusLsx.CategoryCode == "DELA")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (statusLsx.CategoryCode == "NEW")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity = Math.Round(Convert.ToDouble(tong_cong - tong_tru), 2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == true &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == false &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                            case 3:
                                if (statusItem == "NEW")
                                {
                                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC")
                                        .CategoryId;
                                    item.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item);
                                    //context.SaveChanges();

                                    //Nếu trạng thái Lệnh sản xuất đang là Chậm tiến độ thì sau khi Item đổi trạng thái sang Đang sản xuất sẽ
                                    //đổi trạng thái của Lệnh sản xuất sang Đang sản xuất
                                    if (statusLsx.CategoryCode == "DELA")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (statusLsx.CategoryCode == "NEW")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    #region Đổi trạng thái của Item cha thành Đang sản xuất (Nếu Item là bán thành phẩm của bán thành phẩm)

                                    //Kiểm tra xem Item có cha không? 
                                    if (item.ParentPartId != null)
                                    {
                                        //Nếu Item có cha thì có 2 trường hợp
                                        //- Item chỉ có cha gốc
                                        //- Item là bán thành phẩm của bán thành phẩm

                                        //Lấy ra item cha
                                        var item_parent_lv1 = listAllProductionOrderMapping.FirstOrDefault(x =>
                                            x.ProductionOrderMappingId == item.ParentPartId);

                                        //Đổi trạng thái của Item cha  thành ĐSX nếu nó đang ở trạng thái Mới tạo
                                        var item_parent_lv1_statusCode = listAllStatusItem
                                            .FirstOrDefault(x => x.CategoryId == item_parent_lv1.StatusId)
                                            .CategoryCode;

                                        //Đổi trạng thái Item cha
                                        if (item_parent_lv1_statusCode == "NEW")
                                        {
                                            item_parent_lv1.StatusId = statusProcItem;
                                            context.ProductionOrderMapping.Update(item_parent_lv1);
                                            //context.SaveChanges();
                                        }

                                        //Lấy ra item cha gốc (Cha của bán thành phẩm cấp 1)
                                        var item_parent_lv0 = listAllProductionOrderMapping.FirstOrDefault(x =>
                                            x.ProductionOrderMappingId == item_parent_lv1.ParentPartId);

                                        //Nếu có Item cha gốc
                                        if (item_parent_lv0 != null)
                                        {
                                            //Đổi trạng thái của Item cha gốc thành ĐSX nếu nó đang ở trạng thái Mới tạo
                                            var item_parent_lv0_statusCode = listAllStatusItem
                                                .FirstOrDefault(x => x.CategoryId == item_parent_lv0.StatusId)
                                                .CategoryCode;

                                            if (item_parent_lv0_statusCode == "NEW")
                                            {
                                                var statusProcItemParentLv0 = listAllStatusItem
                                                    .FirstOrDefault(x => x.CategoryCode == "PROC")
                                                    .CategoryId;
                                                item_parent_lv0.StatusId = statusProcItemParentLv0;
                                                context.ProductionOrderMapping.Update(item_parent_lv0);
                                                //context.SaveChanges();
                                            }
                                        }
                                    }

                                    #endregion

                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.CalculatorType == true &&
                                                x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.CalculatorType == false &&
                                                x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble(
                                                    (tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == true &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId &&
                                                x.Present == true)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == false &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId &&
                                                x.Present == true)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                            case 4:
                                if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong) - (tong_tru)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                        }
                    }
                    else
                    {
                        //Item bổ sung

                        switch (typeItem)
                        {
                            case 1:
                                if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == true &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == false &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();

                                            //Tính số tấm hoàn thành của Item cha (của Item bổ sung)
                                            //Kiểm tra xem tiến trình cuối cùng của Item cha của lệnh bổ sung có giống của Item không?
                                            var item_parent =
                                                listAllProductionOrderMapping.FirstOrDefault(x =>
                                                    x.ProductionOrderMappingId == item.ParentId);

                                            //Lấy ra tiến trình cuối cùng của Item cha
                                            var final_technique_parent = listAllTechniqueRequestMapping
                                                .Where(x => x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                            //Nếu tiến trình hiện tại giống tiến trình cuối cùng của Item cha thì
                                            if (final_technique_parent.TechniqueRequestId ==
                                                productionOrderHistory.TechniqueRequestId)
                                            {
                                                //Số tấm cộng của Item cha
                                                var so_tam_cong_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm cộng bổ sung của Item cha
                                                var so_tam_cong_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ của Item cha
                                                var so_tam_tru_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ bổ sung của Item cha
                                                var so_tam_tru_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm đã hoàn thành
                                                var completeQuantity_parent =
                                                    Math.Round(
                                                        Convert.ToDouble(
                                                            (so_tam_cong_cha + so_tam_cong_bo_sung_cha) -
                                                            (so_tam_tru_cha + so_tam_tru_bo_sung_cha)),
                                                        2);

                                                //Lấy ra các Tiến trình và Rate gắn với Item cha
                                                var listCurrentTechniqueRequest_parent = listAllTechniqueRequestMapping
                                                    .Where(x => x.ProductionOrderMappingId ==
                                                                item_parent.ProductionOrderMappingId && x.ParentId == null)
                                                    .Select(y => new TechniqueRequestMappingEntityModel
                                                    {
                                                        TechniqueRequestId = y.TechniqueRequestId,
                                                        TechniqueName = y.TechniqueName,
                                                        TechniqueOrder = y.TechniqueOrder,
                                                        Rate = y.Rate,
                                                        UnitQuantity = 0,
                                                    }).OrderByDescending(z => z.TechniqueOrder).ToList();

                                                var count_parent = listCurrentTechniqueRequest_parent.Count;

                                                for (var i = 0; i <= count_parent - 1; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        listCurrentTechniqueRequest_parent[0].UnitQuantity = item_parent.Quantity;
                                                    }
                                                    else
                                                    {
                                                        listCurrentTechniqueRequest_parent[i].UnitQuantity =
                                                            listCurrentTechniqueRequest_parent[i - 1].UnitQuantity *
                                                            listCurrentTechniqueRequest_parent[i - 1].Rate;
                                                    }
                                                }

                                                //Lấy ra số lượng tấm đơn vị phải làm của Item cha
                                                var unitQuantity_parent = listCurrentTechniqueRequest_parent.FirstOrDefault(x =>
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId)
                                                    .UnitQuantity;

                                                //Nếu số tấm hoàn thành của Item cha = Số tấm phải hoàn thành của Item cha thì 
                                                //Đổi trạng thái của Item cha thành hoàn thành
                                                //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                                if (completeQuantity_parent == unitQuantity_parent)
                                                {
                                                    item_parent.StatusId = statusCompItem;
                                                    context.ProductionOrderMapping.Update(item_parent);
                                                    //context.SaveChanges();
                                                }
                                            }
                                        }

                                        #endregion
                                    }
                                }
                                break;
                            case 2:
                                if (statusItem == "NEW")
                                {
                                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC")
                                        .CategoryId;
                                    item.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item);
                                    //context.SaveChanges();

                                    //Nếu trạng thái Lệnh sản xuất đang là Chậm tiến độ thì sau khi Item đổi trạng thái sang Đang sản xuất sẽ
                                    //đổi trạng thái của Lệnh sản xuất sang Đang sản xuất
                                    if (statusLsx.CategoryCode == "DELA")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (statusLsx.CategoryCode == "NEW")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity = Math.Round(Convert.ToDouble(tong_cong - tong_tru), 2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();

                                            //Tính số tấm hoàn thành của Item cha (của Item bổ sung)
                                            //Kiểm tra xem tiến trình cuối cùng của Item cha của lệnh bổ sung có giống của Item không?
                                            var item_parent =
                                                listAllProductionOrderMapping.FirstOrDefault(x =>
                                                    x.ProductionOrderMappingId == item.ParentId);

                                            //Lấy ra tiến trình cuối cùng của Item cha
                                            var final_technique_parent = listAllTechniqueRequestMapping
                                                .Where(x => x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                            //Nếu tiến trình hiện tại giống tiến trình cuối cùng của Item cha thì
                                            if (final_technique_parent.TechniqueRequestId ==
                                                productionOrderHistory.TechniqueRequestId)
                                            {
                                                //Số tấm cộng của Item cha
                                                var so_tam_cong_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm cộng bổ sung của Item cha
                                                var so_tam_cong_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ của Item cha
                                                var so_tam_tru_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ bổ sung của Item cha
                                                var so_tam_tru_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm đã hoàn thành
                                                var completeQuantity_parent =
                                                    Math.Round(
                                                        Convert.ToDouble(
                                                            (so_tam_cong_cha + so_tam_cong_bo_sung_cha) -
                                                            (so_tam_tru_cha + so_tam_tru_bo_sung_cha)),
                                                        2);

                                                //Lấy ra các Tiến trình và Rate gắn với Item cha
                                                var listCurrentTechniqueRequest_parent = listAllTechniqueRequestMapping
                                                    .Where(x => x.ProductionOrderMappingId ==
                                                                item_parent.ProductionOrderMappingId && x.ParentId == null)
                                                    .Select(y => new TechniqueRequestMappingEntityModel
                                                    {
                                                        TechniqueRequestId = y.TechniqueRequestId,
                                                        TechniqueName = y.TechniqueName,
                                                        TechniqueOrder = y.TechniqueOrder,
                                                        Rate = y.Rate,
                                                        UnitQuantity = 0,
                                                    }).OrderByDescending(z => z.TechniqueOrder).ToList();

                                                var count_parent = listCurrentTechniqueRequest_parent.Count;

                                                for (var i = 0; i <= count_parent - 1; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        listCurrentTechniqueRequest_parent[0].UnitQuantity = item_parent.Quantity;
                                                    }
                                                    else
                                                    {
                                                        listCurrentTechniqueRequest_parent[i].UnitQuantity =
                                                            listCurrentTechniqueRequest_parent[i - 1].UnitQuantity *
                                                            listCurrentTechniqueRequest_parent[i - 1].Rate;
                                                    }
                                                }

                                                //Lấy ra số lượng tấm đơn vị phải làm của Item cha
                                                var unitQuantity_parent = listCurrentTechniqueRequest_parent.FirstOrDefault(x =>
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId)
                                                    .UnitQuantity;

                                                //Nếu số tấm hoàn thành của Item cha = Số tấm phải hoàn thành của Item cha thì 
                                                //Đổi trạng thái của Item cha thành hoàn thành
                                                //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                                if (completeQuantity_parent == unitQuantity_parent)
                                                {
                                                    item_parent.StatusId = statusCompItem;
                                                    context.ProductionOrderMapping.Update(item_parent);
                                                    //context.SaveChanges();
                                                }
                                            }
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm cộng bổ sung
                                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == true &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm trừ bổ sung
                                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                                x.CalculatorType == false &&
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.ParentType == true &&
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();

                                            //Tính số tấm hoàn thành của Item cha (của Item bổ sung)
                                            //Kiểm tra xem tiến trình cuối cùng của Item cha của lệnh bổ sung có giống của Item không?
                                            var item_parent =
                                                listAllProductionOrderMapping.FirstOrDefault(x =>
                                                    x.ProductionOrderMappingId == item.ParentId);

                                            //Lấy ra tiến trình cuối cùng của Item cha
                                            var final_technique_parent = listAllTechniqueRequestMapping
                                                .Where(x => x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                            //Nếu tiến trình hiện tại giống tiến trình cuối cùng của Item cha thì
                                            if (final_technique_parent.TechniqueRequestId ==
                                                productionOrderHistory.TechniqueRequestId)
                                            {
                                                //Số tấm cộng của Item cha
                                                var so_tam_cong_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm cộng bổ sung của Item cha
                                                var so_tam_cong_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ của Item cha
                                                var so_tam_tru_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ bổ sung của Item cha
                                                var so_tam_tru_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm đã hoàn thành
                                                var completeQuantity_parent =
                                                    Math.Round(
                                                        Convert.ToDouble(
                                                            (so_tam_cong_cha + so_tam_cong_bo_sung_cha) -
                                                            (so_tam_tru_cha + so_tam_tru_bo_sung_cha)),
                                                        2);

                                                //Lấy ra các Tiến trình và Rate gắn với Item cha
                                                var listCurrentTechniqueRequest_parent = listAllTechniqueRequestMapping
                                                    .Where(x => x.ProductionOrderMappingId ==
                                                                item_parent.ProductionOrderMappingId && x.ParentId == null)
                                                    .Select(y => new TechniqueRequestMappingEntityModel
                                                    {
                                                        TechniqueRequestId = y.TechniqueRequestId,
                                                        TechniqueName = y.TechniqueName,
                                                        TechniqueOrder = y.TechniqueOrder,
                                                        Rate = y.Rate,
                                                        UnitQuantity = 0,
                                                    }).OrderByDescending(z => z.TechniqueOrder).ToList();

                                                var count_parent = listCurrentTechniqueRequest_parent.Count;

                                                for (var i = 0; i <= count_parent - 1; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        listCurrentTechniqueRequest_parent[0].UnitQuantity = item_parent.Quantity;
                                                    }
                                                    else
                                                    {
                                                        listCurrentTechniqueRequest_parent[i].UnitQuantity =
                                                            listCurrentTechniqueRequest_parent[i - 1].UnitQuantity *
                                                            listCurrentTechniqueRequest_parent[i - 1].Rate;
                                                    }
                                                }

                                                //Lấy ra số lượng tấm đơn vị phải làm của Item cha
                                                var unitQuantity_parent = listCurrentTechniqueRequest_parent.FirstOrDefault(x =>
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId)
                                                    .UnitQuantity;

                                                //Nếu số tấm hoàn thành của Item cha = Số tấm phải hoàn thành của Item cha thì 
                                                //Đổi trạng thái của Item cha thành hoàn thành
                                                //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                                if (completeQuantity_parent == unitQuantity_parent)
                                                {
                                                    item_parent.StatusId = statusCompItem;
                                                    context.ProductionOrderMapping.Update(item_parent);
                                                    //context.SaveChanges();
                                                }
                                            }
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                            case 3:
                                if (statusItem == "NEW")
                                {
                                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC")
                                        .CategoryId;
                                    item.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item);
                                    //context.SaveChanges();

                                    //Nếu trạng thái Lệnh sản xuất đang là Chậm tiến độ thì sau khi Item đổi trạng thái sang Đang sản xuất sẽ
                                    //đổi trạng thái của Lệnh sản xuất sang Đang sản xuất
                                    if (statusLsx.CategoryCode == "DELA")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (statusLsx.CategoryCode == "NEW")
                                    {
                                        var statusProcLsx = listAllStatusLsx
                                            .FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;
                                        lsx.StatusId = statusProcLsx;
                                        context.ProductionOrder.Update(lsx);
                                        //context.SaveChanges();
                                    }

                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity = Math.Round(Convert.ToDouble(tong_cong - tong_tru), 2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();

                                            #region Đổi trạng thái của Item cha trong lệnh sản xuất

                                            //Nếu là cộng của lỗi hiện tại
                                            if (item.IsAddPart != true)
                                            {
                                                var item_parent = listAllProductionOrderMapping.FirstOrDefault(x =>
                                                    x.ProductionOrderMappingId == item.ParentId);

                                                //Lấy ra tiến trình cuối cùng của Item cha
                                                var final_technique_parent = listAllTechniqueRequestMapping
                                                    .Where(x => x.ProductionOrderMappingId ==
                                                                item_parent.ProductionOrderMappingId)
                                                    .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                                //Nếu tiến trình hiện tại giống tiến trình cuối cùng của Item cha thì
                                                if (final_technique_parent.TechniqueRequestId ==
                                                    productionOrderHistory.TechniqueRequestId)
                                                {
                                                    //Số tấm cộng của Item cha
                                                    var so_tam_cong_cha = listAllProductionOrderHistory.Where(x =>
                                                            x.CalculatorType == true &&
                                                            x.TechniqueRequestId ==
                                                            final_technique_parent.TechniqueRequestId &&
                                                            x.ProductionOrderMappingId ==
                                                            item_parent.ProductionOrderMappingId)
                                                        .ToList()
                                                        .Count();

                                                    //Số tấm cộng bổ sung của Item cha
                                                    var so_tam_cong_bo_sung_cha = listAllProductionOrderHistory.Where(
                                                            x =>
                                                                x.CalculatorType == true && x.ParentType == true &&
                                                                x.TechniqueRequestId == final_technique_parent
                                                                    .TechniqueRequestId &&
                                                                x.ParentId == item_parent.ProductionOrderMappingId &&
                                                                x.IsAddPart != true)
                                                        .ToList()
                                                        .Count();

                                                    //Số tấm trừ của Item cha
                                                    var so_tam_tru_cha = listAllProductionOrderHistory.Where(x =>
                                                            x.CalculatorType == false &&
                                                            x.TechniqueRequestId ==
                                                            final_technique_parent.TechniqueRequestId &&
                                                            x.ProductionOrderMappingId ==
                                                            item_parent.ProductionOrderMappingId)
                                                        .ToList()
                                                        .Count();

                                                    //Số tấm trừ bổ sung của Item cha
                                                    var so_tam_tru_bo_sung_cha = listAllProductionOrderHistory.Where(
                                                            x =>
                                                                x.CalculatorType == false && x.ParentType == true &&
                                                                x.TechniqueRequestId == final_technique_parent
                                                                    .TechniqueRequestId &&
                                                                x.ParentId == item_parent.ProductionOrderMappingId &&
                                                                x.IsAddPart != true)
                                                        .ToList()
                                                        .Count();

                                                    //Số tấm đã hoàn thành
                                                    var completeQuantity_parent =
                                                        Math.Round(
                                                            Convert.ToDouble(
                                                                (so_tam_cong_cha + so_tam_cong_bo_sung_cha) -
                                                                (so_tam_tru_cha + so_tam_tru_bo_sung_cha)),
                                                            2);

                                                    //Lấy ra các Tiến trình và Rate gắn với Item cha
                                                    var listCurrentTechniqueRequest_parent =
                                                        listAllTechniqueRequestMapping
                                                            .Where(x => x.ProductionOrderMappingId ==
                                                                        item_parent.ProductionOrderMappingId &&
                                                                        x.ParentId == null)
                                                            .Select(y => new TechniqueRequestMappingEntityModel
                                                            {
                                                                TechniqueRequestId = y.TechniqueRequestId,
                                                                TechniqueName = y.TechniqueName,
                                                                TechniqueOrder = y.TechniqueOrder,
                                                                Rate = y.Rate,
                                                                UnitQuantity = 0,
                                                            }).OrderByDescending(z => z.TechniqueOrder).ToList();

                                                    var count_parent = listCurrentTechniqueRequest_parent.Count;

                                                    for (var i = 0; i <= count_parent - 1; i++)
                                                    {
                                                        if (i == 0)
                                                        {
                                                            listCurrentTechniqueRequest_parent[0].UnitQuantity =
                                                                item_parent.Quantity;
                                                        }
                                                        else
                                                        {
                                                            listCurrentTechniqueRequest_parent[i].UnitQuantity =
                                                                listCurrentTechniqueRequest_parent[i - 1].UnitQuantity *
                                                                listCurrentTechniqueRequest_parent[i - 1].Rate;
                                                        }
                                                    }

                                                    //Lấy ra số lượng tấm đơn vị phải làm của Item cha
                                                    var unitQuantity_parent = listCurrentTechniqueRequest_parent
                                                        .FirstOrDefault(x =>
                                                            x.TechniqueRequestId ==
                                                            final_technique_parent.TechniqueRequestId)
                                                        .UnitQuantity;

                                                    //Nếu số tấm hoàn thành của Item cha = Số tấm phải hoàn thành của Item cha thì 
                                                    //Đổi trạng thái của Item cha thành hoàn thành
                                                    //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                                    if (completeQuantity_parent == unitQuantity_parent)
                                                    {
                                                        item_parent.StatusId = statusCompItem;
                                                        context.ProductionOrderMapping.Update(item_parent);
                                                        //context.SaveChanges();
                                                    }
                                                }
                                            }

                                            #endregion
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong) - (tong_tru)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();

                                            //Tính số tấm hoàn thành của Item cha (của Item bổ sung)
                                            //Kiểm tra xem tiến trình cuối cùng của Item cha của lệnh bổ sung có giống của Item không?
                                            var item_parent =
                                                listAllProductionOrderMapping.FirstOrDefault(x =>
                                                    x.ProductionOrderMappingId == item.ParentId);

                                            //Lấy ra tiến trình cuối cùng của Item cha
                                            var final_technique_parent = listAllTechniqueRequestMapping
                                                .Where(x => x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                            //Nếu tiến trình hiện tại giống tiến trình cuối cùng của Item cha thì
                                            if (final_technique_parent.TechniqueRequestId ==
                                                productionOrderHistory.TechniqueRequestId)
                                            {
                                                //Số tấm cộng của Item cha
                                                var so_tam_cong_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm cộng bổ sung của Item cha
                                                var so_tam_cong_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == true && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ của Item cha
                                                var so_tam_tru_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ProductionOrderMappingId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm trừ bổ sung của Item cha
                                                var so_tam_tru_bo_sung_cha = listAllProductionOrderHistory.Where(x =>
                                                        x.CalculatorType == false && x.ParentType == true &&
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId &&
                                                        x.ParentId == item_parent.ProductionOrderMappingId)
                                                    .ToList()
                                                    .Count();

                                                //Số tấm đã hoàn thành
                                                var completeQuantity_parent =
                                                    Math.Round(
                                                        Convert.ToDouble(
                                                            (so_tam_cong_cha + so_tam_cong_bo_sung_cha) -
                                                            (so_tam_tru_cha + so_tam_tru_bo_sung_cha)),
                                                        2);

                                                //Lấy ra các Tiến trình và Rate gắn với Item cha
                                                var listCurrentTechniqueRequest_parent = listAllTechniqueRequestMapping
                                                    .Where(x => x.ProductionOrderMappingId ==
                                                                item_parent.ProductionOrderMappingId && x.ParentId == null)
                                                    .Select(y => new TechniqueRequestMappingEntityModel
                                                    {
                                                        TechniqueRequestId = y.TechniqueRequestId,
                                                        TechniqueName = y.TechniqueName,
                                                        TechniqueOrder = y.TechniqueOrder,
                                                        Rate = y.Rate,
                                                        UnitQuantity = 0,
                                                    }).OrderByDescending(z => z.TechniqueOrder).ToList();

                                                var count_parent = listCurrentTechniqueRequest_parent.Count;

                                                for (var i = 0; i <= count_parent - 1; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        listCurrentTechniqueRequest_parent[0].UnitQuantity = item_parent.Quantity;
                                                    }
                                                    else
                                                    {
                                                        listCurrentTechniqueRequest_parent[i].UnitQuantity =
                                                            listCurrentTechniqueRequest_parent[i - 1].UnitQuantity *
                                                            listCurrentTechniqueRequest_parent[i - 1].Rate;
                                                    }
                                                }

                                                //Lấy ra số lượng tấm đơn vị phải làm của Item cha
                                                var unitQuantity_parent = listCurrentTechniqueRequest_parent.FirstOrDefault(x =>
                                                        x.TechniqueRequestId == final_technique_parent.TechniqueRequestId)
                                                    .UnitQuantity;

                                                //Nếu số tấm hoàn thành của Item cha = Số tấm phải hoàn thành của Item cha thì 
                                                //Đổi trạng thái của Item cha thành hoàn thành
                                                //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                                if (completeQuantity_parent == unitQuantity_parent)
                                                {
                                                    item_parent.StatusId = statusCompItem;
                                                    context.ProductionOrderMapping.Update(item_parent);
                                                    //context.SaveChanges();
                                                }
                                            }
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                            case 4:
                                if (statusItem == "PROC")
                                {
                                    if (finalTechniqueRequest.TechniqueRequestId ==
                                        productionOrderHistory.TechniqueRequestId)
                                    {
                                        //Nếu đang là tiến trình cuối cùng trong quy trình thì
                                        //Tính số lượng hoàn thành của Item và số cần phải hoàn thành của Item

                                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId).ToList();

                                        //Số tấm cộng
                                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                                            .Count();

                                        //Số tấm trừ
                                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                                            .Count();

                                        //Số tấm đã hoàn thành
                                        var completeQuantity =
                                            Math.Round(
                                                Convert.ToDouble((tong_cong) - (tong_tru)),
                                                2);

                                        //Lấy ra số lượng tấm đơn vị phải làm
                                        var unitQuantity = listCurrentTechniqueRequest.FirstOrDefault(x =>
                                                x.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                                            .UnitQuantity;

                                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                                        if (completeQuantity == unitQuantity)
                                        {
                                            item.StatusId = statusCompItem;
                                            context.ProductionOrderMapping.Update(item);
                                            //context.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                                else if (statusItem == "COMP")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã hoàn thành"
                                    };
                                }
                                else if (statusItem == "CANC")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hủy sản xuất"
                                    };
                                }
                                else if (statusItem == "PEND")
                                {
                                    return new PlusItemResult()
                                    {
                                        Status = false,
                                        Message = "Sản phẩm này đã bị hoãn sản xuất"
                                    };
                                }
                                break;
                        }
                    }

                    #endregion

                    #region Kiểm tra, thay đổi trạng thái của Lệnh sản xuất mà Item gắn với

                    //Lấy tất cả Item trong lệnh sản xuất
                    var listChildrenItem = listAllProductionOrderMapping
                        .Where(x => x.ProductionOrderId == lsx.ProductionOrderId).ToList();

                    //Nếu tất cả Item đều ở trạng thái Đã hoàn thành thì đổi trạng thái của Lệnh sản xuất => Đã hoàn thành 
                    var checkCompItem = listChildrenItem.Where(x => x.StatusId != statusCompItem).FirstOrDefault();

                    //Đổi trạng thái lệnh sản xuất => Đã hoàn thành
                    if (checkCompItem == null)
                    {
                        lsx.StatusId = statusCompLsx;
                        context.ProductionOrder.Update(lsx);
                        //context.SaveChanges();
                    }
                    else
                    {
                        //Nếu list trạng thái của Item chỉ có trạng thái Hoàn thành và Hủy
                        var listCheck = listChildrenItem
                            .Where(x => x.StatusId != statusCompItem && x.StatusId != statusCancItem &&
                                        x.StatusId != statusPendItem).ToList();

                        //Nếu tất cả Item trong lệnh sản xuất chỉ bao gồm: Đã hoàn thành, Hủy, Hoãn
                        if (listCheck.Count == 0)
                        {
                            var _check = listChildrenItem.FirstOrDefault(x => x.StatusId == statusPendItem);

                            if (_check != null)
                            {
                                //Nếu có ít nhất một Item có trạng thái là Hoãn thì trạng thái lệnh sản xuất là Hoãn
                                lsx.StatusId = statusPendLsx;
                                context.ProductionOrder.Update(lsx);
                                //context.SaveChanges();
                            }
                            else
                            {
                                //Nếu không có item nào có trạng thái Hoãn thì trạng thái lệnh sản xuất là hoàn thành
                                lsx.StatusId = statusCompLsx;
                                context.ProductionOrder.Update(lsx);
                                //context.SaveChanges();
                            }
                        }
                    }

                    #endregion

                    #region Kiểm tra, thay đổi trạng thái của Lệnh sản xuất cha của Item (Khi item thuộc lệnh bổ sung)

                    if (isItemExtend == false)
                    {
                        //Item không phải bổ sung
                        switch (typeItem)
                        {
                            case 1:
                                break;
                            case 2:
                                break;
                            case 3:
                                break;
                            case 4:
                                break;
                        }
                    }
                    else
                    {
                        //Item bổ sung

                        #region Đổi trạng thái của Item và Lệnh bổ sung là lỗi của cùng Item cha

                        //Nếu là tiến trình cuối
                        if (finalTechniqueRequest.TechniqueRequestId == productionOrderHistory.TechniqueRequestId)
                        {
                            var status_item_code =
                                listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId).CategoryCode;

                            //Nếu Item đã chuyển sang trạng thái hoàn thành thì
                            if (status_item_code == "COMP")
                            {
                                //Kiểm tra xem Item đó có cha bổ sung không?
                                if (item.ParentExtendId != null)
                                {
                                    //Item cha bổ sung
                                    var item_parent_bs = listAllProductionOrderMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == item.ParentExtendId);

                                    var status_parent_item_code =
                                        listAllStatusItem.FirstOrDefault(x => x.CategoryId == item_parent_bs.StatusId)
                                            .CategoryCode;

                                    if (status_parent_item_code == "PROC")
                                    {
                                        //Lấy ra số tấm phải làm của Item cha bổ sung
                                        var item_parent_quantity = item_parent_bs.Quantity;

                                        //Lấy số tấm cộng của item cha bs
                                        var tong_cong_parent_bs = listAllProductionOrderHistory.Where(x =>
                                            x.CalculatorType == true &&
                                            x.ProductionOrderMappingId == item.ParentExtendId && x.TechniqueRequestId ==
                                            productionOrderHistory.TechniqueRequestId).ToList().Count();

                                        //Lấy số tấm trừ của item cha bs
                                        var tong_tru_parent_bs = listAllProductionOrderHistory.Where(x =>
                                            x.CalculatorType == false &&
                                            x.ProductionOrderMappingId == item.ParentExtendId && x.TechniqueRequestId ==
                                            productionOrderHistory.TechniqueRequestId).ToList().Count();

                                        var tong_hoan_thanh_parent_bs = tong_cong_parent_bs - tong_tru_parent_bs;

                                        //Lấy số tấm cộng của tất cả item con
                                        var tong_cong_con = listAllProductionOrderHistory.Where(x =>
                                            x.CalculatorType == true &&
                                            x.ParentExtendId == item.ParentExtendId && x.TechniqueRequestId ==
                                            productionOrderHistory.TechniqueRequestId).ToList().Count();

                                        //Lấy số tấm trừ của tất cả item con
                                        var tong_tru_con = listAllProductionOrderHistory.Where(x =>
                                            x.CalculatorType == false &&
                                            x.ParentExtendId == item.ParentExtendId && x.TechniqueRequestId ==
                                            productionOrderHistory.TechniqueRequestId).ToList().Count();

                                        var tong_hoan_thanh_con = tong_cong_con - tong_tru_con;

                                        if (item_parent_quantity == (tong_hoan_thanh_parent_bs + tong_hoan_thanh_con))
                                        {
                                            //Nếu đã hoàn thành hết thì đổi trạng thái Item cha bổ sung thành hoàn thành
                                            item_parent_bs.StatusId = item.StatusId;
                                            context.ProductionOrderMapping.Update(item_parent_bs);
                                            //context.SaveChanges();

                                            //Đổi trạng thái của lsx bổ sung cha sang hoàn thành
                                            var lsx_parent_bs =
                                                listAllProductionOrder.FirstOrDefault(x =>
                                                    x.ProductionOrderId == item_parent_bs.ProductionOrderId);

                                            lsx_parent_bs.StatusId = statusCompLsx;
                                            context.ProductionOrder.Update(lsx_parent_bs);
                                            //context.SaveChanges();
                                        }
                                    }
                                }
                            }
                            else if (status_item_code == "PROC")
                            {
                                //Lấy list item con nếu có của Item bổ sung
                                var list_child_item = listAllProductionOrderMapping
                                    .Where(x => x.ParentExtendId == item.ProductionOrderMappingId).ToList();

                                //Tính số hoàn thành của Item
                                var tong_cong_item = listAllProductionOrderHistory.Where(x =>
                                        x.CalculatorType == true &&
                                        x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                    .ToList().Count;

                                var tong_tru_item = listAllProductionOrderHistory.Where(x =>
                                        x.CalculatorType == false &&
                                        x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                    .ToList().Count;

                                var tong_hoan_thanh_item = tong_cong_item - tong_tru_item;

                                if (list_child_item.Count > 0)
                                {
                                    var total_quantity_comp = 0;
                                    list_child_item.ForEach(item_child =>
                                    {
                                        //Lấy ra tiến trình cuối cùng của Item bổ sung con
                                        var finalCurrentTechniqueRequest_child = listAllTechniqueRequestMapping
                                            .Where(x => x.ProductionOrderMappingId ==
                                                        item_child.ProductionOrderMappingId && x.ParentId == null)
                                            .Select(y => new TechniqueRequestMappingEntityModel
                                            {
                                                TechniqueRequestId = y.TechniqueRequestId,
                                                TechniqueName = y.TechniqueName,
                                                TechniqueOrder = y.TechniqueOrder,
                                                Rate = y.Rate,
                                                UnitQuantity = 0,
                                            }).OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                        if (finalCurrentTechniqueRequest_child.TechniqueRequestId ==
                                            finalTechniqueRequest.TechniqueRequestId)
                                        {
                                            var tong_cong_child = listAllProductionOrderHistory.Where(x =>
                                                    x.CalculatorType == true &&
                                                    x.ProductionOrderMappingId == item_child.ProductionOrderMappingId &&
                                                    x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                                .ToList().Count;

                                            var tong_tru_child = listAllProductionOrderHistory.Where(x =>
                                                    x.CalculatorType == false &&
                                                    x.ProductionOrderMappingId == item_child.ProductionOrderMappingId &&
                                                    x.TechniqueRequestId == finalTechniqueRequest.TechniqueRequestId)
                                                .ToList().Count;

                                            var temp = tong_cong_child - tong_tru_child;
                                            total_quantity_comp += temp;
                                        }
                                    });

                                    if ((tong_hoan_thanh_item + total_quantity_comp) == item.Quantity)
                                    {
                                        //Cập nhật trạng thái Item thành hoàn thành
                                        var status_comp =
                                            listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "COMP");

                                        item.StatusId = status_comp.CategoryId;
                                        context.ProductionOrderMapping.Update(item);
                                        //context.SaveChanges();

                                        //Đổi trạng thái của lsx bổ sung cha sang hoàn thành
                                        var lsx_parent_bs =
                                            listAllProductionOrder.FirstOrDefault(x =>
                                                x.ProductionOrderId == item.ProductionOrderId);

                                        lsx_parent_bs.StatusId = statusCompLsx;
                                        context.ProductionOrder.Update(lsx_parent_bs);
                                        //context.SaveChanges();
                                    }
                                }
                            }
                        }

                        #endregion

                        switch (typeItem)
                        {
                            case 1:
                                var _item_parent =
                                    listAllProductionOrderMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == item.ParentId);

                                var _lsx_parent = listAllProductionOrder.FirstOrDefault(x =>
                                    x.ProductionOrderId == _item_parent.ProductionOrderId);

                                //Lấy tất cả Item trong lệnh sản xuất
                                var _listChildrenItem_parent = listAllProductionOrderMapping
                                    .Where(x => x.ProductionOrderId == _lsx_parent.ProductionOrderId).ToList();

                                //Nếu tất cả Item đều ở trạng thái Đã hoàn thành thì đổi trạng thái của Lệnh sản xuất => Đã hoàn thành 
                                var _checkCompItem_parent = _listChildrenItem_parent.Where(x => x.StatusId != statusCompItem)
                                    .FirstOrDefault();

                                //Đổi trạng thái lệnh sản xuất => Đã hoàn thành
                                if (_checkCompItem_parent == null)
                                {
                                    _lsx_parent.StatusId = statusCompLsx;
                                    context.ProductionOrder.Update(_lsx_parent);
                                    //context.SaveChanges();
                                }
                                break;
                            case 2:
                                var item_parent =
                                    listAllProductionOrderMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == item.ParentId);

                                var lsx_parent = listAllProductionOrder.FirstOrDefault(x =>
                                    x.ProductionOrderId == item_parent.ProductionOrderId);

                                //Lấy tất cả Item trong lệnh sản xuất
                                var listChildrenItem_parent = listAllProductionOrderMapping
                                    .Where(x => x.ProductionOrderId == lsx_parent.ProductionOrderId).ToList();

                                //Nếu tất cả Item đều ở trạng thái Đã hoàn thành thì đổi trạng thái của Lệnh sản xuất => Đã hoàn thành 
                                var checkCompItem_parent = listChildrenItem_parent.Where(x => x.StatusId != statusCompItem)
                                    .FirstOrDefault();

                                //Đổi trạng thái lệnh sản xuất => Đã hoàn thành
                                if (checkCompItem_parent == null)
                                {
                                    lsx_parent.StatusId = statusCompLsx;
                                    context.ProductionOrder.Update(lsx_parent);
                                    //context.SaveChanges();
                                }
                                break;
                            case 3:
                                break;
                            case 4:
                                break;
                        }
                    }

                    #endregion

                    context.ChangeTracker.AutoDetectChangesEnabled = false;
                    context.SaveChanges();
                    transaction.Commit();

                    return new PlusItemResult()
                    {
                        Status = true,
                        Message = "Success"
                    };
                }
            }
            catch (Exception e)
            {
                return new PlusItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public MinusItemResult MinusItem(MinusItemParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    var productionOrderHistory = new ProductionOrderHistory();
                    productionOrderHistory.ProductionOrderHistoryId = Guid.NewGuid();
                    productionOrderHistory.ParentId = parameter.ProductionOrderHistory.ParentId;
                    productionOrderHistory.ParentType = parameter.ProductionOrderHistory.ParentType;
                    productionOrderHistory.ProductionOrderId = parameter.ProductionOrderHistory.ProductionOrderId;
                    productionOrderHistory.ProductionOrderMappingId =
                        parameter.ProductionOrderHistory.ProductionOrderMappingId;
                    productionOrderHistory.TechniqueRequestId = parameter.ProductionOrderHistory.TechniqueRequestId;
                    productionOrderHistory.CalculatorType = parameter.ProductionOrderHistory.CalculatorType;
                    productionOrderHistory.IsError = parameter.ProductionOrderHistory.IsError;
                    productionOrderHistory.IsErrorPre = parameter.ProductionOrderHistory.IsErrorPre;
                    productionOrderHistory.Description = parameter.ProductionOrderHistory.Description;
                    productionOrderHistory.QuantityUnitErr = parameter.ProductionOrderHistory.QuantityUnitErr;
                    productionOrderHistory.IsParent = parameter.ProductionOrderHistory.IsParent;
                    productionOrderHistory.IsSubParent = parameter.ProductionOrderHistory.IsSubParent;
                    productionOrderHistory.IdChildrent = parameter.ProductionOrderHistory.IdChildrent;
                    productionOrderHistory.IsChildren = parameter.ProductionOrderHistory.IsChildren;
                    productionOrderHistory.ParentPartId = parameter.ProductionOrderHistory.ParentPartId;
                    productionOrderHistory.ParentExtendId = parameter.ProductionOrderHistory.ParentExtendId;
                    productionOrderHistory.IsAddPart = parameter.ProductionOrderHistory.IsAddPart;
                    productionOrderHistory.Present = parameter.ProductionOrderHistory.Present;

                    #region Phân loại item

                    var isItemExtend = false; //false: Item không phải bổ sung; true: Item bổ sung

                    if (productionOrderHistory.ParentId == null)
                    {
                        isItemExtend = false;   //Item không phải bổ sung

                        if (productionOrderHistory.IsErrorPre != true)
                        {
                            productionOrderHistory.IsPresent = true;
                        }
                    }
                    else
                    {
                        isItemExtend = true;    //Item bổ sung
                    }

                    /*
                     * typeItem:
                     * - 1: Item cha gốc
                     * - 2: Item không có bán thành phẩm
                     * - 3: Item bán thành phẩm (không có con)
                     * - 4: Item bán thành phẩm (có con)
                     */
                    var typeItem = 0;
                    if (productionOrderHistory.IsParent == true)
                    {
                        typeItem = 1; //Item cha gốc
                    }
                    else if (productionOrderHistory.IsParent != true && productionOrderHistory.IsSubParent != true)
                    {
                        if (productionOrderHistory.ParentPartId != null)
                        {
                            typeItem = 3; //Item bán thành phẩm (không có con)
                        }
                        else
                        {
                            typeItem = 2; //Item không có bán thành phẩm
                        }
                    }
                    else if (productionOrderHistory.IsParent != true && productionOrderHistory.IsSubParent == true)
                    {
                        typeItem = 4; //Item bán thành phẩm (có con)
                    }

                    #endregion

                    switch (typeItem)
                    {
                        case 1:
                            if (parameter.ProductionOrderHistory.IsChildren == true)
                            {
                                //Lỗi tấm bán thành phẩm

                                #region Lưu list item bán thành phẩm vào bảng mapping

                                var newListPartItem = new List<PartItemMapping>();
                                parameter.ListItemId.ForEach(_partItem =>
                                {
                                    var partItem = new PartItemMapping();
                                    partItem.PartItemMappingId = Guid.NewGuid();
                                    partItem.ProductionOrderHistoryId = productionOrderHistory.ProductionOrderHistoryId;
                                    partItem.ParentId = productionOrderHistory.ProductionOrderMappingId;
                                    partItem.ProductionOrderMappingId = _partItem;

                                    newListPartItem.Add(partItem);
                                });

                                context.PartItemMapping.AddRange(newListPartItem);
                                //context.SaveChanges();

                                #endregion
                            }
                            else
                            {
                                //Lỗi tấm của tổ hiện tại
                            }
                            break;
                        case 2:
                            if (parameter.ProductionOrderHistory.IsErrorPre == true)
                            {
                                //Lỗi tấm của tổ trước
                                productionOrderHistory.OriginalId = parameter.ProductionOrderHistory.TechniqueRequestId;
                            }
                            else
                            {
                                //Lỗi tấm của tổ hiện tại

                                //Lấy Tiến trình sau nếu có của Item
                                if (parameter.ProductionOrderHistory.ParentId != null && parameter.ProductionOrderHistory.ParentType == true)
                                {
                                    //Nếu là Item bổ sung
                                    var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ParentId &&
                                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId).TechniqueOrder;

                                    var nextTechniqueOrder = currentTechniqueOrder + 1;

                                    var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ParentId &&
                                        x.TechniqueOrder == nextTechniqueOrder);

                                    if (nextTechnique != null)
                                    {
                                        productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                    }
                                    else
                                    {
                                        productionOrderHistory.OriginalId = null;
                                    }
                                }
                                else if (parameter.ProductionOrderHistory.ParentId == null)
                                {
                                    //Nếu là Item thường
                                    var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId).TechniqueOrder;

                                    var nextTechniqueOrder = currentTechniqueOrder + 1;

                                    var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                        x.TechniqueOrder == nextTechniqueOrder);

                                    if (nextTechnique != null)
                                    {
                                        productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                    }
                                    else
                                    {
                                        productionOrderHistory.OriginalId = null;
                                    }
                                }
                            }
                            break;
                        case 3:
                            if (parameter.ProductionOrderHistory.IsErrorPre == true)
                            {
                                //Lỗi tấm của tổ trước
                                productionOrderHistory.OriginalId = parameter.ProductionOrderHistory.TechniqueRequestId;
                            }
                            else
                            {
                                //Lỗi tấm của tổ hiện tại

                                //Lấy Tiến trình sau nếu có của Item
                                if (parameter.ProductionOrderHistory.ParentId != null)
                                {
                                    //Nếu là Item bổ sung
                                    var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ParentId &&
                                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId).TechniqueOrder;

                                    var nextTechniqueOrder = currentTechniqueOrder + 1;

                                    var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ParentId &&
                                        x.TechniqueOrder == nextTechniqueOrder);

                                    if (nextTechnique != null)
                                    {
                                        productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                    }
                                    else
                                    {
                                        productionOrderHistory.OriginalId = null;
                                    }
                                }
                                else if (parameter.ProductionOrderHistory.ParentId == null)
                                {
                                    //Nếu là Item thường
                                    var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId).TechniqueOrder;

                                    var nextTechniqueOrder = currentTechniqueOrder + 1;

                                    var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                        x.TechniqueOrder == nextTechniqueOrder);

                                    if (nextTechnique != null)
                                    {
                                        productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                    }
                                    else
                                    {
                                        productionOrderHistory.OriginalId = null;
                                    }
                                }
                            }
                            break;
                        case 4:
                            if (parameter.ProductionOrderHistory.IsChildren == true)
                            {
                                //Lỗi tấm bán thành phẩm

                                #region Lưu list item bán thành phẩm vào bảng mapping

                                var newListPartItem = new List<PartItemMapping>();
                                parameter.ListItemId.ForEach(_partItem =>
                                {
                                    var partItem = new PartItemMapping();
                                    partItem.PartItemMappingId = Guid.NewGuid();
                                    partItem.ProductionOrderHistoryId = productionOrderHistory.ProductionOrderHistoryId;
                                    partItem.ParentId = productionOrderHistory.ProductionOrderMappingId;
                                    partItem.ProductionOrderMappingId = _partItem;

                                    newListPartItem.Add(partItem);
                                });

                                context.PartItemMapping.AddRange(newListPartItem);
                                //context.SaveChanges();

                                #endregion
                            }
                            else
                            {
                                if (parameter.ProductionOrderHistory.IsErrorPre == true)
                                {
                                    //Lỗi tấm của tổ trước
                                    productionOrderHistory.OriginalId = parameter.ProductionOrderHistory.TechniqueRequestId;
                                }
                                else
                                {
                                    //Lỗi tấm của tổ hiện tại

                                    //Lấy Tiến trình sau nếu có của Item
                                    if (parameter.ProductionOrderHistory.ParentId != null)
                                    {
                                        //Nếu là Item bổ sung
                                        var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                                x.ProductionOrderMappingId ==
                                                parameter.ProductionOrderHistory.ParentId &&
                                                x.TechniqueRequestId ==
                                                parameter.ProductionOrderHistory.TechniqueRequestId)
                                            .TechniqueOrder;

                                        var nextTechniqueOrder = currentTechniqueOrder + 1;

                                        var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                            x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ParentId &&
                                            x.TechniqueOrder == nextTechniqueOrder);

                                        if (nextTechnique != null)
                                        {
                                            productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                        }
                                        else
                                        {
                                            productionOrderHistory.OriginalId = null;
                                        }
                                    }
                                    else if (parameter.ProductionOrderHistory.ParentId == null)
                                    {
                                        //Nếu là Item thường
                                        var currentTechniqueOrder = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                            x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId).TechniqueOrder;

                                        var nextTechniqueOrder = currentTechniqueOrder + 1;

                                        var nextTechnique = context.TechniqueRequestMapping.FirstOrDefault(x =>
                                            x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId &&
                                            x.TechniqueOrder == nextTechniqueOrder);

                                        if (nextTechnique != null)
                                        {
                                            productionOrderHistory.OriginalId = nextTechnique.TechniqueRequestId;
                                        }
                                        else
                                        {
                                            productionOrderHistory.OriginalId = null;
                                        }
                                    }
                                }
                            }
                            break;
                    }

                    productionOrderHistory.CreatedDate = DateTime.Now;
                    productionOrderHistory.CreatedById = parameter.UserId;

                    #region Lấy các giá trị đặc biệt của Item ở các tiến trình

                    var techniqueRequestMapping = context.TechniqueRequestMapping.FirstOrDefault(x =>
                        x.TechniqueRequestId == parameter.ProductionOrderHistory.TechniqueRequestId &&
                        x.ProductionOrderMappingId == parameter.ProductionOrderHistory.ProductionOrderMappingId);

                    productionOrderHistory.Thin = techniqueRequestMapping.Thin;
                    productionOrderHistory.Thick = techniqueRequestMapping.Thick;
                    productionOrderHistory.EspeciallyThin = techniqueRequestMapping.EspeciallyThin;
                    productionOrderHistory.EspeciallyThick = techniqueRequestMapping.EspeciallyThick;
                    productionOrderHistory.BoreholeThin = techniqueRequestMapping.BoreholeThin;
                    productionOrderHistory.BoreholeThick = techniqueRequestMapping.BoreholeThick;
                    productionOrderHistory.OriginalThin = techniqueRequestMapping.OriginalThin;
                    productionOrderHistory.OriginalThick = techniqueRequestMapping.OriginalThick;

                    #endregion

                    context.ProductionOrderHistory.Add(productionOrderHistory);
                    context.SaveChanges();

                    var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var statusLsxType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");

                    var listAllStatusItem = context.Category.Where(x => x.CategoryTypeId == statusItemType.CategoryTypeId)
                        .ToList();
                    var statusProcItem = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;

                    var listAllStatusLsx = context.Category.Where(x => x.CategoryTypeId == statusLsxType.CategoryTypeId)
                        .ToList();
                    var statusProcLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryCode == "PROC").CategoryId;

                    var listAllProductionOrderMapping = context.ProductionOrderMapping.ToList();
                    var listAllProductionOrder = context.ProductionOrder.ToList();

                    //Lấy ra Item
                    var item = listAllProductionOrderMapping.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == productionOrderHistory.ProductionOrderMappingId);

                    //Lệnh sản xuất mà Item gắn với nó
                    var lsx = listAllProductionOrder.FirstOrDefault(x =>
                        x.ProductionOrderId == productionOrderHistory.ProductionOrderId);

                    #region Kiểm tra trạng thái Lệnh sản xuất trước khi cập nhật

                    //Trước khi cập nhật trạng thái của Item thì kiểm tra trạng thái của Lệnh sản xuất
                    var statusLsx = listAllStatusLsx.FirstOrDefault(x => x.CategoryId == lsx.StatusId);

                    if (statusLsx.CategoryCode == "CANC" || statusLsx.CategoryCode == "PEND")
                    {
                        return new MinusItemResult()
                        {
                            Status = false,
                            Message = "Không thể thao tác vì Trạng thái lệnh sản xuất đã thay đổi sang " + statusLsx.CategoryName,
                        };
                    }

                    //Kiểm tra trạng thái của Item
                    var statusItem = listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId);

                    if (statusItem.CategoryCode == "COMP")
                    {
                        //Nếu trạng thái của Item đang là Đã hoàn thành thì đổi trạng thái của Item thành Đang sản xuất
                        item.StatusId = statusProcItem;
                        context.ProductionOrderMapping.Update(item);
                        //context.SaveChanges();

                        //Kiểm tra trạng thái của lệnh sản xuất
                        if (statusLsx.CategoryCode == "COMP")
                        {
                            //Nếu lệnh sản xuất đang ở trạng thái Đã hoàn thành thì đổi trạng thái của lsx thành Đang sản xuất
                            lsx.StatusId = statusProcLsx;
                            context.ProductionOrder.Update(lsx);
                            //context.SaveChanges();
                        }

                        #region Kiểm tra trạng thái của Item cha, lệnh sản xuất cha (khi trừ lệnh bổ sung)

                        if (isItemExtend == true)
                        {
                            if (item.IsAddPart != true)
                            {
                                var item_parent =
                                    listAllProductionOrderMapping.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == item.ParentId);

                                //Kiểm tra trạng thái của Item
                                var statusItem_parent =
                                    listAllStatusItem.FirstOrDefault(x => x.CategoryId == item_parent.StatusId);

                                if (statusItem_parent.CategoryCode == "COMP")
                                {
                                    //Nếu trạng thái của Item cha đang là Đã hoàn thành thì đổi trạng thái của Item thành Đang sản xuất
                                    item_parent.StatusId = statusProcItem;
                                    context.ProductionOrderMapping.Update(item_parent);
                                    //context.SaveChanges();
                                }

                                var lsx_parent = listAllProductionOrder.FirstOrDefault(x =>
                                    x.ProductionOrderId == item_parent.ProductionOrderId);

                                var statusLsx_parent =
                                    listAllStatusLsx.FirstOrDefault(x => x.CategoryId == lsx_parent.StatusId);

                                //Kiểm tra trạng thái của lệnh sản xuất cha
                                if (statusLsx_parent.CategoryCode == "COMP")
                                {
                                    //Nếu lệnh sản xuất cha đang ở trạng thái Đã hoàn thành thì đổi trạng thái của lsx thành Đang sản xuất
                                    lsx_parent.StatusId = statusProcLsx;
                                    context.ProductionOrder.Update(lsx_parent);
                                    //context.SaveChanges();
                                }
                            }
                        }

                        #endregion
                    }
                    else if (statusItem.CategoryCode == "CANC" || statusItem.CategoryCode == "PEND")
                    {
                        return new MinusItemResult()
                        {
                            Status = false,
                            Message = "Không thể thao tác vì Trạng thái sản phẩm đã thay đổi sang " + statusItem.CategoryName,
                        };
                    }

                    #endregion

                    context.SaveChanges();
                    transaction.Commit();

                    return new MinusItemResult()
                    {
                        Status = true,
                        Message = "Success"
                    };
                }
            }
            catch (Exception e)
            {
                return new MinusItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public DeleteItemInProductionResult DeleteItemInProduction(DeleteItemInProductionParameter parameter)
        {
            try
            {


                var commonProduct = context.ProductionOrderMapping.ToList();
                var productItem = commonProduct.FirstOrDefault(x => x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);
                if (productItem == null)
                {
                    return new DeleteItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không tìm thấy item này!"
                    };
                }
                // Lấy trạng thái mới tạo của lệnh sản xuất
                var statusTypeProductOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusCANCIdProductOrder = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProductOrder.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                var statusCOMPIdProductOrder = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProductOrder.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                var productionOrder = context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == productItem.ProductionOrderId);
                if (productionOrder == null || productionOrder.StatusId == statusCANCIdProductOrder || productionOrder.StatusId == statusCOMPIdProductOrder)
                {
                    return new DeleteItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể xóa item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                // Lấy trạng thái của item 
                var statusItem = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                var statusItemNew = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusItem.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;
                if (productItem.StatusId != statusItemNew)
                {
                    return new DeleteItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể xóa item ở trạng thái này!"
                    };
                }

                context.ProductionOrderMapping.Remove(productItem);

                var parentRemove = commonProduct.FirstOrDefault(x => x.ProductionOrderMappingId == productItem.ParentPartId);
                if (parentRemove != null)
                {
                    var listChildren = commonProduct.Where(x => x.ParentPartId == parentRemove.ProductionOrderMappingId).ToList();
                    if (listChildren.Count == 0)
                    {
                        parentRemove.IsParent = false;
                        parentRemove.IsSubParent = false;

                        context.ProductionOrderMapping.Update(parentRemove);
                    }
                }
                var commonProductItem = context.ProductionOrderMapping.ToList();
                var commonTechniqueMapping = context.TechniqueRequestMapping.ToList();

                var listTechniqueItemMapping = commonTechniqueMapping.Where(x => x.ProductionOrderMappingId == productItem.ProductionOrderMappingId).ToList();

                context.TechniqueRequestMapping.RemoveRange(listTechniqueItemMapping);
                var listChildrenItem = commonProductItem.Where(x => x.ParentPartId == productItem.ProductionOrderMappingId).ToList();
                if (listChildrenItem.Count > 0)
                {
                    context.ProductionOrderMapping.RemoveRange(listChildrenItem);
                    var listItemId = listChildrenItem.Select(x => x.ProductionOrderMappingId).ToList();
                    var listTechniqueChildren = commonTechniqueMapping.Where(x => listItemId.Contains(x.ProductionOrderMappingId)).ToList();
                    context.TechniqueRequestMapping.RemoveRange(listTechniqueChildren);

                    var listItemChildrenChildren = commonProductItem.Where(x => x.ParentPartId != null && listItemId.Contains((Guid)x.ParentPartId)).ToList();
                    if (listItemChildrenChildren.Count > 0)
                    {
                        context.ProductionOrderMapping.RemoveRange(listItemChildrenChildren);
                        var listItemId2 = listItemChildrenChildren.Select(x => x.ProductionOrderMappingId).ToList();
                        var listTechniqueChildren2 = commonTechniqueMapping.Where(x => listItemId2.Contains(x.ProductionOrderMappingId)).ToList();
                        context.TechniqueRequestMapping.RemoveRange(listTechniqueChildren2);
                    }
                }


                context.SaveChanges();

                return new DeleteItemInProductionResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new DeleteItemInProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateItemInProductionResult CreateItemInProduction(CreateItemInProductionParameter parameter)
        {
            try
            {
                // Lấy trạng thái mới tạo của item
                var statusTypeProductOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusCANCIdProductOrder = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProductOrder.CategoryTypeId && x.CategoryCode == "CANC").CategoryId;
                var statusCOMPIdProductOrder = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProductOrder.CategoryTypeId && x.CategoryCode == "COMP").CategoryId;
                var productionOrder = context.ProductionOrder.FirstOrDefault(x =>
                    x.ProductionOrderId == parameter.ProductItem.ProductionOrderId);

                if (productionOrder == null || productionOrder.StatusId == statusCANCIdProductOrder ||
                    productionOrder.StatusId == statusCOMPIdProductOrder)
                {
                    return new CreateItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể thêm item khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusNewIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                var productItem = context.ProductionOrderMapping.FirstOrDefault(x =>
                    x.ProductionOrderMappingId == parameter.ProductItem.ProductionOrderMappingId);

                if (productItem == null || productItem.StatusId != statusNewIdProduct)
                {
                    return new CreateItemInProductionResult()
                    {
                        Status = false,
                        Message = "Không thể thêm item này!"
                    };
                }

                var productChidren = new ProductionOrderMapping();
                productChidren.CreatedById = parameter.UserId;
                productChidren.CreatedDate = DateTime.Now;
                productChidren.ParentType = false;
                productChidren.ProductColor = parameter.ProductItem.ProductColor;
                productChidren.ProductColorCode = parameter.ProductItem.ProductColorCode;
                productChidren.ProductionOrderId = parameter.ProductItem.ProductionOrderId;
                productChidren.ParentPartId = parameter.ProductItem.ProductionOrderMappingId;
                productChidren.ProductionOrderMappingId = Guid.NewGuid();
                productChidren.ProductLength = parameter.ProductItem.ProductLength;
                productChidren.ProductName = parameter.ProductItem.ProductName;
                productChidren.ProductThickness = parameter.ProductItem.ProductThickness;
                productChidren.ProductWidth = parameter.ProductItem.ProductWidth;
                productChidren.Quantity = parameter.ProductItem.Quantity;
                productChidren.StatusId = statusNewIdProduct;
                productChidren.TechniqueDescription = parameter.ProductItem.TechniqueDescription;
                productChidren.TotalArea = parameter.ProductItem.TotalArea;
                productChidren.ProductCode = parameter.ProductItem.ProductCode;
                productChidren.ProductOrderWorkflowId = parameter.ProductItem.ProductOrderWorkflowId;
                productChidren.Borehole = parameter.ProductItem.Borehole;
                productChidren.Hole = parameter.ProductItem.Hole;
                productChidren.ProductGroupCode = parameter.ProductItem.ProductGroupCode;

                var productGroupCode = productChidren.ProductGroupCode.Trim().ToLower();

                if (productChidren.TechniqueDescription == null)
                {
                    productChidren.TechniqueDescription = "";
                }
                var listTechniqueDescription = productChidren.TechniqueDescription.ToLower().Split(' ').ToList();

                var techniqueDescription = "";
                listTechniqueDescription.ForEach(e =>
                {
                    techniqueDescription = techniqueDescription + e + " ";
                });

                context.ProductionOrderMapping.Add(productChidren);

                var productionOrderMappingParent =
                    context.ProductionOrderMapping.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == productChidren.ParentId);
                if (productionOrderMappingParent != null)
                {
                    if (productionOrderMappingParent.ParentId != null)
                    {
                        productionOrderMappingParent.IsSubParent = true;
                        productionOrderMappingParent.IsParent = false;
                    }
                    else
                    {
                        productionOrderMappingParent.IsSubParent = false;
                        productionOrderMappingParent.IsParent = true;
                    }

                    context.ProductionOrderMapping.Update(productionOrderMappingParent);
                }

                // Lấy danh sách tất cả các tiến trình 
                var listTechnique = context.TechniqueRequest.ToList();
                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")
                                          ?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                // Thêm TechniqueRequestMapping (tiến trình)
                parameter.ProductItem.ListTechnique.ForEach(tech =>
                {
                    var techniqueRequest = new TechniqueRequestMapping();
                    techniqueRequest.CreatedById = parameter.UserId;
                    techniqueRequest.CreatedDate = DateTime.Now;
                    techniqueRequest.IsDefault = true;
                    techniqueRequest.ParentId = null;
                    techniqueRequest.ProductionOrderMappingId = productChidren.ProductionOrderMappingId;
                    techniqueRequest.Rate = tech.Rate;
                    techniqueRequest.TechniqueName = tech.TechniqueName;
                    techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                    techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                    techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                    techniqueRequest.TechniqueValue = null;
                    var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCode,
                        techniqueDescription, productChidren, thichness);
                    techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                    techniqueRequest.Thick = techniqueTemp.Thick;
                    techniqueRequest.Thin = techniqueTemp.Thin;
                    techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                    techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                    techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                    techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                    techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;

                    context.TechniqueRequestMapping.Add(techniqueRequest);
                });

                context.SaveChanges();

                return new CreateItemInProductionResult()
                {
                    Status = true,
                    Message = "Success",
                    ProductionOrderMappingId = productChidren.ProductionOrderMappingId
                };
            }
            catch (Exception e)
            {
                return new CreateItemInProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateWorkFlowForProductionOrderResult UpdateWorkFlowForProductionOrder(UpdateWorkFlowForProductionOrderParameter parameter)
        {
            try
            {
                var listProductionOrderMappingId =
                    parameter.ListProductItem.Select(x => x.ProductionOrderMappingId).ToList();

                var listProductItem = context.ProductionOrderMapping.Where(x =>
                    listProductionOrderMappingId.Contains(x.ProductionOrderMappingId)).ToList();

                var commonListTechniqueMapping = context.TechniqueRequestMapping.Where(x =>
                    listProductionOrderMappingId.Contains(x.ProductionOrderMappingId)).ToList();

                context.TechniqueRequestMapping.RemoveRange(commonListTechniqueMapping);

                // Lấy danh sách tất cả các tiến trình 
                var listTechnique = context.TechniqueRequest.ToList();
                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")
                                          ?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                //Lấy danh sách trạng thái của Item
                var category_type_item = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                var listAllStatusItem = context.Category
                    .Where(x => x.CategoryTypeId == category_type_item.CategoryTypeId).ToList();
                var item_status_new = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "NEW");


                //Kiểm tra xem có item nào trong danh sách không hợp lệ không?
                var isError = false;

                parameter.ListProductItem.ForEach(item =>
                {
                    var product = listProductItem.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                    if (product.StatusId != item_status_new.CategoryId)
                    {
                        isError = true;
                    }

                    product.UpdatedById = parameter.UserId;
                    product.UpdatedDate = DateTime.Now;
                    product.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                    var productGroupCode = product.ProductGroupCode != null ? product.ProductGroupCode.Trim().ToLower() : string.Empty;

                    if (product.TechniqueDescription == null)
                    {
                        product.TechniqueDescription = "";
                    }
                    var listTechniqueDescription = product.TechniqueDescription.ToLower().Split(' ').ToList();

                    var techniqueDescription = "";
                    listTechniqueDescription.ForEach(e =>
                    {
                        techniqueDescription = techniqueDescription + e + " ";
                    });
                    context.ProductionOrderMapping.Update(product);

                    // Thêm TechniqueRequestMapping (tiến trình)
                    item.ListTechnique.ForEach(tech =>
                    {
                        var techniqueRequest = new TechniqueRequestMapping();
                        techniqueRequest.CreatedById = parameter.UserId;
                        techniqueRequest.CreatedDate = DateTime.Now;
                        techniqueRequest.IsDefault = true;
                        techniqueRequest.ParentId = null;
                        techniqueRequest.ProductionOrderMappingId = product.ProductionOrderMappingId;
                        techniqueRequest.Rate = tech.Rate;
                        techniqueRequest.TechniqueName = tech.TechniqueName;
                        techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                        techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                        techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                        techniqueRequest.TechniqueValue = null;
                        var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCode, techniqueDescription, product, thichness);
                        techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                        techniqueRequest.Thick = techniqueTemp.Thick;
                        techniqueRequest.Thin = techniqueTemp.Thin;
                        techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                        techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                        techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                        techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                        techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;

                        context.TechniqueRequestMapping.Add(techniqueRequest);
                    });
                });

                if (isError == true)
                {
                    return new UpdateWorkFlowForProductionOrderResult()
                    {
                        Status = false,
                        Message = "Trạng thái sản phẩm đã có thay đổi"
                    };
                }

                context.SaveChanges();
                return new UpdateWorkFlowForProductionOrderResult()
                {
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new UpdateWorkFlowForProductionOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }


        public GetDataReportQuanlityControlResult GetDataReportQuanlityControl(GetDataReportQuanlityControlParameter parameter)
        {
            try
            {
                #region Category
                var qcNoteId = context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "GCQC")?.CategoryTypeId;
                var listQualityControlNote = context.Category.Where(w => w.CategoryTypeId == qcNoteId).ToList();

                var errorNoteId = context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "LLSX")?.CategoryTypeId;
                var listErrorType = context.Category.Where(w => w.CategoryTypeId == errorNoteId).ToList();
                #endregion

                var listTechniqueRequestEntity = context.TechniqueRequest.Where(w => w.ParentId == null).ToList();
                var listTechniqueRequest = new List<Models.Manufacture.TechniqueRequestEntityModel>();

                listTechniqueRequestEntity.ForEach(e =>
                {
                    listTechniqueRequest.Add(new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = e.TechniqueRequestId,
                        TechniqueName = e.TechniqueName
                    });
                });

                return new GetDataReportQuanlityControlResult()
                {
                    ListTechniqueRequest = listTechniqueRequest.OrderBy(w => w.TechniqueName).ToList(),
                    ListQualityControlNote = listQualityControlNote.OrderBy(w => w.CategoryName).ToList() ?? new List<Category>(),
                    ListErrorType = listErrorType.OrderBy(w => w.CategoryName).ToList() ?? new List<Category>(),
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new GetDataReportQuanlityControlResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public SearchQuanlityControlReportResult SearchQuanlityControlReport(SearchQuanlityControlReportParameter parameter)
        {
            try
            {
                var listProductionOrderHistoryEntity = context.ProductionOrderHistory
                                                              .Where(w => ((parameter.FromDate == null) || (w.CreatedDate >= parameter.FromDate))
                                                                         && ((parameter.ToDate == null) || (w.CreatedDate <= parameter.ToDate))
                                                                         && ((parameter.ListTechniqueRequestId.Count == 0) || parameter.ListTechniqueRequestId.Contains(w.TechniqueRequestId))
                                                                         && w.CalculatorType.Value == false
                                                                         && w.IsError.Value == true)
                                                                         .ToList();

                var listQuanlityControlReport = new List<QuanlityControlReportModel>();

                var listProductOrderId = listProductionOrderHistoryEntity.Select(w => w.ProductionOrderId).ToList() ?? new List<Guid>();

                var listProductionOrder = context.ProductionOrder.Where(w => listProductOrderId.Contains(w.ProductionOrderId)).ToList() ?? new List<ProductionOrder>();

                var listProductionOrderMappingEntity = context.ProductionOrderMapping.ToList();

                var listProductionOrderMapping = listProductionOrderMappingEntity.Where(w => listProductOrderId.Contains(w.ProductionOrderId)).ToList() ?? new List<ProductionOrderMapping>();

                listProductionOrderHistoryEntity.ForEach(e =>
                {
                    var productionOrder = listProductionOrder.FirstOrDefault(w => w.ProductionOrderId == e.ProductionOrderId);
                    //var productionOrderMapping = listProductionOrderMapping.FirstOrDefault(w => w.ProductionOrderId == e.ProductionOrderId);
                    var productionOrderMapping = listProductionOrderMapping.FirstOrDefault(w => w.ProductionOrderMappingId == e.ProductionOrderMappingId);
                    listQuanlityControlReport.Add(new QuanlityControlReportModel
                    {
                        ProductionOrderHistoryId = e.ProductionOrderHistoryId,
                        ProductionOrderId = e.ProductionOrderId,
                        CreatedDate = e.CreatedDate,
                        ProductionOrderCode = productionOrder?.ProductionOrderCode ?? "",//Lệnh số
                        CustomerName = productionOrder?.CustomerName ?? "",  //Tên khách hàng
                        ProductName = productionOrderMapping?.ProductName ?? "",//Sản phẩm
                        ProductLength = productionOrderMapping?.ProductLength ?? 0, //Kích thước: Dài
                        ProductWidth = productionOrderMapping?.ProductWidth ?? 0, //Kích thước: Rộng
                        Quantity = 1,//mặc định số tấm: 1
                        //TotalArea = productionOrderMapping?.TotalArea ?? 0,
                        Borehole = productionOrderMapping.Borehole,
                        Hole = productionOrderMapping.Hole,
                        TotalArea = (productionOrderMapping.ProductWidth * productionOrderMapping.ProductLength) / 1000000,
                        ProductThickness = productionOrderMapping?.ProductThickness ?? 0,
                        ProductColor = productionOrderMapping?.ProductColor ?? "",
                        Description = e?.Description ?? "",
                        NoteQc = e.NoteQc,
                        ErrorType = e.ErrorType,
                    });
                });

                #region Lọc theo độ dày
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                if (parameter.ListThicknessOptionId.Count != 0)
                {
                    if (parameter.ListThicknessOptionId.Contains(1) && !parameter.ListThicknessOptionId.Contains(2))
                    {
                        //dày
                        listQuanlityControlReport = listQuanlityControlReport.Where(w => w.ProductThickness >= thichness).ToList();
                    }
                    if (parameter.ListThicknessOptionId.Contains(2) && !parameter.ListThicknessOptionId.Contains(1))
                    {
                        //mỏng
                        listQuanlityControlReport = listQuanlityControlReport.Where(w => w.ProductThickness < thichness).ToList();
                    }
                }
                #endregion

                #region Phần lấy thông tin báo cáo tất cả tổ
                //Từ Id tổ TechniqueRequestId lấy list Thao tác theo điều kiện Tổ và Thời gian:
                //listProductionOrderHistoryEntity

                //Lấy list ProductionOrderMappingId duy nhất trong listProductionOrderHistory:
                var listProductionOrderMappingId = listProductionOrderHistoryEntity.Select(y => y.ProductionOrderMappingId).Distinct().ToList() ?? new List<Guid>();

                //bảng lưu thuộc tính của sản phẩm
                //listProductionOrderMappingEntity

                var listTechniqueRequestEntity = context.TechniqueRequest.Where(w => w.ParentId == null).ToList() ?? new List<TechniqueRequest>();

                //loại lỗi
                var errorNoteId = context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "LLSX")?.CategoryTypeId;
                var listErrorType = context.Category.Where(w => w.CategoryTypeId == errorNoteId).ToList();
                //lấy biến id loại lỗi
                var errorByTechEquipmentsId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LTBCN")?.CategoryId; //id lỗi theo thiết bị công nghệ
                var errorByManufactureId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LTSX")?.CategoryId; //id lỗi theo tổ sản xuất
                var errorByMaterialsId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LVT")?.CategoryId; //id lỗi theo vật tư

                var listTechniqueRequestReport = new List<TechniqueRequestReportModel>();

                listTechniqueRequestEntity?.ForEach(techiqueRequest =>
                {
                    var techniqueRequestReport = new TechniqueRequestReportModel
                    {
                        TechniqueRequestId = techiqueRequest.TechniqueRequestId,
                        TechniqueName = techiqueRequest.TechniqueName,
                        TotalArea = 0,  //tổng sản lượng
                        TotalAreaError = 0, //tổng lỗi
                        TotalAreaErrorByThickGlass = 0, //tổng lỗi theo kính dày
                        TotalAreaErrorByThinGlass = 0, //tổng lỗi theo kính mỏng
                        TotalAreaErrorByTechEquipments = 0, //tổng lỗi theo thiết bị công nghệ
                        TotalAreaErrorByManufacture = 0, //tổng lỗi theo tổ sản xuất
                        TotalAreaErrorByMaterials = 0,//tổng lỗi theo vật tư
                    };

                    listProductionOrderMappingId?.ForEach(itemId =>
                    {
                        var _item = listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == itemId);
                        var length = _item.ProductLength ?? 0;
                        var width = _item.ProductWidth ?? 0;

                        //Lấy số tấm đơn vị đã hoàn thành
                        var tong_cong = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == true && x.ProductionOrderMappingId == itemId).ToList().Count();
                        var tong_tru = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId).ToList().Count();
                        var tong_loi_kt = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true).ToList().Count();
                        var tong_loi_kinh_day = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true && x.Thick == true).ToList().Count();
                        var tong_loi_kinh_mong = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true && x.Thin == true).ToList().Count();
                        var tong_loi_thiet_bi_cong_nghe = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true && x.ErrorType == errorByTechEquipmentsId).ToList().Count();
                        var tong_loi_to_san_xuat = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true && x.ErrorType == errorByManufactureId).ToList().Count();
                        var tong_loi_vat_tu = listProductionOrderHistoryEntity.Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true && x.ErrorType == errorByMaterialsId).ToList().Count();

                        techniqueRequestReport.TotalArea += (tong_cong - tong_tru + tong_loi_kt) * width * length / 1000000;
                        techniqueRequestReport.TotalAreaError += tong_loi_kt * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByThickGlass += tong_loi_kinh_day * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByThinGlass += tong_loi_kinh_mong * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByTechEquipments += tong_loi_thiet_bi_cong_nghe * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByManufacture += tong_loi_to_san_xuat * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByMaterials += tong_loi_vat_tu * width * length / 1000000;
                    });

                    listTechniqueRequestReport.Add(techniqueRequestReport);
                });
                #endregion

                #region Làm tròn số và Tính tỉ lệ % sản phẩm lỗi
                listQuanlityControlReport.ForEach(report =>
                {
                    report.TotalArea = Math.Round(report.TotalArea.Value, 2);
                });

                listTechniqueRequestReport.ForEach(report =>
                {
                    report.TotalArea = Math.Round(report.TotalArea.Value, 2);
                    report.TotalAreaError = Math.Round(report.TotalAreaError.Value, 2);
                    report.TotalAreaErrorByThickGlass = Math.Round(report.TotalAreaErrorByThickGlass.Value, 2);
                    report.TotalAreaErrorByThinGlass = Math.Round(report.TotalAreaErrorByThinGlass.Value, 2);
                    report.TotalAreaErrorByTechEquipments = Math.Round(report.TotalAreaErrorByTechEquipments.Value, 2);
                    report.TotalAreaErrorByManufacture = Math.Round(report.TotalAreaErrorByManufacture.Value, 2);
                    report.TotalAreaErrorByMaterials = Math.Round(report.TotalAreaErrorByMaterials.Value, 2);

                    report.TotalAreaByPercent = 100;
                    report.TotalAreaErrorByPercent = Math.Round(((report.TotalAreaError / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByThickGlassByPercent = Math.Round(((report.TotalAreaErrorByThickGlass / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByThinGlassByPercent = Math.Round(((report.TotalAreaErrorByThinGlass / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByTechEquipmentsByPercent = Math.Round(((report.TotalAreaErrorByTechEquipments / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByManufactureByPercent = Math.Round(((report.TotalAreaErrorByManufacture / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByMaterialsByPercent = Math.Round(((report.TotalAreaErrorByMaterials / report.TotalArea) * 100).Value, 2);
                });
                #endregion

                return new SearchQuanlityControlReportResult()
                {
                    ListQuanlityControlReport = listQuanlityControlReport.OrderByDescending(w => w.CreatedDate).ToList(), //báo cáo lỗi theo từng tổ
                    ListTechniqueRequestReport = listTechniqueRequestReport.OrderBy(w => w.TechniqueName).ToList(), //báo cáo tổng
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new SearchQuanlityControlReportResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public ExportManufactureReportResult ExportManufactureReport(ExportManufactureReportParameter parameter)
        {
            try
            {
                #region Phần lấy thông tin báo cáo tất cả tổ

                //Từ Id tổ TechniqueRequestId lấy list Thao tác theo điều kiện Tổ và Thời gian:
                var listProductionOrderHistoryEntity = context.ProductionOrderHistory.Where(x =>
                    x.CreatedDate.Date >= parameter.FromDate.Value.Date &&
                    x.CreatedDate.Date <= parameter.ToDate.Value.Date).ToList();
                var listProductionOrderMappingEntity = context.ProductionOrderMapping.ToList();

                //Lấy list ProductionOrderMappingId duy nhất trong listProductionOrderHistory:
                var listProductionOrderMappingId =
                    listProductionOrderHistoryEntity.Select(y => y.ProductionOrderMappingId).Distinct().ToList() ??
                    new List<Guid>();

                //bảng lưu thuộc tính của sản phẩm
                var listTechniqueRequestEntity = context.TechniqueRequest.Where(w => w.ParentId == null).ToList() ??
                                                 new List<TechniqueRequest>();

                //loại lỗi
                var errorNoteId = context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "LLSX")
                    ?.CategoryTypeId;
                var listErrorType = context.Category.Where(w => w.CategoryTypeId == errorNoteId).ToList();
                //lấy biến id loại lỗi
                var errorByTechEquipmentsId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LTBCN")?.CategoryId; //id lỗi theo thiết bị công nghệ
                var errorByManufactureId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LTSX")?.CategoryId; //id lỗi theo tổ sản xuất
                var errorByMaterialsId = listErrorType.FirstOrDefault(f => f.CategoryCode == "LVT")?.CategoryId; //id lỗi theo vật tư

                var listTechniqueRequestReport = new List<TechniqueRequestReportModel>();

                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")
                                          ?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                listTechniqueRequestEntity?.ForEach(techiqueRequest =>
                {
                    var techniqueRequestReport = new TechniqueRequestReportModel
                    {
                        TechniqueRequestId = techiqueRequest.TechniqueRequestId,
                        TechniqueName = techiqueRequest.TechniqueName,
                        TotalArea = 0,  //tổng sản lượng
                        TotalAreaError = 0, //tổng lỗi
                        TotalAreaErrorByThickGlass = 0, //tổng lỗi theo kính dày
                        TotalAreaErrorByThinGlass = 0, //tổng lỗi theo kính mỏng
                        TotalAreaErrorByTechEquipments = 0, //tổng lỗi theo thiết bị công nghệ
                        TotalAreaErrorByManufacture = 0, //tổng lỗi theo tổ sản xuất
                        TotalAreaErrorByMaterials = 0,//tổng lỗi theo vật tư
                    };

                    //lay history by id
                    var listProductionOrderHistoryById = listProductionOrderHistoryEntity
                        .Where(w => w.TechniqueRequestId == techiqueRequest.TechniqueRequestId).ToList();

                    listProductionOrderMappingId?.ForEach(itemId =>
                    {
                        var _item = listProductionOrderMappingEntity.FirstOrDefault(x =>
                            x.ProductionOrderMappingId == itemId);
                        var do_day = _item.ProductThickness;
                        var length = _item.ProductLength ?? 0;
                        var width = _item.ProductWidth ?? 0;

                        var tong_cong = listProductionOrderHistoryById
                            .Where(x => x.CalculatorType == true && x.ProductionOrderMappingId == itemId).ToList()
                            .Count();
                        var tong_tru = listProductionOrderHistoryById
                            .Where(x => x.CalculatorType == false && x.ProductionOrderMappingId == itemId).ToList()
                            .Count();
                        var tong_loi_kt = listProductionOrderHistoryById.Where(x =>
                                x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true)
                            .ToList().Count();
                        var tong_loi_kinh_day = 0;
                        var tong_loi_kinh_mong = 0;

                        if (do_day >= thichness)
                        {
                            tong_loi_kinh_day = listProductionOrderHistoryById.Where(x =>
                                    x.CalculatorType == false && x.ProductionOrderMappingId == itemId &&
                                    x.IsError == true)
                                .ToList().Count();
                        }
                        else
                        {
                            tong_loi_kinh_mong = listProductionOrderHistoryById.Where(x =>
                                    x.CalculatorType == false && x.ProductionOrderMappingId == itemId &&
                                    x.IsError == true)
                                .ToList().Count();
                        }

                        var tong_loi_thiet_bi_cong_nghe = listProductionOrderHistoryById.Where(x =>
                            x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true &&
                            x.ErrorType == errorByTechEquipmentsId).ToList().Count();
                        var tong_loi_to_san_xuat = listProductionOrderHistoryById.Where(x =>
                            x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true &&
                            x.ErrorType == errorByManufactureId).ToList().Count();
                        var tong_loi_vat_tu = listProductionOrderHistoryById.Where(x =>
                            x.CalculatorType == false && x.ProductionOrderMappingId == itemId && x.IsError == true &&
                            x.ErrorType == errorByMaterialsId).ToList().Count();

                        techniqueRequestReport.TotalArea +=
                            (tong_cong - tong_tru + tong_loi_kt) * width * length / 1000000;
                        techniqueRequestReport.TotalAreaError += tong_loi_kt * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByThickGlass +=
                            tong_loi_kinh_day * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByThinGlass +=
                            tong_loi_kinh_mong * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByTechEquipments +=
                            tong_loi_thiet_bi_cong_nghe * width * length / 1000000;
                        ;
                        techniqueRequestReport.TotalAreaErrorByManufacture +=
                            tong_loi_to_san_xuat * width * length / 1000000;
                        techniqueRequestReport.TotalAreaErrorByMaterials += tong_loi_vat_tu * width * length / 1000000;
                    });

                    listTechniqueRequestReport.Add(techniqueRequestReport);
                });

                #endregion

                #region Làm tròn số và Tính tỉ lệ % sản phẩm lỗi

                listTechniqueRequestReport.ForEach(report =>
                {
                    report.TotalArea = Math.Round(report.TotalArea.Value, 2);
                    report.TotalAreaError = Math.Round(report.TotalAreaError.Value, 2);
                    report.TotalAreaErrorByThickGlass = Math.Round(report.TotalAreaErrorByThickGlass.Value, 2);
                    report.TotalAreaErrorByThinGlass = Math.Round(report.TotalAreaErrorByThinGlass.Value, 2);
                    report.TotalAreaErrorByTechEquipments = Math.Round(report.TotalAreaErrorByTechEquipments.Value, 2);
                    report.TotalAreaErrorByManufacture = Math.Round(report.TotalAreaErrorByManufacture.Value, 2);
                    report.TotalAreaErrorByMaterials = Math.Round(report.TotalAreaErrorByMaterials.Value, 2);

                    report.TotalAreaByPercent = 100;
                    report.TotalAreaErrorByPercent =
                        Math.Round(((report.TotalAreaError / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByThickGlassByPercent =
                        Math.Round(((report.TotalAreaErrorByThickGlass / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByThinGlassByPercent =
                        Math.Round(((report.TotalAreaErrorByThinGlass / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByTechEquipmentsByPercent =
                        Math.Round(((report.TotalAreaErrorByTechEquipments / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByManufactureByPercent =
                        Math.Round(((report.TotalAreaErrorByManufacture / report.TotalArea) * 100).Value, 2);
                    report.TotalAreaErrorByMaterialsByPercent =
                        Math.Round(((report.TotalAreaErrorByMaterials / report.TotalArea) * 100).Value, 2);

                    //handle NaN
                    if (Double.IsNaN(report.TotalAreaErrorByPercent.Value)) report.TotalAreaErrorByPercent = 0;
                    if (Double.IsNaN(report.TotalAreaErrorByThickGlassByPercent.Value))
                        report.TotalAreaErrorByThickGlassByPercent = 0;
                    if (Double.IsNaN(report.TotalAreaErrorByThinGlassByPercent.Value))
                        report.TotalAreaErrorByThinGlassByPercent = 0;
                    if (Double.IsNaN(report.TotalAreaErrorByTechEquipmentsByPercent.Value))
                        report.TotalAreaErrorByTechEquipmentsByPercent = 0;
                    if (Double.IsNaN(report.TotalAreaErrorByManufactureByPercent.Value))
                        report.TotalAreaErrorByManufactureByPercent = 0;
                    if (Double.IsNaN(report.TotalAreaErrorByMaterialsByPercent.Value))
                        report.TotalAreaErrorByMaterialsByPercent = 0;
                });

                #endregion

                return new ExportManufactureReportResult()
                {
                    ListTechniqueRequestReport = listTechniqueRequestReport.OrderBy(w => w.TechniqueName).ToList(),
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new ExportManufactureReportResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataListItemDialogResult GetMasterDataListItemDialog(GetMasterDataListItemDialogParameter parameter)
        {
            try
            {
                var listItem = context.ProductionOrderMapping
                    .Where(x => x.ProductionOrderId == parameter.ProductionOrderId).Select(y =>
                        new ProductionOrderMappingEntityModel
                        {
                            ProductionOrderMappingId = y.ProductionOrderMappingId,
                            ProductName = y.ProductName,
                            ProductColor = y.ProductColor,
                            ProductThickness = y.ProductThickness,
                            ProductLength = y.ProductLength,
                            ProductWidth = y.ProductWidth,
                            Quantity = y.Quantity,
                            TotalArea = y.TotalArea,
                            CompleteQuantity = 0,
                            CompleteTotalArea = 0,
                            TechniqueDescription = y.TechniqueDescription,
                            ProductOrderWorkflowId = y.ProductOrderWorkflowId,
                            WorkflowName = ""
                        }).ToList();

                //Lấy tên quy trình
                var listAllProductOrderWorkflow = context.ProductOrderWorkflow.ToList();
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();
                var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                listItem.ForEach(item =>
                {
                    var productOrderWorkflow =
                        listAllProductOrderWorkflow.FirstOrDefault(x =>
                            x.ProductOrderWorkflowId == item.ProductOrderWorkflowId);

                    item.WorkflowName = productOrderWorkflow?.Name;

                    //Lấy tiến trình cuối cùng mà Item đi qua
                    var TechniqueRequestFinal = listAllTechniqueRequestMapping
                        .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                        .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                    //Đếm số lượng Item với Tiến trình này đã hoàn thành
                    var tong_cong = listAllProductionOrderHistory.Where(x =>
                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                            x.TechniqueRequestId == TechniqueRequestFinal.TechniqueRequestId &&
                            x.CalculatorType == true)
                        .ToList().Count;

                    var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                            x.ParentId == item.ProductionOrderMappingId &&
                            x.TechniqueRequestId == TechniqueRequestFinal.TechniqueRequestId &&
                            x.CalculatorType == true)
                        .ToList().Count;

                    var tong_tru = listAllProductionOrderHistory.Where(x =>
                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                            x.TechniqueRequestId == TechniqueRequestFinal.TechniqueRequestId &&
                            x.CalculatorType == false)
                        .ToList().Count;

                    var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                            x.ParentId == item.ProductionOrderMappingId &&
                            x.TechniqueRequestId == TechniqueRequestFinal.TechniqueRequestId &&
                            x.CalculatorType == false)
                        .ToList().Count;

                    item.CompleteQuantity =
                        Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung));
                    item.CompleteTotalArea = item.CompleteQuantity * item.ProductLength * item.ProductWidth / 1000000;
                });

                return new GetMasterDataListItemDialogResult()
                {
                    Status = true,
                    Message = "Success",
                    ListItem = listItem
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataListItemDialogResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateProductionOrderAdditionalResult CreateProductionOrderAdditional(CreateProductionOrderAdditionalParameter parameter)
        {
            try
            {
                var listProductionOrderHistoId = parameter.ListProduct.Select(x => x.ProductionOrderHistoryId).ToList();
                var commonProductionOrder = context.ProductionOrder.ToList();

                //
                var listAllPartItemMapping = context.PartItemMapping.ToList();

                // Lấy trạng thái của lệnh sản xuất và trạng thái của item trong lệnh sản xuất
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusTypeProduct = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");

                // Lấy danh sách trạng thái của lệnh sản xuất
                var statusNewId = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                // Lấy danh sách trạng thái của item trong lệnh sản xuất
                var statusNewIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusTypeProduct.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                // Lấy danh sách tất cả các item 
                var commonProductItem = context.ProductionOrderMapping.ToList();

                // Lấy danh sách bảng mapping giữa tiến trình và quy trình
                var commonOrderTechniqueMapping = context.OrderTechniqueMapping.ToList();
                // Lấy danh sách bảng mapping giữa tiến trình và quy trình
                var commonProductOrderWorkFlow = context.ProductOrderWorkflow.ToList();

                var commonTechnique = context.TechniqueRequest.ToList();
                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                // Lấy danh sách trạng thái lệnh sản xuất
                var statusProductionOrder = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var listStatusProductionOrder = context.Category.Where(x => x.CategoryTypeId == statusProductionOrder.CategoryTypeId);
                var statusCOMP = listStatusProductionOrder.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;
                var statusPEND = listStatusProductionOrder.FirstOrDefault(x => x.CategoryCode == "PEND").CategoryId;
                var statusCANC = listStatusProductionOrder.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;
                var commonHistory = context.ProductionOrderHistory.Where(x =>
                                                                    listProductionOrderHistoId.Contains(x.ProductionOrderHistoryId)).ToList();
                var commonTotal = context.TotalProductionOrderMapping.ToList();
                var listAllTotalProductionOrder = context.TotalProductionOrder.ToList();
                var isResult = true;
                parameter.ListProduct.ForEach(item =>
                {
                    var productOrder = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);

                    if (productOrder != null)
                    {
                        if (statusCOMP == productOrder.StatusId || statusPEND == productOrder.StatusId || statusCANC == productOrder.StatusId)
                        {
                            isResult = false;
                        }
                        else
                        {
                            // Lấy parentId trong bảng history của item
                            var historyProductItem = commonHistory.FirstOrDefault(x =>
                                                        x.ProductionOrderHistoryId == item.ProductionOrderHistoryId);

                            // Nếu tạo lệnh bổ sung cho bán thành phẩm
                            if (historyProductItem != null && (historyProductItem.IsParent == true || historyProductItem.IsSubParent == true))
                            {
                                // Nếu là lỗi của bán thành phẩm trước
                                if (historyProductItem.IsChildren == true)
                                {
                                    #region Tạo lệnh bổ sung

                                    var productionOrder = new ProductionOrder();
                                    var number = commonProductionOrder.Where(x => x.ParentId == productOrder.ProductionOrderId).Count() + 1;
                                    
                                    productionOrder.CreatedById = parameter.UserId;
                                    productionOrder.CreatedDate = DateTime.Now;
                                    productionOrder.CustomerName = productOrder.CustomerName.Trim();
                                    productionOrder.CustomerNumber = productOrder.CustomerNumber;
                                    productionOrder.EndDate = productOrder.EndDate;
                                    productionOrder.Especially = true;
                                    productionOrder.Note = productOrder.Note == null ? null : productOrder.Note.Trim();
                                    productionOrder.NoteTechnique = productOrder.NoteTechnique == null ? null : productOrder.NoteTechnique.Trim();
                                    productionOrder.OrderId = productOrder.OrderId;
                                    productionOrder.PlaceOfDelivery = productOrder.PlaceOfDelivery == null ? null : productOrder.PlaceOfDelivery.Trim();
                                    productionOrder.ProductionOrderCode = productOrder.ProductionOrderCode.Trim() + "_" + number.ToString();
                                    productionOrder.ProductionOrderId = Guid.NewGuid();
                                    productionOrder.ReceivedDate = productOrder.ReceivedDate;
                                    productionOrder.ParentId = productOrder.ProductionOrderId;
                                    productionOrder.StartDate = productOrder.StartDate;
                                    productionOrder.StatusId = statusNewId;
                                    productionOrder.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                    productionOrder.Note = item.Note;

                                    commonProductionOrder.Add(productionOrder);

                                    context.ProductionOrder.Add(productionOrder);

                                    #endregion

                                    #region Thêm lệnh bổ sung vào lệnh sản xuất tổng mới nhât

                                    // Thêm lệnh bổ sung vào lệnh sản xuất tổng mới nhất
                                    var total = commonTotal.Where(x => x.ProductionOrderId == productionOrder.ParentId).
                                                                           OrderByDescending(y => y.CreatedDate).ToList();
                                    var totalProductOrderMapping = new TotalProductionOrderMapping()
                                    {
                                        TotalProductionOrderId = total[0].TotalProductionOrderId,
                                        CreatedDate = DateTime.Now,
                                        CreatedById = parameter.UserId,
                                        ProductionOrderId = productionOrder.ProductionOrderId,
                                        TotalProductionOrderMappingId = Guid.NewGuid()
                                    };

                                    context.TotalProductionOrderMapping.Add(totalProductOrderMapping);

                                    #endregion

                                    #region Tạo item trong lệnh sản xuất bổ sung vừa tạo

                                    // Tạo item bán thành phẩm bổ sung cho lệnh bổ sung

                                    var productionOrderMappingChildren = commonProductItem.FirstOrDefault(x =>
                                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                                    var productionOrderMappingNew = new ProductionOrderMapping();
                                    productionOrderMappingNew.CreatedById = parameter.UserId;
                                    productionOrderMappingNew.CreatedDate = DateTime.Now;
                                    productionOrderMappingNew.ParentType = true;
                                  
                                    productionOrderMappingNew.ProductColor = productionOrderMappingChildren.ProductColor;
                                    productionOrderMappingNew.ProductColorCode = productionOrderMappingChildren.ProductColorCode;
                                    productionOrderMappingNew.ProductionOrderId = productionOrder.ProductionOrderId;
                                    productionOrderMappingNew.ProductId = null;
                                    productionOrderMappingNew.ProductionOrderMappingId = Guid.NewGuid();
                                    productionOrderMappingNew.ProductLength = productionOrderMappingChildren.ProductLength;
                                    productionOrderMappingNew.ProductName = productionOrderMappingChildren.ProductName;
                                    productionOrderMappingNew.ProductThickness = productionOrderMappingChildren.ProductThickness;
                                    productionOrderMappingNew.ProductWidth = productionOrderMappingChildren.ProductWidth;
                                    productionOrderMappingNew.Quantity = 1;
                                    productionOrderMappingNew.StatusId = statusNewIdProduct;
                                    productionOrderMappingNew.Especially = true;
                                    productionOrderMappingNew.ProductLength = productionOrderMappingChildren.ProductLength;
                                    productionOrderMappingNew.OriginalId = productionOrderMappingChildren.OriginalId;
                                    productionOrderMappingNew.TechniqueDescription = productionOrderMappingChildren.TechniqueDescription;
                                    productionOrderMappingNew.TotalArea = productionOrderMappingNew.ProductWidth * productionOrderMappingNew.ProductLength / 1000000 * productionOrderMappingNew.Quantity;
                                    productionOrderMappingNew.ProductCode = productionOrderMappingChildren.ProductCode;
                                    productionOrderMappingNew.ProductOrderWorkflowId = productionOrderMappingChildren.ProductOrderWorkflowId;
                                    productionOrderMappingNew.Borehole = productionOrderMappingChildren.Borehole;
                                    productionOrderMappingNew.Hole = productionOrderMappingChildren.Hole;
                                    productionOrderMappingNew.ProductGroupCode = productionOrderMappingChildren.ProductGroupCode;
                                    productionOrderMappingNew.IsParent = productionOrderMappingChildren.IsParent;
                                    productionOrderMappingNew.IsSubParent = productionOrderMappingChildren.IsSubParent;
                                    productionOrderMappingNew.StartId = productionOrderMappingChildren.StartId;
                                    productionOrderMappingNew.ParentPartId = productionOrderMappingChildren.ParentPartId;
                                    productionOrderMappingNew.ParentId = productionOrderMappingChildren.ProductionOrderMappingId;
                                    productionOrderMappingNew.IsAddPart = true;

                                    commonProductItem.Add(productionOrderMappingNew);
                                    context.ProductionOrderMapping.Add(productionOrderMappingNew);

                                    #endregion

                                    #region Đánh dấu trong bảng PartItemMapping item bán thành phẩm đã tạo lệnh bs

                                    var partItem = listAllPartItemMapping.FirstOrDefault(x =>
                                        x.ProductionOrderHistoryId == item.ProductionOrderHistoryId &&
                                        x.ProductionOrderMappingId ==
                                        productionOrderMappingChildren.ProductionOrderMappingId);

                                    partItem.HasCreated = true;
                                    context.PartItemMapping.Update(partItem);
                                    context.SaveChanges();

                                    #endregion

                                    #region Tạo mapping giữa item và tiến trinh

                                    var productGroupCode = productionOrderMappingNew.ProductGroupCode.Trim().ToLower();

                                    if (productionOrderMappingNew.TechniqueDescription == null)
                                    {
                                        productionOrderMappingNew.TechniqueDescription = "";
                                    }
                                    var listTechniqueDescription = productionOrderMappingNew.TechniqueDescription.ToLower().Split(' ').ToList();

                                    var techniqueDescription = "";
                                    listTechniqueDescription.ForEach(e =>
                                    {
                                        techniqueDescription = techniqueDescription + e + " ";
                                    });

                                    // Lấy danh sách tiến trình của quy trình bán thành phẩm
                                    var listTechniqueRequest = commonOrderTechniqueMapping.Where(x =>
                                            x.ProductOrderWorkflowId ==
                                            productionOrderMappingNew.ProductOrderWorkflowId)
                                        .ToList();
                                    // Danh sách tất cả tiến trình của item
                                    var listTechniqueMapping = new List<TechniqueRequestMapping>();
                                    listTechniqueRequest.ForEach(technique =>
                                    {
                                        var temp = new TechniqueRequestMapping();
                                        temp.Rate = technique.Rate;
                                        temp.TechniqueName = commonTechnique.FirstOrDefault(xs =>
                                            xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                        temp.TechniqueOrder = (byte)technique.TechniqueOrder;
                                        temp.TechniqueRequestId = technique.TechniqueRequestId;
                                        temp.CreatedById = parameter.UserId;
                                        temp.CreatedDate = DateTime.Now;
                                        temp.IsDefault = true;
                                        temp.ParentId = null;
                                        temp.TechniqueRequestMappingId = Guid.NewGuid();
                                        temp.TechniqueValue = null;
                                        listTechniqueMapping.Add(temp);
                                    });

                                    listTechniqueMapping.ForEach(map =>
                                    {
                                        map.ProductionOrderMappingId = productionOrderMappingNew.ProductionOrderMappingId;
                                        var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCode, techniqueDescription, productionOrderMappingNew, thichness);
                                        map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                        map.Thick = techniqueTemp.Thick;
                                        map.Thin = techniqueTemp.Thin;
                                        map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                        map.BoreholeThick = techniqueTemp.BoreholeThick;
                                        map.BoreholeThin = techniqueTemp.BoreholeThin;
                                        map.OriginalThick = techniqueTemp.OriginalThick;
                                        map.OriginalThin = techniqueTemp.OriginalThin;

                                        context.TechniqueRequestMapping.Add(map);
                                    });


                                    #endregion

                                    #region Check coi bán thành phẩm có bán thành phẩm không. Nếu có tạo bán thành phẩm cho bán thành phẩm của lệnh bổ sung

                                    // Tạo item bán thành phẩm của bán thành phẩm 
                                    if (productionOrderMappingChildren.IsSubParent == true || productionOrderMappingChildren.IsParent == true)
                                    {
                                        var listChildren = commonProductItem.Where(x => x.ParentPartId == productionOrderMappingChildren.ProductionOrderMappingId && x.ParentId == null).ToList();
                                        listChildren.ForEach(children =>
                                        {
                                            var productionOrderMappingNewChildren = new ProductionOrderMapping();
                                            productionOrderMappingNewChildren.CreatedById = parameter.UserId;
                                            productionOrderMappingNewChildren.CreatedDate = DateTime.Now;
                                            productionOrderMappingNewChildren.ParentType = true;
                                            productionOrderMappingNewChildren.ProductColor = children.ProductColor;
                                            productionOrderMappingNewChildren.ProductColorCode = children.ProductColorCode;
                                            productionOrderMappingNewChildren.ProductionOrderId = productionOrder.ProductionOrderId;
                                            productionOrderMappingNewChildren.ProductId = null;
                                            productionOrderMappingNewChildren.ProductionOrderMappingId = Guid.NewGuid();
                                            productionOrderMappingNewChildren.ProductLength = children.ProductLength;
                                            productionOrderMappingNewChildren.ProductName = children.ProductName;
                                            productionOrderMappingNewChildren.ProductThickness = children.ProductThickness;
                                            productionOrderMappingNewChildren.ProductWidth = children.ProductWidth;
                                            productionOrderMappingNewChildren.Quantity = 1;
                                            productionOrderMappingNewChildren.StatusId = statusNewIdProduct;
                                            productionOrderMappingNewChildren.Especially = true;
                                            productionOrderMappingNewChildren.OriginalId = children.OriginalId;
                                            productionOrderMappingNewChildren.TechniqueDescription = children.TechniqueDescription;
                                            productionOrderMappingNewChildren.ProductLength = productionOrderMappingNewChildren.ProductLength;
                                            productionOrderMappingNewChildren.TotalArea = productionOrderMappingNewChildren.ProductWidth *
                                                                                            productionOrderMappingNewChildren.ProductLength / 1000000 *
                                                                                            productionOrderMappingNewChildren.Quantity;
                                            productionOrderMappingNewChildren.ProductCode = children.ProductCode;
                                            productionOrderMappingNewChildren.ProductOrderWorkflowId = children.ProductOrderWorkflowId;
                                            productionOrderMappingNewChildren.Borehole = children.Borehole;
                                            productionOrderMappingNewChildren.Hole = children.Hole;
                                            productionOrderMappingNewChildren.ProductGroupCode = children.ProductGroupCode;
                                            productionOrderMappingNewChildren.IsParent = children.IsParent;
                                            productionOrderMappingNewChildren.IsSubParent = children.IsSubParent;
                                            productionOrderMappingNewChildren.StartId = children.StartId;
                                            productionOrderMappingNewChildren.ParentPartId = productionOrderMappingNew.ProductionOrderMappingId;
                                            productionOrderMappingNewChildren.ParentId = children.ParentId;

                                            commonProductItem.Add(productionOrderMappingNewChildren);
                                            context.ProductionOrderMapping.Add(productionOrderMappingNewChildren);

                                            #region Tạo mapping giữa item và tiến trinh

                                            var productGroupCodeChildren = productionOrderMappingNewChildren.ProductGroupCode.Trim().ToLower();

                                            if (productionOrderMappingNewChildren.TechniqueDescription == null)
                                            {
                                                productionOrderMappingNewChildren.TechniqueDescription = "";
                                            }
                                            var listTechniqueDescriptionChildren = productionOrderMappingNewChildren.TechniqueDescription.ToLower().Split(' ').ToList();

                                            var techniqueDescriptionChildren = "";
                                            listTechniqueDescriptionChildren.ForEach(e =>
                                            {
                                                techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                                            });

                                            // Lấy danh sách tiến trình của quy trình bán thành phẩm
                                            var listTechniqueRequestChildren = commonOrderTechniqueMapping.Where(x => x.ProductOrderWorkflowId == productionOrderMappingNewChildren.ProductOrderWorkflowId).ToList();
                                            // Danh sách tất cả tiến trình của item
                                            var listTechniqueMappingChildren = new List<TechniqueRequestMapping>();
                                            listTechniqueRequestChildren.ForEach(technique =>
                                            {
                                                var temp = new TechniqueRequestMapping();
                                                temp.Rate = technique.Rate;
                                                temp.TechniqueName = commonTechnique.FirstOrDefault(xs => xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                                temp.TechniqueOrder = (byte)technique.TechniqueOrder;
                                                temp.TechniqueRequestId = technique.TechniqueRequestId;
                                                temp.CreatedById = parameter.UserId;
                                                temp.CreatedDate = DateTime.Now;
                                                temp.IsDefault = true;
                                                temp.ParentId = null;
                                                temp.TechniqueRequestMappingId = Guid.NewGuid();
                                                temp.TechniqueValue = null;
                                                listTechniqueMappingChildren.Add(temp);
                                            });

                                            listTechniqueMappingChildren.ForEach(map =>
                                            {
                                                map.ProductionOrderMappingId = productionOrderMappingNewChildren.ProductionOrderMappingId;
                                                var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCodeChildren, techniqueDescriptionChildren, productionOrderMappingNewChildren, thichness);
                                                map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                                map.Thick = techniqueTemp.Thick;
                                                map.Thin = techniqueTemp.Thin;
                                                map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                                map.BoreholeThick = techniqueTemp.BoreholeThick;
                                                map.BoreholeThin = techniqueTemp.BoreholeThin;
                                                map.OriginalThick = techniqueTemp.OriginalThick;
                                                map.OriginalThin = techniqueTemp.OriginalThin;

                                                context.TechniqueRequestMapping.Add(map);
                                            });

                                            #endregion
                                        });

                                    }

                                    #endregion

                                }
                                // Lỗi không phải của 1 bán thành phẩm
                                else
                                {
                                    var productOrderMapping = new ProductionOrderMapping();
                                    productOrderMapping = commonProductItem.FirstOrDefault(x =>
                                                                                        x.ProductionOrderMappingId == item.ProductionOrderMappingId);
                                    // Lấy tất cả tiến trình của lệnh sản xuất cha
                                    var listTechniqueMapping = commonOrderTechniqueMapping.Where(x =>
                                                                    x.ProductOrderWorkflowId == productOrderMapping.ProductOrderWorkflowId).ToList();

                                    #region Tạo lệnh bổ sung

                                    var productOrderNew = new ProductionOrder();
                                    var isNewProductionOrderWorkFlow = true;
                                    // Check coi tạo lệnh bổ sung cho lệnh bổ sung
                                    if (productOrder.ParentId != null && listTechniqueMapping.Count == item.TechniqueOrder)
                                    {
                                        // Lấy lệnh sản xuất cha
                                        var parent = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == productOrder.ParentId);

                                        // Đếm số lệnh bổ sung cho lệnh sản xuất trên để sinh ra mã khi tạo lệnh sản xuất
                                        var number = commonProductionOrder.Where(x => x.ParentId == parent.ProductionOrderId).Count() + 1;
                                        
                                        productOrderNew.CreatedById = parameter.UserId;
                                        productOrderNew.CreatedDate = DateTime.Now;
                                        productOrderNew.CustomerName = productOrder.CustomerName.Trim();
                                        productOrderNew.CustomerNumber = productOrder.CustomerNumber;
                                        productOrderNew.EndDate = productOrder.EndDate;
                                        productOrderNew.Especially = true;

                                        productOrderNew.Note = productOrder.Note == null ? null : productOrder.Note.Trim();
                                        productOrderNew.NoteTechnique = productOrder.NoteTechnique == null ? null : productOrder.NoteTechnique.Trim();
                                        productOrderNew.OrderId = productOrder.OrderId;
                                        productOrderNew.PlaceOfDelivery = productOrder.PlaceOfDelivery == null ? null : productOrder.PlaceOfDelivery.Trim();
                                        productOrderNew.ProductionOrderCode = parent.ProductionOrderCode.Trim() + "_" + number.ToString();
                                        productOrderNew.ProductionOrderId = Guid.NewGuid();
                                        productOrderNew.ReceivedDate = productOrder.ReceivedDate;
                                        productOrderNew.ParentId = parent.ProductionOrderId;
                                        productOrderNew.StartDate = productOrder.StartDate;
                                        productOrderNew.StatusId = statusNewId;
                                        productOrderNew.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                        productOrderNew.Note = item.Note;

                                        commonProductionOrder.Add(productOrderNew);
                                        context.ProductionOrder.Add(productOrderNew);
                                        isNewProductionOrderWorkFlow = false;
                                    }
                                    else
                                    {
                                        // Đếm số lệnh bổ sung đã tạo cho lệnh sản xuất lỗi để sinh mã tự động
                                        var number = commonProductionOrder.Where(x => x.ParentId == productOrder.ProductionOrderId).Count() + 1;
                                        
                                        productOrderNew.CreatedById = parameter.UserId;
                                        productOrderNew.CreatedDate = DateTime.Now;
                                        productOrderNew.CustomerName = productOrder.CustomerName.Trim();
                                        productOrderNew.CustomerNumber = productOrder.CustomerNumber;
                                        productOrderNew.EndDate = productOrder.EndDate;
                                        productOrderNew.Especially = true;
                                        productOrderNew.Note = productOrder.Note == null ? null : productOrder.Note.Trim();
                                        productOrderNew.NoteTechnique = productOrder.NoteTechnique == null ? null : productOrder.NoteTechnique.Trim();
                                        productOrderNew.OrderId = productOrder.OrderId;
                                        productOrderNew.PlaceOfDelivery = productOrder.PlaceOfDelivery == null ? null : productOrder.PlaceOfDelivery.Trim();
                                        productOrderNew.ProductionOrderCode = productOrder.ProductionOrderCode.Trim() + "_" + number.ToString();
                                        productOrderNew.ProductionOrderId = Guid.NewGuid();
                                        productOrderNew.ReceivedDate = productOrder.ReceivedDate;
                                        productOrderNew.ParentId = productOrder.ProductionOrderId;
                                        productOrderNew.StartDate = productOrder.StartDate;
                                        productOrderNew.StatusId = statusNewId;
                                        productOrderNew.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                        productOrderNew.Note = item.Note;

                                        commonProductionOrder.Add(productOrderNew);
                                        context.ProductionOrder.Add(productOrderNew);
                                    }

                                    #endregion

                                    #region Thêm lệnh bổ sung vào lệnh tổng mới nhất

                                    var total = commonTotal.Where(x => x.ProductionOrderId == productOrderNew.ParentId).
                                        OrderByDescending(y => y.CreatedDate).ToList();
                                    var totalProductOrderMapping = new TotalProductionOrderMapping()
                                    {
                                        TotalProductionOrderId = total[0].TotalProductionOrderId,
                                        CreatedDate = DateTime.Now,
                                        CreatedById = parameter.UserId,
                                        ProductionOrderId = productOrderNew.ProductionOrderId,
                                        TotalProductionOrderMappingId = Guid.NewGuid()
                                    };

                                    context.TotalProductionOrderMapping.Add(totalProductOrderMapping);

                                    #endregion

                                    #region Tạo quy trình và tiến trình cho các item trong lệnh bổ sung

                                    var workFlow = commonProductOrderWorkFlow.FirstOrDefault(x =>
                                                                            x.ProductOrderWorkflowId == productOrderMapping.ProductOrderWorkflowId);
                                    // Sinh ra mã khi tạo quy trình mới
                                    var numberTotal = commonProductOrderWorkFlow.Where(x => x.ProductOrderWorkflowId == workFlow.ParentId).Count();
                                    var newProductWorkFlow = new ProductOrderWorkflow();
                                    var listTechniqueRequestMapping = new List<TechniqueRequestMapping>();

                                    // Nếu quy trình vẫn giống quy trình cũ của item lỗi thì lấy lại thông tin của tiến trình 
                                    if (isNewProductionOrderWorkFlow == false)
                                    {
                                        newProductWorkFlow = workFlow;
                                        listTechniqueMapping.ForEach(technique =>
                                        {
                                            if (technique.TechniqueOrder <= item.TechniqueOrder)
                                            {
                                                var newTechniqueRequestMapping = new TechniqueRequestMapping();
                                                newTechniqueRequestMapping.Rate = technique.Rate;
                                                newTechniqueRequestMapping.TechniqueName = commonTechnique.FirstOrDefault(xs => xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                                newTechniqueRequestMapping.TechniqueOrder = (byte)technique.TechniqueOrder;
                                                newTechniqueRequestMapping.TechniqueRequestId = technique.TechniqueRequestId;
                                                newTechniqueRequestMapping.CreatedById = parameter.UserId;
                                                newTechniqueRequestMapping.CreatedDate = DateTime.Now;
                                                newTechniqueRequestMapping.IsDefault = true;
                                                newTechniqueRequestMapping.ParentId = null;
                                                newTechniqueRequestMapping.TechniqueRequestMappingId = Guid.NewGuid();
                                                newTechniqueRequestMapping.TechniqueValue = null;
                                                listTechniqueRequestMapping.Add(newTechniqueRequestMapping);
                                            }
                                        });
                                    }
                                    // Nếu không giống số tiến trình thì tạo quy trình mới
                                    else
                                    {
                                        newProductWorkFlow.CreatedById = parameter.UserId;
                                        newProductWorkFlow.CreatedDate = DateTime.Now;
                                        newProductWorkFlow.ParentId = workFlow.ProductOrderWorkflowId;
                                        newProductWorkFlow.Description = workFlow.Description;
                                        newProductWorkFlow.ProductOrderWorkflowId = Guid.NewGuid();
                                        newProductWorkFlow.Name = workFlow.Name;
                                        newProductWorkFlow.Code = workFlow.Code.Trim() + '_' + numberTotal.ToString();

                                        commonProductOrderWorkFlow.Add(newProductWorkFlow);
                                        context.ProductOrderWorkflow.Add(newProductWorkFlow);

                                        // Thêm bảng map ping bảng quy trình và tiến trình

                                        listTechniqueMapping.ForEach(technique =>
                                        {
                                            if (technique.TechniqueOrder <= item.TechniqueOrder)
                                            {
                                                // Thêm quy trình mới và tiến trình mới
                                                var techniqueOrderMapping = new OrderTechniqueMapping();
                                                techniqueOrderMapping.Rate = technique.Rate;
                                                techniqueOrderMapping.TechniqueOrder = technique.TechniqueOrder;
                                                techniqueOrderMapping.TechniqueRequestId = technique.TechniqueRequestId;
                                                techniqueOrderMapping.Active = true;
                                                techniqueOrderMapping.OrderTechniqueMappingId = Guid.NewGuid();
                                                techniqueOrderMapping.ProductOrderWorkflowId =
                                                    newProductWorkFlow.ProductOrderWorkflowId;
                                                techniqueOrderMapping.CreatedById = parameter.UserId;
                                                techniqueOrderMapping.CreatedDate = DateTime.Now;

                                                commonOrderTechniqueMapping.Add(techniqueOrderMapping);
                                                context.OrderTechniqueMapping.Add(techniqueOrderMapping);

                                                // Lấy thông tin các tiến trình của quy trình của item 
                                                var newTechniqueRequestMapping = new TechniqueRequestMapping();
                                                newTechniqueRequestMapping.Rate = techniqueOrderMapping.Rate;
                                                newTechniqueRequestMapping.TechniqueName = commonTechnique.FirstOrDefault(xs =>
                                                        xs.TechniqueRequestId == techniqueOrderMapping.TechniqueRequestId)
                                                    .TechniqueName;
                                                newTechniqueRequestMapping.TechniqueOrder =
                                                    (byte)techniqueOrderMapping.TechniqueOrder;
                                                newTechniqueRequestMapping.TechniqueRequestId =
                                                    techniqueOrderMapping.TechniqueRequestId;
                                                newTechniqueRequestMapping.CreatedById = parameter.UserId;
                                                newTechniqueRequestMapping.CreatedDate = DateTime.Now;
                                                newTechniqueRequestMapping.IsDefault = true;
                                                newTechniqueRequestMapping.ParentId = null;
                                                newTechniqueRequestMapping.TechniqueRequestMappingId = Guid.NewGuid();
                                                newTechniqueRequestMapping.TechniqueValue = null;

                                                listTechniqueRequestMapping.Add(newTechniqueRequestMapping);

                                            }
                                        });
                                    }

                                    #endregion

                                    var productionOrderMappingChildren = new ProductionOrderMapping();

                                    //if (isNewProductionOrderWorkFlow == false)
                                    //{
                                    //    var parentProduct = commonProductItem.FirstOrDefault(x =>
                                    //        x.ProductionOrderMappingId == item.ProductionOrderMappingId);
                                    //    productionOrderMappingChildren.ParentId = parentProduct.ParentId;
                                    //    if (parentProduct.ParentId == null)
                                    //    {
                                    //        productionOrderMappingChildren.ParentId = item.ProductionOrderMappingId;
                                    //    }
                                    //    else
                                    //    {
                                    //        productionOrderMappingChildren.ParentId = parentProduct.ParentId;
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    productionOrderMappingChildren.ParentId = item.ProductionOrderMappingId;
                                    //}

                                    productionOrderMappingChildren.ParentId = item.ProductionOrderMappingId;

                                    //Kiểm tra Item báo lỗi

                                    //if (productOrderMapping.ParentId != null && isNewProductionOrderWorkFlow == true)
                                    //{
                                    //    productionOrderMappingChildren.ParentId = productOrderMapping.ParentId;
                                    //}

                                    if (productOrder.ParentId != null && isNewProductionOrderWorkFlow == false)
                                    {
                                        productionOrderMappingChildren.ParentExtendId = item.ProductionOrderMappingId;
                                    }

                                    var startId = commonProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == productionOrderMappingChildren.ParentId);
                                    productionOrderMappingChildren.ParentPartId = startId.ParentPartId;
                                    productionOrderMappingChildren.CreatedById = parameter.UserId;
                                    productionOrderMappingChildren.CreatedDate = DateTime.Now;
                                    productionOrderMappingChildren.ParentType = true;
                                    productionOrderMappingChildren.ProductColor = item.ProductColor;
                                    productionOrderMappingChildren.ProductColorCode = item.ProductColorCode;
                                    productionOrderMappingChildren.ProductionOrderId = productOrderNew.ProductionOrderId;
                                    productionOrderMappingChildren.ProductId = null;
                                    productionOrderMappingChildren.ProductionOrderMappingId = Guid.NewGuid();
                                    productionOrderMappingChildren.ProductLength = item.ProductLength;
                                    productionOrderMappingChildren.ProductName = item.ProductName;
                                    productionOrderMappingChildren.ProductThickness = item.ProductThickness;
                                    productionOrderMappingChildren.ProductWidth = item.ProductWidth;
                                    productionOrderMappingChildren.Quantity = item.Quantity;
                                    productionOrderMappingChildren.StatusId = statusNewIdProduct;
                                    productionOrderMappingChildren.Especially = true;
                                    productionOrderMappingChildren.OriginalId = item.OriginalId;
                                    productionOrderMappingChildren.TechniqueDescription = item.TechniqueDescription;
                                    productionOrderMappingChildren.TotalArea = productionOrderMappingChildren.ProductWidth *
                                                                                            productionOrderMappingChildren.ProductLength / 1000000 *
                                                                                            productionOrderMappingChildren.Quantity;
                                    productionOrderMappingChildren.ProductCode = item.ProductCode;
                                    productionOrderMappingChildren.ProductOrderWorkflowId = newProductWorkFlow.ProductOrderWorkflowId;
                                    productionOrderMappingChildren.Borehole = item.Borehole;
                                    productionOrderMappingChildren.Hole = item.Hole;
                                    productionOrderMappingChildren.ProductGroupCode = item.ProductGroupCode;
                                    productionOrderMappingChildren.StartId = startId.StartId;
                                    productionOrderMappingChildren.IsParent = startId.IsParent;
                                    productionOrderMappingChildren.IsSubParent = startId.IsSubParent;

                                    commonProductItem.Add(productionOrderMappingChildren);
                                    context.ProductionOrderMapping.Add(productionOrderMappingChildren);

                                    #region Thêm mới bảng mapping giữa item và tiến trinh

                                    var productGroupCode = productionOrderMappingChildren.ProductGroupCode.Trim().ToLower();

                                    if (productionOrderMappingChildren.TechniqueDescription == null)
                                    {
                                        productionOrderMappingChildren.TechniqueDescription = "";
                                    }
                                    var listTechniqueDescription = productionOrderMappingChildren.TechniqueDescription.ToLower().Split(' ').ToList();

                                    var techniqueDescription = "";
                                    listTechniqueDescription.ForEach(e =>
                                    {
                                        techniqueDescription = techniqueDescription + e + " ";
                                    });

                                    listTechniqueRequestMapping.ForEach(map =>
                                    {
                                        map.ProductionOrderMappingId = productionOrderMappingChildren.ProductionOrderMappingId;
                                        var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCode, techniqueDescription, productionOrderMappingChildren, thichness);
                                        map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                        map.Thick = techniqueTemp.Thick;
                                        map.Thin = techniqueTemp.Thin;
                                        map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                        map.BoreholeThick = techniqueTemp.BoreholeThick;
                                        map.BoreholeThin = techniqueTemp.BoreholeThin;
                                        map.OriginalThick = techniqueTemp.OriginalThick;
                                        map.OriginalThin = techniqueTemp.OriginalThin;

                                        context.TechniqueRequestMapping.Add(map);
                                    });

                                    #endregion

                                    #region Check coi có bán thành phẩm không. Nếu có tạo bán thành phẩm cho item của lệnh bổ sung

                                    // Tạo item bán thành phẩm của bán thành phẩm 
                                    if (productionOrderMappingChildren.IsSubParent == true || productionOrderMappingChildren.IsParent == true)
                                    {
                                        var listChildren = commonProductItem.Where(x => x.ParentPartId == productionOrderMappingChildren.ParentId && x.ParentId == null).ToList();
                                        listChildren.ForEach(children =>
                                        {
                                            var productionOrderMappingNewChildren = new ProductionOrderMapping();
                                            productionOrderMappingNewChildren.CreatedById = parameter.UserId;
                                            productionOrderMappingNewChildren.CreatedDate = DateTime.Now;
                                            productionOrderMappingNewChildren.ParentType = true;
                                            productionOrderMappingNewChildren.ProductColor = children.ProductColor;
                                            productionOrderMappingNewChildren.ProductColorCode = children.ProductColorCode;
                                            productionOrderMappingNewChildren.ProductionOrderId = productOrderNew.ProductionOrderId;
                                            productionOrderMappingNewChildren.ProductId = null;
                                            productionOrderMappingNewChildren.ProductionOrderMappingId = Guid.NewGuid();
                                            productionOrderMappingNewChildren.ProductLength = children.ProductLength;
                                            productionOrderMappingNewChildren.ProductName = children.ProductName;
                                            productionOrderMappingNewChildren.ProductThickness = children.ProductThickness;
                                            productionOrderMappingNewChildren.ProductWidth = children.ProductWidth;
                                            productionOrderMappingNewChildren.Quantity = 1;
                                            productionOrderMappingNewChildren.StatusId = statusNewIdProduct;
                                            productionOrderMappingNewChildren.Especially = true;
                                            productionOrderMappingNewChildren.OriginalId = children.OriginalId;
                                            productionOrderMappingNewChildren.TechniqueDescription = children.TechniqueDescription;
                                            productionOrderMappingNewChildren.TotalArea = productionOrderMappingNewChildren.ProductWidth *
                                                                                            productionOrderMappingNewChildren.ProductLength / 1000000 *
                                                                                            productionOrderMappingNewChildren.Quantity;
                                            productionOrderMappingNewChildren.ProductCode = children.ProductCode;
                                            productionOrderMappingNewChildren.ProductOrderWorkflowId = children.ProductOrderWorkflowId;
                                            productionOrderMappingNewChildren.Borehole = children.Borehole;
                                            productionOrderMappingNewChildren.Hole = children.Hole;
                                            productionOrderMappingNewChildren.ProductGroupCode = children.ProductGroupCode;
                                            productionOrderMappingNewChildren.IsParent = children.IsParent;
                                            productionOrderMappingNewChildren.IsSubParent = children.IsSubParent;
                                            productionOrderMappingNewChildren.StartId = children.StartId;
                                            productionOrderMappingNewChildren.ParentPartId = productionOrderMappingChildren.ProductionOrderMappingId;
                                            productionOrderMappingNewChildren.ParentId = children.ParentId;

                                            commonProductItem.Add(productionOrderMappingNewChildren);
                                            context.ProductionOrderMapping.Add(productionOrderMappingNewChildren);

                                            #region Tạo mapping giữa item và tiến trinh

                                            var productGroupCodeChildren = productionOrderMappingNewChildren.ProductGroupCode.Trim().ToLower();

                                            if (productionOrderMappingNewChildren.TechniqueDescription == null)
                                            {
                                                productionOrderMappingNewChildren.TechniqueDescription = "";
                                            }
                                            var listTechniqueDescriptionChildren = productionOrderMappingNewChildren.TechniqueDescription.ToLower().Split(' ').ToList();

                                            var techniqueDescriptionChildren = "";
                                            listTechniqueDescriptionChildren.ForEach(e =>
                                            {
                                                techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                                            });

                                            // Lấy danh sách tiến trình của quy trình bán thành phẩm
                                            var listTechniqueRequestChildren = commonOrderTechniqueMapping.Where(x => x.ProductOrderWorkflowId == productionOrderMappingNewChildren.ProductOrderWorkflowId).ToList();
                                            // Danh sách tất cả tiến trình của item
                                            var listTechniqueMappingChildren = new List<TechniqueRequestMapping>();
                                            listTechniqueRequestChildren.ForEach(technique =>
                                            {
                                                var temp = new TechniqueRequestMapping();
                                                temp.Rate = technique.Rate;
                                                temp.TechniqueName = commonTechnique.FirstOrDefault(xs => xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                                temp.TechniqueOrder = (byte)technique.TechniqueOrder;
                                                temp.TechniqueRequestId = technique.TechniqueRequestId;
                                                temp.CreatedById = parameter.UserId;
                                                temp.CreatedDate = DateTime.Now;
                                                temp.IsDefault = true;
                                                temp.ParentId = null;
                                                temp.TechniqueRequestMappingId = Guid.NewGuid();
                                                temp.TechniqueValue = null;
                                                listTechniqueMappingChildren.Add(temp);
                                            });

                                            listTechniqueMappingChildren.ForEach(map =>
                                            {
                                                map.ProductionOrderMappingId = productionOrderMappingNewChildren.ProductionOrderMappingId;
                                                var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCodeChildren, techniqueDescriptionChildren, productionOrderMappingNewChildren, thichness);
                                                map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                                map.Thick = techniqueTemp.Thick;
                                                map.Thin = techniqueTemp.Thin;
                                                map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                                map.BoreholeThick = techniqueTemp.BoreholeThick;
                                                map.BoreholeThin = techniqueTemp.BoreholeThin;
                                                map.OriginalThick = techniqueTemp.OriginalThick;
                                                map.OriginalThin = techniqueTemp.OriginalThin;

                                                context.TechniqueRequestMapping.Add(map);
                                            });

                                            #endregion

                                            #region Check coi bán thành phẩm có bán thành phẩm không. Nếu có tạo bán thành phẩm cho bán thành phẩm của lệnh bổ sung

                                            // Tạo item bán thành phẩm của bán thành phẩm 
                                            if (productionOrderMappingChildren.IsSubParent == true || productionOrderMappingChildren.IsParent == true)
                                            {
                                                var listChildrenChildren = commonProductItem.Where(x => x.ParentPartId == children.ProductionOrderMappingId && x.ParentId == null).ToList();
                                                listChildrenChildren.ForEach(childrenChildren =>
                                                {
                                                    var productionOrderMappingNewChildrenChildren = new ProductionOrderMapping();
                                                    productionOrderMappingNewChildrenChildren.CreatedById = parameter.UserId;
                                                    productionOrderMappingNewChildrenChildren.CreatedDate = DateTime.Now;
                                                    productionOrderMappingNewChildrenChildren.ParentType = true;
                                                    productionOrderMappingNewChildrenChildren.ProductColor = childrenChildren.ProductColor;
                                                    productionOrderMappingNewChildrenChildren.ProductColorCode = childrenChildren.ProductColorCode;
                                                    productionOrderMappingNewChildrenChildren.ProductionOrderId = productOrderNew.ProductionOrderId;
                                                    productionOrderMappingNewChildrenChildren.ProductId = null;
                                                    productionOrderMappingNewChildrenChildren.ProductionOrderMappingId = Guid.NewGuid();
                                                    productionOrderMappingNewChildrenChildren.ProductLength = childrenChildren.ProductLength;
                                                    productionOrderMappingNewChildrenChildren.ProductName = childrenChildren.ProductName;
                                                    productionOrderMappingNewChildrenChildren.ProductThickness = childrenChildren.ProductThickness;
                                                    productionOrderMappingNewChildrenChildren.ProductWidth = childrenChildren.ProductWidth;
                                                    productionOrderMappingNewChildrenChildren.Quantity = 1;
                                                    productionOrderMappingNewChildrenChildren.StatusId = statusNewIdProduct;
                                                    productionOrderMappingNewChildrenChildren.Especially = true;
                                                    productionOrderMappingNewChildrenChildren.OriginalId = childrenChildren.OriginalId;
                                                    productionOrderMappingNewChildrenChildren.TechniqueDescription = childrenChildren.TechniqueDescription;
                                                    productionOrderMappingNewChildrenChildren.TotalArea = productionOrderMappingNewChildrenChildren.ProductWidth *
                                                                                            productionOrderMappingNewChildrenChildren.ProductLength / 1000000 *
                                                                                            productionOrderMappingNewChildrenChildren.Quantity;
                                                    productionOrderMappingNewChildren.ProductCode = children.ProductCode;
                                                    productionOrderMappingNewChildrenChildren.ProductCode = childrenChildren.ProductCode;
                                                    productionOrderMappingNewChildrenChildren.ProductOrderWorkflowId = childrenChildren.ProductOrderWorkflowId;
                                                    productionOrderMappingNewChildrenChildren.Borehole = childrenChildren.Borehole;
                                                    productionOrderMappingNewChildrenChildren.Hole = childrenChildren.Hole;
                                                    productionOrderMappingNewChildrenChildren.ProductGroupCode = childrenChildren.ProductGroupCode;
                                                    productionOrderMappingNewChildrenChildren.IsParent = childrenChildren.IsParent;
                                                    productionOrderMappingNewChildrenChildren.IsSubParent = childrenChildren.IsSubParent;
                                                    productionOrderMappingNewChildrenChildren.StartId = childrenChildren.StartId;
                                                    productionOrderMappingNewChildrenChildren.ParentPartId = productionOrderMappingNewChildren.ProductionOrderMappingId;
                                                    productionOrderMappingNewChildrenChildren.ParentId = childrenChildren.ParentId;

                                                    commonProductItem.Add(productionOrderMappingNewChildrenChildren);
                                                    context.ProductionOrderMapping.Add(productionOrderMappingNewChildrenChildren);

                                                    #region Tạo mapping giữa item và tiến trinh

                                                    var productGroupCodeChildrenChildren = productionOrderMappingNewChildrenChildren.ProductGroupCode.Trim().ToLower();

                                                    if (productionOrderMappingNewChildrenChildren.TechniqueDescription == null)
                                                    {
                                                        productionOrderMappingNewChildrenChildren.TechniqueDescription = "";
                                                    }
                                                    var listTechniqueDescriptionChildrenChildren = productionOrderMappingNewChildrenChildren.TechniqueDescription.ToLower().Split(' ').ToList();

                                                    var techniqueDescriptionChildrenChildren = "";
                                                    listTechniqueDescriptionChildrenChildren.ForEach(e =>
                                                    {
                                                        techniqueDescriptionChildrenChildren = techniqueDescriptionChildren + e + " ";
                                                    });

                                                    // Lấy danh sách tiến trình của quy trình bán thành phẩm
                                                    var listTechniqueRequestChildrenChildren = commonOrderTechniqueMapping.Where(x => x.ProductOrderWorkflowId == productionOrderMappingNewChildrenChildren.ProductOrderWorkflowId).ToList();
                                                    // Danh sách tất cả tiến trình của item
                                                    var listTechniqueMappingChildrenChildren = new List<TechniqueRequestMapping>();
                                                    listTechniqueRequestChildrenChildren.ForEach(technique =>
                                                    {
                                                        var temp = new TechniqueRequestMapping();
                                                        temp.Rate = technique.Rate;
                                                        temp.TechniqueName = commonTechnique.FirstOrDefault(xs => xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                                        temp.TechniqueOrder = (byte)technique.TechniqueOrder;
                                                        temp.TechniqueRequestId = technique.TechniqueRequestId;
                                                        temp.CreatedById = parameter.UserId;
                                                        temp.CreatedDate = DateTime.Now;
                                                        temp.IsDefault = true;
                                                        temp.ParentId = null;
                                                        temp.TechniqueRequestMappingId = Guid.NewGuid();
                                                        temp.TechniqueValue = null;
                                                        listTechniqueMappingChildrenChildren.Add(temp);
                                                    });

                                                    listTechniqueMappingChildrenChildren.ForEach(map =>
                                                    {
                                                        map.ProductionOrderMappingId = productionOrderMappingNewChildrenChildren.ProductionOrderMappingId;
                                                        var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCodeChildrenChildren, techniqueDescriptionChildrenChildren, productionOrderMappingNewChildrenChildren, thichness);
                                                        map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                                        map.Thick = techniqueTemp.Thick;
                                                        map.Thin = techniqueTemp.Thin;
                                                        map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                                        map.BoreholeThick = techniqueTemp.BoreholeThick;
                                                        map.BoreholeThin = techniqueTemp.BoreholeThin;
                                                        map.OriginalThick = techniqueTemp.OriginalThick;
                                                        map.OriginalThin = techniqueTemp.OriginalThin;

                                                        context.TechniqueRequestMapping.Add(map);
                                                    });

                                                    #endregion
                                                });

                                            }

                                            #endregion

                                        });

                                    }

                                    #endregion
                                }
                            }
                            // Tạo lệnh bổ sung cho item không có bán thành phẩm con
                            else
                            {
                                #region Tạo lênh bổ sung

                                var productOrderMapping = new ProductionOrderMapping();
                                productOrderMapping = commonProductItem.FirstOrDefault(x =>
                                                                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                                // Lấy tất cả tiến trình của lệnh sản xuất cha
                                var listTechniqueMapping = commonOrderTechniqueMapping.Where(x =>
                                                                x.ProductOrderWorkflowId == productOrderMapping.ProductOrderWorkflowId).ToList();

                                // Check coi tạo lệnh bổ sung cho lệnh sản xuất bình thường hay là lệnh bổ sung
                                var isCheck = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == productOrder.ProductionOrderId);
                                var productOrderNew = new ProductionOrder();
                                productOrderNew.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                var isNewProductionOrderWorkFlow = true;

                                // Check nếu tạo lệnh bổ sung cho lệnh bổ sung
                                // Check tạo lệnh bổ sung cho lệnh bổ sung có cùng quy trình như lệnh bổ sung cũ 
                                // thì tạo lệnh bổ sung cho lệnh cha của lệnh bố sung hiện tại lỗi
                                if (isCheck.ParentId != null && listTechniqueMapping.Count == item.TechniqueOrder)
                                {
                                    // Lấy lệnh sản xuất cha
                                    var parent = commonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == isCheck.ParentId);

                                    // Đếm số lệnh bổ sung cho lệnh sản xuất trên để sinh ra mã khi tạo lệnh sản xuất
                                    var number = commonProductionOrder.Where(x => x.ParentId == parent.ProductionOrderId).Count() + 1;
                                    
                                    productOrderNew.CreatedById = parameter.UserId;
                                    productOrderNew.CreatedDate = DateTime.Now;
                                    productOrderNew.CustomerName = productOrder.CustomerName.Trim();
                                    productOrderNew.CustomerNumber = productOrder.CustomerNumber;
                                    productOrderNew.EndDate = productOrder.EndDate;
                                    productOrderNew.Especially = true;
                                    productOrderNew.Note = productOrder.Note == null ? null : productOrder.Note.Trim();
                                    productOrderNew.NoteTechnique = productOrder.NoteTechnique == null ? null : productOrder.NoteTechnique.Trim();
                                    productOrderNew.OrderId = productOrder.OrderId;
                                    productOrderNew.PlaceOfDelivery = productOrder.PlaceOfDelivery == null ? null : productOrder.PlaceOfDelivery.Trim();
                                    productOrderNew.ProductionOrderCode = parent.ProductionOrderCode.Trim() + "_" + number.ToString();
                                    productOrderNew.ProductionOrderId = Guid.NewGuid();
                                    productOrderNew.ReceivedDate = productOrder.ReceivedDate;
                                    productOrderNew.ParentId = parent.ProductionOrderId;
                                    productOrderNew.StartDate = productOrder.StartDate;
                                    productOrderNew.StatusId = statusNewId;
                                    productOrderNew.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                    productOrderNew.Note = item.Note;

                                    commonProductionOrder.Add(productOrderNew);
                                    context.ProductionOrder.Add(productOrderNew);
                                    isNewProductionOrderWorkFlow = false;

                                }
                                else
                                {
                                    // Đếm số lệnh bổ sung đã tạo cho lệnh sản xuất lỗi để sinh mã tự động
                                    var number = commonProductionOrder.Where(x => x.ParentId == productOrder.ProductionOrderId).Count() + 1;
                                    
                                    productOrderNew.CreatedById = parameter.UserId;
                                    productOrderNew.CreatedDate = DateTime.Now;
                                    productOrderNew.CustomerName = productOrder.CustomerName.Trim();
                                    productOrderNew.CustomerNumber = productOrder.CustomerNumber;
                                    productOrderNew.EndDate = productOrder.EndDate;
                                    productOrderNew.Especially = true;
                                    productOrderNew.Note = productOrder.Note == null ? null : productOrder.Note.Trim();
                                    productOrderNew.NoteTechnique = productOrder.NoteTechnique == null ? null : productOrder.NoteTechnique.Trim();
                                    productOrderNew.OrderId = productOrder.OrderId;
                                    productOrderNew.PlaceOfDelivery = productOrder.PlaceOfDelivery == null ? null : productOrder.PlaceOfDelivery.Trim();
                                    productOrderNew.ProductionOrderCode = productOrder.ProductionOrderCode.Trim() + "_" + number.ToString();
                                    productOrderNew.ProductionOrderId = Guid.NewGuid();
                                    productOrderNew.ReceivedDate = productOrder.ReceivedDate;
                                    productOrderNew.ParentId = productOrder.ProductionOrderId;
                                    productOrderNew.StartDate = productOrder.StartDate;
                                    productOrderNew.StatusId = statusNewId;
                                    productOrderNew.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                                    productOrderNew.Note = item.Note;

                                    commonProductionOrder.Add(productOrderNew);
                                    context.ProductionOrder.Add(productOrderNew);
                                }

                                #endregion

                                #region Thêm lệnh bổ sung vừa tạo vào lệnh tổng mới nhất tính đến ngày hiện tại

                                var total = listAllTotalProductionOrder
                                    .Where(x => x.StartDate.Value.Date <= DateTime.Now.Date)
                                    .OrderByDescending(y => y.StartDate).FirstOrDefault();

                                var totalProductOrderMapping = new TotalProductionOrderMapping()
                                {
                                    TotalProductionOrderId = total.TotalProductionOrderId,
                                    CreatedDate = DateTime.Now,
                                    CreatedById = parameter.UserId,
                                    ProductionOrderId = productOrderNew.ProductionOrderId,
                                    TotalProductionOrderMappingId = Guid.NewGuid()
                                };

                                context.TotalProductionOrderMapping.Add(totalProductOrderMapping);

                                #endregion

                                #region Tạo quy trình và tiến trình cho các item trong lệnh bổ sung

                                var workFlow = commonProductOrderWorkFlow.FirstOrDefault(x =>
                                                                        x.ProductOrderWorkflowId == productOrderMapping.ProductOrderWorkflowId);
                                // Sinh ra mã khi tạo quy trình mới
                                var numberTotal = commonProductOrderWorkFlow.Where(x => x.ProductOrderWorkflowId == workFlow.ParentId).Count();
                                var newProductWorkFlow = new ProductOrderWorkflow();
                                var listTechniqueRequestMapping = new List<TechniqueRequestMapping>();

                                // Nếu quy trình vẫn giống quy trình cũ của item lỗi thì lấy lại thông tin của tiến trình 
                                if (isNewProductionOrderWorkFlow == false)
                                {
                                    newProductWorkFlow = workFlow;
                                    listTechniqueMapping.ForEach(technique =>
                                    {
                                        if (technique.TechniqueOrder <= item.TechniqueOrder)
                                        {
                                            var newTechniqueRequestMapping = new TechniqueRequestMapping();
                                            newTechniqueRequestMapping.Rate = technique.Rate;
                                            newTechniqueRequestMapping.TechniqueName = commonTechnique.FirstOrDefault(xs => xs.TechniqueRequestId == technique.TechniqueRequestId).TechniqueName;
                                            newTechniqueRequestMapping.TechniqueOrder = (byte)technique.TechniqueOrder;
                                            newTechniqueRequestMapping.TechniqueRequestId = technique.TechniqueRequestId;
                                            newTechniqueRequestMapping.CreatedById = parameter.UserId;
                                            newTechniqueRequestMapping.CreatedDate = DateTime.Now;
                                            newTechniqueRequestMapping.IsDefault = true;
                                            newTechniqueRequestMapping.ParentId = null;
                                            newTechniqueRequestMapping.TechniqueRequestMappingId = Guid.NewGuid();
                                            newTechniqueRequestMapping.TechniqueValue = null;
                                            listTechniqueRequestMapping.Add(newTechniqueRequestMapping);
                                        }
                                    });
                                }
                                // Nếu không giống số tiến trình thì tạo quy trình mới
                                else
                                {
                                    newProductWorkFlow.CreatedById = parameter.UserId;
                                    newProductWorkFlow.CreatedDate = DateTime.Now;
                                    newProductWorkFlow.ParentId = workFlow.ProductOrderWorkflowId;
                                    newProductWorkFlow.Description = workFlow.Description;
                                    newProductWorkFlow.ProductOrderWorkflowId = Guid.NewGuid();
                                    newProductWorkFlow.Name = workFlow.Name;
                                    newProductWorkFlow.Code = workFlow.Code.Trim() + '_' + numberTotal.ToString();

                                    commonProductOrderWorkFlow.Add(newProductWorkFlow);
                                    context.ProductOrderWorkflow.Add(newProductWorkFlow);

                                    // Thêm bảng map ping bảng quy trình và tiến trình

                                    listTechniqueMapping.ForEach(technique =>
                                    {
                                        if (technique.TechniqueOrder <= item.TechniqueOrder)
                                        {
                                            // Thêm quy trình mới và tiến trình mới
                                            var techniqueOrderMapping = new OrderTechniqueMapping();
                                            techniqueOrderMapping.Rate = technique.Rate;
                                            techniqueOrderMapping.TechniqueOrder = technique.TechniqueOrder;
                                            techniqueOrderMapping.TechniqueRequestId = technique.TechniqueRequestId;
                                            techniqueOrderMapping.Active = true;
                                            techniqueOrderMapping.OrderTechniqueMappingId = Guid.NewGuid();
                                            techniqueOrderMapping.ProductOrderWorkflowId =
                                                newProductWorkFlow.ProductOrderWorkflowId;
                                            techniqueOrderMapping.CreatedById = parameter.UserId;
                                            techniqueOrderMapping.CreatedDate = DateTime.Now;

                                            commonOrderTechniqueMapping.Add(techniqueOrderMapping);
                                            context.OrderTechniqueMapping.Add(techniqueOrderMapping);

                                            // Lấy thông tin các tiến trình của quy trình của item 
                                            var newTechniqueRequestMapping = new TechniqueRequestMapping();
                                            newTechniqueRequestMapping.Rate = techniqueOrderMapping.Rate;
                                            newTechniqueRequestMapping.TechniqueName = commonTechnique.FirstOrDefault(xs =>
                                                    xs.TechniqueRequestId == techniqueOrderMapping.TechniqueRequestId)
                                                .TechniqueName;
                                            newTechniqueRequestMapping.TechniqueOrder =
                                                (byte)techniqueOrderMapping.TechniqueOrder;
                                            newTechniqueRequestMapping.TechniqueRequestId =
                                                techniqueOrderMapping.TechniqueRequestId;
                                            newTechniqueRequestMapping.CreatedById = parameter.UserId;
                                            newTechniqueRequestMapping.CreatedDate = DateTime.Now;
                                            newTechniqueRequestMapping.IsDefault = true;
                                            newTechniqueRequestMapping.ParentId = null;
                                            newTechniqueRequestMapping.TechniqueRequestMappingId = Guid.NewGuid();
                                            newTechniqueRequestMapping.TechniqueValue = null;

                                            listTechniqueRequestMapping.Add(newTechniqueRequestMapping);

                                        }
                                    });
                                }

                                #endregion

                                #region Tạo item trong lệnh bổ sung vừa tạo

                                var product = new ProductionOrderMapping();
                                if (isNewProductionOrderWorkFlow == false)
                                {
                                    var parentProduct = commonProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId);
                                    product.ParentId = parentProduct.ParentId;

                                    //fix bug tạo lệnh bổ sung cho bán thành phẩm tổ cắt
                                    if (parentProduct.ParentId == null)
                                    {
                                        product.ParentId = parentProduct.ProductionOrderMappingId;
                                    }
                                }
                                else
                                {
                                    product.ParentId = item.ProductionOrderMappingId;
                                }

                                var startId = commonProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == product.ParentId);

                                if (startId == null)
                                {
                                    startId = commonProductItem.FirstOrDefault(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId);
                                    product.ParentPartId = startId.ParentPartId;
                                    product.StartId = startId.StartId;
                                }
                                else
                                {
                                    product.ParentPartId = startId.ParentPartId;
                                    product.StartId = startId.StartId;
                                }
                                
                                product.CreatedById = parameter.UserId;
                                product.CreatedDate = DateTime.Now;
                                product.ParentType = true;
                                product.ProductColor = item.ProductColor;
                                product.ProductColorCode = item.ProductColorCode;
                                product.ProductionOrderId = productOrderNew.ProductionOrderId;
                                product.ProductId = null;
                                product.ProductionOrderMappingId = Guid.NewGuid();
                                product.ProductLength = item.ProductLength;
                                product.ProductName = item.ProductName;
                                product.ProductThickness = item.ProductThickness;
                                product.ProductWidth = item.ProductWidth;
                                product.Quantity = item.Quantity;
                                product.StatusId = statusNewIdProduct;
                                product.Especially = true;
                                product.OriginalId = item.OriginalId;
                                product.TechniqueDescription = item.TechniqueDescription;
                                product.TotalArea = product.ProductWidth * product.ProductLength / 1000000 * product.Quantity;
                                product.ProductCode = item.ProductCode;
                                product.ProductOrderWorkflowId = newProductWorkFlow.ProductOrderWorkflowId;
                                product.Borehole = item.Borehole;
                                product.Hole = item.Hole;
                                product.ProductGroupCode = item.ProductGroupCode;
                                product.Grind = item.Grind;
                                product.Stt = item.Stt;

                                if (productOrder.ParentId != null && isNewProductionOrderWorkFlow == false)
                                {
                                    product.ParentExtendId = item.ProductionOrderMappingId;
                                    //Lấy lại IsAddPart nếu có
                                    var item_cha_goc = commonProductItem.FirstOrDefault(x =>
                                        x.ProductionOrderMappingId == product.ParentExtendId);
                                    product.IsAddPart = item_cha_goc.IsAddPart;
                                }

                                //Kiểm tra nếu là lỗi tấm hiện tại thì lưu trường Present = true
                                var check_Present = commonHistory.FirstOrDefault(x =>
                                    x.ProductionOrderHistoryId == item.ProductionOrderHistoryId);

                                //Đánh dấu Item bổ sung cho lỗi tấm hiện tại (Dùng để thống kê Dashboard)
                                if (check_Present.IsPresent == true)
                                {
                                    product.Present = true;
                                }
                                else
                                {
                                    if (check_Present.Present == true)
                                    {
                                        product.Present = true;
                                    }
                                }

                                context.ProductionOrderMapping.Add(product);

                                #endregion

                                #region Thêm mới bảng mapping giữa item và tiến trinh

                                var productGroupCode = product.ProductGroupCode.Trim().ToLower();

                                if (product.TechniqueDescription == null)
                                {
                                    product.TechniqueDescription = "";
                                }
                                var listTechniqueDescription = product.TechniqueDescription.ToLower().Split(' ').ToList();

                                var techniqueDescription = "";
                                listTechniqueDescription.ForEach(e =>
                                {
                                    techniqueDescription = techniqueDescription + e + " ";
                                });

                                listTechniqueRequestMapping.ForEach(map =>
                                {
                                    map.ProductionOrderMappingId = product.ProductionOrderMappingId;
                                    var techniqueTemp = AddTechnique(commonTechnique, map, productGroupCode, techniqueDescription, product, thichness);
                                    map.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                    map.Thick = techniqueTemp.Thick;
                                    map.Thin = techniqueTemp.Thin;
                                    map.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                    map.BoreholeThick = techniqueTemp.BoreholeThick;
                                    map.BoreholeThin = techniqueTemp.BoreholeThin;
                                    map.OriginalThick = techniqueTemp.OriginalThick;
                                    map.OriginalThin = techniqueTemp.OriginalThin;

                                    context.TechniqueRequestMapping.Add(map);
                                });

                                #endregion
                            }

                            #region Sửa lại lỗi vừa tạo lệnh bổ sung sang đã tạo lệnh sản xuất bổ sung rồi

                            var history = commonHistory.FirstOrDefault(x => x.ProductionOrderHistoryId == item.ProductionOrderHistoryId);

                            //Nếu tạo lệnh bổ sung cho item không phải bán thành phẩm
                            if (history.IsChildren != true)
                            {
                                history.IsAdd = true;
                                history.UpdatedById = parameter.UserId;
                                history.UpdatedDate = DateTime.Now;
                                context.ProductionOrderHistory.Update(history);
                            }
                            //Nếu tạo lệnh bổ sung cho item bán thành phẩm
                            else
                            {
                                var count_part_item = listAllPartItemMapping.Where(x =>
                                        x.ProductionOrderHistoryId == item.ProductionOrderHistoryId &&
                                        x.HasCreated != true)
                                    .ToList().Count();

                                if (count_part_item == 0)
                                {
                                    history.IsAdd = true;
                                    history.UpdatedById = parameter.UserId;
                                    history.UpdatedDate = DateTime.Now;
                                    context.ProductionOrderHistory.Update(history);
                                }
                            }

                            #endregion
                        }
                    }
                });

                if (!isResult)
                {
                    return new CreateProductionOrderAdditionalResult()
                    {
                        Status = false,
                        Message = "Không thể tạo lệnh bổ sung khi lệnh sản xuất ở trạng thái này!"
                    };
                }
                context.SaveChanges();
                return new CreateProductionOrderAdditionalResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new CreateProductionOrderAdditionalResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductionOrderHistoryNoteQcAndErroTypeResult UpdateProductionOrderHistoryNoteQcAndErroType(UpdateProductionOrderHistoryNoteQcAndErroTypeParameter parameter)
        {
            try
            {
                if (parameter.IsUpdateNoteQc.Value == true)
                {
                    var updateRecord = context.ProductionOrderHistory.FirstOrDefault(f => f.ProductionOrderHistoryId == parameter.ProductionOrderHistoryId);
                    if (updateRecord != null)
                    {
                        updateRecord.NoteQc = parameter.NoteQc;
                        context.ProductionOrderHistory.Update(updateRecord);
                        context.SaveChanges();
                    }
                }

                if (parameter.IsUpdateErrorType.Value == true)
                {
                    var updateRecord = context.ProductionOrderHistory.FirstOrDefault(f => f.ProductionOrderHistoryId == parameter.ProductionOrderHistoryId);
                    if (updateRecord != null)
                    {
                        updateRecord.ErrorType = parameter.ErrorType;
                        context.ProductionOrderHistory.Update(updateRecord);
                        context.SaveChanges();
                    }
                }

                return new UpdateProductionOrderHistoryNoteQcAndErroTypeResult()
                {
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new UpdateProductionOrderHistoryNoteQcAndErroTypeResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataDialogListProductOrderResult GetMasterDataDialogListProductOrder(GetMasterDataDialogListProductOrderParameter parameter)
        {
            try
            {
                // Lấy danh sách tất cả item lỗi trong bảng history mà chưa được tạo lệnh bổ sung của lệnh sản xuất
                var commonHistory = context.ProductionOrderHistory.Where(x => x.IsError == true && x.CalculatorType != true &&
                                                x.IsAdd != true && parameter.ProductionOrderId == x.ProductionOrderId).ToList();
                var commonOrganization = context.Organization.ToList();
                var commonTechniqueRequest = context.TechniqueRequest.ToList();
                var commonTechniqueMapping = context.TechniqueRequestMapping.ToList();
                var listAllPartItemMapping = context.PartItemMapping.ToList();
                var listProductItem = new List<ProductionOrderMappingEntityModel>();

                commonHistory.ForEach(item =>
                {
                    //Nếu lỗi bán thành phẩm
                    if (item.IsChildren == true)
                    {
                        //Lấy list ItemId của bán thành phẩm
                        var listItemId = listAllPartItemMapping
                            .Where(x => x.ProductionOrderHistoryId == item.ProductionOrderHistoryId &&
                                        x.HasCreated != true)
                            .Select(y => y.ProductionOrderMappingId).ToList();

                        listItemId.ForEach(_item =>
                        {
                            var product = new ProductionOrderMappingEntityModel();
                            product.ProductionOrderId = item.ProductionOrderId;
                            product.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                            product.Quantity = item.QuantityUnitErr;
                            product.OriginalId = item.OriginalId;
                            product.Description = item.Description;
                            product.ProductionOrderMappingId = _item.Value;

                            var techniqueMapping = commonTechniqueMapping.FirstOrDefault(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                                                                              x.TechniqueRequestId == item.TechniqueRequestId);
                            if (techniqueMapping != null)
                            {
                                if (item.IsErrorPre == true)
                                {
                                    product.TechniqueOrder = Convert.ToByte(techniqueMapping.TechniqueOrder - 1);
                                }
                                else
                                {
                                    product.TechniqueOrder = techniqueMapping.TechniqueOrder;
                                }
                            }

                            var technique = commonTechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == item.TechniqueRequestId);
                            if (technique != null)
                            {
                                var organization = commonOrganization.FirstOrDefault(x => x.OrganizationId == technique.OrganizationId);
                                if (organization != null)
                                {
                                    product.NameNest = organization.OrganizationName;
                                }
                            }

                            listProductItem.Add(product);
                        });
                    }
                    //Nếu không phải lỗi bán thành phẩm
                    else
                    {
                        var product = new ProductionOrderMappingEntityModel();
                        product.ProductionOrderId = item.ProductionOrderId;
                        product.ProductionOrderHistoryId = item.ProductionOrderHistoryId;
                        product.Quantity = item.QuantityUnitErr;
                        product.OriginalId = item.OriginalId;
                        product.Description = item.Description;
                        product.ProductionOrderMappingId = item.ProductionOrderMappingId;

                        var techniqueMapping = commonTechniqueMapping.FirstOrDefault(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                                                                          x.TechniqueRequestId == item.TechniqueRequestId);
                        if (techniqueMapping != null)
                        {
                            if (item.IsErrorPre == true)
                            {
                                product.TechniqueOrder = Convert.ToByte(techniqueMapping.TechniqueOrder - 1);
                            }
                            else
                            {
                                product.TechniqueOrder = techniqueMapping.TechniqueOrder;
                            }
                        }

                        var technique = commonTechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == item.TechniqueRequestId);
                        if (technique != null)
                        {
                            var organization = commonOrganization.FirstOrDefault(x => x.OrganizationId == technique.OrganizationId);
                            if (organization != null)
                            {
                                product.NameNest = organization.OrganizationName;
                            }
                        }

                        listProductItem.Add(product);
                    }
                });

                var listProduct = context.ProductionOrderMapping.Where(x => x.ProductionOrderId == parameter.ProductionOrderId).ToList();

                listProductItem.ForEach(item =>
                {
                    var product = listProduct.FirstOrDefault(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId);
                    if (product != null)
                    {
                        item.ProductLength = product.ProductLength;
                        item.ProductName = product.ProductName;
                        item.Hole = product.Hole;
                        item.ProductColor = product.ProductColor;
                        item.ProductThickness = product.ProductThickness;
                        item.TechniqueDescription = product.TechniqueDescription;
                        item.ProductColorCode = product.ProductColorCode;
                        item.Borehole = product.Borehole;
                        item.ProductWidth = product.ProductWidth;
                        item.ProductGroupCode = product.ProductGroupCode;
                        item.TotalArea = item.ProductLength / 1000 * item.ProductWidth / 1000 * item.Quantity;
                        item.Grind = product.Grind;
                        item.Stt = product.Stt;
                    }
                });
                return new GetMasterDataDialogListProductOrderResult()
                {
                    Status = true,
                    Message = "Success",
                    ListProduct = listProductItem
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataDialogListProductOrderResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        /// <summary>
        /// Thêm tiêu chuẩn cho tiến trình mapping với item
        /// </summary>
        /// <param name="listTechnique"></param>
        /// <param name="tech"></param>
        /// <param name="productGroupCode"></param>
        /// <param name="techniqueDescription"></param>
        /// <param name="product"></param>
        /// <param name="thichness"></param>
        /// <returns></returns>

        public TechniqueRequestMapping AddTechnique(List<TechniqueRequest> listTechnique, TechniqueRequestMapping tech, string productGroupCode, string techniqueDescription, ProductionOrderMapping product, int thichness)
        {
            var technique = listTechnique.FirstOrDefault(x => x.TechniqueRequestId == tech.TechniqueRequestId);
            var techniqueRequest = new TechniqueRequestMapping();
            var total = product.ProductWidth * product.ProductLength / 1000000;
            // Check trạng tổ cắt
            if (technique != null && technique.TechniqueRequestCode == "CAT")
            {
                // Đặc biệt mỏng
                if (productGroupCode == "d7")
                {
                    if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                }
                else if (techniqueDescription.Contains("theo dưỡng") || techniqueDescription.Contains("làm theo dưỡng") ||
                    techniqueDescription.Contains("méo") || techniqueDescription.Contains("kính méo") ||
                    techniqueDescription.Contains("phi tròn") || techniqueDescription.Contains("theo bv") ||
                    techniqueDescription.Contains("theo bản vẽ") || techniqueDescription.Contains("cắt bo góc") ||
                    techniqueDescription.Contains("bo góc"))
                {
                    if (product.ProductThickness < thichness)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                }
                else
                {
                    if ((product.ProductThickness >= 15 && total > 3) ||
                       (product.ProductThickness >= thichness && total >= 7))
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else if (product.ProductThickness < thichness && total >= 7)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else
                    {
                        techniqueRequest.Thin = true;
                    }
                }
            }
            // Check tổ mài
            else if (technique != null && technique.TechniqueRequestCode == "MAI")
            {
                // Đặc biệt mỏng
                if (techniqueDescription.Contains("theo dưỡng") || techniqueDescription.Contains("làm theo dưỡng") ||
                    techniqueDescription.Contains("méo") || techniqueDescription.Contains("kính méo") ||
                    techniqueDescription.Contains("mài bo") || techniqueDescription.Contains("vát cạnh") ||
                    techniqueDescription.Contains("mài 45 độ") || techniqueDescription.Contains("mài vát 45 độ") ||
                    techniqueDescription.Contains("vát 45 độ") || techniqueDescription.Contains("phi tròn") ||
                    techniqueDescription.Contains("theo bv") || techniqueDescription.Contains("theo bản vẽ"))
                {
                    if (product.ProductThickness < thichness)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                }
                else
                {
                    if ((product.ProductThickness >= 15 && total > 3) ||
                       (product.ProductThickness >= thichness && total >= 7))
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else if (product.ProductThickness < thichness && total >= 7)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else
                    {
                        techniqueRequest.Thin = true;
                    }
                }
            }
            // Check tổ khoan
            else if (technique != null && technique.TechniqueRequestCode == "KHOAN")
            {
                // Đặc biệt mỏng
                if (productGroupCode == "d7" && (product.Hole > 0 || product.Borehole > 0))
                {
                    if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                }
                // Đặc biệt mỏng
                else if (techniqueDescription.Contains("doa lỗ độc lập"))
                {
                    if (product.ProductThickness < thichness)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                }
                else
                {
                    if ((product.ProductThickness >= 15 && total > 3) ||
                       (product.ProductThickness >= thichness && total >= 7))
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else if (product.ProductThickness < thichness && total >= 7)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else if (product.ProductThickness >= thichness && product.Hole == 0 && product.Borehole == 0)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else if (product.ProductThickness < thichness && product.Hole == 0 && product.Borehole == 0)
                    {
                        techniqueRequest.Thin = true;
                    }

                    // Check coi có khoan khoet k
                    else if ((product.Hole > 0 || product.Borehole > 0) && productGroupCode != "d7")
                    {
                        if (product.ProductThickness >= thichness)
                        {
                            techniqueRequest.BoreholeThick = true;
                        }
                        else
                        {
                            techniqueRequest.BoreholeThin = true;
                        }
                    }
                }
            }
            // Check tiến trình tôi
            else if (technique != null && technique.TechniqueRequestCode == "TOI")
            {
                // Đặc biệt mỏng
                if (productGroupCode == "d7" || productGroupCode == "c2")
                {
                    if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                }
                else if (techniqueDescription.Contains("lowe") || techniqueDescription.Contains("le"))
                {
                    if (product.ProductThickness < thichness)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                }
                else
                {
                    if ((product.ProductThickness >= 15 && total > 3) ||
                       (product.ProductThickness >= thichness && total >= 7))
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else if (product.ProductThickness < thichness && total >= 7)
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                    else if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else
                    {
                        techniqueRequest.Thin = true;
                    }
                }
            }
            // Check tổ Dán
            else if (technique != null && technique.TechniqueRequestCode == "DAN")
            {
                if (productGroupCode == "d1" || productGroupCode == "d5" || productGroupCode == "d2" ||
                   productGroupCode == "d7" || productGroupCode == "d8")
                {
                    if (productGroupCode == "d8" || productGroupCode == "d7")
                    {
                        if ((productGroupCode == "d7" && (product.Hole != 0 || product.Borehole != 0)) || (productGroupCode == "d8"))
                        {
                            if (product.ProductThickness >= thichness)
                            {
                                techniqueRequest.EspeciallyThick = true;
                            }
                            else
                            {
                                techniqueRequest.EspeciallyThin = true;
                            }
                        }
                        else
                        {
                            if (product.ProductThickness >= 16)
                            {
                                techniqueRequest.EspeciallyThick = true;
                            }
                            else if (product.ProductThickness < 16 && product.ProductThickness >= 8)
                            {
                                techniqueRequest.Thick = true;
                            }
                            else if (product.ProductThickness < 8)
                            {
                                techniqueRequest.Thin = true;
                            }
                        }
                    }
                    else if (productGroupCode == "d2")
                    {
                        if (product.ProductThickness >= thichness)
                        {
                            techniqueRequest.OriginalThick = true;
                        }
                        else
                        {
                            techniqueRequest.OriginalThin = true;
                        }
                    }
                    else
                    {
                        if (product.ProductThickness >= 16)
                        {
                            techniqueRequest.EspeciallyThick = true;
                        }
                        else if (product.ProductThickness < 16 && product.ProductThickness >= 8)
                        {
                            techniqueRequest.Thick = true;
                        }
                        else if (product.ProductThickness < 8)
                        {
                            techniqueRequest.Thin = true;
                        }
                    }
                }
                else
                {
                    if (product.ProductWidth >= 2200 && product.ProductLength >= 2200 &&
                        product.ProductWidth * product.ProductLength > 2200 * 2200)
                    {
                        if (product.ProductThickness >= thichness)
                        {
                            techniqueRequest.EspeciallyThick = true;
                        }
                        else
                        {
                            techniqueRequest.EspeciallyThin = true;
                        }
                    }
                    else if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else
                    {
                        techniqueRequest.Thin = true;
                    }
                }
            }
            // Check tiến trình hộp
            else if (technique != null && technique.TechniqueRequestCode == "HOP")
            {
                // Đặc biệt mỏng
                if (productGroupCode == "d7" || productGroupCode == "c2")
                {
                    if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.EspeciallyThick = true;
                    }
                    else
                    {
                        techniqueRequest.EspeciallyThin = true;
                    }
                }
                else if (techniqueDescription.Contains("nan trang trí") || techniqueDescription.Contains("méo") ||
                         techniqueDescription.Contains("kính méo") || techniqueDescription.Contains("uốn") ||
                         techniqueDescription.Contains("cong") || techniqueDescription.Contains("theo bản vẽ") ||
                         techniqueDescription.Contains("theo bv") || techniqueDescription.Contains("lệch"))
                {
                    if (techniqueDescription.Contains("nan trang trí"))
                    {
                        if (product.ProductThickness >= thichness && total < 0.1225)
                        {
                            techniqueRequest.EspeciallyThick = true;
                        }
                        else if (product.ProductThickness < thichness && total < 0.1225)
                        {
                            techniqueRequest.EspeciallyThin = true;
                        }
                        else if (total >= 0.1225)
                        {
                            if (product.ProductThickness >= thichness)
                            {
                                techniqueRequest.Thick = true;
                            }
                            else
                            {
                                techniqueRequest.Thin = true;
                            }
                        }
                    }
                    else
                    {
                        if (product.ProductThickness >= thichness)
                        {
                            techniqueRequest.EspeciallyThick = true;
                        }
                        else
                        {
                            techniqueRequest.EspeciallyThin = true;
                        }
                    }
                }
                else
                {
                    if (product.ProductThickness >= thichness)
                    {
                        techniqueRequest.Thick = true;
                    }
                    else
                    {
                        techniqueRequest.Thin = true;
                    }
                }
            }

            return techniqueRequest;
        }


        /// <summary>
        /// Lấy danh sách tất cả các item con bán thành phẩm
        /// </summary>
        /// <param name="commonProductItem"></param>
        /// <param name="productionOrderMapping"></param>
        /// <returns></returns>
        public List<ProductionOrderMapping> GetListChildrenItem(List<ProductionOrderMapping> commonProductItem, ProductionOrderMapping productionOrderMapping)
        {
            var result = new List<ProductionOrderMapping>();
            var listChildren = commonProductItem.Where(x => x.ParentPartId == productionOrderMapping.ProductionOrderMappingId).ToList();
            if (listChildren.Count > 0)
            {
                result.AddRange(listChildren);
                listChildren.ForEach(item =>
                {
                    result.AddRange(GetListChildrenItem(commonProductItem, item));
                });
            }
            return result;
        }

        /// <summary>
        /// Lấy danh sách tất cả các lệnh sản xuất và lệnh bổ sung cho lệnh sản xuất
        /// </summary>
        /// <param name="commonProductionOrder"></param>
        /// <param name="productionOrder"></param>
        /// <returns></returns>
        public List<ProductionOrder> GetListChildrenProductionOrder(List<ProductionOrder> commonProductionOrder, ProductionOrder productionOrder)
        {
            var result = new List<ProductionOrder>();
            var listChildren = commonProductionOrder.Where(x => x.ParentId == productionOrder.ProductionOrderId)
                .ToList();
            if (listChildren.Count > 0)
            {
                result.AddRange(listChildren);
                listChildren.ForEach(item =>
                {
                    result.AddRange(GetListChildrenProductionOrder(commonProductionOrder, item));
                });
            }
            return result;
        }

        public int GetProductionOrderAdditional(List<ProductionOrder> listProductionOrder, ProductionOrderEntityModel productionOrder)
        {
            var number = 0;
            var listProductOrder = listProductionOrder.Where(x => x.ParentId == productionOrder.ProductionOrderId).ToList();
            number = listProductOrder.Count();
            if (number > 0)
            {
                listProductOrder.ForEach(item =>
                {
                    var production = new ProductionOrderEntityModel();
                    production.ProductionOrderId = item.ProductionOrderId;
                    production.ParentId = item.ParentId;
                    number = number + GetProductionOrderAdditional(listProductionOrder, production);
                });
            }

            return number;
        }
        public GetDataReportManufactureResult GetDataReportManufacture(GetDataReportManufactureParameter parameter)
        {
            try
            {

                var listTechniqueRequestEntity = context.TechniqueRequest.Where(w => w.Active == true && w.ParentId == null).ToList() ?? new List<TechniqueRequest>();
                var listTechniqueRequest = new List<Models.Manufacture.TechniqueRequestEntityModel>();

                listTechniqueRequestEntity.ForEach(e =>
                {
                    listTechniqueRequest.Add(new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = e.TechniqueRequestId,
                        TechniqueName = e.TechniqueName,
                        TechniqueRequestCode = e.TechniqueRequestCode
                    });
                });

                return new GetDataReportManufactureResult()
                {
                    ListTechniqueRequest = listTechniqueRequest.OrderBy(w => w.TechniqueName).ToList(),
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetDataReportManufactureResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetReportManuFactureByDayResult GetReportManuFactureByDay(GetReportManuFactureByDayParameter parameter)
        {
            try
            {
                var dayShift =
                    context.SystemParameter.FirstOrDefault(f => f.SystemKey == "DayShift")?.SystemValueString ?? "";
                var nightShift = context.SystemParameter.FirstOrDefault(f => f.SystemKey == "NightShift")
                                     ?.SystemValueString ?? "";

                List<string> dayShiftList = dayShift.Split(';').ToList();
                List<string> nightShiftList = nightShift.Split(';').ToList();
                var dayShiftStart = TimeSpan.Parse(dayShiftList.First());
                var dayShiftEnd = TimeSpan.Parse(dayShiftList.Last());
                var nightShiftStart = TimeSpan.Parse(nightShiftList.First());
                var nightShiftEnd = TimeSpan.Parse(nightShiftList.Last());

                TimeSpan? fromDate = null;
                TimeSpan? toDate = null;

                if (parameter.Shift == 1)
                {
                    //ca ngay
                    fromDate = dayShiftStart;
                    toDate = dayShiftEnd;
                }
                else if (parameter.Shift == 2)
                {
                    //ca dem
                    fromDate = nightShiftStart;
                    toDate = nightShiftEnd;
                }

                //Lấy ra mã tiến trình
                var techniqueRequest =
                    context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == parameter.TechniqueRequestId);

                if (techniqueRequest == null)
                {
                    return new GetReportManuFactureByDayResult()
                    {
                        Status = false,
                        Message = "Lấy dữ liệu thất bại. Kiểm tra mã của tiến trình trong hệ thống"
                    };
                }

                var techniqueRequestCode = techniqueRequest.TechniqueRequestCode;

                //Nếu không phải tổ Tôi
                bool isToi = true;

                if (techniqueRequestCode != "TOI")
                {
                    isToi = false;
                }

                var listReportManuFactureByDay = new List<ReportManuFactureByDayModel>();

                var orderHistoryEntity = context.ProductionOrderHistory.Where(w =>
                                                 w.TechniqueRequestId == parameter.TechniqueRequestId
                                                 && w.TechniqueRequestId != null
                                                 && ((parameter.FromDate == null) ||
                                                     (w.CreatedDate >= parameter.FromDate))
                                                 && ((parameter.ToDate == null) || (w.CreatedDate <= parameter.ToDate))
                                                 && (TimeSpan.Compare(fromDate.Value, w.CreatedDate.TimeOfDay) == -1 ||
                                                     TimeSpan.Compare(fromDate.Value, w.CreatedDate.TimeOfDay) == 0)
                                                 && (TimeSpan.Compare(w.CreatedDate.TimeOfDay, toDate.Value) == -1 ||
                                                     TimeSpan.Compare(w.CreatedDate.TimeOfDay, toDate.Value) == 0)
                                             )
                                             .ToList() ?? new List<ProductionOrderHistory>();

                //lấy danh sách production order
                var listProductionOrderId =
                    orderHistoryEntity.Select(w => w.ProductionOrderId).ToList() ?? new List<Guid>();
                var listProductionOrderEntity = context.ProductionOrder
                    .Where(w => listProductionOrderId.Contains(w.ProductionOrderId)).ToList();
                //lấy danh sách production order mapping
                var listProductionOrderMappingId =
                    orderHistoryEntity.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ?? new List<Guid>();
                var listProductionOrderMappingEntity =
                    context.ProductionOrderMapping
                        .Where(w => listProductionOrderMappingId.Contains(w.ProductionOrderMappingId)).ToList() ??
                    new List<ProductionOrderMapping>();

                #region Tính phần tổng kết

                var sumaryReportManuFactureByDay = new SumaryReportManuFactureByDayModel();
                sumaryReportManuFactureByDay.Quantity = 0;
                sumaryReportManuFactureByDay.TotalAreaThick = 0;
                sumaryReportManuFactureByDay.TotalAreaThin = 0;
                sumaryReportManuFactureByDay.TotalAreaEspeciallyThick = 0;
                sumaryReportManuFactureByDay.TotalAreaEspeciallyThin = 0;
                sumaryReportManuFactureByDay.TotalAreaBoreholeThick = 0;
                sumaryReportManuFactureByDay.TotalAreaBoreholeThin = 0;
                sumaryReportManuFactureByDay.TotalAreaOriginalThick = 0;
                sumaryReportManuFactureByDay.TotalAreaOriginalThin = 0;
                sumaryReportManuFactureByDay.TotalArea = 0;

                #endregion

                //Lấy ra các record của bảng mapping giữa Item và Tiến trình (lọc theo list Id Item ở trên)
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping
                    .Where(x => listProductionOrderMappingId.Contains(x.ProductionOrderMappingId)).ToList();

                listProductionOrderMappingId.ForEach(item =>
                {
                    var reportManuFactureByDay = new ReportManuFactureByDayModel();

                    //default value
                    reportManuFactureByDay.Quantity = 0;
                    reportManuFactureByDay.TotalAreaThick = 0;
                    reportManuFactureByDay.TotalAreaThin = 0;
                    reportManuFactureByDay.TotalAreaEspeciallyThick = 0;
                    reportManuFactureByDay.TotalAreaEspeciallyThin = 0;
                    reportManuFactureByDay.TotalAreaBoreholeThick = 0;
                    reportManuFactureByDay.TotalAreaBoreholeThin = 0;
                    reportManuFactureByDay.TotalAreaOriginalThick = 0;
                    reportManuFactureByDay.TotalAreaOriginalThin = 0;

                    //Lấy lệnh sản xuất theo itemId
                    var lsxId = listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item)
                        .ProductionOrderId;
                    var lsx = listProductionOrderEntity.FirstOrDefault(x => x.ProductionOrderId == lsxId);

                    //Lấy Item
                    var item_info =
                        listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item);

                    #region Lấy Tên khách hàng

                    reportManuFactureByDay.CustomerName = lsx.CustomerName;

                    #endregion

                    #region Lấy Lệnh số

                    reportManuFactureByDay.ProductionOrderCode = lsx.ProductionOrderCode;

                    #endregion

                    #region Lấy Chủng loại

                    reportManuFactureByDay.ProductName = item_info.ProductName;

                    #endregion

                    #region Chiều dài

                    var productLength = item_info.ProductLength;

                    #endregion

                    #region Chiều rộng

                    var productWidth = item_info.ProductWidth;

                    #endregion

                    #region Ngày trả

                    reportManuFactureByDay.EndDate = lsx.EndDate;

                    #endregion

                    #region Độ dày

                    reportManuFactureByDay.ProductThickness = item_info.ProductThickness;

                    #endregion

                    if (isToi == true)
                    {
                        //Với tổ Tôi tính sản lượng sẽ trừ đi tấm lỗi

                        #region Lấy Số tấm

                        var tong_cong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                      x.TechniqueRequestId ==
                                                                      parameter.TechniqueRequestId &&
                                                                      x.CalculatorType == true).ToList().Count;

                        var tong_tru = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                     x.TechniqueRequestId == parameter.TechniqueRequestId &&
                                                                     x.CalculatorType == false).ToList().Count;

                        reportManuFactureByDay.Quantity = (tong_cong - tong_tru);

                        #endregion

                        #region Số m2 dày

                        var tong_cong_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                          x.TechniqueRequestId ==
                                                                          parameter.TechniqueRequestId &&
                                                                          x.CalculatorType == true && x.Thick == true)
                            .ToList().Count;

                        var tong_tru_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                         x.TechniqueRequestId ==
                                                                         parameter.TechniqueRequestId &&
                                                                         x.CalculatorType == false && x.Thick == true)
                            .ToList().Count;

                        reportManuFactureByDay.TotalAreaThick =
                            productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                        #endregion

                        #region Số m2 mỏng

                        var tong_cong_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                           x.TechniqueRequestId ==
                                                                           parameter.TechniqueRequestId &&
                                                                           x.CalculatorType == true && x.Thin == true)
                            .ToList().Count;

                        var tong_tru_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                          x.TechniqueRequestId ==
                                                                          parameter.TechniqueRequestId &&
                                                                          x.CalculatorType == false && x.Thin == true)
                            .ToList().Count;

                        reportManuFactureByDay.TotalAreaThin =
                            productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt dày

                        var tong_cong_db_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.EspeciallyThick == true).ToList().Count;

                        var tong_tru_db_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.EspeciallyThick == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaEspeciallyThick =
                            productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt mỏng

                        var tong_cong_db_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.EspeciallyThin == true).ToList().Count;

                        var tong_tru_db_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.EspeciallyThin == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaEspeciallyThin =
                            productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                        #endregion

                        #region Số m2 Khoan khoét dày

                        var tong_cong_kk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.BoreholeThick == true).ToList().Count;

                        var tong_tru_kk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.BoreholeThick == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaBoreholeThick =
                            productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                        #endregion

                        #region Số m2 khoan khoét mỏng

                        var tong_cong_kk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.BoreholeThin == true).ToList().Count;

                        var tong_tru_kk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.BoreholeThin == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaBoreholeThin =
                            productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ dày

                        var tong_cong_nk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.OriginalThick == true).ToList().Count;

                        var tong_tru_nk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.OriginalThick == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaOriginalThick =
                            productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ mỏng

                        var tong_cong_nk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.OriginalThin == true).ToList().Count;

                        var tong_tru_nk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.OriginalThin == true).ToList().Count;

                        reportManuFactureByDay.TotalAreaOriginalThin =
                            productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                        #endregion
                    }
                    else
                    {
                        //Với các tổ khác tổ Tôi thì vẫn được tính sản lượng những tấm lỗi kỹ thuật

                        #region Lấy Số tấm

                        var tong_cong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                      x.TechniqueRequestId ==
                                                                      parameter.TechniqueRequestId &&
                                                                      x.CalculatorType == true).ToList().Count;

                        var tong_tru = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                     x.TechniqueRequestId ==
                                                                     parameter.TechniqueRequestId &&
                                                                     x.CalculatorType == false &&
                                                                     x.IsError == false).ToList().Count;

                        reportManuFactureByDay.Quantity = (tong_cong - tong_tru);

                        #endregion

                        #region Số m2 dày

                        var tong_cong_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                          x.TechniqueRequestId ==
                                                                          parameter.TechniqueRequestId &&
                                                                          x.CalculatorType == true && x.Thick == true)
                            .ToList().Count;

                        var tong_tru_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                         x.TechniqueRequestId ==
                                                                         parameter.TechniqueRequestId &&
                                                                         x.CalculatorType == false && x.Thick == true &&
                                                                         x.IsError == false)
                            .ToList().Count;

                        reportManuFactureByDay.TotalAreaThick =
                            productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                        #endregion

                        #region Số m2 mỏng

                        var tong_cong_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                           x.TechniqueRequestId ==
                                                                           parameter.TechniqueRequestId &&
                                                                           x.CalculatorType == true && x.Thin == true)
                            .ToList().Count;

                        var tong_tru_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                          x.TechniqueRequestId ==
                                                                          parameter.TechniqueRequestId &&
                                                                          x.CalculatorType == false && x.Thin == true &&
                                                                          x.IsError == false)
                            .ToList().Count;

                        reportManuFactureByDay.TotalAreaThin =
                            productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt dày

                        var tong_cong_db_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.EspeciallyThick == true).ToList().Count;

                        var tong_tru_db_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.EspeciallyThick == true &&
                                                                            x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaEspeciallyThick =
                            productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt mỏng

                        var tong_cong_db_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.EspeciallyThin == true).ToList().Count;

                        var tong_tru_db_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.EspeciallyThin == true &&
                                                                             x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaEspeciallyThin =
                            productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                        #endregion

                        #region Số m2 Khoan khoét dày

                        var tong_cong_kk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.BoreholeThick == true).ToList().Count;

                        var tong_tru_kk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.BoreholeThick == true &&
                                                                            x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaBoreholeThick =
                            productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                        #endregion

                        #region Số m2 khoan khoét mỏng

                        var tong_cong_kk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.BoreholeThin == true).ToList().Count;

                        var tong_tru_kk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.BoreholeThin == true &&
                                                                             x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaBoreholeThin =
                            productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ dày

                        var tong_cong_nk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == true &&
                                                                             x.OriginalThick == true).ToList().Count;

                        var tong_tru_nk_day = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                            x.TechniqueRequestId ==
                                                                            parameter.TechniqueRequestId &&
                                                                            x.CalculatorType == false &&
                                                                            x.OriginalThick == true &&
                                                                            x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaOriginalThick =
                            productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ mỏng

                        var tong_cong_nk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == true &&
                                                                              x.OriginalThin == true).ToList().Count;

                        var tong_tru_nk_mong = orderHistoryEntity.Where(x => x.ProductionOrderMappingId == item &&
                                                                             x.TechniqueRequestId ==
                                                                             parameter.TechniqueRequestId &&
                                                                             x.CalculatorType == false &&
                                                                             x.OriginalThin == true &&
                                                                             x.IsError == false).ToList().Count;

                        reportManuFactureByDay.TotalAreaOriginalThin =
                            productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                        #endregion
                    }

                    #region Làm tròn kết quả

                    reportManuFactureByDay.ProductThickness = reportManuFactureByDay.ProductThickness.HasValue
                        ? Math.Round(reportManuFactureByDay.ProductThickness.Value, 4)
                        : 0;
                    reportManuFactureByDay.Quantity = reportManuFactureByDay.Quantity.HasValue
                        ? Math.Round(reportManuFactureByDay.Quantity.Value, 4)
                        : 0;
                    reportManuFactureByDay.TotalAreaThick = reportManuFactureByDay.TotalAreaThick.HasValue
                        ? Math.Round(reportManuFactureByDay.TotalAreaThick.Value, 4)
                        : 0;
                    reportManuFactureByDay.TotalAreaThin = reportManuFactureByDay.TotalAreaThin.HasValue
                        ? Math.Round(reportManuFactureByDay.TotalAreaThin.Value, 4)
                        : 0;
                    reportManuFactureByDay.TotalAreaEspeciallyThick =
                        reportManuFactureByDay.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByDay.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByDay.TotalAreaEspeciallyThin =
                        reportManuFactureByDay.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByDay.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByDay.TotalAreaBoreholeThick =
                        reportManuFactureByDay.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByDay.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByDay.TotalAreaBoreholeThin = reportManuFactureByDay.TotalAreaBoreholeThin.HasValue
                        ? Math.Round(reportManuFactureByDay.TotalAreaBoreholeThin.Value, 4)
                        : 0;
                    reportManuFactureByDay.TotalAreaOriginalThick =
                        reportManuFactureByDay.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByDay.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByDay.TotalAreaOriginalThin = reportManuFactureByDay.TotalAreaOriginalThin.HasValue
                        ? Math.Round(reportManuFactureByDay.TotalAreaOriginalThin.Value, 4)
                        : 0;

                    #endregion

                    listReportManuFactureByDay.Add(reportManuFactureByDay);

                    #region Lấy phần tổng kết

                    sumaryReportManuFactureByDay.Quantity += reportManuFactureByDay.Quantity;
                    sumaryReportManuFactureByDay.TotalAreaThick += reportManuFactureByDay.TotalAreaThick;
                    sumaryReportManuFactureByDay.TotalAreaThin += reportManuFactureByDay.TotalAreaThin;
                    sumaryReportManuFactureByDay.TotalAreaEspeciallyThick +=
                        reportManuFactureByDay.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByDay.TotalAreaEspeciallyThin +=
                        reportManuFactureByDay.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByDay.TotalAreaBoreholeThick +=
                        reportManuFactureByDay.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByDay.TotalAreaBoreholeThin += reportManuFactureByDay.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByDay.TotalAreaOriginalThick +=
                        reportManuFactureByDay.TotalAreaOriginalThick;
                    sumaryReportManuFactureByDay.TotalAreaOriginalThin += reportManuFactureByDay.TotalAreaOriginalThin;

                    #endregion
                });

                #region Tính tổng tất cả sản lượng ngày và Làm tròn phần tổng kết

                sumaryReportManuFactureByDay.TotalArea =
                    sumaryReportManuFactureByDay.TotalAreaThick + sumaryReportManuFactureByDay.TotalAreaThin
                                                                + sumaryReportManuFactureByDay
                                                                    .TotalAreaEspeciallyThick +
                                                                sumaryReportManuFactureByDay.TotalAreaEspeciallyThin
                                                                + sumaryReportManuFactureByDay.TotalAreaBoreholeThick +
                                                                sumaryReportManuFactureByDay.TotalAreaBoreholeThin
                                                                + sumaryReportManuFactureByDay.TotalAreaOriginalThick +
                                                                sumaryReportManuFactureByDay.TotalAreaOriginalThin;

                sumaryReportManuFactureByDay.Quantity = sumaryReportManuFactureByDay.Quantity.HasValue
                    ? Math.Round(sumaryReportManuFactureByDay.Quantity.Value, 4)
                    : 0;
                sumaryReportManuFactureByDay.TotalAreaThick = sumaryReportManuFactureByDay.TotalAreaThick.HasValue
                    ? Math.Round(sumaryReportManuFactureByDay.TotalAreaThick.Value, 4)
                    : 0;
                sumaryReportManuFactureByDay.TotalAreaThin = sumaryReportManuFactureByDay.TotalAreaThin.HasValue
                    ? Math.Round(sumaryReportManuFactureByDay.TotalAreaThin.Value, 4)
                    : 0;
                sumaryReportManuFactureByDay.TotalAreaEspeciallyThick =
                    sumaryReportManuFactureByDay.TotalAreaEspeciallyThick.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaEspeciallyThick.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalAreaEspeciallyThin =
                    sumaryReportManuFactureByDay.TotalAreaEspeciallyThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaEspeciallyThin.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalAreaBoreholeThick =
                    sumaryReportManuFactureByDay.TotalAreaBoreholeThick.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaBoreholeThick.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalAreaBoreholeThin =
                    sumaryReportManuFactureByDay.TotalAreaBoreholeThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaBoreholeThin.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalAreaOriginalThick =
                    sumaryReportManuFactureByDay.TotalAreaOriginalThick.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaOriginalThick.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalAreaOriginalThin =
                    sumaryReportManuFactureByDay.TotalAreaOriginalThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByDay.TotalAreaOriginalThin.Value, 4)
                        : 0;
                sumaryReportManuFactureByDay.TotalArea = sumaryReportManuFactureByDay.TotalArea.HasValue
                    ? Math.Round(sumaryReportManuFactureByDay.TotalArea.Value, 4)
                    : 0;
                
                #endregion

                return new GetReportManuFactureByDayResult()
                {
                    ListReportManuFactureByDay = listReportManuFactureByDay.OrderByDescending(w => w.EndDate).ToList(),
                    SumaryReportManuFactureByDay = sumaryReportManuFactureByDay,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetReportManuFactureByDayResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetReportManuFactureByMonthResult GetReportManuFactureByMonth(GetReportManuFactureByMonthParameter parameter)
        {
            try
            {
                //Lấy ra mã tiến trình
                var techniqueRequest =
                    context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == parameter.TechniqueRequestId);

                if (techniqueRequest == null)
                {
                    return new GetReportManuFactureByMonthResult()
                    {
                        Status = false,
                        Message = "Lấy dữ liệu thất bại. Kiểm tra mã của tiến trình trong hệ thống"
                    };
                }

                var techniqueRequestCode = techniqueRequest.TechniqueRequestCode;

                //Nếu không phải tổ Tôi
                bool isToi = true;

                if (techniqueRequestCode != "TOI")
                {
                    isToi = false;
                }

                var listReportManuFactureByMonth = new List<ReportManuFactureByMonthModel>();
                var sumaryReportManuFactureByMonth = new SumaryReportManuFactureByMonthModel();

                var dayShift =
                    context.SystemParameter.FirstOrDefault(f => f.SystemKey == "DayShift")?.SystemValueString ?? "";
                var nightShift = context.SystemParameter.FirstOrDefault(f => f.SystemKey == "NightShift")
                                     ?.SystemValueString ?? "";

                List<string> dayShiftList = dayShift.Split(';').ToList();
                List<string> nightShiftList = nightShift.Split(';').ToList();
                var dayShiftStart = TimeSpan.Parse(dayShiftList.First());
                var dayShiftEnd = TimeSpan.Parse(dayShiftList.Last());
                var nightShiftStart = TimeSpan.Parse(nightShiftList.First());
                var nightShiftEnd = TimeSpan.Parse(nightShiftList.Last());

                var orderHistoryEntity = context.ProductionOrderHistory.Where(w =>
                                                 w.TechniqueRequestId == parameter.TechniqueRequestId
                                                 && w.TechniqueRequestId != null
                                                 && ((parameter.FromDate == null) ||
                                                     (w.CreatedDate >= parameter.FromDate))
                                                 && ((parameter.ToDate == null) || (w.CreatedDate <= parameter.ToDate))
                                             )
                                             .ToList() ?? new List<ProductionOrderHistory>();

                //Điều kiện không lấy lệnh bổ sung: && (w.ParentId == null || (w.ParentId != null && w.ParentType != true))

                //lấy danh sách production order mapping
                var listProductionOrderMappingId =
                    orderHistoryEntity.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ?? new List<Guid>();
                var listProductionOrderMappingEntity =
                    context.ProductionOrderMapping
                        .Where(w => listProductionOrderMappingId.Contains(w.ProductionOrderMappingId)).ToList() ??
                    new List<ProductionOrderMapping>();

                while (parameter.FromDate <= parameter.ToDate)
                {
                    var reportManuFactureByMonth_DayShift = new ReportManuFactureByMonthModel();

                    #region Tính sản lượng ca ngày

                    var orderHistoryEntity_ShiftDay = orderHistoryEntity.Where(w =>
                            (w.CreatedDate.Date == parameter.FromDate.Value.Date)
                            && (TimeSpan.Compare(dayShiftStart, w.CreatedDate.TimeOfDay) == -1 ||
                                TimeSpan.Compare(dayShiftStart, w.CreatedDate.TimeOfDay) == 0)
                            && (TimeSpan.Compare(w.CreatedDate.TimeOfDay, dayShiftEnd) == -1 ||
                                TimeSpan.Compare(w.CreatedDate.TimeOfDay, dayShiftEnd) == 0))
                        .ToList();

                    var listProductionOrderMappingId_ShiftDay =
                        orderHistoryEntity_ShiftDay.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ??
                        new List<Guid>();

                    listProductionOrderMappingId_ShiftDay.ForEach(item =>
                    {
                        //tính tổng sản lượng từng item mỗi ca
                        var totalAreaOfItemInShift = new TotalAreaOfItemInShift();
                        //Lấy Item
                        var item_info =
                            listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item);

                        #region Chiều dài

                        var productLength = item_info.ProductLength;

                        #endregion

                        #region Chiều rộng

                        var productWidth = item_info.ProductWidth;

                        #endregion

                        #region Độ dày

                        totalAreaOfItemInShift.ProductThickness = item_info.ProductThickness;

                        #endregion

                        if (isToi == true)
                        {
                            //Với tổ Tôi tính sản lượng sẽ trừ đi tấm lỗi

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                   x.TechniqueRequestId ==
                                                                                   parameter.TechniqueRequestId &&
                                                                                   x.CalculatorType == true).ToList()
                                .Count;

                            var tong_tru = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                  x.TechniqueRequestId ==
                                                                                  parameter.TechniqueRequestId &&
                                                                                  x.CalculatorType == false).ToList()
                                .Count;

                            totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }
                        else
                        {
                            //Với các tổ khác tổ Tôi thì vẫn được tính sản lượng những tấm lỗi kỹ thuật

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                   x.TechniqueRequestId ==
                                                                                   parameter.TechniqueRequestId &&
                                                                                   x.CalculatorType == true).ToList()
                                .Count;

                            var tong_tru = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                  x.TechniqueRequestId ==
                                                                                  parameter.TechniqueRequestId &&
                                                                                  x.CalculatorType == false &&
                                                                                  x.IsError == false).ToList()
                                .Count;

                            totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }

                        #region Làm tròn kết quả

                        totalAreaOfItemInShift.ProductThickness = totalAreaOfItemInShift.ProductThickness.HasValue
                            ? Math.Round(totalAreaOfItemInShift.ProductThickness.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.Quantity = totalAreaOfItemInShift.Quantity.HasValue
                            ? Math.Round(totalAreaOfItemInShift.Quantity.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThick = totalAreaOfItemInShift.TotalAreaThick.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThick.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThin = totalAreaOfItemInShift.TotalAreaThin.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThin.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            totalAreaOfItemInShift.TotalAreaBoreholeThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            totalAreaOfItemInShift.TotalAreaBoreholeThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            totalAreaOfItemInShift.TotalAreaOriginalThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            totalAreaOfItemInShift.TotalAreaOriginalThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThin.Value, 4)
                                : 0;

                        #endregion

                        #region Tính item vào sản lượng ca

                        reportManuFactureByMonth_DayShift.Quantity += totalAreaOfItemInShift.Quantity;
                        reportManuFactureByMonth_DayShift.TotalAreaThick += totalAreaOfItemInShift.TotalAreaThick;
                        reportManuFactureByMonth_DayShift.TotalAreaThin += totalAreaOfItemInShift.TotalAreaThin;
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick;
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin;
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThick;
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThin;
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick +=
                            totalAreaOfItemInShift.TotalAreaOriginalThick;
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin +=
                            totalAreaOfItemInShift.TotalAreaOriginalThin;

                        #endregion
                    });

                    reportManuFactureByMonth_DayShift.Day = parameter.FromDate;
                    reportManuFactureByMonth_DayShift.ShiftValue = 1; //1: ngày; 2: đêm
                    reportManuFactureByMonth_DayShift.TotalDayShift =
                        (reportManuFactureByMonth_DayShift.TotalAreaThick + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaEspeciallyThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaEspeciallyThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaBoreholeThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaBoreholeThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaOriginalThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaOriginalThin);
                    reportManuFactureByMonth_DayShift.TotalNightShift = 0;

                    #region Làm tròn số

                    reportManuFactureByMonth_DayShift.Quantity = reportManuFactureByMonth_DayShift.Quantity.HasValue
                        ? Math.Round(reportManuFactureByMonth_DayShift.Quantity.Value, 4)
                        : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaThick =
                        reportManuFactureByMonth_DayShift.TotalAreaThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaThin =
                        reportManuFactureByMonth_DayShift.TotalAreaThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick =
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin =
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick =
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin =
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaOriginalThick =
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaOriginalThin =
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalNightShift =
                        reportManuFactureByMonth_DayShift.TotalNightShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalNightShift.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalDayShift =
                        reportManuFactureByMonth_DayShift.TotalDayShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalDayShift.Value, 4)
                            : 0;
                    
                    #endregion

                    listReportManuFactureByMonth.Add(reportManuFactureByMonth_DayShift);

                    #endregion

                    #region Tính sản lượng ca đêm

                    var reportManuFactureByMonth_NightShift = new ReportManuFactureByMonthModel();
                    var orderHistoryEntity_NightShift = orderHistoryEntity.Where(w =>
                            (w.CreatedDate.Date == parameter.FromDate.Value.Date)
                            && (TimeSpan.Compare(nightShiftStart, w.CreatedDate.TimeOfDay) == -1 ||
                                TimeSpan.Compare(nightShiftStart, w.CreatedDate.TimeOfDay) == 0)
                            && (TimeSpan.Compare(w.CreatedDate.TimeOfDay, nightShiftEnd) == -1 ||
                                TimeSpan.Compare(w.CreatedDate.TimeOfDay, nightShiftEnd) == 0))
                        .ToList();

                    var listProductionOrderMappingId_NightShift = orderHistoryEntity_NightShift
                        .Select(w => w.ProductionOrderMappingId).Distinct().ToList();

                    listProductionOrderMappingId_NightShift.ForEach(item =>
                    {
                        //tính tổng sản lượng từng item mỗi ca
                        var totalAreaOfItemInShift = new TotalAreaOfItemInShift();
                        //Lấy Item
                        var item_info =
                            listProductionOrderMappingEntity.FirstOrDefault(x =>
                                x.ProductionOrderMappingId == item);

                        #region Chiều dài

                        var productLength = item_info.ProductLength;

                        #endregion

                        #region Chiều rộng

                        var productWidth = item_info.ProductWidth;

                        #endregion

                        #region Độ dày

                        totalAreaOfItemInShift.ProductThickness = item_info.ProductThickness;

                        #endregion

                        if (isToi == true)
                        {
                            //Với tổ Tôi tính sản lượng sẽ trừ đi tấm lỗi

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntity_NightShift.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true)
                                .ToList().Count;

                            var tong_tru = orderHistoryEntity_NightShift.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false)
                                .ToList().Count;

                            totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.Thick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.Thin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThick == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }
                        else
                        {
                            //Với các tổ khác tổ Tôi thì vẫn được tính sản lượng những tấm lỗi kỹ thuật

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntity_NightShift.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true)
                                .ToList().Count;

                            var tong_tru = orderHistoryEntity_NightShift.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                    x.IsError == false)
                                .ToList().Count;

                            totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.Thick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.Thin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInShift.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }

                        #region Làm tròn kết quả

                        totalAreaOfItemInShift.ProductThickness = totalAreaOfItemInShift.ProductThickness.HasValue
                            ? Math.Round(totalAreaOfItemInShift.ProductThickness.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.Quantity = totalAreaOfItemInShift.Quantity.HasValue
                            ? Math.Round(totalAreaOfItemInShift.Quantity.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThick = totalAreaOfItemInShift.TotalAreaThick.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThick.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThin = totalAreaOfItemInShift.TotalAreaThin.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThin.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            totalAreaOfItemInShift.TotalAreaBoreholeThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            totalAreaOfItemInShift.TotalAreaBoreholeThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            totalAreaOfItemInShift.TotalAreaOriginalThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            totalAreaOfItemInShift.TotalAreaOriginalThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThin.Value, 4)
                                : 0;

                        #endregion

                        #region Tính item vào sản lượng ca

                        reportManuFactureByMonth_NightShift.Quantity += totalAreaOfItemInShift.Quantity;
                        reportManuFactureByMonth_NightShift.TotalAreaThick += totalAreaOfItemInShift.TotalAreaThick;
                        reportManuFactureByMonth_NightShift.TotalAreaThin += totalAreaOfItemInShift.TotalAreaThin;
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick;
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin;
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThick;
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThin;
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick +=
                            totalAreaOfItemInShift.TotalAreaOriginalThick;
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin +=
                            totalAreaOfItemInShift.TotalAreaOriginalThin;

                        #endregion
                    });

                    reportManuFactureByMonth_NightShift.Day = parameter.FromDate;
                    reportManuFactureByMonth_NightShift.ShiftValue = 2; //1: ngày; 2: đêm
                    reportManuFactureByMonth_NightShift.TotalNightShift =
                        (reportManuFactureByMonth_NightShift.TotalAreaThick + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaEspeciallyThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaEspeciallyThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaBoreholeThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaBoreholeThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaOriginalThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaOriginalThin);
                    reportManuFactureByMonth_NightShift.TotalDayShift = 0;

                    #region Làm tròn số

                    reportManuFactureByMonth_NightShift.Quantity = reportManuFactureByMonth_NightShift.Quantity.HasValue
                        ? Math.Round(reportManuFactureByMonth_NightShift.Quantity.Value, 4)
                        : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaThick =
                        reportManuFactureByMonth_NightShift.TotalAreaThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaThin =
                        reportManuFactureByMonth_NightShift.TotalAreaThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick =
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin =
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick =
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin =
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaOriginalThick =
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaOriginalThin =
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalNightShift =
                        reportManuFactureByMonth_NightShift.TotalNightShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalNightShift.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalDayShift =
                        reportManuFactureByMonth_NightShift.TotalDayShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalDayShift.Value, 4)
                            : 0;
                    
                    #endregion

                    listReportManuFactureByMonth.Add(reportManuFactureByMonth_NightShift);

                    sumaryReportManuFactureByMonth.Quantity += reportManuFactureByMonth_DayShift.Quantity;
                    sumaryReportManuFactureByMonth.TotalAreaThick += reportManuFactureByMonth_DayShift.TotalAreaThick;
                    sumaryReportManuFactureByMonth.TotalAreaThin += reportManuFactureByMonth_DayShift.TotalAreaThin;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin;
                    sumaryReportManuFactureByMonth.TotalDayShift += reportManuFactureByMonth_DayShift.TotalDayShift;
                    sumaryReportManuFactureByMonth.TotalNightShift += reportManuFactureByMonth_DayShift.TotalNightShift;

                    sumaryReportManuFactureByMonth.Quantity += reportManuFactureByMonth_NightShift.Quantity;
                    sumaryReportManuFactureByMonth.TotalAreaThick += reportManuFactureByMonth_NightShift.TotalAreaThick;
                    sumaryReportManuFactureByMonth.TotalAreaThin += reportManuFactureByMonth_NightShift.TotalAreaThin;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin;
                    sumaryReportManuFactureByMonth.TotalDayShift += reportManuFactureByMonth_NightShift.TotalDayShift;
                    sumaryReportManuFactureByMonth.TotalNightShift +=
                        reportManuFactureByMonth_NightShift.TotalNightShift;

                    sumaryReportManuFactureByMonth.Quantity = sumaryReportManuFactureByMonth.Quantity.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.Quantity.Value, 4)
                        : 0;
                    sumaryReportManuFactureByMonth.TotalAreaThick =
                        sumaryReportManuFactureByMonth.TotalAreaThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaThin = sumaryReportManuFactureByMonth.TotalAreaThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaThin.Value, 4)
                        : 0;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick =
                        sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin =
                        sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick =
                        sumaryReportManuFactureByMonth.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin =
                        sumaryReportManuFactureByMonth.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick =
                        sumaryReportManuFactureByMonth.TotalAreaOriginalThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin =
                        sumaryReportManuFactureByMonth.TotalAreaOriginalThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalNightShift =
                        sumaryReportManuFactureByMonth.TotalNightShift.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalNightShift.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalDayShift = sumaryReportManuFactureByMonth.TotalDayShift.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.TotalDayShift.Value, 4)
                        : 0;

                    #endregion

                    parameter.FromDate = parameter.FromDate.Value.AddDays(1);
                }

                sumaryReportManuFactureByMonth.TotalArea = sumaryReportManuFactureByMonth.TotalDayShift +
                                                           sumaryReportManuFactureByMonth.TotalNightShift;

                return new GetReportManuFactureByMonthResult()
                {
                    ListReportManuFactureByMonth = listReportManuFactureByMonth,
                    SumaryReportManuFactureByMonth = sumaryReportManuFactureByMonth,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetReportManuFactureByMonthResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetReportManuFactureByYearResult GetReportManuFactureByYear(GetReportManuFactureByYearParameter parameter)
        {
            try
            {
                //Lấy ra mã tiến trình
                var techniqueRequest =
                    context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestId == parameter.TechniqueRequestId);

                if (techniqueRequest == null)
                {
                    return new GetReportManuFactureByYearResult()
                    {
                        Status = false,
                        Message = "Lấy dữ liệu thất bại. Kiểm tra mã của tiến trình trong hệ thống"
                    };
                }

                var techniqueRequestCode = techniqueRequest.TechniqueRequestCode;

                //Nếu không phải tổ Tôi
                bool isToi = true;

                if (techniqueRequestCode != "TOI")
                {
                    isToi = false;
                }

                var listReportManuFactureByYear = new List<ReportManuFactureByYearModel>();
                var sumaryReportManuFactureByYear = new SumaryReportManuFactureByYearModel();

                var orderHistoryEntity = context.ProductionOrderHistory.Where(w =>
                                                 w.TechniqueRequestId == parameter.TechniqueRequestId
                                                 && w.TechniqueRequestId != null
                                                 && ((parameter.FromDate == null) ||
                                                     (w.CreatedDate >= parameter.FromDate))
                                                 && ((parameter.ToDate == null) || (w.CreatedDate <= parameter.ToDate))
                                             )
                                             .ToList() ?? new List<ProductionOrderHistory>();

                //Điều kiện không lấy lệnh bổ sung: && (w.ParentId == null || (w.ParentId != null && w.ParentType != true))

                //lấy danh sách production order mapping
                var listProductionOrderMappingId =
                    orderHistoryEntity.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ?? new List<Guid>();
                var listProductionOrderMappingEntity =
                    context.ProductionOrderMapping
                        .Where(w => listProductionOrderMappingId.Contains(w.ProductionOrderMappingId)).ToList() ??
                    new List<ProductionOrderMapping>();

                for (DateTime dt = parameter.FromDate.Value; dt <= parameter.ToDate.Value; dt = dt.AddMonths(1))
                {
                    var reportManuFactureByYear = new ReportManuFactureByYearModel();

                    var orderHistoryEntityByMonth =
                        orderHistoryEntity.Where(w => w.CreatedDate.Month == dt.Month).ToList();
                    var listProductionOrderMappingIdByMonth =
                        orderHistoryEntityByMonth.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ??
                        new List<Guid>();

                    //tính sản lượng mỗi item trong tháng 
                    listProductionOrderMappingIdByMonth?.ForEach(item =>
                    {
                        var totalAreaOfItemInMonth = new TotalAreaOfItemInMonth();
                        //Lấy Item
                        var item_info =
                            listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item);
                        
                        #region Chiều dài

                        var productLength = item_info.ProductLength;

                        #endregion

                        #region Chiều rộng

                        var productWidth = item_info.ProductWidth;

                        #endregion

                        #region Độ dày

                        totalAreaOfItemInMonth.ProductThickness = item_info.ProductThickness;

                        #endregion

                        if (isToi == true)
                        {
                            //Với tổ Tôi tính sản lượng sẽ trừ đi tấm lỗi

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntityByMonth.Where(x => x.ProductionOrderMappingId == item &&
                                                                                 x.TechniqueRequestId ==
                                                                                 parameter.TechniqueRequestId &&
                                                                                 x.CalculatorType == true).ToList()
                                .Count;

                            var tong_tru = orderHistoryEntityByMonth.Where(x => x.ProductionOrderMappingId == item &&
                                                                                x.TechniqueRequestId ==
                                                                                parameter.TechniqueRequestId &&
                                                                                x.CalculatorType == false).ToList()
                                .Count;

                            totalAreaOfItemInMonth.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thick == true).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thin == true).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.EspeciallyThick == true).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.BoreholeThick == true).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.OriginalThick == true).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }
                        else
                        {
                            //Với các tổ khác tổ Tôi thì vẫn được tính sản lượng những tấm lỗi kỹ thuật

                            #region Lấy Số tấm

                            var tong_cong = orderHistoryEntityByMonth.Where(x => x.ProductionOrderMappingId == item &&
                                                                                 x.TechniqueRequestId ==
                                                                                 parameter.TechniqueRequestId &&
                                                                                 x.CalculatorType == true).ToList().Count;

                            var tong_tru = orderHistoryEntityByMonth.Where(x => x.ProductionOrderMappingId == item &&
                                                                                x.TechniqueRequestId ==
                                                                                parameter.TechniqueRequestId &&
                                                                                x.CalculatorType == false &&
                                                                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.Quantity = (tong_cong - tong_tru);

                            #endregion

                            #region Số m2 dày

                            var tong_cong_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thick == true).ToList().Count;

                            var tong_tru_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thick == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaThick =
                                productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                            #endregion

                            #region Số m2 mỏng

                            var tong_cong_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == true &&
                                x.Thin == true).ToList().Count;

                            var tong_tru_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId ==
                                parameter.TechniqueRequestId &&
                                x.CalculatorType == false &&
                                x.Thin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaThin =
                                productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt dày

                            var tong_cong_db_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThick == true).ToList().Count;

                            var tong_tru_db_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.EspeciallyThick == true &&
                                    x.IsError == false).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaEspeciallyThick =
                                productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                            #endregion

                            #region Số m2 Đặc biệt mỏng

                            var tong_cong_db_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.EspeciallyThin == true).ToList().Count;

                            var tong_tru_db_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.EspeciallyThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaEspeciallyThin =
                                productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                            #endregion

                            #region Số m2 Khoan khoét dày

                            var tong_cong_kk_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThick == true).ToList().Count;

                            var tong_tru_kk_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.BoreholeThick == true &&
                                    x.IsError == false).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaBoreholeThick =
                                productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                            #endregion

                            #region Số m2 khoan khoét mỏng

                            var tong_cong_kk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.BoreholeThin == true).ToList().Count;

                            var tong_tru_kk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.BoreholeThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaBoreholeThin =
                                productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ dày

                            var tong_cong_nk_day = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThick == true).ToList().Count;

                            var tong_tru_nk_day = orderHistoryEntityByMonth.Where(x =>
                                    x.ProductionOrderMappingId == item &&
                                    x.TechniqueRequestId ==
                                    parameter.TechniqueRequestId &&
                                    x.CalculatorType == false &&
                                    x.OriginalThick == true &&
                                    x.IsError == false).ToList()
                                .Count;

                            totalAreaOfItemInMonth.TotalAreaOriginalThick =
                                productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                            #endregion

                            #region Số m2 Nguyên khổ mỏng

                            var tong_cong_nk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                                x.OriginalThin == true).ToList().Count;

                            var tong_tru_nk_mong = orderHistoryEntityByMonth.Where(x =>
                                x.ProductionOrderMappingId == item &&
                                x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                                x.OriginalThin == true &&
                                x.IsError == false).ToList().Count;

                            totalAreaOfItemInMonth.TotalAreaOriginalThin =
                                productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                            #endregion
                        }

                        #region Tính item vào sản lượng tháng

                        reportManuFactureByYear.TotalAreaThick += totalAreaOfItemInMonth.TotalAreaThick;
                        reportManuFactureByYear.TotalAreaThin += totalAreaOfItemInMonth.TotalAreaThin;
                        reportManuFactureByYear.TotalAreaEspeciallyThick +=
                            totalAreaOfItemInMonth.TotalAreaEspeciallyThick;
                        reportManuFactureByYear.TotalAreaEspeciallyThin +=
                            totalAreaOfItemInMonth.TotalAreaEspeciallyThin;
                        reportManuFactureByYear.TotalAreaBoreholeThick += totalAreaOfItemInMonth.TotalAreaBoreholeThick;
                        reportManuFactureByYear.TotalAreaBoreholeThin += totalAreaOfItemInMonth.TotalAreaBoreholeThin;
                        reportManuFactureByYear.TotalAreaOriginalThick += totalAreaOfItemInMonth.TotalAreaOriginalThick;
                        reportManuFactureByYear.TotalAreaOriginalThin += totalAreaOfItemInMonth.TotalAreaOriginalThin;

                        #endregion
                    });

                    #region Làm tròn kết quả

                    reportManuFactureByYear.MonthValue = dt.Month;
                    reportManuFactureByYear.TotalArea = (reportManuFactureByYear.TotalAreaThick + reportManuFactureByYear.TotalAreaThin
                                                               + reportManuFactureByYear.TotalAreaEspeciallyThick + reportManuFactureByYear.TotalAreaEspeciallyThin
                                                               + reportManuFactureByYear.TotalAreaBoreholeThick + reportManuFactureByYear.TotalAreaBoreholeThin
                                                               + reportManuFactureByYear.TotalAreaOriginalThick + reportManuFactureByYear.TotalAreaOriginalThin);

                    reportManuFactureByYear.TotalAreaThick = reportManuFactureByYear.TotalAreaThick.HasValue
                        ? Math.Round(reportManuFactureByYear.TotalAreaThick.Value, 4)
                        : 0;
                    reportManuFactureByYear.TotalAreaThin = reportManuFactureByYear.TotalAreaThin.HasValue
                        ? Math.Round(reportManuFactureByYear.TotalAreaThin.Value, 4)
                        : 0;
                    reportManuFactureByYear.TotalAreaEspeciallyThick =
                        reportManuFactureByYear.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalAreaEspeciallyThin =
                        reportManuFactureByYear.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalAreaBoreholeThick =
                        reportManuFactureByYear.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalAreaBoreholeThin =
                        reportManuFactureByYear.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalAreaOriginalThick =
                        reportManuFactureByYear.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalAreaOriginalThin =
                        reportManuFactureByYear.TotalAreaOriginalThin.HasValue
                            ? Math.Round(reportManuFactureByYear.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    reportManuFactureByYear.TotalArea = reportManuFactureByYear.TotalArea.HasValue
                        ? Math.Round(reportManuFactureByYear.TotalArea.Value, 4)
                        : 0;

                    listReportManuFactureByYear.Add(reportManuFactureByYear);

                    #endregion

                    #region lấy phần tổng kết

                    sumaryReportManuFactureByYear.TotalAreaThick += reportManuFactureByYear.TotalAreaThick;
                    sumaryReportManuFactureByYear.TotalAreaThin += reportManuFactureByYear.TotalAreaThin;
                    sumaryReportManuFactureByYear.TotalAreaEspeciallyThick +=
                        reportManuFactureByYear.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByYear.TotalAreaEspeciallyThin +=
                        reportManuFactureByYear.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByYear.TotalAreaBoreholeThick +=
                        reportManuFactureByYear.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByYear.TotalAreaBoreholeThin +=
                        reportManuFactureByYear.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByYear.TotalAreaOriginalThick +=
                        reportManuFactureByYear.TotalAreaOriginalThick;
                    sumaryReportManuFactureByYear.TotalAreaOriginalThin +=
                        reportManuFactureByYear.TotalAreaOriginalThin;
                    sumaryReportManuFactureByYear.TotalArea += reportManuFactureByYear.TotalArea;

                    sumaryReportManuFactureByYear.TotalAreaThick = sumaryReportManuFactureByYear.TotalAreaThick.HasValue
                        ? Math.Round(sumaryReportManuFactureByYear.TotalAreaThick.Value, 4)
                        : 0;
                    sumaryReportManuFactureByYear.TotalAreaThin = sumaryReportManuFactureByYear.TotalAreaThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByYear.TotalAreaThin.Value, 4)
                        : 0;
                    sumaryReportManuFactureByYear.TotalAreaEspeciallyThick =
                        sumaryReportManuFactureByYear.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalAreaEspeciallyThin =
                        sumaryReportManuFactureByYear.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalAreaBoreholeThick =
                        sumaryReportManuFactureByYear.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalAreaBoreholeThin =
                        sumaryReportManuFactureByYear.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalAreaOriginalThick =
                        sumaryReportManuFactureByYear.TotalAreaOriginalThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalAreaOriginalThin =
                        sumaryReportManuFactureByYear.TotalAreaOriginalThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByYear.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByYear.TotalArea = sumaryReportManuFactureByYear.TotalArea.HasValue
                        ? Math.Round(sumaryReportManuFactureByYear.TotalArea.Value, 4)
                        : 0;

                    #endregion
                }

                return new GetReportManuFactureByYearResult()
                {
                    ListReportManuFactureByYear = listReportManuFactureByYear,
                    SumaryReportManuFactureByYear = sumaryReportManuFactureByYear,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetReportManuFactureByYearResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetReportManuFactureByMonthAdditionalResult GetReportManuFactureByMonthAdditional(GetReportManuFactureByMonthAdditionalParameter parameter)
        {
            try
            {
                var listReportManuFactureByMonth = new List<ReportManuFactureByMonthModel>();
                var sumaryReportManuFactureByMonth = new SumaryReportManuFactureByMonthModel();

                var dayShift =
                    context.SystemParameter.FirstOrDefault(f => f.SystemKey == "DayShift")?.SystemValueString ?? "";
                var nightShift = context.SystemParameter.FirstOrDefault(f => f.SystemKey == "NightShift")
                                     ?.SystemValueString ?? "";

                List<string> dayShiftList = dayShift.Split(';').ToList();
                List<string> nightShiftList = nightShift.Split(';').ToList();
                var dayShiftStart = TimeSpan.Parse(dayShiftList.First());
                var dayShiftEnd = TimeSpan.Parse(dayShiftList.Last());
                var nightShiftStart = TimeSpan.Parse(nightShiftList.First());
                var nightShiftEnd = TimeSpan.Parse(nightShiftList.Last());

                var orderHistoryEntity = context.ProductionOrderHistory.Where(w =>
                                                 w.TechniqueRequestId == parameter.TechniqueRequestId
                                                 && w.TechniqueRequestId != null
                                                 && ((parameter.FromDate == null) ||
                                                     (w.CreatedDate >= parameter.FromDate))
                                                 && ((parameter.ToDate == null) || (w.CreatedDate <= parameter.ToDate))
                                                 && (w.ParentId != null && w.ParentType == true)
                                             )
                                             .ToList() ?? new List<ProductionOrderHistory>();

                //lấy danh sách production order mapping
                var listProductionOrderMappingId =
                    orderHistoryEntity.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ?? new List<Guid>();
                var listProductionOrderMappingEntity =
                    context.ProductionOrderMapping
                        .Where(w => listProductionOrderMappingId.Contains(w.ProductionOrderMappingId)).ToList() ??
                    new List<ProductionOrderMapping>();

                while (parameter.FromDate <= parameter.ToDate)
                {
                    var reportManuFactureByMonth_DayShift = new ReportManuFactureByMonthModel();

                    #region Tính sản lượng ca ngày

                    var orderHistoryEntity_ShiftDay = orderHistoryEntity.Where(w =>
                            (w.CreatedDate.Date == parameter.FromDate.Value.Date)
                            && (TimeSpan.Compare(dayShiftStart, w.CreatedDate.TimeOfDay) == -1 ||
                                TimeSpan.Compare(dayShiftStart, w.CreatedDate.TimeOfDay) == 0)
                            && (TimeSpan.Compare(w.CreatedDate.TimeOfDay, dayShiftEnd) == -1 ||
                                TimeSpan.Compare(w.CreatedDate.TimeOfDay, dayShiftEnd) == 0))
                        .ToList();

                    var listProductionOrderMappingId_ShiftDay =
                        orderHistoryEntity_ShiftDay.Select(w => w.ProductionOrderMappingId).Distinct().ToList() ??
                        new List<Guid>();

                    listProductionOrderMappingId_ShiftDay.ForEach(item =>
                    {
                        //tính tổng sản lượng từng item mỗi ca
                        var totalAreaOfItemInShift = new TotalAreaOfItemInShift();
                        //Lấy Item
                        var item_info =
                            listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item);

                        #region Chiều dài

                        var productLength = item_info.ProductLength;

                        #endregion

                        #region Chiều rộng

                        var productWidth = item_info.ProductWidth;

                        #endregion

                        #region Lấy Số tấm

                        var tong_cong = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                               x.TechniqueRequestId ==
                                                                               parameter.TechniqueRequestId &&
                                                                               x.CalculatorType == true).ToList().Count;

                        var tong_tru = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                              x.TechniqueRequestId ==
                                                                              parameter.TechniqueRequestId &&
                                                                              x.CalculatorType == false).ToList().Count;

                        totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                        #endregion

                        #region Độ dày

                        totalAreaOfItemInShift.ProductThickness = item_info.ProductThickness;

                        #endregion

                        #region Số m2 dày

                        var tong_cong_day = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                   x.TechniqueRequestId ==
                                                                                   parameter.TechniqueRequestId &&
                                                                                   x.CalculatorType == true &&
                                                                                   x.Thick == true).ToList().Count;

                        var tong_tru_day = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                  x.TechniqueRequestId ==
                                                                                  parameter.TechniqueRequestId &&
                                                                                  x.CalculatorType == false &&
                                                                                  x.Thick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaThick =
                            productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                        #endregion

                        #region Số m2 mỏng

                        var tong_cong_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.Thin == true).ToList().Count;

                        var tong_tru_mong = orderHistoryEntity_ShiftDay.Where(x => x.ProductionOrderMappingId == item &&
                                                                                   x.TechniqueRequestId ==
                                                                                   parameter.TechniqueRequestId &&
                                                                                   x.CalculatorType == false &&
                                                                                   x.Thin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaThin =
                            productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt dày

                        var tong_cong_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.EspeciallyThick == true).ToList().Count;

                        var tong_tru_db_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.EspeciallyThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt mỏng

                        var tong_cong_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.EspeciallyThin == true).ToList().Count;

                        var tong_tru_db_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.EspeciallyThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                        #endregion

                        #region Số m2 Khoan khoét dày

                        var tong_cong_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.BoreholeThick == true).ToList().Count;

                        var tong_tru_kk_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.BoreholeThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                        #endregion

                        #region Số m2 khoan khoét mỏng

                        var tong_cong_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.BoreholeThin == true).ToList().Count;

                        var tong_tru_kk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.BoreholeThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ dày

                        var tong_cong_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.OriginalThick == true).ToList().Count;

                        var tong_tru_nk_day = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.OriginalThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ mỏng

                        var tong_cong_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.OriginalThin == true).ToList().Count;

                        var tong_tru_nk_mong = orderHistoryEntity_ShiftDay.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.OriginalThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                        #endregion

                        #region Làm tròn kết quả

                        totalAreaOfItemInShift.ProductThickness = totalAreaOfItemInShift.ProductThickness.HasValue
                            ? Math.Round(totalAreaOfItemInShift.ProductThickness.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.Quantity = totalAreaOfItemInShift.Quantity.HasValue
                            ? Math.Round(totalAreaOfItemInShift.Quantity.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThick = totalAreaOfItemInShift.TotalAreaThick.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThick.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThin = totalAreaOfItemInShift.TotalAreaThin.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThin.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            totalAreaOfItemInShift.TotalAreaBoreholeThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            totalAreaOfItemInShift.TotalAreaBoreholeThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            totalAreaOfItemInShift.TotalAreaOriginalThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            totalAreaOfItemInShift.TotalAreaOriginalThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThin.Value, 4)
                                : 0;
                        
                        #endregion

                        #region Tính item vào sản lượng ca

                        reportManuFactureByMonth_DayShift.Quantity += totalAreaOfItemInShift.Quantity;
                        reportManuFactureByMonth_DayShift.TotalAreaThick += totalAreaOfItemInShift.TotalAreaThick;
                        reportManuFactureByMonth_DayShift.TotalAreaThin += totalAreaOfItemInShift.TotalAreaThin;
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick;
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin;
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThick;
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThin;
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick +=
                            totalAreaOfItemInShift.TotalAreaOriginalThick;
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin +=
                            totalAreaOfItemInShift.TotalAreaOriginalThin;

                        #endregion
                    });

                    reportManuFactureByMonth_DayShift.Day = parameter.FromDate;
                    reportManuFactureByMonth_DayShift.ShiftValue = 1; //1: ngày; 2: đêm
                    reportManuFactureByMonth_DayShift.TotalDayShift =
                        (reportManuFactureByMonth_DayShift.TotalAreaThick + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaEspeciallyThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaEspeciallyThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaBoreholeThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaBoreholeThin
                                                                          + reportManuFactureByMonth_DayShift
                                                                              .TotalAreaOriginalThick +
                                                                          reportManuFactureByMonth_DayShift
                                                                              .TotalAreaOriginalThin);
                    reportManuFactureByMonth_DayShift.TotalNightShift = 0;

                    #region Làm tròn số

                    reportManuFactureByMonth_DayShift.Quantity = reportManuFactureByMonth_DayShift.Quantity.HasValue
                        ? Math.Round(reportManuFactureByMonth_DayShift.Quantity.Value, 4)
                        : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaThick =
                        reportManuFactureByMonth_DayShift.TotalAreaThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaThin =
                        reportManuFactureByMonth_DayShift.TotalAreaThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick =
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin =
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick =
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin =
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaOriginalThick =
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalAreaOriginalThin =
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalNightShift =
                        reportManuFactureByMonth_DayShift.TotalNightShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalNightShift.Value, 4)
                            : 0;
                    reportManuFactureByMonth_DayShift.TotalDayShift =
                        reportManuFactureByMonth_DayShift.TotalDayShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_DayShift.TotalDayShift.Value, 4)
                            : 0;
                    
                    #endregion

                    listReportManuFactureByMonth.Add(reportManuFactureByMonth_DayShift);

                    #endregion

                    #region Tính sản lượng ca đêm

                    var reportManuFactureByMonth_NightShift = new ReportManuFactureByMonthModel();
                    var orderHistoryEntity_NightShift = orderHistoryEntity.Where(w =>
                            (w.CreatedDate.Date == parameter.FromDate.Value.Date)
                            && (TimeSpan.Compare(nightShiftStart, w.CreatedDate.TimeOfDay) == -1 ||
                                TimeSpan.Compare(nightShiftStart, w.CreatedDate.TimeOfDay) == 0)
                            && (TimeSpan.Compare(w.CreatedDate.TimeOfDay, nightShiftEnd) == -1 ||
                                TimeSpan.Compare(w.CreatedDate.TimeOfDay, nightShiftEnd) == 0))
                        .ToList();

                    var listProductionOrderMappingId_NightShift = orderHistoryEntity_NightShift
                        .Select(w => w.ProductionOrderMappingId).Distinct().ToList();

                    listProductionOrderMappingId_NightShift.ForEach(item =>
                    {
                        //tính tổng sản lượng từng item mỗi ca
                        var totalAreaOfItemInShift = new TotalAreaOfItemInShift();
                        //Lấy Item
                        var item_info =
                            listProductionOrderMappingEntity.FirstOrDefault(x => x.ProductionOrderMappingId == item);

                        #region Chiều dài

                        var productLength = item_info.ProductLength;

                        #endregion

                        #region Chiều rộng

                        var productWidth = item_info.ProductWidth;

                        #endregion

                        #region Lấy Số tấm

                        var tong_cong = orderHistoryEntity_NightShift.Where(x => x.ProductionOrderMappingId == item &&
                                                                                 x.TechniqueRequestId ==
                                                                                 parameter.TechniqueRequestId &&
                                                                                 x.CalculatorType == true).ToList()
                            .Count;

                        var tong_tru = orderHistoryEntity_NightShift.Where(x => x.ProductionOrderMappingId == item &&
                                                                                x.TechniqueRequestId ==
                                                                                parameter.TechniqueRequestId &&
                                                                                x.CalculatorType == false).ToList()
                            .Count;

                        totalAreaOfItemInShift.Quantity = (tong_cong - tong_tru);

                        #endregion

                        #region Độ dày

                        totalAreaOfItemInShift.ProductThickness = item_info.ProductThickness;

                        #endregion

                        #region Số m2 dày

                        var tong_cong_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.Thick == true).ToList().Count;

                        var tong_tru_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.Thick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaThick =
                            productLength * productWidth * (tong_cong_day - tong_tru_day) / 1000000;

                        #endregion

                        #region Số m2 mỏng

                        var tong_cong_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.Thin == true).ToList().Count;

                        var tong_tru_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.Thin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaThin =
                            productLength * productWidth * (tong_cong_mong - tong_tru_mong) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt dày

                        var tong_cong_db_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.EspeciallyThick == true).ToList().Count;

                        var tong_tru_db_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.EspeciallyThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            productLength * productWidth * (tong_cong_db_day - tong_tru_db_day) / 1000000;

                        #endregion

                        #region Số m2 Đặc biệt mỏng

                        var tong_cong_db_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.EspeciallyThin == true).ToList().Count;

                        var tong_tru_db_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.EspeciallyThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            productLength * productWidth * (tong_cong_db_mong - tong_tru_db_mong) / 1000000;

                        #endregion

                        #region Số m2 Khoan khoét dày

                        var tong_cong_kk_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.BoreholeThick == true).ToList().Count;

                        var tong_tru_kk_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.BoreholeThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            productLength * productWidth * (tong_cong_kk_day - tong_tru_kk_day) / 1000000;

                        #endregion

                        #region Số m2 khoan khoét mỏng

                        var tong_cong_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.BoreholeThin == true).ToList().Count;

                        var tong_tru_kk_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.BoreholeThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            productLength * productWidth * (tong_cong_kk_mong - tong_tru_kk_mong) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ dày

                        var tong_cong_nk_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.OriginalThick == true).ToList().Count;

                        var tong_tru_nk_day = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.OriginalThick == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            productLength * productWidth * (tong_cong_nk_day - tong_tru_nk_day) / 1000000;

                        #endregion

                        #region Số m2 Nguyên khổ mỏng

                        var tong_cong_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == true &&
                            x.OriginalThin == true).ToList().Count;

                        var tong_tru_nk_mong = orderHistoryEntity_NightShift.Where(x =>
                            x.ProductionOrderMappingId == item &&
                            x.TechniqueRequestId == parameter.TechniqueRequestId && x.CalculatorType == false &&
                            x.OriginalThin == true).ToList().Count;

                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            productLength * productWidth * (tong_cong_nk_mong - tong_tru_nk_mong) / 1000000;

                        #endregion

                        #region Làm tròn kết quả

                        totalAreaOfItemInShift.ProductThickness = totalAreaOfItemInShift.ProductThickness.HasValue
                            ? Math.Round(totalAreaOfItemInShift.ProductThickness.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.Quantity = totalAreaOfItemInShift.Quantity.HasValue
                            ? Math.Round(totalAreaOfItemInShift.Quantity.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThick = totalAreaOfItemInShift.TotalAreaThick.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThick.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaThin = totalAreaOfItemInShift.TotalAreaThin.HasValue
                            ? Math.Round(totalAreaOfItemInShift.TotalAreaThin.Value, 4)
                            : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThick =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaEspeciallyThin =
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaEspeciallyThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThick =
                            totalAreaOfItemInShift.TotalAreaBoreholeThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaBoreholeThin =
                            totalAreaOfItemInShift.TotalAreaBoreholeThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaBoreholeThin.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThick =
                            totalAreaOfItemInShift.TotalAreaOriginalThick.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThick.Value, 4)
                                : 0;
                        totalAreaOfItemInShift.TotalAreaOriginalThin =
                            totalAreaOfItemInShift.TotalAreaOriginalThin.HasValue
                                ? Math.Round(totalAreaOfItemInShift.TotalAreaOriginalThin.Value, 4)
                                : 0;
                        
                        #endregion

                        #region Tính item vào sản lượng ca

                        reportManuFactureByMonth_NightShift.Quantity += totalAreaOfItemInShift.Quantity;
                        reportManuFactureByMonth_NightShift.TotalAreaThick += totalAreaOfItemInShift.TotalAreaThick;
                        reportManuFactureByMonth_NightShift.TotalAreaThin += totalAreaOfItemInShift.TotalAreaThin;
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThick;
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin +=
                            totalAreaOfItemInShift.TotalAreaEspeciallyThin;
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThick;
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin +=
                            totalAreaOfItemInShift.TotalAreaBoreholeThin;
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick +=
                            totalAreaOfItemInShift.TotalAreaOriginalThick;
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin +=
                            totalAreaOfItemInShift.TotalAreaOriginalThin;

                        #endregion
                    });
                    reportManuFactureByMonth_NightShift.Day = parameter.FromDate;
                    reportManuFactureByMonth_NightShift.ShiftValue = 2; //1: ngày; 2: đêm
                    reportManuFactureByMonth_NightShift.TotalNightShift =
                        (reportManuFactureByMonth_NightShift.TotalAreaThick + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaEspeciallyThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaEspeciallyThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaBoreholeThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaBoreholeThin
                                                                            + reportManuFactureByMonth_NightShift
                                                                                .TotalAreaOriginalThick +
                                                                            reportManuFactureByMonth_NightShift
                                                                                .TotalAreaOriginalThin);
                    reportManuFactureByMonth_NightShift.TotalDayShift = 0;

                    #region Làm tròn số

                    reportManuFactureByMonth_NightShift.Quantity = reportManuFactureByMonth_NightShift.Quantity.HasValue
                        ? Math.Round(reportManuFactureByMonth_NightShift.Quantity.Value, 4)
                        : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaThick =
                        reportManuFactureByMonth_NightShift.TotalAreaThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaThin =
                        reportManuFactureByMonth_NightShift.TotalAreaThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick =
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin =
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick =
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin =
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaOriginalThick =
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalAreaOriginalThin =
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalNightShift =
                        reportManuFactureByMonth_NightShift.TotalNightShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalNightShift.Value, 4)
                            : 0;
                    reportManuFactureByMonth_NightShift.TotalDayShift =
                        reportManuFactureByMonth_NightShift.TotalDayShift.HasValue
                            ? Math.Round(reportManuFactureByMonth_NightShift.TotalDayShift.Value, 4)
                            : 0;
                    
                    #endregion

                    listReportManuFactureByMonth.Add(reportManuFactureByMonth_NightShift);

                    sumaryReportManuFactureByMonth.Quantity += reportManuFactureByMonth_DayShift.Quantity;
                    sumaryReportManuFactureByMonth.TotalAreaThick += reportManuFactureByMonth_DayShift.TotalAreaThick;
                    sumaryReportManuFactureByMonth.TotalAreaThin += reportManuFactureByMonth_DayShift.TotalAreaThin;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick +=
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThick;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin +=
                        reportManuFactureByMonth_DayShift.TotalAreaOriginalThin;
                    sumaryReportManuFactureByMonth.TotalDayShift += reportManuFactureByMonth_DayShift.TotalDayShift;
                    sumaryReportManuFactureByMonth.TotalNightShift += reportManuFactureByMonth_DayShift.TotalNightShift;

                    sumaryReportManuFactureByMonth.Quantity += reportManuFactureByMonth_NightShift.Quantity;
                    sumaryReportManuFactureByMonth.TotalAreaThick += reportManuFactureByMonth_NightShift.TotalAreaThick;
                    sumaryReportManuFactureByMonth.TotalAreaThin += reportManuFactureByMonth_NightShift.TotalAreaThin;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThick;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaEspeciallyThin;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThick;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaBoreholeThin;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick +=
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThick;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin +=
                        reportManuFactureByMonth_NightShift.TotalAreaOriginalThin;
                    sumaryReportManuFactureByMonth.TotalDayShift += reportManuFactureByMonth_NightShift.TotalDayShift;
                    sumaryReportManuFactureByMonth.TotalNightShift += reportManuFactureByMonth_NightShift.TotalNightShift;

                    sumaryReportManuFactureByMonth.Quantity = sumaryReportManuFactureByMonth.Quantity.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.Quantity.Value, 4)
                        : 0;
                    sumaryReportManuFactureByMonth.TotalAreaThick =
                        sumaryReportManuFactureByMonth.TotalAreaThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaThin = sumaryReportManuFactureByMonth.TotalAreaThin.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaThin.Value, 4)
                        : 0;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick =
                        sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaEspeciallyThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin =
                        sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaEspeciallyThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThick =
                        sumaryReportManuFactureByMonth.TotalAreaBoreholeThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaBoreholeThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaBoreholeThin =
                        sumaryReportManuFactureByMonth.TotalAreaBoreholeThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaBoreholeThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThick =
                        sumaryReportManuFactureByMonth.TotalAreaOriginalThick.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaOriginalThick.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalAreaOriginalThin =
                        sumaryReportManuFactureByMonth.TotalAreaOriginalThin.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalAreaOriginalThin.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalNightShift =
                        sumaryReportManuFactureByMonth.TotalNightShift.HasValue
                            ? Math.Round(sumaryReportManuFactureByMonth.TotalNightShift.Value, 4)
                            : 0;
                    sumaryReportManuFactureByMonth.TotalDayShift = sumaryReportManuFactureByMonth.TotalDayShift.HasValue
                        ? Math.Round(sumaryReportManuFactureByMonth.TotalDayShift.Value, 4)
                        : 0;
                    
                    #endregion

                    parameter.FromDate = parameter.FromDate.Value.AddDays(1);
                }

                sumaryReportManuFactureByMonth.TotalArea = sumaryReportManuFactureByMonth.TotalDayShift +
                                                           sumaryReportManuFactureByMonth.TotalDayShift;

                return new GetReportManuFactureByMonthAdditionalResult()
                {
                    ListReportManuFactureByMonth = listReportManuFactureByMonth,
                    SumaryReportManuFactureByMonth = sumaryReportManuFactureByMonth,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetReportManuFactureByMonthAdditionalResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetDataExportTrackProductionResult GetDataExportTrackProduction(GetDataExportTrackProductionParameter parameter)
        {
            try
            {
                #region Lấy Id trạng thái Lệnh sản xuất

                var lsx_type_id =
                    context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "TSX").CategoryTypeId;
                var listAllStatus_Lsx =
                    context.Category.Where(w => w.CategoryTypeId == lsx_type_id).ToList();
                
                var newProductionId =
                    listAllStatus_Lsx.FirstOrDefault(f => f.CategoryCode == "NEW").CategoryId;
                var procProductionId = listAllStatus_Lsx.FirstOrDefault(f => f.CategoryCode == "PROC")
                    .CategoryId;
                var delaProductionId = listAllStatus_Lsx.FirstOrDefault(x => x.CategoryCode == "DELA").CategoryId;
                var compProductionId = listAllStatus_Lsx.FirstOrDefault(x => x.CategoryCode == "COMP").CategoryId;

                //Id Tiến trình tổ dán
                var id_to_dan = context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestCode == "DAN")
                    .TechniqueRequestId;

                //Id Tiến trình tổ hộp
                var id_to_hop = context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestCode == "HOP")
                    .TechniqueRequestId;

                //Bảng mapping giữa Item và Tiến trình mà Item đi qua tổ dán hoặc tổ hộp
                var listAllTechniqueRequestMapping = context.TechniqueRequestMapping
                    .Where(x => x.TechniqueRequestId == id_to_dan || x.TechniqueRequestId == id_to_hop).ToList();

                var listItemId = listAllTechniqueRequestMapping.Select(y => y.ProductionOrderMappingId).Distinct()
                    .ToList();

                //Lấy tất cả Item đi qua tổ dán hoặc tổ hộp
                var listAllItem = new List<ProductionOrderMapping>();

                if (listItemId.Count > 0)
                {
                    listAllItem = context.ProductionOrderMapping
                        .Where(x => listItemId.Contains(x.ProductionOrderMappingId)).ToList();
                }

                #endregion

                var listProductionOrder = new List<ProductionOrderEntityModel>();

                if (listAllItem.Count > 0)
                {
                    var listProductionOrderId =
                        context.TotalProductionOrderMapping.Select(w => w.ProductionOrderId).Distinct().ToList() ??
                        new List<Guid>();

                    var listProductionOrderEntity = context.ProductionOrder
                        .Where(w => listProductionOrderId.Contains(w.ProductionOrderId) && w.ParentId == null).ToList();

                    //chỉ lấy danh sách production order ở trạng thái đang sản xuất, mới tạo, chậm tiến độ
                    var listProductionOrderFiltered = listProductionOrderEntity
                        .Where(w => w.StatusId == newProductionId || w.StatusId == procProductionId ||
                                    w.StatusId == delaProductionId || w.StatusId == compProductionId).ToList();

                    listProductionOrderFiltered.ForEach(e =>
                    {
                        //Lấy tất cả Item thuộc lệnh sản xuất
                        var listCurrentItem =
                            listAllItem.Where(x => x.ProductionOrderId == e.ProductionOrderId).ToList();

                        if (listCurrentItem.Count > 0)
                        {
                            //Chỉ lấy những lệnh sản xuất có item đi qua tổ hiện tại (Dán hoặc Hộp)
                            if (parameter.OrganizationCode == "TDAN")
                            {
                                var listCurrentItemId =
                                    listCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();
                                var check_dan = listAllTechniqueRequestMapping.FirstOrDefault(x =>
                                    listCurrentItemId.Contains(x.ProductionOrderMappingId) &&
                                    x.TechniqueRequestId == id_to_dan);

                                if (check_dan != null)
                                {
                                    listProductionOrder.Add(new ProductionOrderEntityModel
                                    {
                                        ProductionOrderId = e.ProductionOrderId,
                                        ProductionOrderCode = e.ProductionOrderCode?.Trim(),
                                    });
                                }
                            }
                            else if (parameter.OrganizationCode == "THOP")
                            {
                                var listCurrentItemId =
                                    listCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();
                                var check_hop = listAllTechniqueRequestMapping.FirstOrDefault(x =>
                                    listCurrentItemId.Contains(x.ProductionOrderMappingId) &&
                                    x.TechniqueRequestId == id_to_hop);

                                if (check_hop != null)
                                {
                                    listProductionOrder.Add(new ProductionOrderEntityModel
                                    {
                                        ProductionOrderId = e.ProductionOrderId,
                                        ProductionOrderCode = e.ProductionOrderCode?.Trim(),
                                    });
                                }
                            }
                        }
                    });
                }

                return new GetDataExportTrackProductionResult()
                {
                    ListProductionOrder = listProductionOrder,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetDataExportTrackProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetDataDasboardManufactureResult GetDataDasboardManufacture(GetDataDasboardManufactureParameter paramter)
        {
            try
            {
                #region Kiểm tra user là quản lý hay nhân viên

                var user = context.User.FirstOrDefault(f => f.UserId == paramter.UserId);
                var employee = context.Employee.FirstOrDefault(f => f.EmployeeId == user.EmployeeId);

                #endregion

                #region Lấy trạng thái của Item và Lệnh sản xuất

                //Lấy danh sách trạng thái item
                var statusItemTypeId = context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "TISX")
                    .CategoryTypeId;
                var listAllStatus_item = context.Category.Where(w => w.CategoryTypeId == statusItemTypeId).ToList();

                //Trạng thái Đã hoàn thành của Item
                var statusItemComp = listAllStatus_item.FirstOrDefault(f => f.CategoryCode == "COMP").CategoryId;

                //Trạng thái Hủy của Item
                var statusItemCanc = listAllStatus_item.FirstOrDefault(x => x.CategoryCode == "CANC").CategoryId;

                //Lấy danh sách trạng thái của Lệnh sản xuất
                var statusLsxTypeId =
                    context.CategoryType.FirstOrDefault(f => f.CategoryTypeCode == "TSX").CategoryTypeId;
                var listAllStatus_lsx =
                    context.Category.Where(w => w.CategoryTypeId == statusLsxTypeId).ToList();

                //Trạng thái Mới tạo của Lệnh sản xuất
                var statusLsxNew =
                    listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "NEW").CategoryId;

                //Trạng thái Đang sản xuất của Lệnh sản xuất
                var statusLsxProc = listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "PROC")
                    .CategoryId;

                //Trạng thái Đã hoàn thành của Lệnh sản xuất
                var statusLsxComp = listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "COMP")
                    .CategoryId;

                //Trạng thái Hủy của Lệnh sản xuất
                var statusLsxCanc = listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "CANC")
                    .CategoryId;

                //Trạng thái Hoãn của Lệnh sản xuất
                var statusLsxPend = listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "PEND")
                    .CategoryId;

                //Trạng thái Chậm tiến độ của Lệnh sản xuất
                var statusLsxDela = listAllStatus_lsx.FirstOrDefault(f => f.CategoryCode == "DELA")
                    .CategoryId;
                
                #endregion

                var listTechniqueRequest = new List<TechniqueRequestEntityModel>();
                var listDelayProductionOrder = new List<DelayProductionOrderInDasboardEntityModel>();
                double totalCompleteArea = 0;
                double totalArea = 0;
                var listProductionOrderInDay = new List<ProductionOrderInDayEntityModel>();
                var sumaryDashboard = new SumaryDashboardEntityModel();

                #region Lấy danh sách lệnh sản xuất

                //Lấy danh sách lệnh tổng
                var listAllTotalProductionOrder = context.TotalProductionOrder
                    .Where(x => x.StartDate <= DateTime.Now).ToList();

                //Lấy danh sách id lệnh tổng
                var listAllTotalProductionOrderId =
                    listAllTotalProductionOrder.Select(y => y.TotalProductionOrderId).ToList();

                //Lấy danh sách id lệnh sản xuất trong bảng mapping giữa lệnh tổng và lệnh sản xuất
                var listAllProductionOrderId = context.TotalProductionOrderMapping
                    .Where(x => listAllTotalProductionOrderId.Contains(x.TotalProductionOrderId))
                    .Select(y => y.ProductionOrderId).Distinct().ToList();

                //Lấy danh sách lệnh sản xuất theo dánh sách Id lệnh sản xuất và trạng thái Mới tạo, Đang sản xuất
                //Chậm tiến độ, Hoàn thành
                var listAllProductionOrder = context.ProductionOrder.Where(x =>
                        listAllProductionOrderId.Contains(x.ProductionOrderId) &&
                        (x.StatusId != statusLsxCanc && x.StatusId != statusLsxPend) && x.ParentId == null)
                    .ToList();

                //Lấy danh sách tất cả item
                var listAllItem = context.ProductionOrderMapping.ToList();

                //Lấy danh sách tất cả bản ghi của bảng mapping giữa item và tiến trình
                var listAllItemTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();

                //Lấy danh sách tất cả action của Item
                var listAllHistory = context.ProductionOrderHistory.ToList();

                #endregion

                //Nếu là quản lý
                if (employee.IsManager)
                {
                    #region Lấy danh sách tất cả các tổ

                    listTechniqueRequest = context.TechniqueRequest.Select(y => new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName,
                        TechniqueRequestCode = y.TechniqueRequestCode
                    }).OrderBy(z => z.TechniqueName).ToList();

                    #endregion

                    //Nếu có dữ liệu của các tổ sản xuất
                    if (listTechniqueRequest.Count > 0)
                    {
                        #region Lấy danh sách lệnh sản xuất chậm tiến độ

                        listDelayProductionOrder = listAllProductionOrder
                            .Where(x => x.EndDate.Value.Date < DateTime.Now.Date && x.StatusId != statusLsxComp).Select(
                                y =>
                                    new DelayProductionOrderInDasboardEntityModel
                                    {
                                        ProductionOrderId = y.ProductionOrderId,
                                        ProductionOrderCode = y.ProductionOrderCode,
                                        CustomerName = y.CustomerName,
                                        EndDate = y.EndDate,
                                        Area = 0,
                                        AreaRemain = 0,
                                        IsShow = true //Nếu là quản lý thi mặc định là true
                                    }).ToList();

                        var listDelayProductionOrderId =
                            listDelayProductionOrder.Select(y => y.ProductionOrderId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách Item thuộc lệnh sản xuất
                        var listHandleItem = listAllItem.Where(x =>
                            listDelayProductionOrderId.Contains(x.ProductionOrderId) &&
                            x.StatusId != statusItemCanc &&
                            (x.IsParent == true ||
                             (x.IsParent != true &&
                              x.IsSubParent != true &&
                              x.ParentPartId == null))).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách tiến trình gắn với Item
                        var listHandleItemId = listHandleItem.Select(y => y.ProductionOrderMappingId).ToList();
                        var _listHandleTechReqMapping = listAllItemTechniqueRequestMapping
                            .Where(x => listHandleItemId.Contains(x.ProductionOrderMappingId)).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách action
                        var listHandleHistory =
                            listAllHistory.Where(x =>
                                listHandleItemId.Contains(x.ProductionOrderMappingId) ||
                                (x.ParentId != null && listHandleItemId.Contains(x.ParentId.Value))).ToList();

                        listDelayProductionOrder.ForEach(lsx =>
                        {
                            //Lấy danh sách Item trong lệnh sản xuất
                            var listCurrentItem = listHandleItem.Where(x =>
                                    x.ProductionOrderId == lsx.ProductionOrderId)
                                .ToList();

                            var listCurrentItemId = listCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();

                            var listHandleTechReqMapping = _listHandleTechReqMapping
                                .Where(x => listCurrentItemId.Contains(x.ProductionOrderMappingId)).ToList();

                            listCurrentItem.ForEach(item =>
                            {
                                //Lấy ra tiến trình cuối cùng trong quy trình của item
                                var lastTechniqueRequest = listHandleTechReqMapping
                                    .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                    .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                //Số tấm phải làm của item
                                var currentQuantity = item.Quantity;

                                //Số tấm cộng của item
                                var tong_cong_item = listHandleHistory.Where(x =>
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm trừ của item
                                var tong_tru_item = listHandleHistory.Where(x =>
                                    x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                    x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm cộng bổ sung của item (chỉ trong trường hợp lỗi tấm hiện tại)
                                var tong_cong_bs_item = listHandleHistory.Where(x =>
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                    x.CalculatorType == true).ToList().Count();

                                //Số tấm trừ bổ sung của item (chỉ trong trường hợp lỗi tấm hiện tại)
                                var tong_tru_bs_item = listHandleHistory.Where(x =>
                                    x.ParentId == item.ProductionOrderMappingId &&
                                    x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                    x.CalculatorType == false).ToList().Count();

                                //Số tấm đã hoàn thành của item
                                var currentCompleteQuantity =
                                    (tong_cong_item - tong_tru_item) + (tong_cong_bs_item - tong_tru_bs_item);

                                //Số tấm còn lại của item
                                var currentRemainQuantity = currentQuantity - currentCompleteQuantity;

                                //Số m2 còn lại của item
                                var currentAreaRemain =
                                    Math.Round(
                                        (currentRemainQuantity * item.ProductLength * item.ProductWidth / 1000000)
                                        .Value, 4);

                                //Số m2 phải làm của item
                                var currentArea =
                                    Math.Round(
                                        (currentQuantity * item.ProductLength * item.ProductWidth / 1000000).Value, 4);
                                lsx.AreaRemain = lsx.AreaRemain + currentAreaRemain;
                                lsx.Area = lsx.Area + currentArea;
                            });
                        });

                        listDelayProductionOrder = listDelayProductionOrder.OrderBy(z => z.EndDate).ToList();

                        //Tính số m2 phải hoàn thành
                        totalArea = listDelayProductionOrder.Sum(t => t.Area);

                        //Tính số m2 đã hoàn thành = Số m2 phải hoàn thành - Số m2 còn lại
                        totalCompleteArea = totalArea - listDelayProductionOrder.Sum(t => t.AreaRemain);

                        #endregion

                        #region Lấy danh sách lệnh sản xuất trong ngày

                        //Danh sách lệnh sản xuất
                        var listCurrentProductionOrderInDay = listAllProductionOrder
                            .Where(x => x.StatusId != statusLsxComp)
                            .Select(y => new ProductionOrderInDayEntityModel
                            {
                                ProductionOrderId = y.ProductionOrderId,
                                ProductionOrderCode = y.ProductionOrderCode,
                                CustomerName = y.CustomerName,
                                CompleteQuantity = 0,
                                TotalQuantity = 0,
                                TechniqueRequestCode = "",
                                IsShow = true,
                                TotalArea = 0,
                                TotalComplete = 0
                            }).ToList();

                        var listCurrentProductionOrderInDayId =
                            listCurrentProductionOrderInDay.Select(y => y.ProductionOrderId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách Item
                        var listHandleItemInDay = listAllItem
                            .Where(x => listCurrentProductionOrderInDayId.Contains(x.ProductionOrderId) &&
                                        x.StatusId != statusItemCanc).ToList();

                        var listHandleItemInDayId =
                            listHandleItemInDay.Select(y => y.ProductionOrderMappingId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách tiến trình gắn với Item
                        var _listAllItemTechniqueRequestMapping = listAllItemTechniqueRequestMapping
                            .Where(x => listHandleItemInDayId.Contains(x.ProductionOrderMappingId)).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách action
                        var listHandleHistoryInDay = listAllHistory
                            .Where(x => listHandleItemInDayId.Contains(x.ProductionOrderMappingId) ||
                                        (x.ParentId != null && listHandleItemInDayId.Contains(x.ParentId.Value)))
                            .ToList();

                        listTechniqueRequest.ForEach(tien_trinh =>
                        {
                            listCurrentProductionOrderInDay.ForEach(lsx =>
                            {
                                //Lấy danh sách Item trong lệnh sản xuất
                                var listAllCurrentItem = listHandleItemInDay
                                    .Where(x => x.ProductionOrderId == lsx.ProductionOrderId)
                                    .ToList();

                                //Lọc ra các lệnh sản xuất có Item đi qua tiến trình đang được duyệt

                                var listCurrentItemId =
                                    listAllCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();

                                //Lấy ra tất cả tiến trình mà các item trong lệnh sản xuất đi qua
                                var listTechniqueRequestByItem = _listAllItemTechniqueRequestMapping
                                    .Where(x => listCurrentItemId.Contains(x.ProductionOrderMappingId)).ToList();

                                //Kiểm tra lệnh sản xuất có item đi qua tiến trình của tổ hiện tại không?
                                var check_technique = listTechniqueRequestByItem.FirstOrDefault(x =>
                                    x.TechniqueRequestId == tien_trinh.TechniqueRequestId);

                                //Lấy ra list id item đi qua tổ hiện tại đang duyệt
                                var listItemId = listTechniqueRequestByItem
                                    .Where(x => x.TechniqueRequestId == tien_trinh.TechniqueRequestId)
                                    .Select(y => y.ProductionOrderMappingId).ToList();

                                //Nếu đi qua
                                if (check_technique != null)
                                {
                                    lsx.TechniqueRequestCode = tien_trinh.TechniqueRequestCode;

                                    var listItem = listAllCurrentItem
                                        .Where(x => listItemId.Contains(x.ProductionOrderMappingId)).ToList();

                                    double lsx_CompleteQuantity = 0;
                                    double lsx_TotalQuantity = 0;
                                    double lsx_Area = 0;
                                    double lsx_CompleteArea = 0;

                                    listItem.ForEach(item =>
                                    {
                                        //Lấy danh sách tiến trình của item
                                        var listCurrentTechniqueRequest = listTechniqueRequestByItem
                                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                            .OrderByDescending(z => z.TechniqueOrder).ToList();

                                        //Lấy ra tiến trình cuối cùng của item
                                        var lastCurrentTechniqueRequest =
                                            listCurrentTechniqueRequest.FirstOrDefault();

                                        //Số tấm đơn vị phải làm của item thuộc tổ đang duyệt
                                        //Vì tỉ lệ đều là 1 nên số tấm đơn vị phải làm chính là số tấm của item
                                        var currentQuantity = item.Quantity;
                                        var currentArea =
                                            item.Quantity * item.ProductLength * item.ProductWidth / 1000000;

                                        //Số tấm cộng của item
                                        var tong_cong_item = listHandleHistoryInDay.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                            x.CalculatorType == true).ToList().Count();

                                        //Số tấm trừ của item
                                        var tong_tru_item = listHandleHistoryInDay.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                            x.CalculatorType == false).ToList().Count();

                                        //Số tấm cộng bổ sung (Nếu là báo lỗi tấm hiện tại)
                                        var tong_cong_item_bs = listHandleHistoryInDay.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                                x.CalculatorType == true && x.IsAddPart != true && x.Present == true)
                                            .ToList().Count();

                                        //Số tấm trừ bổ sung (Nếu là báo lỗi tấm hiện tại)
                                        var tong_tru_item_bs = listHandleHistoryInDay.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                                x.CalculatorType == false && x.IsAddPart != true && x.Present == true)
                                            .ToList().Count();

                                        //Số tấm đã hoàn thành của item
                                        var currentCompleteQuantity =
                                            (tong_cong_item - tong_tru_item) + (tong_cong_item_bs - tong_tru_item_bs);
                                        var currentCompleteArea =
                                            currentCompleteQuantity * item.ProductLength * item.ProductWidth / 1000000;

                                        //Tính tổng vào lệnh sản xuất
                                        lsx_CompleteQuantity = lsx_CompleteQuantity + currentCompleteQuantity;
                                        lsx_TotalQuantity = lsx_TotalQuantity + currentQuantity.Value;

                                        lsx_Area = lsx_Area + currentArea.Value;
                                        lsx_CompleteArea = lsx_CompleteArea + currentCompleteArea.Value;
                                    });

                                    //Thêm vào list lệnh sản xuất trong ngày
                                    var lsx_new = new ProductionOrderInDayEntityModel();
                                    lsx_new.ProductionOrderId = lsx.ProductionOrderId;
                                    lsx_new.ProductionOrderCode = lsx.ProductionOrderCode;
                                    lsx_new.CustomerName = lsx.CustomerName;
                                    lsx_new.TechniqueRequestCode = lsx.TechniqueRequestCode;
                                    lsx_new.CompleteQuantity = lsx_CompleteQuantity;
                                    lsx_new.TotalQuantity = lsx_TotalQuantity;
                                    lsx_new.IsShow = lsx.IsShow;
                                    lsx_new.TotalArea = lsx_Area;
                                    lsx_new.TotalComplete = lsx_CompleteArea;
                                    listProductionOrderInDay.Add(lsx_new);
                                }
                                //Nếu không đi qua
                                else
                                {
                                    lsx.IsShow = false;
                                }
                            });
                        });

                        #endregion
                    }
                }
                //Nếu là nhân viên
                else
                {
                    #region Lấy tổ của nhân viên

                    listTechniqueRequest = context.TechniqueRequest
                        .Where(x => x.OrganizationId == employee.OrganizationId).Select(y =>
                            new TechniqueRequestEntityModel
                            {
                                TechniqueRequestId = y.TechniqueRequestId,
                                TechniqueName = y.TechniqueName,
                                TechniqueRequestCode = y.TechniqueRequestCode
                            }).OrderBy(z => z.TechniqueName).ToList();

                    var empTechniqueRequest = listTechniqueRequest.FirstOrDefault();

                    #endregion

                    //Nếu nhân viên thuộc tổ sản xuất
                    if (listTechniqueRequest.Count > 0)
                    {
                        #region Lấy danh sách lệnh sản xuất chậm tiến độ

                        listDelayProductionOrder = listAllProductionOrder
                            .Where(x => x.EndDate.Value.Date < DateTime.Now.Date && x.StatusId != statusLsxComp).Select(
                                y =>
                                    new DelayProductionOrderInDasboardEntityModel
                                    {
                                        ProductionOrderId = y.ProductionOrderId,
                                        ProductionOrderCode = y.ProductionOrderCode,
                                        CustomerName = y.CustomerName,
                                        EndDate = y.EndDate,
                                        Area = 0,
                                        AreaRemain = 0,
                                        IsShow = true
                                    }).ToList();

                        var listDelayProductionOrderId =
                            listDelayProductionOrder.Select(y => y.ProductionOrderId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách Item thuộc lệnh sản xuất
                        var listHandleItem = listAllItem.Where(x =>
                            listDelayProductionOrderId.Contains(x.ProductionOrderId) &&
                            x.StatusId != statusItemCanc &&
                            (x.IsParent == true ||
                             (x.IsParent != true &&
                              x.IsSubParent != true &&
                              x.ParentPartId == null))).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách tiến trình gắn với Item
                        var listHandleItemId = listHandleItem.Select(y => y.ProductionOrderMappingId).ToList();
                        var _listHandleTechReqMapping = listAllItemTechniqueRequestMapping
                            .Where(x => listHandleItemId.Contains(x.ProductionOrderMappingId)).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách action
                        var listHandleHistory =
                            listAllHistory.Where(x =>
                                listHandleItemId.Contains(x.ProductionOrderMappingId) ||
                                (x.ParentId != null && listHandleItemId.Contains(x.ParentId.Value))).ToList();

                        listDelayProductionOrder.ForEach(lsx =>
                        {
                            //Lấy danh sách Item trong lệnh sản xuất
                            var listCurrentItem = listHandleItem
                                .Where(x => x.ProductionOrderId == lsx.ProductionOrderId)
                                .ToList();

                            var listCurrentItemId = listCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();

                            //Lấy ra tất cả tiến trình mà các item trong lệnh sản xuất đi qua
                            var listTechniqueRequestByItem = _listHandleTechReqMapping
                                .Where(x => listCurrentItemId.Contains(x.ProductionOrderMappingId)).ToList();

                            //Kiểm tra lệnh sản xuất có item đi qua tiến trình của tổ hiện tại không?
                            var check_technique = listTechniqueRequestByItem.FirstOrDefault(x =>
                                x.TechniqueRequestId == empTechniqueRequest.TechniqueRequestId);

                            //Nếu đi qua
                            if (check_technique != null)
                            {
                                listCurrentItem.ForEach(item =>
                                {
                                    //Lấy ra tiến trình cuối cùng trong quy trình của item
                                    var lastTechniqueRequest = _listHandleTechReqMapping
                                        .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                        .OrderByDescending(z => z.TechniqueOrder).FirstOrDefault();

                                    //Số tấm phải làm của item
                                    var currentQuantity = item.Quantity;

                                    //Số tấm cộng của item
                                    var tong_cong_item = listHandleHistory.Where(x =>
                                        x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                        x.CalculatorType == true).ToList().Count();

                                    //Số tấm trừ của item
                                    var tong_tru_item = listHandleHistory.Where(x =>
                                        x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                        x.CalculatorType == false).ToList().Count();

                                    //Số tấm cộng bổ sung của item (chỉ trong trường hợp lỗi tấm hiện tại)
                                    var tong_cong_bs_item = listHandleHistory.Where(x =>
                                        x.ParentId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                        x.CalculatorType == true).ToList().Count();

                                    //Số tấm trừ bổ sung của item (chỉ trong trường hợp lỗi tấm hiện tại)
                                    var tong_tru_bs_item = listHandleHistory.Where(x =>
                                        x.ParentId == item.ProductionOrderMappingId &&
                                        x.TechniqueRequestId == lastTechniqueRequest.TechniqueRequestId &&
                                        x.CalculatorType == false).ToList().Count();

                                    //Số tấm đã hoàn thành của item
                                    var currentCompleteQuantity =
                                        (tong_cong_item - tong_tru_item) + (tong_cong_bs_item - tong_tru_bs_item);

                                    //Số tấm còn lại của item
                                    var currentRemainQuantity = currentQuantity - currentCompleteQuantity;

                                    //Số m2 còn lại của item
                                    var currentAreaRemain =
                                        Math.Round(
                                            (currentRemainQuantity * item.ProductLength * item.ProductWidth / 1000000)
                                            .Value,
                                            4);

                                    //Số m2 phải làm của item
                                    var currentArea =
                                        Math.Round(
                                            (currentQuantity * item.ProductLength * item.ProductWidth / 1000000).Value,
                                            4);

                                    lsx.AreaRemain = lsx.AreaRemain + currentAreaRemain;
                                    lsx.Area = lsx.Area + currentArea;
                                });
                            }
                            //Nếu không đi qua
                            else
                            {
                                lsx.IsShow = false;
                            }
                        });

                        //Chỉ lấy những lệnh sản xuất có item đi qua tổ hiện tại
                        listDelayProductionOrder = listDelayProductionOrder.Where(x => x.IsShow == true)
                            .OrderBy(z => z.EndDate).ToList();

                        //Tính số m2 phải hoàn thành
                        totalArea = listDelayProductionOrder.Sum(t => t.Area);

                        //Tính số m2 đã hoàn thành = Số m2 phải hoàn thành - Số m2 còn lại
                        totalCompleteArea = totalArea - listDelayProductionOrder.Sum(t => t.AreaRemain);

                        #endregion

                        #region Lấy danh sách lệnh sản xuất trong ngày

                        //Danh sách lệnh sản xuất
                        var listCurrentProductionOrderInDay = listAllProductionOrder
                            .Where(x => x.StatusId != statusLsxComp)
                            .Select(y => new ProductionOrderInDayEntityModel
                            {
                                ProductionOrderId = y.ProductionOrderId,
                                ProductionOrderCode = y.ProductionOrderCode,
                                CustomerName = y.CustomerName,
                                CompleteQuantity = 0,
                                TotalQuantity = 0,
                                TechniqueRequestCode = "",
                                IsShow = true,
                                TotalArea = 0,
                                TotalComplete = 0
                            }).ToList();

                        var listCurrentProductionOrderInDayId =
                            listCurrentProductionOrderInDay.Select(y => y.ProductionOrderId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách Item
                        var listHandleItemInDay = listAllItem
                            .Where(x => listCurrentProductionOrderInDayId.Contains(x.ProductionOrderId) &&
                                        x.StatusId != statusItemCanc).ToList();

                        var listHandleItemInDayId =
                            listHandleItemInDay.Select(y => y.ProductionOrderMappingId).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách tiến trình gắn với Item
                        var _listAllItemTechniqueRequestMapping = listAllItemTechniqueRequestMapping
                            .Where(x => listHandleItemInDayId.Contains(x.ProductionOrderMappingId)).ToList();

                        //Giới hạn bản ghi phải xử lý của danh sách action
                        var listHandleHistoryInDay = listAllHistory
                            .Where(x => listHandleItemInDayId.Contains(x.ProductionOrderMappingId) ||
                                        (x.ParentId != null && listHandleItemInDayId.Contains(x.ParentId.Value)))
                            .ToList();

                        listTechniqueRequest.ForEach(tien_trinh =>
                        {
                            listCurrentProductionOrderInDay.ForEach(lsx =>
                            {
                                //Lấy danh sách Item trong lệnh sản xuất
                                var listAllCurrentItem = listHandleItemInDay
                                    .Where(x => x.ProductionOrderId == lsx.ProductionOrderId)
                                    .ToList();

                                //Lọc ra các lệnh sản xuất có Item đi qua tiến trình đang được duyệt

                                var listCurrentItemId =
                                    listAllCurrentItem.Select(y => y.ProductionOrderMappingId).ToList();

                                //Lấy ra tất cả tiến trình mà các item trong lệnh sản xuất đi qua
                                var listTechniqueRequestByItem = _listAllItemTechniqueRequestMapping
                                    .Where(x => listCurrentItemId.Contains(x.ProductionOrderMappingId)).ToList();

                                //Kiểm tra lệnh sản xuất có item đi qua tiến trình của tổ hiện tại không?
                                var check_technique = listTechniqueRequestByItem.FirstOrDefault(x =>
                                    x.TechniqueRequestId == tien_trinh.TechniqueRequestId);

                                //Lấy ra list id item đi qua tổ hiện tại đang duyệt
                                var listItemId = listTechniqueRequestByItem
                                    .Where(x => x.TechniqueRequestId == tien_trinh.TechniqueRequestId)
                                    .Select(y => y.ProductionOrderMappingId).ToList();

                                //Nếu đi qua
                                if (check_technique != null)
                                {
                                    lsx.TechniqueRequestCode = tien_trinh.TechniqueRequestCode;

                                    var listItem = listAllCurrentItem
                                        .Where(x => listItemId.Contains(x.ProductionOrderMappingId)).ToList();

                                    double lsx_CompleteQuantity = 0;
                                    double lsx_TotalQuantity = 0;
                                    double lsx_Area = 0;
                                    double lsx_CompleteArea = 0;

                                    listItem.ForEach(item =>
                                    {
                                        //Lấy danh sách tiến trình của item
                                        var listCurrentTechniqueRequest = listTechniqueRequestByItem
                                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                            .OrderByDescending(z => z.TechniqueOrder).ToList();

                                        //Lấy ra số Order của tiến trình đang duyệt
                                        var currentOrder = listCurrentTechniqueRequest
                                            .Where(x => x.TechniqueRequestId == tien_trinh.TechniqueRequestId)
                                            .Select(y => y.TechniqueOrder).FirstOrDefault();

                                        //Lấy ra tiến trình cuối cùng của item
                                        var lastCurrentTechniqueRequest =
                                            listCurrentTechniqueRequest.FirstOrDefault();

                                        //Số tấm đơn vị phải làm của item thuộc tổ đang duyệt
                                        //Vì tỉ lệ đều là 1 nên số tấm đơn vị phải làm chính là số tấm của item
                                        var currentQuantity = item.Quantity;
                                        var currentArea =
                                            item.Quantity * item.ProductLength * item.ProductWidth / 1000000;

                                        //Số tấm cộng của item
                                        var tong_cong_item = listHandleHistoryInDay.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                            x.CalculatorType == true).ToList().Count();

                                        //Số tấm trừ của item
                                        var tong_tru_item = listHandleHistoryInDay.Where(x =>
                                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                                            x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                            x.CalculatorType == false).ToList().Count();

                                        //Số tấm cộng bổ sung (Nếu là báo lỗi tấm hiện tại)
                                        var tong_cong_item_bs = listHandleHistoryInDay.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                                x.CalculatorType == true && x.IsAddPart != true && x.Present == true)
                                            .ToList().Count();

                                        //Số tấm trừ bổ sung (Nếu là báo lỗi tấm hiện tại)
                                        var tong_tru_item_bs = listHandleHistoryInDay.Where(x =>
                                                x.ParentId == item.ProductionOrderMappingId &&
                                                x.TechniqueRequestId == tien_trinh.TechniqueRequestId &&
                                                x.CalculatorType == false && x.IsAddPart != true && x.Present == true)
                                            .ToList().Count();

                                        //Số tấm đã hoàn thành của item
                                        var currentCompleteQuantity =
                                            (tong_cong_item - tong_tru_item) + (tong_cong_item_bs - tong_tru_item_bs);
                                        var currentCompleteArea =
                                            currentCompleteQuantity * item.ProductLength * item.ProductWidth / 1000000;

                                        //Tính tổng vào lệnh sản xuất
                                        lsx_CompleteQuantity = lsx_CompleteQuantity + currentCompleteQuantity;
                                        lsx_TotalQuantity = lsx_TotalQuantity + currentQuantity.Value;

                                        lsx_Area = lsx_Area + currentArea.Value;
                                        lsx_CompleteArea = lsx_CompleteArea + currentCompleteArea.Value;
                                    });

                                    //Thêm vào list lệnh sản xuất trong ngày
                                    var lsx_new = new ProductionOrderInDayEntityModel();
                                    lsx_new.ProductionOrderId = lsx.ProductionOrderId;
                                    lsx_new.ProductionOrderCode = lsx.ProductionOrderCode;
                                    lsx_new.CustomerName = lsx.CustomerName;
                                    lsx_new.TechniqueRequestCode = lsx.TechniqueRequestCode;
                                    lsx_new.CompleteQuantity = lsx_CompleteQuantity;
                                    lsx_new.TotalQuantity = lsx_TotalQuantity;
                                    lsx_new.IsShow = lsx.IsShow;
                                    lsx_new.TotalArea = lsx_Area;
                                    lsx_new.TotalComplete = lsx_CompleteArea;
                                    listProductionOrderInDay.Add(lsx_new);
                                }
                                //Nếu không đi qua
                                else
                                {
                                    lsx.IsShow = false;
                                }
                            });
                        });

                        #endregion
                    }
                }

                #region Tính sản lượng hoàn thành trong ngày của các tổ

                var listItemHistory = new List<ItemHistory>();

                //Lấy tất cả action được thực hiện trong ngày (chỉnh tính lệnh sản xuất ParentType != true)
                var listAllAction = listAllHistory
                    .Where(x => x.CreatedDate.Date == DateTime.Now.Date).ToList();

                listAllAction.ForEach(_action =>
                {
                    var _itemHistory = new ItemHistory();
                    _itemHistory.ProductionOrderMappingId = _action.ProductionOrderMappingId;
                    _itemHistory.TechniqueRequestId = _action.TechniqueRequestId;
                    _itemHistory.CalculatorType = _action.CalculatorType.Value;

                    var _item = listAllItem.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == _action.ProductionOrderMappingId);

                    //Lấy chiều dài
                    var length = _item.ProductLength.Value;

                    //Lấy chiều rộng
                    var width = _item.ProductWidth.Value;

                    //Tính số m2
                    _itemHistory.Area = length * width / 1000000;

                    listItemHistory.Add(_itemHistory);
                });

                listTechniqueRequest.ForEach(tien_trinh =>
                {
                    //Lấy tất cả tấm cộng thuộc tiến trình hiện tại (chỉnh tính lệnh sản xuất ParentType != true)
                    var tong_m2_cong = listItemHistory.Where(x =>
                            x.CalculatorType == true && x.TechniqueRequestId == tien_trinh.TechniqueRequestId)
                        .Sum(y => y.Area);

                    //Lấy tất cả tấm trừ thuộc tiến trình hiện tại (chỉnh tính lệnh sản xuất ParentType != true)
                    var tong_m2_tru = listItemHistory.Where(x =>
                            x.CalculatorType == false && x.TechniqueRequestId == tien_trinh.TechniqueRequestId)
                        .Sum(y => y.Area);

                    tien_trinh.CompleteAreaInDay = Math.Round((tong_m2_cong - tong_m2_tru), 4);
                });

                #endregion

                return new GetDataDasboardManufactureResult()
                {
                    ListTechniqueRequest = listTechniqueRequest,
                    ListDelayProductionOrder = listDelayProductionOrder,
                    TotalCompleteArea = totalCompleteArea,
                    TotalArea = totalArea,
                    ListProductionOrderInDay = listProductionOrderInDay,
                    SumaryDashboard = sumaryDashboard,
                    Status = true,
                    Message = "Success",
                };
            }
            catch (Exception e)
            {
                return new GetDataDasboardManufactureResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetListChildrentItemResult GetListChildrentItem(GetListChildrentItemParameter parameter)
        {
            try
            {
                var listProductionOrderMapping = context.ProductionOrderMapping
                    .Where(x => x.ParentPartId == parameter.ProductionOrderMappingId && x.ParentId == null).Select(y =>
                        new ProductionOrderMappingEntityModel
                        {
                            ProductionOrderMappingId = y.ProductionOrderMappingId,
                            ProductName = y.ProductName,
                            ProductLength = y.ProductLength,
                            ProductWidth = y.ProductWidth,
                            ProductThickness = y.ProductThickness
                        }).ToList();

                return new GetListChildrentItemResult()
                {
                    Status = true,
                    Message = "Success",
                    ListProductionOrderMapping = listProductionOrderMapping
                };
            }
            catch (Exception e)
            {
                return new GetListChildrentItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetTrackProductionReportResult GetTrackProductionReport(GetTrackProductionReportParameter parameter)
        {
            try
            {
                var listProductionOrderEntity = context.ProductionOrder.Where(w =>
                        (parameter.ListProductionOrderId == null ||
                         parameter.ListProductionOrderId.Contains(w.ProductionOrderId)))
                    .ToList();

                var listProductionOrderId = listProductionOrderEntity.Select(w => w.ProductionOrderId).ToList() ??
                                            new List<Guid>();

                //Chỉ lấy Item cha và Item không có bán thành phẩm
                var listItem =
                    context.ProductionOrderMapping.Where(w => listProductionOrderId.Contains(w.ProductionOrderId) &&
                                                              (w.IsParent == true ||
                                                               (w.IsParent != true && w.IsSubParent != true &&
                                                                w.ParentPartId == null)))
                        .OrderBy(z => z.Stt).ToList() ?? new List<ProductionOrderMapping>();

                var listTrackProductionReport = new List<TrackProductionReportModel>();

                listItem?.ForEach(item =>
                {
                    var productionOrder =
                        listProductionOrderEntity.FirstOrDefault(f => f.ProductionOrderId == item.ProductionOrderId);

                    var report = new TrackProductionReportModel
                    {
                        Stt = item.Stt,
                        ProductionOrderCode = productionOrder?.ProductionOrderCode?.Trim(),
                        ProductLength = item.ProductLength ?? 0,
                        ProductWidth = item.ProductWidth ?? 0,
                        TechniqueDescription = GetTechniqueDescription(item.TechniqueDescription),
                        Quantity = item.Quantity ?? 0,
                        CustomerName = productionOrder.CustomerName,
                        ProductColor = item.ProductColor,
                        ProductThickness = item.ProductThickness,
                        ProductionDate = DateTime.Now,
                        ProductMaterial = GetMaterialDesc(item.ProductGroupCode?.Trim())
                    };
                    listTrackProductionReport.Add(report);
                });

                //sap xep theo ma order
                listTrackProductionReport = listTrackProductionReport.OrderBy(w => w.ProductionOrderCode).ToList();

                return new GetTrackProductionReportResult()
                {
                    Status = true,
                    Message = "Success",
                    ListTrackProductionReport = listTrackProductionReport
                };
            }
            catch (Exception e)
            {
                return new GetTrackProductionReportResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        private string GetTechniqueDescription(string techniqueDescription)
        {
            var listSplitStr = techniqueDescription.Split(';').ToList() ?? new List<string>();
            return listSplitStr.FirstOrDefault() ?? "";
        }

        private string GetMaterialDesc(string productGroupCode)
        {
            string result = "";

            if (productGroupCode == "D1" ||
                productGroupCode == "D2" ||
                productGroupCode == "D3" ||
                productGroupCode == "D4" ||
                productGroupCode == "D5" ||
                productGroupCode == "D6" ||
                productGroupCode == "D7" ||
                productGroupCode == "D8"
                ) result = "Kính + Phim PVB";

            if (productGroupCode == "H1" ||
                productGroupCode == "H2" ||
                productGroupCode == "H3" ||
                productGroupCode == "H4" ||
                productGroupCode == "H5" ||
                productGroupCode == "H6"
                ) result = "Kính + Nhôm + Keo AB";

            return result;
        }

        public GetMasterDataTrackProductionResult GetMasterDataTrackProduction(GetMasterDataTrackProductionParameter parameter)
        {
            try
            {
                var organizationCode = "";
                var organizationName = "";
                //Lấy ra Tiến trình của người đang đăng nhập (hiện tại thuộc tổ nào)
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                var organizationId = employee.OrganizationId;
                var organization = context.Organization.FirstOrDefault(x => x.OrganizationId == organizationId);
                organizationCode = organization.OrganizationCode;
                organizationName = organization.OrganizationName;

                var lsxTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX").CategoryTypeId;
                var listPassLsxId = context.Category.Where(x =>
                        x.CategoryTypeId == lsxTypeId &&
                        (x.CategoryCode == "NEW" || x.CategoryCode == "PROC" || x.CategoryCode == "DELA"))
                    .Select(y => y.CategoryId).ToList();

                #region Lấy lệnh tổng theo thời gian hiện tại

                var day = DateTime.Now.Day;
                var month = DateTime.Now.Month;
                var year = DateTime.Now.Year;

                var currentTime = "Ngày " + day.ToString("D2") + " tháng " +
                                  month.ToString("D2") + " năm " + year;

                #endregion

                var categoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX")
                    .CategoryTypeId;
                var listStatusItem = context.Category.Where(x => x.CategoryTypeId == categoryTypeId).Select(y =>
                    new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                #region Lấy danh sách lệnh sản xuất

                var listProductionOrder = new List<ProductionOrderEntityModel>();

                //Lấy list Id lệnh tổng có ngày sản xuất đến ngày hiện tại
                var listTotalProductionOrderId = context.TotalProductionOrder.Where(x => x.StartDate <= DateTime.Now)
                    .Select(y => y.TotalProductionOrderId).ToList();

                //Lấy list Id lệnh sản xuất đã gắn với lệnh tổng
                var listProductionOrderId =
                    context.TotalProductionOrderMapping
                        .Where(x => listTotalProductionOrderId.Contains(x.TotalProductionOrderId))
                        .Select(y => y.ProductionOrderId).Distinct().ToList();

                //Lấy list lệnh sản xuất có trạng thái: Mới tạo, Đang sản xuất, Chậm tiến độ
                if (listProductionOrderId.Count > 0)
                {
                    listProductionOrder = context.ProductionOrder
                        .Where(x => listPassLsxId.Contains(x.StatusId) &&
                                    listProductionOrderId.Contains(x.ProductionOrderId)
                                    && x.ParentId == null).Select(y =>
                                new ProductionOrderEntityModel
                                {
                                    ProductionOrderId = y.ProductionOrderId,
                                    ProductionOrderCode = y.ProductionOrderCode
                                }).ToList();
                }

                #endregion

                return new GetMasterDataTrackProductionResult()
                {
                    Status = true,
                    Message = "Success",
                    OrganizationCode = organizationCode,
                    OrganizationName = organizationName,
                    CurrentTime = currentTime,
                    ListStatusItem = listStatusItem,
                    ListProductionOrder = listProductionOrder
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataTrackProductionResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateRememberItemResult CreateRememberItem(CreateRememberItemParameter parameter)
        {
            try
            {
                //Kiểm tra xem Item đã được báo lỗi chưa?
                var check = context.RememberItem.FirstOrDefault(x =>
                    x.ProductionOrderMappingId == parameter.RememberItem.ProductionOrderMappingId);

                //Nếu chưa được báo lỗi 
                if (check == null)
                {
                    var rememberItem = new RememberItem();
                    rememberItem.RememberItemId = Guid.NewGuid();
                    rememberItem.ProductionOrderId = parameter.RememberItem.ProductionOrderId;
                    rememberItem.ProductionOrderMappingId = parameter.RememberItem.ProductionOrderMappingId;
                    rememberItem.Quantity = 1;
                    rememberItem.Description = null;
                    rememberItem.IsCheck = false;
                    rememberItem.CreatedDate = DateTime.Now;
                    rememberItem.CreatedById = parameter.UserId;

                    context.RememberItem.Add(rememberItem);
                    context.SaveChanges();
                }
                //Nếu đã được báo lỗi thì cộng số tấm lỗi của Item lên 1
                else
                {
                    check.Quantity = check.Quantity + 1;
                    context.RememberItem.Update(check);
                    context.SaveChanges();
                }

                return new CreateRememberItemResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new CreateRememberItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataViewRememberItemDialogResult GetMasterDataViewRememberItemDialog(
            GetMasterDataViewRememberItemDialogParameter parameter)
        {
            try
            {
                var listRememberItem = new List<RememberItemEntityModel>();

                listRememberItem = context.RememberItem
                    .Where(x => (parameter.FromDate == null || parameter.FromDate == DateTime.MinValue ||
                                 x.CreatedDate.Date >= parameter.FromDate.Value.Date) &&
                                (parameter.ToDate == null || parameter.ToDate == DateTime.MinValue ||
                                 x.CreatedDate.Date <= parameter.ToDate.Value.Date)).Select(y =>
                        new RememberItemEntityModel
                        {
                            RememberItemId = y.RememberItemId,
                            ProductionOrderId = y.ProductionOrderId,
                            ProductionOrderMappingId = y.ProductionOrderMappingId,
                            Quantity = y.Quantity,
                            Description = y.Description,
                            IsCheck = y.IsCheck,
                            ProductionOrderCode = "",
                            ProductName = "",
                            ProductLength = null,
                            ProductWidth = null,
                            ProductThickness = null
                        }).ToList();

                var listProductionOrderId = listRememberItem.Select(y => y.ProductionOrderId).Distinct().ToList();
                var listProductionOrderMappingId =
                    listRememberItem.Select(y => y.ProductionOrderMappingId).Distinct().ToList();

                var listCommonProductionOrder = context.ProductionOrder
                    .Where(x => listProductionOrderId.Contains(x.ProductionOrderId)).ToList();
                var listCommonProductionOrderMapping = context.ProductionOrderMapping
                    .Where(x => listProductionOrderMappingId.Contains(x.ProductionOrderMappingId)).ToList();

                listRememberItem.ForEach(item =>
                {
                    var current_ProductionOrder =
                        listCommonProductionOrder.FirstOrDefault(x => x.ProductionOrderId == item.ProductionOrderId);
                    var current_ProductionOrderMapping =
                        listCommonProductionOrderMapping.FirstOrDefault(x =>
                            x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                    item.ProductionOrderCode = current_ProductionOrder?.ProductionOrderCode;
                    item.ProductName = current_ProductionOrderMapping?.ProductName;
                    item.ProductThickness = current_ProductionOrderMapping?.ProductThickness;
                    item.ProductLength = current_ProductionOrderMapping?.ProductLength;
                    item.ProductWidth = current_ProductionOrderMapping?.ProductWidth;
                });

                listRememberItem = listRememberItem.Where(x =>
                        (parameter.ProductionOrderCode == null || parameter.ProductionOrderCode == "" || x
                             .ProductionOrderCode.Trim().ToLower().Contains(parameter.ProductionOrderCode.ToLower())) &&
                        (parameter.ProductName == null || parameter.ProductName == "" || x.ProductName.Trim().ToLower()
                             .Contains(parameter.ProductName.ToLower())) &&
                        (parameter.ProductThickness == null || x.ProductThickness == parameter.ProductThickness))
                    .ToList();

                return new GetMasterDataViewRememberItemDialogResult()
                {
                    Status = true,
                    Message = "Success",
                    ListRememberItem = listRememberItem
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataViewRememberItemDialogResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateRememberItemResult UpdateRememberItem(UpdateRememberItemParameter parameter)
        {
            try
            {
                var rememberItem =
                    context.RememberItem.FirstOrDefault(x => x.RememberItemId == parameter.RememberItem.RememberItemId);

                rememberItem.Quantity = parameter.RememberItem.Quantity;
                rememberItem.Description = parameter.RememberItem.Description;
                rememberItem.IsCheck = parameter.RememberItem.IsCheck;
                rememberItem.UpdatedById = parameter.UserId;
                rememberItem.UpdatedDate = DateTime.Now;

                context.RememberItem.Update(rememberItem);
                context.SaveChanges();

                return new UpdateRememberItemResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateRememberItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public CreateAllBTPResult CreateAllBTP(CreateAllBTPParameter parameter)
        {
            try
            {
                // Lấy trạng thái của lệnh sản xuất
                var statusType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TSX");
                var statusNEW = context.Category
                    .FirstOrDefault(x => x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "NEW")
                    .CategoryId;
                var statusDELA = context.Category
                    .FirstOrDefault(x => x.CategoryTypeId == statusType.CategoryTypeId && x.CategoryCode == "DELA")
                    .CategoryId;
                // Lấy trạng thái mới của item
                var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                var statusNewIdProduct = context.Category.FirstOrDefault(x =>
                    x.CategoryTypeId == statusItemType.CategoryTypeId && x.CategoryCode == "NEW").CategoryId;

                var productOrder =
                    context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == parameter.ProductionOrderId);
                if (productOrder == null || (productOrder.StatusId != statusNEW 
                    && productOrder.StatusId != statusDELA))
                {
                    return new CreateAllBTPResult()
                    {
                        Status = false,
                        Message = "Không thể thêm bán thành phẩm khi lệnh sản xuất ở trạng thái này!"
                    };
                }

                var commonProductItem = context.ProductionOrderMapping
                    .Where(x => x.ProductionOrderId == productOrder.ProductionOrderId).ToList();
                if (commonProductItem.Count == 0)
                {
                    return new CreateAllBTPResult()
                    {
                        Status = false,
                        Message = "Lệnh sản xuất này không có sản phẩm nào!"
                    };
                }
                var listTechnique = context.TechniqueRequest.ToList();
                var listTechniqueMapping = context.TechniqueRequestMapping.ToList();
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")
                                          ?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                //Lấy ra những bán thành phẩm cha gốc và có trạng thái là Mới tạo
                var listProductItem = commonProductItem
                    .Where(x => x.ParentPartId == null && x.StatusId == statusNewIdProduct).ToList();

                //Lấy ra danh sách Item Bán thành phẩm cấp 1 và cấp 2
                var listItemBTP = new List<Guid>();

                listProductItem.ForEach(item =>
                {
                    var list_btp1 = commonProductItem.Where(x => x.ParentPartId == item.ProductionOrderMappingId)
                        .ToList();

                    if (list_btp1.Count > 0)
                    {
                        list_btp1.ForEach(item_btp1 =>
                        {
                            listItemBTP.Add(item_btp1.ProductionOrderMappingId);

                            //Tìm bán thành phẩm cấp 2
                            var list_btp2 = commonProductItem
                                .Where(x => x.ParentPartId == item_btp1.ProductionOrderMappingId)
                                .ToList();

                            list_btp2.ForEach(item_btp2 =>
                            {
                                listItemBTP.Add(item_btp2.ProductionOrderMappingId);
                            });
                        });
                    }
                });

                //Lấy ra danh sách item cần xóa (chỉ xóa những item có trạng thái Mới tạo)
                var listItemRemove = commonProductItem
                    .Where(x => listItemBTP.Contains(x.ProductionOrderMappingId)).ToList();

                //Xóa toàn bộ item bán thành phẩm và bảng mapping giữa tiến trình và item
                if (listItemRemove.Count > 0)
                {
                    context.ProductionOrderMapping.RemoveRange(listItemRemove);
                    var listProductItemId = listItemRemove.Select(x => x.ProductionOrderMappingId).ToList();
                    var listTechniqueMappingRemove = context.TechniqueRequestMapping
                        .Where(x => listProductItemId.Contains(x.ProductionOrderMappingId)).ToList();
                    context.TechniqueRequestMapping.RemoveRange(listTechniqueMappingRemove);
                }

                listProductItem.ForEach(item =>
                {
                    if(item.StatusId == statusNewIdProduct)
                    {
                        item.ProductOrderWorkflowId = parameter.BTP.ProductOrderWorkflowId;
                        var listTechniqueMappingRemove = listTechniqueMapping
                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();
                        context.TechniqueRequestMapping.RemoveRange(listTechniqueMappingRemove);
                        var productGroupCode = item.ProductGroupCode.Trim().ToLower();

                        if (item.TechniqueDescription == null)
                        {
                            item.TechniqueDescription = "";
                        }
                        var listTechniqueDescription = item.TechniqueDescription.ToLower().Split(' ').ToList();

                        var techniqueDescription = "";
                        listTechniqueDescription.ForEach(e =>
                        {
                            techniqueDescription = techniqueDescription + e + " ";
                        });

                        // Thêm TechniqueRequestMapping (tiến trình)
                        parameter.BTP.ListTechnique.ForEach(tech =>
                        {
                            var techniqueRequest = new TechniqueRequestMapping();
                            techniqueRequest.CreatedById = parameter.UserId;
                            techniqueRequest.CreatedDate = DateTime.Now;
                            techniqueRequest.IsDefault = true;
                            techniqueRequest.ParentId = null;
                            techniqueRequest.ProductionOrderMappingId = item.ProductionOrderMappingId;
                            techniqueRequest.Rate = tech.Rate;
                            techniqueRequest.TechniqueName = tech.TechniqueName;
                            techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                            techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                            techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                            techniqueRequest.TechniqueValue = null;
                            var techniqueTemp = AddTechnique(listTechnique, techniqueRequest, productGroupCode,
                                techniqueDescription, item, thichness);
                            techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                            techniqueRequest.Thick = techniqueTemp.Thick;
                            techniqueRequest.Thin = techniqueTemp.Thin;
                            techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                            techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                            techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                            techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                            techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;
                            context.TechniqueRequestMapping.Add(techniqueRequest);
                        });

                        parameter.ListBTP1.ForEach(btp1 =>
                        {
                            var productChidren = new ProductionOrderMapping();
                            productChidren.CreatedById = parameter.UserId;
                            productChidren.CreatedDate = DateTime.Now;
                            productChidren.ParentPartId = item.ProductionOrderMappingId;
                            productChidren.ParentType = false;
                            productChidren.ProductColor = item.ProductColor;
                            productChidren.ProductColorCode = item.ProductColorCode;
                            productChidren.ProductionOrderId = item.ProductionOrderId;
                            productChidren.ProductId = null;
                            productChidren.ProductionOrderMappingId = Guid.NewGuid();
                            productChidren.ProductLength = item.ProductLength;
                            productChidren.ProductName = btp1.ProductName;
                            productChidren.ProductThickness = btp1.ProductThickness;
                            productChidren.ProductWidth = item.ProductWidth;
                            productChidren.Quantity = item.Quantity;
                            productChidren.StatusId = statusNewIdProduct;
                            productChidren.TechniqueDescription = item.TechniqueDescription;
                            productChidren.TotalArea = item.TotalArea;
                            productChidren.ProductCode = item.ProductCode;
                            productChidren.ProductOrderWorkflowId = btp1.ProductOrderWorkflowId;
                            productChidren.ProductGroupCode = item.ProductGroupCode;
                            productChidren.Borehole = item.Borehole;
                            productChidren.Hole = item.Hole;
                            productChidren.IsParent = false;

                            var listchildren = parameter.ListBTP2.Where(x => x.ParentIndex == btp1.Index).ToList();
                            if (listchildren.Count > 0)
                            {
                                productChidren.IsSubParent = true;

                            }
                            var tec = btp1.ListTechnique.OrderBy(cs => cs.TechniqueOrder).ToList();
                            if (tec.Count > 0)
                            {
                                productChidren.StartId = tec[0].TechniqueRequestId;
                            }

                            context.ProductionOrderMapping.Add(productChidren);

                            var productGroupCodeChildren = productChidren.ProductGroupCode.Trim().ToLower();

                            if (productChidren.TechniqueDescription == null)
                            {
                                productChidren.TechniqueDescription = "";
                            }

                            var listTechniqueDescriptionChildren =
                                productChidren.TechniqueDescription.ToLower().Split(' ').ToList();

                            var techniqueDescriptionChildren = "";
                            listTechniqueDescriptionChildren.ForEach(e =>
                            {
                                techniqueDescriptionChildren = techniqueDescriptionChildren + e + " ";
                            });

                            // Thêm TechniqueRequestMapping (tiến trình)
                            btp1.ListTechnique.ForEach(tech =>
                            {
                                var techniqueRequest = new TechniqueRequestMapping();
                                techniqueRequest.CreatedById = parameter.UserId;
                                techniqueRequest.CreatedDate = DateTime.Now;
                                techniqueRequest.IsDefault = true;
                                techniqueRequest.ParentId = null;
                                techniqueRequest.ProductionOrderMappingId = productChidren.ProductionOrderMappingId;
                                techniqueRequest.Rate = tech.Rate;
                                techniqueRequest.TechniqueName = tech.TechniqueName;
                                techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                                techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                                techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                                techniqueRequest.TechniqueValue = null;
                                var techniqueTemp = AddTechnique(listTechnique, techniqueRequest,
                                    productGroupCodeChildren, techniqueDescriptionChildren, productChidren, thichness);
                                techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                techniqueRequest.Thick = techniqueTemp.Thick;
                                techniqueRequest.Thin = techniqueTemp.Thin;
                                techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                                techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                                techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                                techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;
                                context.TechniqueRequestMapping.Add(techniqueRequest);
                            });

                            listchildren.ForEach(btp2 =>
                            {
                                var productChidrenChildren = new ProductionOrderMapping();
                                productChidrenChildren.CreatedById = parameter.UserId;
                                productChidrenChildren.CreatedDate = DateTime.Now;
                                productChidrenChildren.ParentPartId = productChidren.ProductionOrderMappingId;
                                productChidrenChildren.ParentType = false;
                                productChidrenChildren.ProductColor = item.ProductColor;
                                productChidrenChildren.ProductColorCode = item.ProductColorCode;
                                productChidrenChildren.ProductionOrderId = item.ProductionOrderId;
                                productChidrenChildren.ProductId = null;
                                productChidrenChildren.ProductionOrderMappingId = Guid.NewGuid();
                                productChidrenChildren.ProductLength = item.ProductLength;
                                productChidrenChildren.ProductName = btp2.ProductName;
                                productChidrenChildren.ProductThickness = btp2.ProductThickness;
                                productChidrenChildren.ProductWidth = item.ProductWidth;
                                productChidrenChildren.Quantity = item.Quantity;
                                productChidrenChildren.StatusId = statusNewIdProduct;
                                productChidrenChildren.TechniqueDescription = item.TechniqueDescription;
                                productChidrenChildren.TotalArea = item.TotalArea;
                                productChidrenChildren.ProductCode = item.ProductCode;
                                productChidrenChildren.ProductOrderWorkflowId = btp2.ProductOrderWorkflowId;
                                productChidrenChildren.ProductGroupCode = item.ProductGroupCode;
                                productChidrenChildren.Borehole = item.Borehole;
                                productChidrenChildren.Hole = item.Hole;
                                productChidrenChildren.IsParent = false;
                                productChidrenChildren.IsSubParent = false;

                                var tec2 = btp2.ListTechnique.OrderBy(cs => cs.TechniqueOrder).ToList();
                                if (tec2.Count > 0)
                                {
                                    productChidrenChildren.StartId = tec2[0].TechniqueRequestId;
                                }

                                context.ProductionOrderMapping.Add(productChidrenChildren);

                                var productGroupCodeChildrenChildren =
                                    productChidrenChildren.ProductGroupCode.Trim().ToLower();

                                if (productChidrenChildren.TechniqueDescription == null)
                                {
                                    productChidrenChildren.TechniqueDescription = "";
                                }

                                var listTechniqueDescriptionChildrenChildren = productChidrenChildren
                                    .TechniqueDescription.ToLower().Split(' ').ToList();

                                var techniqueDescriptionChildrenChildren = "";
                                listTechniqueDescriptionChildrenChildren.ForEach(e =>
                                    {
                                        techniqueDescriptionChildrenChildren =
                                            techniqueDescriptionChildrenChildren + e + " ";
                                    });

                                // Thêm TechniqueRequestMapping (tiến trình)
                                btp2.ListTechnique.ForEach(tech =>
                                {
                                    var techniqueRequest = new TechniqueRequestMapping();
                                    techniqueRequest.CreatedById = parameter.UserId;
                                    techniqueRequest.CreatedDate = DateTime.Now;
                                    techniqueRequest.IsDefault = true;
                                    techniqueRequest.ParentId = null;
                                    techniqueRequest.ProductionOrderMappingId =
                                        productChidrenChildren.ProductionOrderMappingId;
                                    techniqueRequest.Rate = tech.Rate;
                                    techniqueRequest.TechniqueName = tech.TechniqueName;
                                    techniqueRequest.TechniqueOrder = tech.TechniqueOrder ?? 0;
                                    techniqueRequest.TechniqueRequestId = tech.TechniqueRequestId;
                                    techniqueRequest.TechniqueRequestMappingId = Guid.NewGuid();
                                    techniqueRequest.TechniqueValue = null;
                                    var techniqueTemp = AddTechnique(listTechnique, techniqueRequest,
                                        productGroupCodeChildrenChildren, techniqueDescriptionChildrenChildren,
                                        productChidrenChildren, thichness);
                                    techniqueRequest.EspeciallyThick = techniqueTemp.EspeciallyThick;
                                    techniqueRequest.Thick = techniqueTemp.Thick;
                                    techniqueRequest.Thin = techniqueTemp.Thin;
                                    techniqueRequest.EspeciallyThin = techniqueTemp.EspeciallyThin;
                                    techniqueRequest.BoreholeThick = techniqueTemp.BoreholeThick;
                                    techniqueRequest.BoreholeThin = techniqueTemp.BoreholeThin;
                                    techniqueRequest.OriginalThick = techniqueTemp.OriginalThick;
                                    techniqueRequest.OriginalThin = techniqueTemp.OriginalThin;
                                    context.TechniqueRequestMapping.Add(techniqueRequest);
                                });
                            });
                        });
                    }
                });

                context.SaveChanges();

                return new CreateAllBTPResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new CreateAllBTPResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public UpdateProductionOrderNoteResult UpdateProductionOrderNote(UpdateProductionOrderNoteParameter parameter)
        {
            try
            {
                var productionOrder =
                    context.ProductionOrder.FirstOrDefault(x => x.ProductionOrderId == parameter.ProductionOrderId);

                productionOrder.Note = parameter.Note;
                context.ProductionOrder.Update(productionOrder);
                context.SaveChanges();

                return new UpdateProductionOrderNoteResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new UpdateProductionOrderNoteResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public PlusListItemResult PlusListItem(PlusListItemParameter parameter)
        {
            try
            {
                var count = 0;
                for (int j = 0; j < parameter.ListItem.Count; j++)
                {
                    if (count == 50)
                    {
                        break;
                    }
                    else
                    {
                        //Số lần cộng cho mỗi item
                        if (parameter.ListItem[j].RemainQuantity > 0)
                        {
                            for (int i = 0; i <= parameter.ListItem[j].RemainQuantity - 1; i++)
                            {
                                if (count == 50)
                                {
                                    break;
                                }
                                else
                                {
                                    count++;

                                    var plus = new PlusItemParameter();
                                    plus.ProductionOrderHistory = new ProductionOrderHistoryEntityModel();

                                    plus.ProductionOrderHistory.ParentId = parameter.ListItem[j].ParentId;
                                    plus.ProductionOrderHistory.ParentType = parameter.ListItem[j].ParentType;
                                    plus.ProductionOrderHistory.ProductionOrderId =
                                        parameter.ListItem[j].ProductionOrderId;
                                    plus.ProductionOrderHistory.ProductionOrderMappingId =
                                        parameter.ListItem[j].ProductionOrderMappingId;
                                    plus.ProductionOrderHistory.TechniqueRequestId =
                                        parameter.ListItem[j].TechniqueRequestId;
                                    plus.ProductionOrderHistory.CalculatorType = parameter.ListItem[j].CalculatorType;
                                    plus.ProductionOrderHistory.IsError = parameter.ListItem[j].IsError;
                                    plus.ProductionOrderHistory.OriginalId = parameter.ListItem[j].OriginalId;
                                    plus.ProductionOrderHistory.Description = parameter.ListItem[j].Description;
                                    plus.ProductionOrderHistory.QuantityUnitErr = parameter.ListItem[j].QuantityUnitErr;
                                    plus.ProductionOrderHistory.IsParent = parameter.ListItem[j].IsParent;
                                    plus.ProductionOrderHistory.IsSubParent = parameter.ListItem[j].IsSubParent;
                                    plus.ProductionOrderHistory.IdChildrent = parameter.ListItem[j].IdChildrent;
                                    plus.ProductionOrderHistory.ParentPartId = parameter.ListItem[j].ParentPartId;
                                    plus.ProductionOrderHistory.ParentExtendId = parameter.ListItem[j].ParentExtendId;
                                    plus.ProductionOrderHistory.IsChildren = parameter.ListItem[j].IsChildren;
                                    plus.ProductionOrderHistory.IsAddPart = parameter.ListItem[j].IsAddPart;
                                    plus.ProductionOrderHistory.Present = parameter.ListItem[j].Present;

                                    PlusItem(plus);
                                }
                            }
                        }
                    }
                }

                //parameter.ListItem.ForEach(item =>
                //{
                //    //Số lần cộng cho mỗi item
                //    if (item.RemainQuantity > 0)
                //    {
                //        for (int i = 0; i <= item.RemainQuantity - 1; i++)
                //        {
                //            var plus = new PlusItemParameter();
                //            plus.ProductionOrderHistory = new ProductionOrderHistoryEntityModel();

                //            plus.ProductionOrderHistory.ParentId = item.ParentId;
                //            plus.ProductionOrderHistory.ParentType = item.ParentType;
                //            plus.ProductionOrderHistory.ProductionOrderId = item.ProductionOrderId;
                //            plus.ProductionOrderHistory.ProductionOrderMappingId = item.ProductionOrderMappingId;
                //            plus.ProductionOrderHistory.TechniqueRequestId = item.TechniqueRequestId;
                //            plus.ProductionOrderHistory.CalculatorType = item.CalculatorType;
                //            plus.ProductionOrderHistory.IsError = item.IsError;
                //            plus.ProductionOrderHistory.OriginalId = item.OriginalId;
                //            plus.ProductionOrderHistory.Description = item.Description;
                //            plus.ProductionOrderHistory.QuantityUnitErr = item.QuantityUnitErr;
                //            plus.ProductionOrderHistory.IsParent = item.IsParent;
                //            plus.ProductionOrderHistory.IsSubParent = item.IsSubParent;
                //            plus.ProductionOrderHistory.IdChildrent = item.IdChildrent;
                //            plus.ProductionOrderHistory.ParentPartId = item.ParentPartId;
                //            plus.ProductionOrderHistory.ParentExtendId = item.ParentExtendId;
                //            plus.ProductionOrderHistory.IsChildren = item.IsChildren;
                //            plus.ProductionOrderHistory.IsAddPart = item.IsAddPart;
                //            plus.ProductionOrderHistory.Present = item.Present;

                //            PlusItem(plus);
                //        }
                //    }
                //});

                return new PlusListItemResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new PlusListItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public ChangeProductGroupCodeByItemResult ChangeProductGroupCodeByItem(ChangeProductGroupCodeByItemParameter parameter)
        {
            try
            {
                var listHistoryByItem = context.ProductionOrderHistory
                    .Where(x => x.ProductionOrderMappingId == parameter.ProductionOrderMappingId).ToList();

                var item = context.ProductionOrderMapping.FirstOrDefault(x =>
                    x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);

                if (item == null)
                {
                    return new ChangeProductGroupCodeByItemResult()
                    {
                        Status = false,
                        Message = "Bán thành phẩm không tồn tại"
                    };
                }

                parameter.ProductGroupCode =
                    parameter.ProductGroupCode == null ? "" : parameter.ProductGroupCode.Trim().ToLower();
                item.ProductGroupCode = parameter.ProductGroupCode;

                if (item.TechniqueDescription == null)
                {
                    item.TechniqueDescription = "";
                }
                var listTechniqueDescription = item.TechniqueDescription.ToLower().Split(' ').ToList();

                var techniqueDescription = "";
                listTechniqueDescription.ForEach(e =>
                {
                    techniqueDescription = techniqueDescription + e + " ";
                });

                #region Tính lại các giá trị đặc biệt của bán thành phẩm

                var listTechnique = context.TechniqueRequest.ToList();
                var listTechniqueMapping = context.TechniqueRequestMapping
                    .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();

                // Lấy độ dày tiêu chuẩn để xét dày mỏng
                var thicknessEntity = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "ProductThickness")
                                          ?.SystemValueString ?? "0";
                var thichness = int.Parse(thicknessEntity);

                listTechniqueMapping.ForEach(technique =>
                {
                    var techniqueTemp = AddTechnique(listTechnique, technique, parameter.ProductGroupCode,
                        techniqueDescription, item, thichness);

                    technique.EspeciallyThick = techniqueTemp.EspeciallyThick;
                    technique.EspeciallyThin = techniqueTemp.EspeciallyThin;
                    technique.Thick = techniqueTemp.Thick;
                    technique.Thin = techniqueTemp.Thin;
                    technique.BoreholeThick = techniqueTemp.BoreholeThick;
                    technique.BoreholeThin = techniqueTemp.BoreholeThin;
                    technique.OriginalThick = techniqueTemp.OriginalThick;
                    technique.OriginalThin = techniqueTemp.OriginalThin;

                    context.TechniqueRequestMapping.Update(technique);

                    //Thay đổi lại tất cả action liên quan đến tiến trình của item này trong bảng lịch sử
                    var listCurrentHistory = listHistoryByItem
                        .Where(x => x.TechniqueRequestId == technique.TechniqueRequestId).ToList();

                    listCurrentHistory.ForEach(_action =>
                    {
                        _action.EspeciallyThick = techniqueTemp.EspeciallyThick;
                        _action.EspeciallyThin = techniqueTemp.EspeciallyThin;
                        _action.Thick = techniqueTemp.Thick;
                        _action.Thin = techniqueTemp.Thin;
                        _action.BoreholeThick = techniqueTemp.BoreholeThick;
                        _action.BoreholeThin = techniqueTemp.BoreholeThin;
                        _action.OriginalThick = techniqueTemp.OriginalThick;
                        _action.OriginalThin = techniqueTemp.OriginalThin;

                        context.ProductionOrderHistory.Update(_action);
                    });
                });

                #endregion

                context.SaveChanges();

                return new ChangeProductGroupCodeByItemResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new ChangeProductGroupCodeByItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public ChangeGroupCodeForListItemResult ChangeGroupCodeForListItem(ChangeGroupCodeForListItemParameter parameter)
        {
            try
            {
                //Lấy list tất cả Item trong lệnh sản xuất
                var listAllItemByLsx = context.ProductionOrderMapping.Where(x =>
                    x.ProductionOrderId == parameter.ProductionOrderId).ToList();

                //Lấy list Item cha gốc
                var listItemParent = listAllItemByLsx.Where(x =>
                    x.ProductionOrderId == parameter.ProductionOrderId && x.IsParent == true).ToList();

                //Lấy list Item bán thành phẩm trong lệnh sản xuất
                var listItem = listAllItemByLsx.Where(x =>
                    x.ProductionOrderId == parameter.ProductionOrderId && x.ParentPartId != null).ToList();

                if (listItem.Count > 0)
                {
                    listItemParent.ForEach(_itemParent =>
                    {
                        //Với mỗi item cha lấy ra list bán thành phẩm cấp 1
                        var listItemPartLv1 = listAllItemByLsx
                            .Where(x => x.ParentPartId == _itemParent.ProductionOrderMappingId).ToList();

                        
                    });
                }
                else
                {
                    return new ChangeGroupCodeForListItemResult()
                    {
                        Status = false,
                        Message = "Lệnh sản xuất không có bán thành phẩm"
                    };
                }

                return new ChangeGroupCodeForListItemResult()
                {
                    Status = true,
                    Message = "Success"
                };
            }
            catch (Exception e)
            {
                return new ChangeGroupCodeForListItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public MinusQuantityForItemResult MinusQuantityForItem(MinusQuantityForItemParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    //Lấy trạng thái mới tạo của Item
                    var item_status_type = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var item_status_new = context.Category.FirstOrDefault(x =>
                        x.CategoryCode == "NEW" && x.CategoryTypeId == item_status_type.CategoryTypeId).CategoryId;
                    var item_status_comp = context.Category.FirstOrDefault(x =>
                        x.CategoryCode == "COMP" && x.CategoryTypeId == item_status_type.CategoryTypeId).CategoryId;

                    var listTechnique = context.TechniqueRequest.ToList();

                    var item = context.ProductionOrderMapping.FirstOrDefault(x =>
                        x.ProductionOrderMappingId == parameter.ProductionOrderMappingId);

                    //Trường hợp thay đổi quy trình của item. Trường hợp này chỉ xảy ra trong 2 trường hợp:
                    //- Item bổ sung và có trạng thái Mới tạo
                    //- Item bình thường nhưng có số tấm cần sản xuất là 1 và có trạng thái Mới tạo
                    if (parameter.MinusType == 2)
                    {
                        #region Trường hợp không trừ số lượng tấm

                        ////Kiểm tra xem item thay đổi là bán thành phẩm hay không phải bán thành phẩm

                        ////Lấy ra tiến trình Cắt
                        //var cat = context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestCode == "CAT");

                        ////Item không phải bán thành phẩm
                        //if (item.ParentPartId == null)
                        //{
                        //    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                        //    //Tạo quy trình mới để chứa danh sách tiến trình mới
                        //    var new_workflow_cat = new ProductOrderWorkflow();
                        //    new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                        //    new_workflow_cat.Code =
                        //        DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                        //        DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                        //        DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                        //    new_workflow_cat.Name = new_workflow_cat.Code;
                        //    new_workflow_cat.IsDefault = false;
                        //    new_workflow_cat.Description = "";
                        //    new_workflow_cat.Active = true;
                        //    new_workflow_cat.CreatedDate = DateTime.Now;
                        //    new_workflow_cat.CreatedById = parameter.UserId;
                        //    new_workflow_cat.ParentId = null;

                        //    context.ProductOrderWorkflow.Add(new_workflow_cat);
                        //    context.SaveChanges();

                        //    //Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                        //    var _new_mapping = new OrderTechniqueMapping();
                        //    _new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                        //    _new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    _new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                        //    _new_mapping.TechniqueOrder = 1;
                        //    _new_mapping.Rate = 1;
                        //    _new_mapping.IsDefault = true;
                        //    _new_mapping.Active = true;
                        //    _new_mapping.CreatedDate = DateTime.Now;
                        //    _new_mapping.CreatedById = parameter.UserId;

                        //    context.OrderTechniqueMapping.Add(_new_mapping);
                        //    context.SaveChanges();

                        //    //Lúc này trường IsParent = true
                        //    item.IsParent = true;

                        //    #region Thêm bán thành phẩm Cắt 1

                        //    var item_cat_1 = new ProductionOrderMapping();
                        //    item_cat_1.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_1.ParentId = null;
                        //    item_cat_1.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_1.ProductName = "Cắt 1";
                        //    item_cat_1.ProductColor = item.ProductColor;
                        //    item_cat_1.ProductColorCode = item.ProductColorCode;
                        //    item_cat_1.ProductThickness = item.ProductThickness;
                        //    item_cat_1.ProductLength = item.ProductLength;
                        //    item_cat_1.ProductWidth = item.ProductWidth;
                        //    item_cat_1.Quantity = item.Quantity;
                        //    item_cat_1.TotalArea = item.TotalArea;
                        //    item_cat_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_1.StatusId = item_status_new;
                        //    item_cat_1.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_1.Borehole = item.Borehole;
                        //    item_cat_1.Hole = item.Hole;
                        //    item_cat_1.ProductGroupCode = "";
                        //    item_cat_1.IsParent = false;
                        //    item_cat_1.IsSubParent = false;
                        //    item_cat_1.StartId = cat.TechniqueRequestId;
                        //    item_cat_1.ParentPartId = item.ProductionOrderMappingId;
                        //    item_cat_1.CreatedDate = DateTime.Now;
                        //    item_cat_1.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_1);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_1 = new TechniqueRequestMapping();
                        //    new_add_cat_1.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_1.ProductionOrderMappingId = item_cat_1.ProductionOrderMappingId;
                        //    new_add_cat_1.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_1.Rate = 1;
                        //    new_add_cat_1.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_1.TechniqueOrder = 1;
                        //    new_add_cat_1.TechniqueValue = 0;
                        //    new_add_cat_1.IsDefault = true;
                        //    new_add_cat_1.CreatedDate = DateTime.Now;
                        //    new_add_cat_1.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_1);
                        //    context.SaveChanges();

                        //    #endregion

                        //    #region Thêm bán thành phẩm Cắt 2

                        //    var item_cat_2 = new ProductionOrderMapping();
                        //    item_cat_2.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_2.ParentId = null;
                        //    item_cat_2.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_2.ProductName = "Cắt 2";
                        //    item_cat_2.ProductColor = item.ProductColor;
                        //    item_cat_2.ProductColorCode = item.ProductColorCode;
                        //    item_cat_2.ProductThickness = item.ProductThickness;
                        //    item_cat_2.ProductLength = item.ProductLength;
                        //    item_cat_2.ProductWidth = item.ProductWidth;
                        //    item_cat_2.Quantity = item.Quantity;
                        //    item_cat_2.TotalArea = item.TotalArea;
                        //    item_cat_2.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_2.StatusId = item_status_new;
                        //    item_cat_2.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_2.Borehole = item.Borehole;
                        //    item_cat_2.Hole = item.Hole;
                        //    item_cat_2.ProductGroupCode = "";
                        //    item_cat_2.IsParent = false;
                        //    item_cat_2.IsSubParent = false;
                        //    item_cat_2.StartId = cat.TechniqueRequestId;
                        //    item_cat_2.ParentPartId = item.ProductionOrderMappingId;
                        //    item_cat_2.CreatedDate = DateTime.Now;
                        //    item_cat_2.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_2);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_2 = new TechniqueRequestMapping();
                        //    new_add_cat_2.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_2.ProductionOrderMappingId = item_cat_2.ProductionOrderMappingId;
                        //    new_add_cat_2.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_2.Rate = 1;
                        //    new_add_cat_2.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_2.TechniqueOrder = 1;
                        //    new_add_cat_2.TechniqueValue = 0;
                        //    new_add_cat_2.IsDefault = true;
                        //    new_add_cat_2.CreatedDate = DateTime.Now;
                        //    new_add_cat_2.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_2);
                        //    context.SaveChanges();

                        //    #endregion
                        //}
                        ////Item là bán thành phẩm
                        //else
                        //{
                        //    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                        //    //Tạo quy trình mới để chứa danh sách tiến trình mới
                        //    var new_workflow_cat = new ProductOrderWorkflow();
                        //    new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                        //    new_workflow_cat.Code =
                        //        DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                        //        DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                        //        DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                        //    new_workflow_cat.Name = new_workflow_cat.Code;
                        //    new_workflow_cat.IsDefault = false;
                        //    new_workflow_cat.Description = "";
                        //    new_workflow_cat.Active = true;
                        //    new_workflow_cat.CreatedDate = DateTime.Now;
                        //    new_workflow_cat.CreatedById = parameter.UserId;
                        //    new_workflow_cat.ParentId = null;

                        //    context.ProductOrderWorkflow.Add(new_workflow_cat);
                        //    context.SaveChanges();

                        //    //Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                        //    var _new_mapping = new OrderTechniqueMapping();
                        //    _new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                        //    _new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    _new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                        //    _new_mapping.TechniqueOrder = 1;
                        //    _new_mapping.Rate = 1;
                        //    _new_mapping.IsDefault = true;
                        //    _new_mapping.Active = true;
                        //    _new_mapping.CreatedDate = DateTime.Now;
                        //    _new_mapping.CreatedById = parameter.UserId;

                        //    context.OrderTechniqueMapping.Add(_new_mapping);
                        //    context.SaveChanges();

                        //    //Lúc này trường IsParent = true
                        //    item.IsSubParent = true;
                        //    item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");

                        //    #region Thêm bán thành phẩm Cắt 1

                        //    var item_cat_1 = new ProductionOrderMapping();
                        //    item_cat_1.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_1.ParentId = null;
                        //    item_cat_1.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_1.ProductName = "Cắt 1";
                        //    item_cat_1.ProductColor = item.ProductColor;
                        //    item_cat_1.ProductColorCode = item.ProductColorCode;
                        //    item_cat_1.ProductThickness = item.ProductThickness;
                        //    item_cat_1.ProductLength = item.ProductLength;
                        //    item_cat_1.ProductWidth = item.ProductWidth;
                        //    item_cat_1.Quantity = item.Quantity;
                        //    item_cat_1.TotalArea = item.TotalArea;
                        //    item_cat_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_1.StatusId = item_status_new;
                        //    item_cat_1.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_1.Borehole = item.Borehole;
                        //    item_cat_1.Hole = item.Hole;
                        //    item_cat_1.ProductGroupCode = "";
                        //    item_cat_1.IsParent = false;
                        //    item_cat_1.IsSubParent = false;
                        //    item_cat_1.StartId = cat.TechniqueRequestId;
                        //    item_cat_1.ParentPartId = item.ProductionOrderMappingId;
                        //    item_cat_1.CreatedDate = DateTime.Now;
                        //    item_cat_1.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_1);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_1 = new TechniqueRequestMapping();
                        //    new_add_cat_1.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_1.ProductionOrderMappingId = item_cat_1.ProductionOrderMappingId;
                        //    new_add_cat_1.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_1.Rate = 1;
                        //    new_add_cat_1.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_1.TechniqueOrder = 1;
                        //    new_add_cat_1.TechniqueValue = 0;
                        //    new_add_cat_1.IsDefault = true;
                        //    new_add_cat_1.CreatedDate = DateTime.Now;
                        //    new_add_cat_1.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_1);
                        //    context.SaveChanges();

                        //    #endregion

                        //    #region Thêm bán thành phẩm Cắt 2

                        //    var item_cat_2 = new ProductionOrderMapping();
                        //    item_cat_2.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_2.ParentId = null;
                        //    item_cat_2.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_2.ProductName = "Cắt 2";
                        //    item_cat_2.ProductColor = item.ProductColor;
                        //    item_cat_2.ProductColorCode = item.ProductColorCode;
                        //    item_cat_2.ProductThickness = item.ProductThickness;
                        //    item_cat_2.ProductLength = item.ProductLength;
                        //    item_cat_2.ProductWidth = item.ProductWidth;
                        //    item_cat_2.Quantity = item.Quantity;
                        //    item_cat_2.TotalArea = item.TotalArea;
                        //    item_cat_2.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_2.StatusId = item_status_new;
                        //    item_cat_2.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_2.Borehole = item.Borehole;
                        //    item_cat_2.Hole = item.Hole;
                        //    item_cat_2.ProductGroupCode = "";
                        //    item_cat_2.IsParent = false;
                        //    item_cat_2.IsSubParent = false;
                        //    item_cat_2.StartId = cat.TechniqueRequestId;
                        //    item_cat_2.ParentPartId = item.ProductionOrderMappingId;
                        //    item_cat_2.CreatedDate = DateTime.Now;
                        //    item_cat_2.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_2);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_2 = new TechniqueRequestMapping();
                        //    new_add_cat_2.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_2.ProductionOrderMappingId = item_cat_2.ProductionOrderMappingId;
                        //    new_add_cat_2.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_2.Rate = 1;
                        //    new_add_cat_2.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_2.TechniqueOrder = 1;
                        //    new_add_cat_2.TechniqueValue = 0;
                        //    new_add_cat_2.IsDefault = true;
                        //    new_add_cat_2.CreatedDate = DateTime.Now;
                        //    new_add_cat_2.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_2);
                        //    context.SaveChanges();

                        //    #endregion
                        //}

                        #endregion

                        #region Lưu vào bảng lịch sử

                        var minusItemMapping = new MinusItemMapping();
                        minusItemMapping.MinusItemMappingId = Guid.NewGuid();
                        minusItemMapping.ProductionOrderId = item.ProductionOrderId;
                        minusItemMapping.ProductionOrderMappingId = parameter.ProductionOrderMappingId;
                        minusItemMapping.MinusType = parameter.MinusType;
                        minusItemMapping.IsWork = false;
                        minusItemMapping.Quantity = parameter.Quantity;
                        minusItemMapping.CreatedDate = DateTime.Now;
                        minusItemMapping.CreatedById = parameter.UserId;

                        context.MinusItemMapping.Add(minusItemMapping);

                        #endregion

                        context.SaveChanges();
                        transaction.Commit();
                    }
                    //Trường hợp trừ số tấm của item và tạo một item mới trong lệnh sản xuất
                    else
                    {
                        //trừ số tấm của item đi
                        item.Quantity = item.Quantity - parameter.Quantity;

                        //Cập nhật lại số m2 của Item
                        item.TotalArea =
                            Math.Round(
                                item.Quantity.Value * item.ProductLength.Value * item.ProductWidth.Value / 1000000, 4);

                        //Cập nhật Item
                        context.ProductionOrderMapping.Update(item);
                        context.SaveChanges();

                        #region Trường hợp trừ số lượng tấm

                        ////Kiểm tra xem item thay đổi là bán thành phẩm hay không phải bán thành phẩm

                        ////Lấy ra tiến trình Cắt
                        //var cat = context.TechniqueRequest.FirstOrDefault(x => x.TechniqueRequestCode == "CAT");

                        ////Item không phải bán thành phẩm
                        //if (item.ParentPartId == null)
                        //{
                        //    //Tạo Item cha mới
                        //    var new_item = new ProductionOrderMapping();
                        //    new_item.ProductionOrderMappingId = Guid.NewGuid();
                        //    new_item.ParentId = item.ParentId;
                        //    new_item.ProductionOrderId = item.ProductionOrderId;
                        //    new_item.ProductName = item.ProductName;
                        //    new_item.ProductColor = item.ProductColor;
                        //    new_item.ProductColorCode = item.ProductColorCode;
                        //    new_item.ProductThickness = item.ProductThickness;
                        //    new_item.ProductLength = item.ProductLength;
                        //    new_item.ProductWidth = item.ProductWidth;
                        //    new_item.Quantity = 1;
                        //    new_item.TotalArea = item.TotalArea;
                        //    new_item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    new_item.StatusId = item_status_new;
                        //    new_item.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                        //    new_item.ParentType = item.ParentType;
                        //    new_item.Borehole = item.Borehole;
                        //    new_item.Hole = item.Hole;
                        //    new_item.ProductGroupCode = "";
                        //    new_item.IsParent = true;
                        //    new_item.IsSubParent = false;
                        //    new_item.StartId = item.StartId;
                        //    new_item.ParentPartId = item.ParentPartId;
                        //    new_item.ParentExtendId = item.ParentExtendId;
                        //    new_item.Grind = item.Grind;
                        //    new_item.Stt = item.Stt;
                        //    new_item.IsAddPart = item.IsAddPart;
                        //    new_item.Present = item.Present;
                        //    new_item.CreatedDate = DateTime.Now;
                        //    new_item.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(new_item);
                        //    context.SaveChanges();

                        //    //Lấy ra list tiến trình cũ
                        //    var listTechniqueRequest = context.TechniqueRequestMapping
                        //        .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();

                        //    var new_listTechniqueRequest = new List<TechniqueRequestMapping>();
                        //    listTechniqueRequest.ForEach(_tmp =>
                        //    {
                        //        var _new = new TechniqueRequestMapping();
                        //        _new.TechniqueRequestMappingId = Guid.NewGuid();
                        //        _new.ProductionOrderMappingId = new_item.ProductionOrderMappingId;
                        //        _new.TechniqueRequestId = _tmp.TechniqueRequestId;
                        //        _new.ParentId = null;
                        //        _new.Rate = 1;
                        //        _new.TechniqueName = _tmp.TechniqueName;
                        //        _new.TechniqueOrder = _tmp.TechniqueOrder;
                        //        _new.TechniqueValue = 0;
                        //        _new.IsDefault = true;
                        //        _new.Thick = _tmp.Thick;
                        //        _new.Thin = _tmp.Thin;
                        //        _new.EspeciallyThick = _tmp.EspeciallyThick;
                        //        _new.EspeciallyThin = _tmp.EspeciallyThin;
                        //        _new.BoreholeThick = _tmp.BoreholeThick;
                        //        _new.BoreholeThin = _tmp.BoreholeThin;
                        //        _new.OriginalThick = _tmp.OriginalThick;
                        //        _new.OriginalThin = _tmp.OriginalThin;
                        //        _new.CreatedDate = DateTime.Now;
                        //        _new.CreatedById = parameter.UserId;

                        //        new_listTechniqueRequest.Add(_new);
                        //    });

                        //    context.TechniqueRequestMapping.AddRange(new_listTechniqueRequest);
                        //    context.SaveChanges();

                        //    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                        //    //Tạo quy trình mới để chứa danh sách tiến trình mới
                        //    var new_workflow_cat = new ProductOrderWorkflow();
                        //    new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                        //    new_workflow_cat.Code =
                        //        DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                        //        DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                        //        DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                        //    new_workflow_cat.Name = new_workflow_cat.Code;
                        //    new_workflow_cat.IsDefault = false;
                        //    new_workflow_cat.Description = "";
                        //    new_workflow_cat.Active = true;
                        //    new_workflow_cat.CreatedDate = DateTime.Now;
                        //    new_workflow_cat.CreatedById = parameter.UserId;
                        //    new_workflow_cat.ParentId = null;

                        //    context.ProductOrderWorkflow.Add(new_workflow_cat);
                        //    context.SaveChanges();

                        //    //Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                        //    var _new_mapping = new OrderTechniqueMapping();
                        //    _new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                        //    _new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    _new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                        //    _new_mapping.TechniqueOrder = 1;
                        //    _new_mapping.Rate = 1;
                        //    _new_mapping.IsDefault = true;
                        //    _new_mapping.Active = true;
                        //    _new_mapping.CreatedDate = DateTime.Now;
                        //    _new_mapping.CreatedById = parameter.UserId;

                        //    context.OrderTechniqueMapping.Add(_new_mapping);
                        //    context.SaveChanges();

                        //    //Lúc này trường IsParent = true
                        //    item.IsParent = true;

                        //    #region Thêm bán thành phẩm Cắt 1

                        //    var item_cat_1 = new ProductionOrderMapping();
                        //    item_cat_1.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_1.ParentId = null;
                        //    item_cat_1.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_1.ProductName = "Cắt 1";
                        //    item_cat_1.ProductColor = item.ProductColor;
                        //    item_cat_1.ProductColorCode = item.ProductColorCode;
                        //    item_cat_1.ProductThickness = item.ProductThickness;
                        //    item_cat_1.ProductLength = item.ProductLength;
                        //    item_cat_1.ProductWidth = item.ProductWidth;
                        //    item_cat_1.Quantity = 1;
                        //    item_cat_1.TotalArea = item.TotalArea;
                        //    item_cat_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_1.StatusId = item_status_new;
                        //    item_cat_1.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_1.Borehole = item.Borehole;
                        //    item_cat_1.Hole = item.Hole;
                        //    item_cat_1.ProductGroupCode = "";
                        //    item_cat_1.IsParent = false;
                        //    item_cat_1.IsSubParent = false;
                        //    item_cat_1.StartId = cat.TechniqueRequestId;
                        //    item_cat_1.ParentPartId = new_item.ProductionOrderMappingId;
                        //    item_cat_1.CreatedDate = DateTime.Now;
                        //    item_cat_1.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_1);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_1 = new TechniqueRequestMapping();
                        //    new_add_cat_1.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_1.ProductionOrderMappingId = item_cat_1.ProductionOrderMappingId;
                        //    new_add_cat_1.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_1.Rate = 1;
                        //    new_add_cat_1.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_1.TechniqueOrder = 1;
                        //    new_add_cat_1.TechniqueValue = 0;
                        //    new_add_cat_1.IsDefault = true;
                        //    new_add_cat_1.CreatedDate = DateTime.Now;
                        //    new_add_cat_1.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_1);
                        //    context.SaveChanges();

                        //    #endregion

                        //    #region Thêm bán thành phẩm Cắt 2

                        //    var item_cat_2 = new ProductionOrderMapping();
                        //    item_cat_2.ProductionOrderMappingId = Guid.NewGuid();
                        //    item_cat_2.ParentId = null;
                        //    item_cat_2.ProductionOrderId = item.ProductionOrderId;
                        //    item_cat_2.ProductName = "Cắt 2";
                        //    item_cat_2.ProductColor = item.ProductColor;
                        //    item_cat_2.ProductColorCode = item.ProductColorCode;
                        //    item_cat_2.ProductThickness = item.ProductThickness;
                        //    item_cat_2.ProductLength = item.ProductLength;
                        //    item_cat_2.ProductWidth = item.ProductWidth;
                        //    item_cat_2.Quantity = 1;
                        //    item_cat_2.TotalArea = item.TotalArea;
                        //    item_cat_2.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    item_cat_2.StatusId = item_status_new;
                        //    item_cat_2.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    item_cat_2.Borehole = item.Borehole;
                        //    item_cat_2.Hole = item.Hole;
                        //    item_cat_2.ProductGroupCode = "";
                        //    item_cat_2.IsParent = false;
                        //    item_cat_2.IsSubParent = false;
                        //    item_cat_2.StartId = cat.TechniqueRequestId;
                        //    item_cat_2.ParentPartId = new_item.ProductionOrderMappingId;
                        //    item_cat_2.CreatedDate = DateTime.Now;
                        //    item_cat_2.CreatedById = parameter.UserId;

                        //    context.ProductionOrderMapping.Add(item_cat_2);
                        //    context.SaveChanges();

                        //    //Thêm vào bảng mapping giữa tiến trình và item
                        //    var new_add_cat_2 = new TechniqueRequestMapping();
                        //    new_add_cat_2.TechniqueRequestMappingId = Guid.NewGuid();
                        //    new_add_cat_2.ProductionOrderMappingId = item_cat_2.ProductionOrderMappingId;
                        //    new_add_cat_2.TechniqueRequestId = cat.TechniqueRequestId;
                        //    new_add_cat_2.Rate = 1;
                        //    new_add_cat_2.TechniqueName = cat.TechniqueName;
                        //    new_add_cat_2.TechniqueOrder = 1;
                        //    new_add_cat_2.TechniqueValue = 0;
                        //    new_add_cat_2.IsDefault = true;
                        //    new_add_cat_2.CreatedDate = DateTime.Now;
                        //    new_add_cat_2.CreatedById = parameter.UserId;

                        //    context.TechniqueRequestMapping.Add(new_add_cat_2);
                        //    context.SaveChanges();

                        //    #endregion
                        //}
                        ////Item là bán thành phẩm
                        //else
                        //{
                        //    ////Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                        //    ////Tạo quy trình mới để chứa danh sách tiến trình mới
                        //    //var new_workflow_cat = new ProductOrderWorkflow();
                        //    //new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                        //    //new_workflow_cat.Code =
                        //    //    DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                        //    //    DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                        //    //    DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                        //    //new_workflow_cat.Name = new_workflow_cat.Code;
                        //    //new_workflow_cat.IsDefault = false;
                        //    //new_workflow_cat.Description = "";
                        //    //new_workflow_cat.Active = true;
                        //    //new_workflow_cat.CreatedDate = DateTime.Now;
                        //    //new_workflow_cat.CreatedById = parameter.UserId;
                        //    //new_workflow_cat.ParentId = null;

                        //    //context.ProductOrderWorkflow.Add(new_workflow_cat);
                        //    //context.SaveChanges();

                        //    ////Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                        //    //var _new_mapping = new OrderTechniqueMapping();
                        //    //_new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                        //    //_new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    //_new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                        //    //_new_mapping.TechniqueOrder = 1;
                        //    //_new_mapping.Rate = 1;
                        //    //_new_mapping.IsDefault = true;
                        //    //_new_mapping.Active = true;
                        //    //_new_mapping.CreatedDate = DateTime.Now;
                        //    //_new_mapping.CreatedById = parameter.UserId;

                        //    //context.OrderTechniqueMapping.Add(_new_mapping);
                        //    //context.SaveChanges();

                        //    ////Lúc này trường IsParent = true
                        //    //item.IsSubParent = true;
                        //    //item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");

                        //    //#region Thêm bán thành phẩm Cắt 1

                        //    //var item_cat_1 = new ProductionOrderMapping();
                        //    //item_cat_1.ProductionOrderMappingId = Guid.NewGuid();
                        //    //item_cat_1.ParentId = null;
                        //    //item_cat_1.ProductionOrderId = item.ProductionOrderId;
                        //    //item_cat_1.ProductName = "Cắt 1";
                        //    //item_cat_1.ProductColor = item.ProductColor;
                        //    //item_cat_1.ProductColorCode = item.ProductColorCode;
                        //    //item_cat_1.ProductThickness = item.ProductThickness;
                        //    //item_cat_1.ProductLength = item.ProductLength;
                        //    //item_cat_1.ProductWidth = item.ProductWidth;
                        //    //item_cat_1.Quantity = item.Quantity;
                        //    //item_cat_1.TotalArea = item.TotalArea;
                        //    //item_cat_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    //item_cat_1.StatusId = item_status_new;
                        //    //item_cat_1.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    //item_cat_1.Borehole = item.Borehole;
                        //    //item_cat_1.Hole = item.Hole;
                        //    //item_cat_1.ProductGroupCode = "";
                        //    //item_cat_1.IsParent = false;
                        //    //item_cat_1.IsSubParent = false;
                        //    //item_cat_1.StartId = cat.TechniqueRequestId;
                        //    //item_cat_1.ParentPartId = item.ProductionOrderMappingId;
                        //    //item_cat_1.CreatedDate = DateTime.Now;
                        //    //item_cat_1.CreatedById = parameter.UserId;

                        //    //context.ProductionOrderMapping.Add(item_cat_1);
                        //    //context.SaveChanges();

                        //    ////Thêm vào bảng mapping giữa tiến trình và item
                        //    //var new_add_cat_1 = new TechniqueRequestMapping();
                        //    //new_add_cat_1.TechniqueRequestMappingId = Guid.NewGuid();
                        //    //new_add_cat_1.ProductionOrderMappingId = item_cat_1.ProductionOrderMappingId;
                        //    //new_add_cat_1.TechniqueRequestId = cat.TechniqueRequestId;
                        //    //new_add_cat_1.Rate = 1;
                        //    //new_add_cat_1.TechniqueName = cat.TechniqueName;
                        //    //new_add_cat_1.TechniqueOrder = 1;
                        //    //new_add_cat_1.TechniqueValue = 0;
                        //    //new_add_cat_1.IsDefault = true;
                        //    //new_add_cat_1.CreatedDate = DateTime.Now;
                        //    //new_add_cat_1.CreatedById = parameter.UserId;

                        //    //context.TechniqueRequestMapping.Add(new_add_cat_1);
                        //    //context.SaveChanges();

                        //    //#endregion

                        //    //#region Thêm bán thành phẩm Cắt 2

                        //    //var item_cat_2 = new ProductionOrderMapping();
                        //    //item_cat_2.ProductionOrderMappingId = Guid.NewGuid();
                        //    //item_cat_2.ParentId = null;
                        //    //item_cat_2.ProductionOrderId = item.ProductionOrderId;
                        //    //item_cat_2.ProductName = "Cắt 2";
                        //    //item_cat_2.ProductColor = item.ProductColor;
                        //    //item_cat_2.ProductColorCode = item.ProductColorCode;
                        //    //item_cat_2.ProductThickness = item.ProductThickness;
                        //    //item_cat_2.ProductLength = item.ProductLength;
                        //    //item_cat_2.ProductWidth = item.ProductWidth;
                        //    //item_cat_2.Quantity = item.Quantity;
                        //    //item_cat_2.TotalArea = item.TotalArea;
                        //    //item_cat_2.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                        //    //item_cat_2.StatusId = item_status_new;
                        //    //item_cat_2.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                        //    //item_cat_2.Borehole = item.Borehole;
                        //    //item_cat_2.Hole = item.Hole;
                        //    //item_cat_2.ProductGroupCode = "";
                        //    //item_cat_2.IsParent = false;
                        //    //item_cat_2.IsSubParent = false;
                        //    //item_cat_2.StartId = cat.TechniqueRequestId;
                        //    //item_cat_2.ParentPartId = item.ProductionOrderMappingId;
                        //    //item_cat_2.CreatedDate = DateTime.Now;
                        //    //item_cat_2.CreatedById = parameter.UserId;

                        //    //context.ProductionOrderMapping.Add(item_cat_2);
                        //    //context.SaveChanges();

                        //    ////Thêm vào bảng mapping giữa tiến trình và item
                        //    //var new_add_cat_2 = new TechniqueRequestMapping();
                        //    //new_add_cat_2.TechniqueRequestMappingId = Guid.NewGuid();
                        //    //new_add_cat_2.ProductionOrderMappingId = item_cat_2.ProductionOrderMappingId;
                        //    //new_add_cat_2.TechniqueRequestId = cat.TechniqueRequestId;
                        //    //new_add_cat_2.Rate = 1;
                        //    //new_add_cat_2.TechniqueName = cat.TechniqueName;
                        //    //new_add_cat_2.TechniqueOrder = 1;
                        //    //new_add_cat_2.TechniqueValue = 0;
                        //    //new_add_cat_2.IsDefault = true;
                        //    //new_add_cat_2.CreatedDate = DateTime.Now;
                        //    //new_add_cat_2.CreatedById = parameter.UserId;

                        //    //context.TechniqueRequestMapping.Add(new_add_cat_2);
                        //    //context.SaveChanges();

                        //    //#endregion
                        //}

                        #endregion

                        #region Lưu vào bảng lịch sử

                        var minusItemMapping = new MinusItemMapping();
                        minusItemMapping.MinusItemMappingId = Guid.NewGuid();
                        minusItemMapping.ProductionOrderId = item.ProductionOrderId;
                        minusItemMapping.ProductionOrderMappingId = parameter.ProductionOrderMappingId;
                        minusItemMapping.MinusType = parameter.MinusType;
                        minusItemMapping.IsWork = false;
                        minusItemMapping.Quantity = parameter.Quantity;
                        minusItemMapping.CreatedDate = DateTime.Now;
                        minusItemMapping.CreatedById = parameter.UserId;

                        context.MinusItemMapping.Add(minusItemMapping);
                        context.SaveChanges();

                        #endregion

                        #region Kiểm tra thay đổi trạng thái của Item

                        //Lấy ra list tiến trình cũ
                        var listTechniqueRequest = context.TechniqueRequestMapping
                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId).ToList();

                        //Lấy ra tiến trình cuối cùng của Item
                        var last_tech = listTechniqueRequest.OrderByDescending(x => x.TechniqueOrder)
                            .FirstOrDefault();

                        #region Tính số lượng đơn vị của tiến trình đã hoàn thành

                        var listAllProductionOrderHistory = context.ProductionOrderHistory.ToList();

                        var listHistoryItem = listAllProductionOrderHistory.Where(x =>
                            x.ProductionOrderMappingId == item.ProductionOrderMappingId &&
                            x.TechniqueRequestId == last_tech.TechniqueRequestId).ToList();

                        //Số tấm cộng
                        var tong_cong = listHistoryItem.Where(x => x.CalculatorType == true).ToList()
                            .Count();

                        //Số tấm cộng bổ sung
                        var tong_cong_bo_sung = listAllProductionOrderHistory.Where(x =>
                                x.CalculatorType == true &&
                                x.ParentId == item.ProductionOrderMappingId &&
                                x.ParentType == true &&
                                x.TechniqueRequestId == last_tech.TechniqueRequestId)
                            .ToList()
                            .Count();

                        //Số tấm trừ
                        var tong_tru = listHistoryItem.Where(x => x.CalculatorType == false).ToList()
                            .Count();

                        //Số tấm trừ bổ sung
                        var tong_tru_bo_sung = listAllProductionOrderHistory.Where(x =>
                                x.CalculatorType == false &&
                                x.ParentId == item.ProductionOrderMappingId &&
                                x.ParentType == true &&
                                x.TechniqueRequestId == last_tech.TechniqueRequestId)
                            .ToList()
                            .Count();

                        //Số tấm đã hoàn thành
                        var completeQuantity =
                            Math.Round(
                                Convert.ToDouble((tong_cong + tong_cong_bo_sung) - (tong_tru + tong_tru_bo_sung)),
                                2);

                        //Lấy ra số lượng tấm đơn vị phải làm
                        var unitQuantity = item.Quantity;

                        //Nếu số tấm đã hoàn thành = số tấm phải hoàn thành thì cập nhật trạng thái của Item là Đã hoàn thành
                        if (completeQuantity == unitQuantity)
                        {
                            item.StatusId = item_status_comp;
                            context.ProductionOrderMapping.Update(item);
                            context.SaveChanges();
                        }

                        #endregion

                        #endregion

                        transaction.Commit();
                    }

                    return new MinusQuantityForItemResult()
                    {
                        Status = true,
                        Message = "Success"
                    };
                }
            }
            catch (Exception e)
            {
                return new MinusQuantityForItemResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetListItemChangeResult GetListItemChange(GetListItemChangeParameter parameter)
        {
            try
            {
                //Lấy tất cả Item thuộc lệnh sản xuất cần chuyển quy trình (MinusType == 2)
                var listAllMinusItemMapping = context.MinusItemMapping.ToList();

                var listAllItemMinus = listAllMinusItemMapping
                    .Where(x => x.IsWork != true && x.ProductionOrderId == parameter.ProductionOrderId).ToList();

                var listItemId = listAllItemMinus.Select(x => x.ProductionOrderMappingId).ToList();

                var listItemResult = new List<ProductionOrderMappingEntityModel>();

                if (listItemId.Count > 0)
                {
                    var listAllItem = context.ProductionOrderMapping.ToList();

                    var listItem = listAllItem
                        .Where(x => listItemId.Contains(x.ProductionOrderMappingId)).ToList();

                    var statusItemType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var listAllStatusItem = context.Category
                        .Where(x => x.CategoryTypeId == statusItemType.CategoryTypeId).ToList();
                    var statusItemNew = listAllStatusItem.FirstOrDefault(x => x.CategoryCode == "NEW");

                    var listProductOrderWorkflowId = listItem.Select(x => x.ProductOrderWorkflowId).Distinct().ToList();
                    var listProductOrderWorkflow = context.ProductOrderWorkflow.ToList();

                    //Kiểm tra các item gốc xem là item bình thường hay item bán thành phẩm
                    listItem.ForEach(item =>
                    {
                        var _current_minus = listAllItemMinus.FirstOrDefault(x =>
                            x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                        //Nếu không giảm số lượng item gốc
                        if (_current_minus.MinusType == 2)
                        {
                            //Nếu item gốc là item bình thường
                            if (item.ParentPartId == null)
                            {
                                //Gán thông tin cho item cha
                                var _parent_item = new ProductionOrderMappingEntityModel();
                                _parent_item.ProductionOrderMappingId = item.ProductionOrderMappingId;
                                _parent_item.ProductionOrderId = item.ProductionOrderId;
                                _parent_item.ProductName = item.ProductName;
                                _parent_item.ProductColor = item.ProductColor;
                                _parent_item.ProductThickness = item.ProductThickness;
                                _parent_item.ProductLength = item.ProductLength;
                                _parent_item.ProductWidth = item.ProductWidth;
                                _parent_item.Quantity = _current_minus.Quantity;
                                _parent_item.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item.Hole = item.Hole;
                                _parent_item.Borehole = item.Borehole;
                                _parent_item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item.StatusId = item.StatusId;

                                var _currentStatusItem =
                                    listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId);

                                _parent_item.StatusCode = _currentStatusItem.CategoryCode;
                                _parent_item.StatusName = _currentStatusItem.CategoryName;

                                _parent_item.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                                _parent_item.ProductOrderWorkflowName = listProductOrderWorkflow
                                    .FirstOrDefault(x => x.ProductOrderWorkflowId == item.ProductOrderWorkflowId).Name;

                                _parent_item.ProductGroupCode = item.ProductGroupCode;
                                _parent_item.ParentPartId = item.ParentPartId;
                                _parent_item.IsAddItem = false;
                                _parent_item.IsCreated = false;
                                _parent_item.IsOriginal = true;

                                listItemResult.Add(_parent_item);

                                //Thêm item bán thành phẩm cấp 1 (1.1 - Cắt)
                                var _parent_item_11 = new ProductionOrderMappingEntityModel();
                                _parent_item_11.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_11.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_11.ProductName = "Cắt 1";
                                _parent_item_11.ProductColor = item.ProductColor;
                                _parent_item_11.ProductThickness = item.ProductThickness;
                                _parent_item_11.ProductLength = item.ProductLength;
                                _parent_item_11.ProductWidth = item.ProductWidth;
                                _parent_item_11.Quantity = _current_minus.Quantity;
                                _parent_item_11.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_11.Hole = item.Hole;
                                _parent_item_11.Borehole = item.Borehole;
                                _parent_item_11.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_11.StatusId = statusItemNew.CategoryId;

                                _parent_item_11.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_11.StatusName = statusItemNew.CategoryName;

                                _parent_item_11.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_11.ProductOrderWorkflowName = "";

                                _parent_item_11.ProductGroupCode = _parent_item.ProductGroupCode;
                                _parent_item_11.ParentPartId = _parent_item.ProductionOrderMappingId;
                                _parent_item_11.IsAddItem = true;
                                _parent_item_11.IsCreated = false;
                                _parent_item_11.IsOriginal = false;

                                listItemResult.Add(_parent_item_11);

                                //Thêm item bán thành phẩm cấp 1 (1.2 - Cắt)
                                var _parent_item_12 = new ProductionOrderMappingEntityModel();
                                _parent_item_12.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_12.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_12.ProductName = "Cắt 2";
                                _parent_item_12.ProductColor = item.ProductColor;
                                _parent_item_12.ProductThickness = item.ProductThickness;
                                _parent_item_12.ProductLength = item.ProductLength;
                                _parent_item_12.ProductWidth = item.ProductWidth;
                                _parent_item_12.Quantity = _current_minus.Quantity;
                                _parent_item_12.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_12.Hole = item.Hole;
                                _parent_item_12.Borehole = item.Borehole;
                                _parent_item_12.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_12.StatusId = statusItemNew.CategoryId;

                                _parent_item_12.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_12.StatusName = statusItemNew.CategoryName;

                                _parent_item_12.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_12.ProductOrderWorkflowName = "";

                                _parent_item_12.ProductGroupCode = _parent_item.ProductGroupCode;
                                _parent_item_12.ParentPartId = _parent_item.ProductionOrderMappingId;
                                _parent_item_12.IsAddItem = true;
                                _parent_item_12.IsCreated = false;
                                _parent_item_12.IsOriginal = false;

                                listItemResult.Add(_parent_item_12);
                            }
                            //Nếu item gốc là item bán thành phẩm
                            else
                            {
                                //Lấy ra item cha
                                var parent_item =
                                    listAllItem.FirstOrDefault(x => x.ProductionOrderMappingId == item.ParentPartId);

                                //Gán thông tin cho item cha
                                var _parent_item_0 = new ProductionOrderMappingEntityModel();
                                _parent_item_0.ProductionOrderMappingId = parent_item.ProductionOrderMappingId;
                                _parent_item_0.ProductionOrderId = parent_item.ProductionOrderId;
                                _parent_item_0.ProductName = parent_item.ProductName;
                                _parent_item_0.ProductColor = parent_item.ProductColor;
                                _parent_item_0.ProductThickness = parent_item.ProductThickness;
                                _parent_item_0.ProductLength = parent_item.ProductLength;
                                _parent_item_0.ProductWidth = parent_item.ProductWidth;
                                _parent_item_0.Quantity = parent_item.Quantity;
                                _parent_item_0.TotalArea =
                                    Math.Round(
                                        (parent_item.Quantity.Value * parent_item.ProductLength.Value *
                                         parent_item.ProductWidth.Value / 1000000), 4);
                                _parent_item_0.Hole = parent_item.Hole;
                                _parent_item_0.Borehole = parent_item.Borehole;
                                _parent_item_0.TechniqueDescription =
                                    parent_item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_0.StatusId = parent_item.StatusId;

                                var _currentStatusItem_0 =
                                    listAllStatusItem.FirstOrDefault(x => x.CategoryId == parent_item.StatusId);

                                _parent_item_0.StatusCode = _currentStatusItem_0.CategoryCode;
                                _parent_item_0.StatusName = _currentStatusItem_0.CategoryName;

                                _parent_item_0.ProductOrderWorkflowId = parent_item.ProductOrderWorkflowId;
                                _parent_item_0.ProductOrderWorkflowName = listProductOrderWorkflow
                                    .FirstOrDefault(x => x.ProductOrderWorkflowId == parent_item.ProductOrderWorkflowId)
                                    .Name;

                                _parent_item_0.ProductGroupCode = parent_item.ProductGroupCode;
                                _parent_item_0.ParentPartId = parent_item.ParentPartId;
                                _parent_item_0.IsAddItem = false;
                                _parent_item_0.IsCreated = false;
                                _parent_item_0.IsOriginal = false;

                                listItemResult.Add(_parent_item_0);

                                //Gán thông tin cho item bán thành phẩm cấp 1
                                var _parent_item_1 = new ProductionOrderMappingEntityModel();
                                _parent_item_1.ProductionOrderMappingId = item.ProductionOrderMappingId;
                                _parent_item_1.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_1.ProductName = item.ProductName;
                                _parent_item_1.ProductColor = item.ProductColor;
                                _parent_item_1.ProductThickness = item.ProductThickness;
                                _parent_item_1.ProductLength = item.ProductLength;
                                _parent_item_1.ProductWidth = item.ProductWidth;
                                _parent_item_1.Quantity = item.Quantity;
                                _parent_item_1.TotalArea =
                                    Math.Round(
                                        (item.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_1.Hole = item.Hole;
                                _parent_item_1.Borehole = item.Borehole;
                                _parent_item_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_1.StatusId = item.StatusId;

                                var _currentStatusItem_1 =
                                    listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId);

                                _parent_item_1.StatusCode = _currentStatusItem_1.CategoryCode;
                                _parent_item_1.StatusName = _currentStatusItem_1.CategoryName;

                                _parent_item_1.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                                _parent_item_1.ProductOrderWorkflowName = listProductOrderWorkflow
                                    .FirstOrDefault(x => x.ProductOrderWorkflowId == item.ProductOrderWorkflowId)
                                    .Name;

                                _parent_item_1.ProductGroupCode = item.ProductGroupCode;
                                _parent_item_1.ParentPartId = _parent_item_0.ProductionOrderMappingId;
                                _parent_item_1.IsAddItem = false;
                                _parent_item_1.IsCreated = false;
                                _parent_item_1.IsOriginal = true;

                                listItemResult.Add(_parent_item_1);

                                //Thêm item bán thành phẩm cấp 1 (1.1 - Cắt)
                                var _parent_item_11 = new ProductionOrderMappingEntityModel();
                                _parent_item_11.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_11.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_11.ProductName = "Cắt 1";
                                _parent_item_11.ProductColor = item.ProductColor;
                                _parent_item_11.ProductThickness = item.ProductThickness;
                                _parent_item_11.ProductLength = item.ProductLength;
                                _parent_item_11.ProductWidth = item.ProductWidth;
                                _parent_item_11.Quantity = _current_minus.Quantity;
                                _parent_item_11.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_11.Hole = item.Hole;
                                _parent_item_11.Borehole = item.Borehole;
                                _parent_item_11.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_11.StatusId = statusItemNew.CategoryId;

                                _parent_item_11.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_11.StatusName = statusItemNew.CategoryName;

                                _parent_item_11.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_11.ProductOrderWorkflowName = "";

                                _parent_item_11.ProductGroupCode = _parent_item_1.ProductGroupCode;
                                _parent_item_11.ParentPartId = _parent_item_1.ProductionOrderMappingId;
                                _parent_item_11.IsAddItem = true;
                                _parent_item_11.IsCreated = false;
                                _parent_item_11.IsOriginal = false;

                                listItemResult.Add(_parent_item_11);

                                //Thêm item bán thành phẩm cấp 1 (1.2 - Cắt)
                                var _parent_item_12 = new ProductionOrderMappingEntityModel();
                                _parent_item_12.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_12.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_12.ProductName = "Cắt 2";
                                _parent_item_12.ProductColor = item.ProductColor;
                                _parent_item_12.ProductThickness = item.ProductThickness;
                                _parent_item_12.ProductLength = item.ProductLength;
                                _parent_item_12.ProductWidth = item.ProductWidth;
                                _parent_item_12.Quantity = _current_minus.Quantity;
                                _parent_item_12.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_12.Hole = item.Hole;
                                _parent_item_12.Borehole = item.Borehole;
                                _parent_item_12.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_12.StatusId = statusItemNew.CategoryId;

                                _parent_item_12.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_12.StatusName = statusItemNew.CategoryName;

                                _parent_item_12.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_12.ProductOrderWorkflowName = "";

                                _parent_item_12.ProductGroupCode = _parent_item_1.ProductGroupCode;
                                _parent_item_12.ParentPartId = _parent_item_1.ProductionOrderMappingId;
                                _parent_item_12.IsAddItem = true;
                                _parent_item_12.IsCreated = false;
                                _parent_item_12.IsOriginal = false;

                                listItemResult.Add(_parent_item_12);
                            }
                        }
                        //Nếu giảm số lượng item gốc
                        else
                        {
                            //Nếu item gốc là item bình thường
                            if (item.ParentPartId == null)
                            {
                                //Gán thông tin cho item cha
                                var _parent_item = new ProductionOrderMappingEntityModel();
                                _parent_item.ProductionOrderMappingId = item.ProductionOrderMappingId;
                                _parent_item.ProductionOrderId = item.ProductionOrderId;
                                _parent_item.ProductName = item.ProductName;
                                _parent_item.ProductColor = item.ProductColor;
                                _parent_item.ProductThickness = item.ProductThickness;
                                _parent_item.ProductLength = item.ProductLength;
                                _parent_item.ProductWidth = item.ProductWidth;
                                _parent_item.Quantity = _current_minus.Quantity;
                                _parent_item.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item.Hole = item.Hole;
                                _parent_item.Borehole = item.Borehole;
                                _parent_item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item.StatusId = item.StatusId;

                                var _currentStatusItem =
                                    listAllStatusItem.FirstOrDefault(x => x.CategoryId == item.StatusId);

                                _parent_item.StatusCode = _currentStatusItem.CategoryCode;
                                _parent_item.StatusName = _currentStatusItem.CategoryName;

                                _parent_item.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                                _parent_item.ProductOrderWorkflowName = listProductOrderWorkflow
                                    .FirstOrDefault(x => x.ProductOrderWorkflowId == item.ProductOrderWorkflowId).Name;

                                _parent_item.ProductGroupCode = item.ProductGroupCode;
                                _parent_item.ParentPartId = item.ParentPartId;
                                _parent_item.IsAddItem = false;
                                _parent_item.IsCreated = true;
                                _parent_item.IsOriginal = true;

                                listItemResult.Add(_parent_item);

                                //Thêm item bán thành phẩm cấp 1 (1.1 - Cắt)
                                var _parent_item_11 = new ProductionOrderMappingEntityModel();
                                _parent_item_11.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_11.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_11.ProductName = "Cắt 1";
                                _parent_item_11.ProductColor = item.ProductColor;
                                _parent_item_11.ProductThickness = item.ProductThickness;
                                _parent_item_11.ProductLength = item.ProductLength;
                                _parent_item_11.ProductWidth = item.ProductWidth;
                                _parent_item_11.Quantity = _current_minus.Quantity;
                                _parent_item_11.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_11.Hole = item.Hole;
                                _parent_item_11.Borehole = item.Borehole;
                                _parent_item_11.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_11.StatusId = statusItemNew.CategoryId;

                                _parent_item_11.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_11.StatusName = statusItemNew.CategoryName;

                                _parent_item_11.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_11.ProductOrderWorkflowName = "";

                                _parent_item_11.ProductGroupCode = _parent_item.ProductGroupCode;
                                _parent_item_11.ParentPartId = _parent_item.ProductionOrderMappingId;
                                _parent_item_11.IsAddItem = true;
                                _parent_item_11.IsCreated = true;
                                _parent_item_11.IsOriginal = false;

                                listItemResult.Add(_parent_item_11);

                                //Thêm item bán thành phẩm cấp 1 (1.2 - Cắt)
                                var _parent_item_12 = new ProductionOrderMappingEntityModel();
                                _parent_item_12.ProductionOrderMappingId = Guid.NewGuid();
                                _parent_item_12.ProductionOrderId = item.ProductionOrderId;
                                _parent_item_12.ProductName = "Cắt 2";
                                _parent_item_12.ProductColor = item.ProductColor;
                                _parent_item_12.ProductThickness = item.ProductThickness;
                                _parent_item_12.ProductLength = item.ProductLength;
                                _parent_item_12.ProductWidth = item.ProductWidth;
                                _parent_item_12.Quantity = _current_minus.Quantity;
                                _parent_item_12.TotalArea =
                                    Math.Round(
                                        (_current_minus.Quantity.Value * item.ProductLength.Value *
                                         item.ProductWidth.Value / 1000000), 4);
                                _parent_item_12.Hole = item.Hole;
                                _parent_item_12.Borehole = item.Borehole;
                                _parent_item_12.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                _parent_item_12.StatusId = statusItemNew.CategoryId;

                                _parent_item_12.StatusCode = statusItemNew.CategoryCode;
                                _parent_item_12.StatusName = statusItemNew.CategoryName;

                                _parent_item_12.ProductOrderWorkflowId = Guid.Empty;
                                _parent_item_12.ProductOrderWorkflowName = "";

                                _parent_item_12.ProductGroupCode = _parent_item.ProductGroupCode;
                                _parent_item_12.ParentPartId = _parent_item.ProductionOrderMappingId;
                                _parent_item_12.IsAddItem = true;
                                _parent_item_12.IsCreated = true;
                                _parent_item_12.IsOriginal = false;

                                listItemResult.Add(_parent_item_12);
                            }
                            //Nếu item gốc là item bán thành phẩm
                            else
                            {

                            }
                        }
                    });
                }

                return new GetListItemChangeResult()
                {
                    Status = true,
                    Message = "Success",
                    ListItem = listItemResult
                };
            }
            catch (Exception e)
            {
                return new GetListItemChangeResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public SaveCatHaResult SaveCatHa(SaveCatHaParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    //Lấy trạng thái mới tạo của Item
                    var item_status_type = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TISX");
                    var item_status_new = context.Category.FirstOrDefault(x =>
                        x.CategoryCode == "NEW" && x.CategoryTypeId == item_status_type.CategoryTypeId).CategoryId;
                    var item_status_comp = context.Category.FirstOrDefault(x =>
                        x.CategoryCode == "COMP" && x.CategoryTypeId == item_status_type.CategoryTypeId).CategoryId;

                    var listTechnique = context.TechniqueRequest.ToList();
                    //Lấy ra tiến trình Cắt
                    var cat = listTechnique.FirstOrDefault(x => x.TechniqueRequestCode == "CAT");

                    //Tạo quy trình mới để chứa danh sách tiến trình mới
                    var new_workflow_cat = new ProductOrderWorkflow();
                    new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                    new_workflow_cat.Code =
                        DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                        DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                        DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                    new_workflow_cat.Name = new_workflow_cat.Code;
                    new_workflow_cat.IsDefault = false;
                    new_workflow_cat.Description = "";
                    new_workflow_cat.Active = true;
                    new_workflow_cat.CreatedDate = DateTime.Now;
                    new_workflow_cat.CreatedById = parameter.UserId;
                    new_workflow_cat.ParentId = null;

                    context.ProductOrderWorkflow.Add(new_workflow_cat);
                    context.SaveChanges();

                    //Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                    var _new_mapping = new OrderTechniqueMapping();
                    _new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                    _new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                    _new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                    _new_mapping.TechniqueOrder = 1;
                    _new_mapping.Rate = 1;
                    _new_mapping.IsDefault = true;
                    _new_mapping.Active = true;
                    _new_mapping.CreatedDate = DateTime.Now;
                    _new_mapping.CreatedById = parameter.UserId;

                    context.OrderTechniqueMapping.Add(_new_mapping);
                    context.SaveChanges();

                    var listAllProductionOrderMapping = context.ProductionOrderMapping.ToList();
                    var listAllTechniqueRequestMapping = context.TechniqueRequestMapping.ToList();

                    //List Id Item con đã được tạo item cha
                    var listItemId = new List<Guid>();

                    //Lưu list item
                    parameter.ListItemInfor.ForEach(_item_child =>
                    {
                        if (_item_child.IsAddItem == true)
                        {
                            //Lấy item cha trong db
                            var item = listAllProductionOrderMapping.FirstOrDefault(x =>
                                x.ProductionOrderMappingId == _item_child.ParentPartId);

                            //Kiểm tra thêm item trong trường hợp nào?
                            //1. Không tạo mới item cha
                            //2. Tạo mới item cha
                            var _item = parameter.ListItemInfor.FirstOrDefault(x =>
                                x.ProductionOrderMappingId == item.ProductionOrderMappingId);

                            //Nếu Không tạo mới item cha
                            if (_item.IsCreated == false)
                            {
                                #region Trường hợp không trừ số lượng tấm

                                //Kiểm tra xem item thay đổi là bán thành phẩm hay không phải bán thành phẩm

                                //Item cha không phải bán thành phẩm
                                if (item.ParentPartId == null)
                                {
                                    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                                    //Lúc này trường IsParent = true
                                    item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    item.IsParent = true;
                                    context.ProductionOrderMapping.Update(item);
                                    context.SaveChanges();

                                    #region Thêm bán thành phẩm Cắt

                                    var item_cat = new ProductionOrderMapping();
                                    item_cat.ProductionOrderMappingId = Guid.NewGuid();
                                    item_cat.ParentId = null;
                                    item_cat.ProductionOrderId = item.ProductionOrderId;
                                    item_cat.ProductName = _item_child.ProductName;
                                    item_cat.ProductColor = item.ProductColor;
                                    item_cat.ProductColorCode = item.ProductColorCode;
                                    item_cat.ProductThickness = _item_child.ProductThickness;
                                    item_cat.ProductLength = item.ProductLength;
                                    item_cat.ProductWidth = item.ProductWidth;
                                    item_cat.Quantity = item.Quantity;
                                    item_cat.TotalArea = item.TotalArea;
                                    item_cat.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    item_cat.StatusId = item_status_new;
                                    item_cat.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    item_cat.Borehole = item.Borehole;
                                    item_cat.Hole = item.Hole;
                                    item_cat.ProductGroupCode = _item_child.ProductGroupCode;
                                    item_cat.IsParent = false;
                                    item_cat.IsSubParent = false;
                                    item_cat.StartId = cat.TechniqueRequestId;
                                    item_cat.ParentPartId = item.ProductionOrderMappingId;
                                    item_cat.CreatedDate = DateTime.Now;
                                    item_cat.CreatedById = parameter.UserId;

                                    context.ProductionOrderMapping.Add(item_cat);
                                    context.SaveChanges();

                                    //Thêm vào bảng mapping giữa tiến trình và item
                                    var new_add_cat = new TechniqueRequestMapping();
                                    new_add_cat.TechniqueRequestMappingId = Guid.NewGuid();
                                    new_add_cat.ProductionOrderMappingId = item_cat.ProductionOrderMappingId;
                                    new_add_cat.TechniqueRequestId = cat.TechniqueRequestId;
                                    new_add_cat.Rate = 1;
                                    new_add_cat.TechniqueName = cat.TechniqueName;
                                    new_add_cat.TechniqueOrder = 1;
                                    new_add_cat.TechniqueValue = 0;
                                    new_add_cat.IsDefault = true;
                                    new_add_cat.CreatedDate = DateTime.Now;
                                    new_add_cat.CreatedById = parameter.UserId;

                                    context.TechniqueRequestMapping.Add(new_add_cat);
                                    context.SaveChanges();

                                    #endregion
                                }
                                //Item là bán thành phẩm
                                else
                                {
                                    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                                    //Lúc này trường IsParent = true
                                    item.IsSubParent = true;
                                    item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    context.ProductionOrderMapping.Update(item);
                                    context.SaveChanges();

                                    #region Thêm bán thành phẩm Cắt

                                    var item_cat = new ProductionOrderMapping();
                                    item_cat.ProductionOrderMappingId = Guid.NewGuid();
                                    item_cat.ParentId = null;
                                    item_cat.ProductionOrderId = item.ProductionOrderId;
                                    item_cat.ProductName = _item_child.ProductName;
                                    item_cat.ProductColor = item.ProductColor;
                                    item_cat.ProductColorCode = item.ProductColorCode;
                                    item_cat.ProductThickness = _item_child.ProductThickness;
                                    item_cat.ProductLength = item.ProductLength;
                                    item_cat.ProductWidth = item.ProductWidth;
                                    item_cat.Quantity = item.Quantity;
                                    item_cat.TotalArea = item.TotalArea;
                                    item_cat.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    item_cat.StatusId = item_status_new;
                                    item_cat.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    item_cat.Borehole = item.Borehole;
                                    item_cat.Hole = item.Hole;
                                    item_cat.ProductGroupCode = _item_child.ProductGroupCode;
                                    item_cat.IsParent = false;
                                    item_cat.IsSubParent = false;
                                    item_cat.StartId = cat.TechniqueRequestId;
                                    item_cat.ParentPartId = item.ProductionOrderMappingId;
                                    item_cat.CreatedDate = DateTime.Now;
                                    item_cat.CreatedById = parameter.UserId;

                                    context.ProductionOrderMapping.Add(item_cat);
                                    context.SaveChanges();

                                    //Thêm vào bảng mapping giữa tiến trình và item
                                    var new_add_cat = new TechniqueRequestMapping();
                                    new_add_cat.TechniqueRequestMappingId = Guid.NewGuid();
                                    new_add_cat.ProductionOrderMappingId = item_cat.ProductionOrderMappingId;
                                    new_add_cat.TechniqueRequestId = cat.TechniqueRequestId;
                                    new_add_cat.Rate = 1;
                                    new_add_cat.TechniqueName = cat.TechniqueName;
                                    new_add_cat.TechniqueOrder = 1;
                                    new_add_cat.TechniqueValue = 0;
                                    new_add_cat.IsDefault = true;
                                    new_add_cat.CreatedDate = DateTime.Now;
                                    new_add_cat.CreatedById = parameter.UserId;

                                    context.TechniqueRequestMapping.Add(new_add_cat);
                                    context.SaveChanges();

                                    #endregion
                                }

                                #endregion
                            }
                            //Nếu Tạo mới item cha
                            else
                            {
                                #region Trường hợp trừ số lượng tấm

                                //Kiểm tra xem item thay đổi là bán thành phẩm hay không phải bán thành phẩm

                                //Item không phải bán thành phẩm
                                if (item.ParentPartId == null)
                                {
                                    //Kiểm tra xem item cha đã được tạo chưa
                                    var check_item = listItemId.FirstOrDefault(x => x == item.ProductionOrderMappingId);
                                    Guid? _ProductionOrderMappingId = null;

                                    if (check_item == null || check_item == Guid.Empty)
                                    {
                                        #region Tạo Item cha mới

                                        //Tạo Item cha mới
                                        var new_item = new ProductionOrderMapping();
                                        new_item.ProductionOrderMappingId = Guid.NewGuid();
                                        new_item.ParentId = item.ParentId;
                                        new_item.ProductionOrderId = item.ProductionOrderId;
                                        new_item.ProductName = item.ProductName;
                                        new_item.ProductColor = item.ProductColor;
                                        new_item.ProductColorCode = item.ProductColorCode;
                                        new_item.ProductThickness = item.ProductThickness;
                                        new_item.ProductLength = _item.ProductLength;
                                        new_item.ProductWidth = _item.ProductWidth;
                                        new_item.Quantity = _item.Quantity;
                                        new_item.TotalArea = _item.TotalArea;
                                        new_item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                        new_item.StatusId = item_status_new;
                                        new_item.ProductOrderWorkflowId = item.ProductOrderWorkflowId;
                                        new_item.ParentType = item.ParentType;
                                        new_item.Borehole = item.Borehole;
                                        new_item.Hole = item.Hole;
                                        new_item.ProductGroupCode = item.ProductGroupCode;
                                        new_item.IsParent = true;
                                        new_item.IsSubParent = false;
                                        new_item.StartId = item.StartId;
                                        new_item.ParentPartId = item.ParentPartId;
                                        new_item.ParentExtendId = item.ParentExtendId;
                                        new_item.Grind = item.Grind;
                                        new_item.Stt = item.Stt;
                                        new_item.IsAddPart = item.IsAddPart;
                                        new_item.Present = item.Present;
                                        new_item.CreatedDate = DateTime.Now;
                                        new_item.CreatedById = parameter.UserId;

                                        context.ProductionOrderMapping.Add(new_item);
                                        context.SaveChanges();

                                        //Lấy ra list tiến trình cũ
                                        var listTechniqueRequest = listAllTechniqueRequestMapping
                                            .Where(x => x.ProductionOrderMappingId == item.ProductionOrderMappingId)
                                            .ToList();

                                        var new_listTechniqueRequest = new List<TechniqueRequestMapping>();
                                        listTechniqueRequest.ForEach(_tmp =>
                                        {
                                            var _new = new TechniqueRequestMapping();
                                            _new.TechniqueRequestMappingId = Guid.NewGuid();
                                            _new.ProductionOrderMappingId = new_item.ProductionOrderMappingId;
                                            _new.TechniqueRequestId = _tmp.TechniqueRequestId;
                                            _new.ParentId = null;
                                            _new.Rate = 1;
                                            _new.TechniqueName = _tmp.TechniqueName;
                                            _new.TechniqueOrder = _tmp.TechniqueOrder;
                                            _new.TechniqueValue = 0;
                                            _new.IsDefault = true;
                                            _new.Thick = _tmp.Thick;
                                            _new.Thin = _tmp.Thin;
                                            _new.EspeciallyThick = _tmp.EspeciallyThick;
                                            _new.EspeciallyThin = _tmp.EspeciallyThin;
                                            _new.BoreholeThick = _tmp.BoreholeThick;
                                            _new.BoreholeThin = _tmp.BoreholeThin;
                                            _new.OriginalThick = _tmp.OriginalThick;
                                            _new.OriginalThin = _tmp.OriginalThin;
                                            _new.CreatedDate = DateTime.Now;
                                            _new.CreatedById = parameter.UserId;

                                            new_listTechniqueRequest.Add(_new);
                                        });

                                        context.TechniqueRequestMapping.AddRange(new_listTechniqueRequest);
                                        context.SaveChanges();

                                        listItemId.Add(item.ProductionOrderMappingId);
                                        _ProductionOrderMappingId = new_item.ProductionOrderMappingId;

                                        #endregion
                                    }
                                    else
                                    {
                                        //Tìm Item con cùng cấp đã được tạo 
                                        var item_child_first = parameter.ListItemInfor.FirstOrDefault(x =>
                                            x.ParentPartId == item.ProductionOrderMappingId &&
                                            x.ProductionOrderMappingId != _item_child.ProductionOrderMappingId);

                                        //Lấy Id item cha 
                                        _ProductionOrderMappingId = context.ProductionOrderMapping.FirstOrDefault(x =>
                                                x.ProductionOrderMappingId == item_child_first.ProductionOrderMappingId)
                                            .ParentPartId;
                                    }

                                    //Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                                    #region Thêm bán thành phẩm Cắt

                                    var item_cat = new ProductionOrderMapping();
                                    item_cat.ProductionOrderMappingId = _item_child.ProductionOrderMappingId;
                                    item_cat.ParentId = null;
                                    item_cat.ProductionOrderId = item.ProductionOrderId;
                                    item_cat.ProductName = _item_child.ProductName;
                                    item_cat.ProductColor = item.ProductColor;
                                    item_cat.ProductColorCode = item.ProductColorCode;
                                    item_cat.ProductThickness = _item_child.ProductThickness;
                                    item_cat.ProductLength = item.ProductLength;
                                    item_cat.ProductWidth = item.ProductWidth;
                                    item_cat.Quantity = _item_child.Quantity;
                                    item_cat.TotalArea = item.TotalArea;
                                    item_cat.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    item_cat.StatusId = item_status_new;
                                    item_cat.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    item_cat.Borehole = item.Borehole;
                                    item_cat.Hole = item.Hole;
                                    item_cat.ProductGroupCode = _item_child.ProductGroupCode;
                                    item_cat.IsParent = false;
                                    item_cat.IsSubParent = false;
                                    item_cat.StartId = cat.TechniqueRequestId;
                                    item_cat.ParentPartId = _ProductionOrderMappingId;
                                    item_cat.CreatedDate = DateTime.Now;
                                    item_cat.CreatedById = parameter.UserId;

                                    context.ProductionOrderMapping.Add(item_cat);
                                    context.SaveChanges();

                                    //Thêm vào bảng mapping giữa tiến trình và item
                                    var new_add_cat = new TechniqueRequestMapping();
                                    new_add_cat.TechniqueRequestMappingId = Guid.NewGuid();
                                    new_add_cat.ProductionOrderMappingId = item_cat.ProductionOrderMappingId;
                                    new_add_cat.TechniqueRequestId = cat.TechniqueRequestId;
                                    new_add_cat.Rate = 1;
                                    new_add_cat.TechniqueName = cat.TechniqueName;
                                    new_add_cat.TechniqueOrder = 1;
                                    new_add_cat.TechniqueValue = 0;
                                    new_add_cat.IsDefault = true;
                                    new_add_cat.CreatedDate = DateTime.Now;
                                    new_add_cat.CreatedById = parameter.UserId;

                                    context.TechniqueRequestMapping.Add(new_add_cat);
                                    context.SaveChanges();

                                    #endregion
                                }
                                //Item là bán thành phẩm
                                else
                                {
                                    ////Item sẽ có thêm 2 bán thành phẩm Cắt 1 và Cắt 2

                                    ////Tạo quy trình mới để chứa danh sách tiến trình mới
                                    //var new_workflow_cat = new ProductOrderWorkflow();
                                    //new_workflow_cat.ProductOrderWorkflowId = Guid.NewGuid();
                                    //new_workflow_cat.Code =
                                    //    DateTime.Now.Day.ToString("D2") + DateTime.Now.Month.ToString("D2") +
                                    //    DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString("D2") +
                                    //    DateTime.Now.Minute.ToString("D2") + DateTime.Now.Second.ToString("D2");
                                    //new_workflow_cat.Name = new_workflow_cat.Code;
                                    //new_workflow_cat.IsDefault = false;
                                    //new_workflow_cat.Description = "";
                                    //new_workflow_cat.Active = true;
                                    //new_workflow_cat.CreatedDate = DateTime.Now;
                                    //new_workflow_cat.CreatedById = parameter.UserId;
                                    //new_workflow_cat.ParentId = null;

                                    //context.ProductOrderWorkflow.Add(new_workflow_cat);
                                    //context.SaveChanges();

                                    ////Thêm tiến trình Cắt vào bảng mapping giữa quy trình và tiến trình
                                    //var _new_mapping = new OrderTechniqueMapping();
                                    //_new_mapping.OrderTechniqueMappingId = Guid.NewGuid();
                                    //_new_mapping.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    //_new_mapping.TechniqueRequestId = cat.TechniqueRequestId;
                                    //_new_mapping.TechniqueOrder = 1;
                                    //_new_mapping.Rate = 1;
                                    //_new_mapping.IsDefault = true;
                                    //_new_mapping.Active = true;
                                    //_new_mapping.CreatedDate = DateTime.Now;
                                    //_new_mapping.CreatedById = parameter.UserId;

                                    //context.OrderTechniqueMapping.Add(_new_mapping);
                                    //context.SaveChanges();

                                    ////Lúc này trường IsParent = true
                                    //item.IsSubParent = true;
                                    //item.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");

                                    //#region Thêm bán thành phẩm Cắt 1

                                    //var item_cat_1 = new ProductionOrderMapping();
                                    //item_cat_1.ProductionOrderMappingId = Guid.NewGuid();
                                    //item_cat_1.ParentId = null;
                                    //item_cat_1.ProductionOrderId = item.ProductionOrderId;
                                    //item_cat_1.ProductName = "Cắt 1";
                                    //item_cat_1.ProductColor = item.ProductColor;
                                    //item_cat_1.ProductColorCode = item.ProductColorCode;
                                    //item_cat_1.ProductThickness = item.ProductThickness;
                                    //item_cat_1.ProductLength = item.ProductLength;
                                    //item_cat_1.ProductWidth = item.ProductWidth;
                                    //item_cat_1.Quantity = item.Quantity;
                                    //item_cat_1.TotalArea = item.TotalArea;
                                    //item_cat_1.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    //item_cat_1.StatusId = item_status_new;
                                    //item_cat_1.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    //item_cat_1.Borehole = item.Borehole;
                                    //item_cat_1.Hole = item.Hole;
                                    //item_cat_1.ProductGroupCode = "";
                                    //item_cat_1.IsParent = false;
                                    //item_cat_1.IsSubParent = false;
                                    //item_cat_1.StartId = cat.TechniqueRequestId;
                                    //item_cat_1.ParentPartId = item.ProductionOrderMappingId;
                                    //item_cat_1.CreatedDate = DateTime.Now;
                                    //item_cat_1.CreatedById = parameter.UserId;

                                    //context.ProductionOrderMapping.Add(item_cat_1);
                                    //context.SaveChanges();

                                    ////Thêm vào bảng mapping giữa tiến trình và item
                                    //var new_add_cat_1 = new TechniqueRequestMapping();
                                    //new_add_cat_1.TechniqueRequestMappingId = Guid.NewGuid();
                                    //new_add_cat_1.ProductionOrderMappingId = item_cat_1.ProductionOrderMappingId;
                                    //new_add_cat_1.TechniqueRequestId = cat.TechniqueRequestId;
                                    //new_add_cat_1.Rate = 1;
                                    //new_add_cat_1.TechniqueName = cat.TechniqueName;
                                    //new_add_cat_1.TechniqueOrder = 1;
                                    //new_add_cat_1.TechniqueValue = 0;
                                    //new_add_cat_1.IsDefault = true;
                                    //new_add_cat_1.CreatedDate = DateTime.Now;
                                    //new_add_cat_1.CreatedById = parameter.UserId;

                                    //context.TechniqueRequestMapping.Add(new_add_cat_1);
                                    //context.SaveChanges();

                                    //#endregion

                                    //#region Thêm bán thành phẩm Cắt 2

                                    //var item_cat_2 = new ProductionOrderMapping();
                                    //item_cat_2.ProductionOrderMappingId = Guid.NewGuid();
                                    //item_cat_2.ParentId = null;
                                    //item_cat_2.ProductionOrderId = item.ProductionOrderId;
                                    //item_cat_2.ProductName = "Cắt 2";
                                    //item_cat_2.ProductColor = item.ProductColor;
                                    //item_cat_2.ProductColorCode = item.ProductColorCode;
                                    //item_cat_2.ProductThickness = item.ProductThickness;
                                    //item_cat_2.ProductLength = item.ProductLength;
                                    //item_cat_2.ProductWidth = item.ProductWidth;
                                    //item_cat_2.Quantity = item.Quantity;
                                    //item_cat_2.TotalArea = item.TotalArea;
                                    //item_cat_2.TechniqueDescription = item.TechniqueDescription.Replace("-CH", "");
                                    //item_cat_2.StatusId = item_status_new;
                                    //item_cat_2.ProductOrderWorkflowId = new_workflow_cat.ProductOrderWorkflowId;
                                    //item_cat_2.Borehole = item.Borehole;
                                    //item_cat_2.Hole = item.Hole;
                                    //item_cat_2.ProductGroupCode = "";
                                    //item_cat_2.IsParent = false;
                                    //item_cat_2.IsSubParent = false;
                                    //item_cat_2.StartId = cat.TechniqueRequestId;
                                    //item_cat_2.ParentPartId = item.ProductionOrderMappingId;
                                    //item_cat_2.CreatedDate = DateTime.Now;
                                    //item_cat_2.CreatedById = parameter.UserId;

                                    //context.ProductionOrderMapping.Add(item_cat_2);
                                    //context.SaveChanges();

                                    ////Thêm vào bảng mapping giữa tiến trình và item
                                    //var new_add_cat_2 = new TechniqueRequestMapping();
                                    //new_add_cat_2.TechniqueRequestMappingId = Guid.NewGuid();
                                    //new_add_cat_2.ProductionOrderMappingId = item_cat_2.ProductionOrderMappingId;
                                    //new_add_cat_2.TechniqueRequestId = cat.TechniqueRequestId;
                                    //new_add_cat_2.Rate = 1;
                                    //new_add_cat_2.TechniqueName = cat.TechniqueName;
                                    //new_add_cat_2.TechniqueOrder = 1;
                                    //new_add_cat_2.TechniqueValue = 0;
                                    //new_add_cat_2.IsDefault = true;
                                    //new_add_cat_2.CreatedDate = DateTime.Now;
                                    //new_add_cat_2.CreatedById = parameter.UserId;

                                    //context.TechniqueRequestMapping.Add(new_add_cat_2);
                                    //context.SaveChanges();

                                    //#endregion
                                }

                                #endregion
                            }
                        }
                    });

                    var listOriginalItemId = parameter.ListItemInfor.Where(x => x.IsOriginal == true)
                        .Select(y => y.ProductionOrderMappingId).ToList();

                    //Đổi trạng thái của bảng lưu Item cắt hạ
                    var listItemCatHa =
                        context.MinusItemMapping.Where(x =>
                            listOriginalItemId.Contains(x.ProductionOrderMappingId.Value)).ToList();
                    listItemCatHa.ForEach(item => { item.IsWork = true; });
                    context.MinusItemMapping.UpdateRange(listItemCatHa);
                    context.SaveChanges();

                    transaction.Commit();

                    return new SaveCatHaResult()
                    {
                        Status = true,
                        Message = "Success"
                    };
                }
            }
            catch (Exception e)
            {
                return new SaveCatHaResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }

        public GetListWorkflowByIdResult GetListWorkflowById(GetListWorkflowByIdParameter parameter)
        {
            try
            {
                var listWorkflow = "";
                var listTech = context.OrderTechniqueMapping
                    .Where(x => x.ProductOrderWorkflowId == parameter.ProductOrderWorkflowId)
                    .OrderBy(z => z.TechniqueOrder).Select(y => y.TechniqueRequestId).ToList();

                var listAllTech = context.TechniqueRequest.ToList();
                var listTechInfor = new List<TechniqueRequestEntityModel>();
                listTech.ForEach(tech =>
                {
                    var _tech = new TechniqueRequestEntityModel();
                    _tech = listAllTech.Where(x => x.TechniqueRequestId == tech).Select(y => new TechniqueRequestEntityModel
                    {
                        TechniqueRequestId = y.TechniqueRequestId,
                        TechniqueName = y.TechniqueName
                    }).FirstOrDefault();
                    listTechInfor.Add(_tech);
                });

                var count = listTechInfor.Count;
                for (var i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        listWorkflow = listTechInfor[i].TechniqueName;
                    }
                    else
                    {
                        listWorkflow += " --> " + listTechInfor[i].TechniqueName;
                    }
                }

                return new GetListWorkflowByIdResult()
                {
                    Status = true,
                    Message = "Success",
                    ListWorkflow = listWorkflow
                };
            }
            catch (Exception e)
            {
                return new GetListWorkflowByIdResult()
                {
                    Status = false,
                    Message = e.Message
                };
            }
        }
    }

    public class TotaProductionOrderlModel
    {
        public Guid TotalProductionOrderId { get; set; }
        public Guid ProductionOrderId { get; set; }
        public string TotalProductionOrderCode { get; set; }
    }

    public class ItemHistory
    {
        public Guid ProductionOrderMappingId { get; set; }
        public Guid TechniqueRequestId { get; set; }
        public double Area { get; set; }
        public bool CalculatorType { get; set; }
    }
}

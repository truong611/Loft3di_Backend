using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using OfficeOpenXml;
using TN.TNM.Common;
using TN.TNM.DataAccess.Databases.Entities;
using TN.TNM.DataAccess.Helper;
using TN.TNM.DataAccess.Interfaces;
using TN.TNM.DataAccess.Messages.Parameters.Contract;
using TN.TNM.DataAccess.Messages.Parameters.Employee;
using TN.TNM.DataAccess.Messages.Results.CustomerCare;
using TN.TNM.DataAccess.Messages.Results.Employee;
using TN.TNM.DataAccess.Models;
using TN.TNM.DataAccess.Models.Address;
using TN.TNM.DataAccess.Models.DynamicColumnTable;
using TN.TNM.DataAccess.Models.Employee;
using TN.TNM.DataAccess.Models.Folder;
using TN.TNM.DataAccess.Models.Note;
using TN.TNM.DataAccess.Models.Quote;
using TN.TNM.DataAccess.Models.User;
using TN.TNM.DataAccess.ConstType.Contact;
using TN.TNM.DataAccess.Models.ChamCong;
using TN.TNM.DataAccess.Models.CauHinhNghiLe;
using TN.TNM.DataAccess.Models.CauHinhOtMođel;
using TN.TNM.DataAccess.Models.GiamTru;
using TN.TNM.DataAccess.Models.OT;
using TN.TNM.DataAccess.Messages.Parameters.QuyTrinh;
using TN.TNM.DataAccess.Messages.Results.Asset;
using TN.TNM.Common.NotificationSetting;
using KellermanSoftware.CompareNetObjects;
using TN.TNM.DataAccess.Models.Salary;
using TN.TNM.DataAccess.ConstType.Note;

namespace TN.TNM.DataAccess.Databases.DAO
{
    public class EmployeeDAO : BaseDAO, IEmployeeDataAccess
    {
        private readonly IHostingEnvironment hostingEnvironment;

        public EmployeeDAO(Databases.TNTN8Context _content, IAuditTraceDataAccess _iAuditTrace, IHostingEnvironment _hostingEnvironment)
        {
            this.context = _content;
            this.iAuditTrace = _iAuditTrace;
            this.hostingEnvironment = _hostingEnvironment;
        }

        public CreateEmployeeResult CreateEmployee(CreateEmployeeParameter parameter)
        {
            Employee employee = parameter.Employee.ToEntity();
            Contact contact = parameter.Contact.ToEntity();
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    var lstEmp = context.Employee.ToList();

                    var empCode = parameter.Employee.EmployeeCode;
                    User user = new User()
                    {
                        Disabled = parameter.User.Disabled != null ? parameter.User.Disabled.Value : false,
                        ResetCode = parameter.User.ResetCode,
                        ResetCodeDate = parameter.User.ResetCodeDate
                    };

                    var passDefault = context.SystemParameter.FirstOrDefault(x => x.SystemKey == "DefaultUserPassword")
                        ?.SystemValueString?.Trim();

                    if (string.IsNullOrWhiteSpace(passDefault))
                    {
                        return new CreateEmployeeResult()
                        {
                            MessageCode = "Chưa cấu hình mật khẩu mặc định trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }

                   

                    #region Thêm Chi nhánh cho nhân viên (nếu có Chi nhánh)

                    var branch = context.Branch.FirstOrDefault();
                    employee.BranchId = branch?.BranchId;

                    #endregion

                    employee.EmployeeId = Guid.NewGuid();
                    employee.EmployeeName = parameter.Contact.FirstName?.Trim() + " " + parameter.Contact.LastName?.Trim();
                    employee.HoTenTiengAnh = parameter.Employee.HoTenTiengAnh;
                    employee.CreatedDate = DateTime.Now;
                    employee.CreatedById = parameter.UserId;
                    employee.IsManager = false;
                    employee.MucPhi = employee.MucPhi != null ? employee.MucPhi : 0;
                    //employee.EmployeeCode = parameter.Employee.EmployeeCode;

                    #region Các phòng ban mà nhân viên trực thuộc

                    var listThanhVienPhongBan = new List<ThanhVienPhongBan>();

                    parameter.ListPhongBanId.ForEach(item =>
                    {
                        var thanhVienPhongBan = new ThanhVienPhongBan();
                        thanhVienPhongBan.Id = Guid.NewGuid();
                        thanhVienPhongBan.EmployeeId = employee.EmployeeId;
                        thanhVienPhongBan.OrganizationId = item;

                        listThanhVienPhongBan.Add(thanhVienPhongBan);
                    });

                    context.ThanhVienPhongBan.AddRange(listThanhVienPhongBan);

                    if (listThanhVienPhongBan.Count > 0)
                    {
                        employee.OrganizationId = listThanhVienPhongBan[0].OrganizationId;
                    }

                    #endregion

                    var tenGoi = LocDau(parameter.Contact.FirstName);
                    var hoTenDem = LocDau(parameter.Contact.LastName);
                    var newUserName = hoTenDem + tenGoi;
                    newUserName = String.Concat(newUserName.Where(c => !Char.IsWhiteSpace(c)));

                    //var newUserName = parameter.User.UserName.Trim();
                    //Tạo nhân viên từ Tuyển dụng
                    if (parameter.IsAuto == true)
                    {
                        if (string.IsNullOrWhiteSpace(parameter.User.UserName))
                        {
                            return new CreateEmployeeResult()
                            {
                                MessageCode = "Tên tài khoản không được để trống",
                                StatusCode = HttpStatusCode.ExpectationFailed,
                            };
                        }

                        // Update trạng thái ứng viên
                        var candidate = context.Candidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateId);
                        if (candidate != null)
                        {
                            var cateTypeTVId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LVI")
                                .CategoryTypeId;
                            var cateTVId = context.Category
                                .FirstOrDefault(x => x.CategoryTypeId == cateTypeTVId && x.CategoryCode == "TVI")
                                .CategoryTypeId;

                            candidate.Status = 7;
                            parameter.Employee.ContractType = cateTVId;
                            context.Candidate.Update(candidate);
                            context.SaveChanges();

                            if (string.IsNullOrWhiteSpace(parameter.Employee.EmployeeCode) || parameter.Employee.EmployeeCode == "")
                            {
                                employee.EmployeeCode = GenCodeEmployee();
                            }

                            var lstEmpDuplicate = lstEmp.Where(x => x.EmployeeCode != null && x.EmployeeCode.Contains(employee.EmployeeCode)).ToList();
                            if (lstEmpDuplicate.Count() > 0)
                            {
                                parameter.Employee.EmployeeCode = empCode + lstEmpDuplicate.Count().ToString();
                            }

                            employee.NguonTuyenDungId = candidate.RecruitmentChannelId == null ? Guid.Empty : candidate.RecruitmentChannelId.Value;
                            employee.PositionId = null;

                            // Trình độ học vấn
                            var overView = context.OverviewCandidate.FirstOrDefault(x => x.CandidateId == candidate.CandidateId && x.Type == "HV");
                            if (overView != null)
                            {
                                employee.BangCapCaoNhatDatDuocId = overView.CertificateId;
                                employee.TenTruongHocCaoNhat = overView.CertificatePlace;
                                employee.ChuyenNganhHoc = overView.SpecializedTraining;
                                employee.BangCapCaoNhatDatDuocId = overView.CertificateId;
                            }

                            newUserName = GenUserName(parameter.User.UserName.Trim());
                        }
                    }

                    //Tạo nhân viên trực tiếp
                    if (parameter.IsAuto == false)
                    {
                        var employeeDupblicase =
                            lstEmp.FirstOrDefault(x => x.EmployeeCode == parameter.Employee.EmployeeCode);
                        if (employeeDupblicase != null)
                        {
                            return new CreateEmployeeResult
                            {
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                                MessageCode = "Mã nhân viên đã tồn tại"
                            };
                        }

                        // check trung ten tai khoan
                        var lstUser = context.User.ToList();
                        var duplicateUser = lstUser.FirstOrDefault(x => x.UserName == newUserName.Trim());
                        if (duplicateUser != null)
                        {
                            var lstUserNameSame = lstUser.Where(x => x.UserName.Contains(newUserName)).ToList();
                            if (lstUserNameSame.Count() > 0)
                            {
                                newUserName = newUserName + lstUserNameSame.Count().ToString();
                            }
                        }

                        //Check trùng email cty
                        var duplicateWorkEmail = context.Contact.FirstOrDefault(x => 
                                        x.WorkEmail.ToUpper().Trim() == (newUserName + "@loft3di.com.vn").ToUpper().Trim());
                        if (duplicateWorkEmail != null)
                        {
                            return new CreateEmployeeResult
                            {
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                                MessageCode = "Email công ty đã tồn tại trên hệ thống!"
                            };
                        }
                    }
                    contact.WorkEmail = newUserName + "@loft3di.com.vn";
                    context.Employee.Add(employee);
                    context.SaveChanges();

                    contact.ContactId = Guid.NewGuid();
                    contact.FirstName = parameter.Contact.FirstName?.Trim();
                    contact.LastName = parameter.Contact.LastName?.Trim();
                    contact.IdentityId = parameter.Contact.IdentityId != null ? parameter.Contact.IdentityId.Trim() : null;
                    contact.Email = parameter.Contact.Email == null ? null : parameter.Contact.Email.Trim();
                    contact.ObjectId = employee.EmployeeId;
                    contact.ObjectType = ObjectType.EMPLOYEE;
                    contact.CreatedDate = DateTime.Now;
                    contact.CreatedById = parameter.UserId;

                    user.EmployeeId = employee.EmployeeId;
                    user.UserName = newUserName;
                    user.Password = AuthUtil.GetHashingPassword(passDefault);
                    user.CreatedDate = DateTime.Now;
                    user.Active = parameter.IsAccessable;
                    user.CreatedById = parameter.UserId;

                    //Tạo nhân viên từ Tuyển dụng
                    if (parameter.IsAuto == true)
                    {
                        var candidate = context.Candidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateId);
                        if (candidate != null)
                        {
                            contact.DateOfBirth = candidate.DateOfBirth;
                            contact.Phone = candidate.Phone;
                            contact.Email = candidate.Email;
                            contact.Address = candidate.Address;
                        }
                    }
                    context.Contact.Add(contact);
                    context.SaveChanges();

                    context.User.Add(user);
                    context.SaveChanges();

                    #region Upload file

                    if (parameter.FileBase64 != null && !String.IsNullOrWhiteSpace(parameter.FileBase64.Base64))
                    {
                        var folder = context.Folder.FirstOrDefault(x => x.FolderType == "QLNV");

                        if (folder != null)
                        {
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);

                            //Lưu file
                            var file = new FileInFolder()
                            {
                                Active = true,
                                CreatedById = Guid.Empty,
                                CreatedDate = DateTime.Now,
                                FileInFolderId = Guid.NewGuid(),
                                FileName = employee.EmployeeName?.Trim() + "_" + Guid.NewGuid(),
                                FolderId = folder.FolderId,
                                ObjectId = employee.EmployeeId,
                                ObjectType = "AVATAR",
                                Size = "0",
                                FileExtension = parameter.FileBase64.Extension
                            };

                            context.FileInFolder.Add(file);
                            context.SaveChanges();

                            var fileName = file.FileName + "." + parameter.FileBase64.Extension;

                            string fullPath = Path.Combine(newPath, fileName);
                            var bytes = Convert.FromBase64String(parameter.FileBase64.Base64);
                            using (var imageFile = new FileStream(fullPath, FileMode.Create))
                            {
                                imageFile.Write(bytes, 0, bytes.Length);
                                imageFile.Flush();
                            }
                        }
                    }

                    #endregion

                    transaction.Commit();
                }
            }
            catch (Exception e)
            {
                return new CreateEmployeeResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }

            #region SEND MAIL
            //gửi mail tới nhân viên được tạo 
            NotificationHelper.AccessNotification(context, "EMPLOYEE", "CRE", new Employee(), employee, true);

            //gửi mail tới những người liên quan (HR,..)
            NotificationHelper.AccessNotification(context, "EMPLOYEE", "EMPLOYEE_CREATE", new Employee(), employee, true);

            #endregion

            return new CreateEmployeeResult
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                MessageCode = CommonMessage.Employee.CREATE_SUCCESS,
                EmployeeId = employee.EmployeeId,
                ContactId = contact.ContactId,
            };
        }

        public SearchEmployeeResult SearchEmployee(SearchEmployeeParameter parameter)
        {
            try
            {
                this.iAuditTrace.Trace(ActionName.SEARCH, ObjectName.EMPLOYEE, "Search employee", parameter.UserId);
                var currentUserEmpId = context.User.FirstOrDefault(u => u.UserId == parameter.UserId).EmployeeId;
                var currentUserOrgId = context.Employee.FirstOrDefault(u => u.EmployeeId == currentUserEmpId).OrganizationId;
                var listGetAllChild = new List<Guid>();
                var organizations = context.Organization.ToList();
                if (parameter.OrganizationId != null)
                {
                    listGetAllChild = ListChildOfParamToSearch(parameter.OrganizationId.Value, organizations);
                    listGetAllChild.Add(parameter.OrganizationId.Value);
                }
                //var orgIdList = context.Organization.Where(o => o.ParentId == currentUserOrgId).Select(o => o.OrganizationId).ToList();

                var employeeList = (from c in context.Contact
                                    join e in context.Employee on c.ObjectId equals e.EmployeeId
                                    join u in context.User on c.ObjectId equals u.EmployeeId into cu
                                    from x in cu.DefaultIfEmpty()
                                    where (e.Active == true) &&
                                          (c.FirstName.ToLower().Contains(parameter.FirstName.ToLower().Trim()) || parameter.FirstName == null || parameter.FirstName.Trim() == "") &&
                                                (c.LastName.ToLower().Contains(parameter.LastName.ToLower().Trim()) || parameter.LastName == null || parameter.LastName.Trim() == "") &&
                                                (e.EmployeeCode.ToLower().Contains(parameter.IdentityId.ToLower().Trim()) || parameter.IdentityId == null || parameter.IdentityId.Trim() == "") &&
                                                (x.UserName.ToLower().Contains(parameter.UserName.ToLower().Trim()) || parameter.UserName == null || parameter.UserName.Trim() == "") &&
                                          //e.EmployeeId != currentUserEmpId &&
                                          //e.CreatedById == parameter.UserId &&
                                          (parameter.OrganizationId == null || listGetAllChild.Contains(e.OrganizationId.Value)) &&
                                          (parameter.ListPosition.Count == 0 || parameter.ListPosition.Contains(e.PositionId.Value) || e.PositionId == null)
                                    select new EmployeeEntityModel
                                    {
                                        EmployeeId = e.EmployeeId,
                                        ContactId = c.ContactId,
                                        EmployeeName = e.EmployeeName,
                                        Username = x == null ? "" : x.UserName,
                                        OrganizationId = e.OrganizationId,
                                        OrganizationName = organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId) == null ? "" : organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId).OrganizationName,
                                        Identity = c.IdentityId,
                                        EmployeeCode = e.EmployeeCode,
                                        AvatarUrl = c.AvatarUrl,
                                        PositionId = e.PositionId,
                                        CreatedById = e.CreatedById,
                                        CreatedDate = e.CreatedDate,
                                        LastName = c.LastName,
                                        SoPhepConLai = e.SoNgayPhepConLai
                                    }).OrderBy(x => x.LastName).ToList();

                //var isManager = context.Employee.FirstOrDefault(e => e.EmployeeId == currentUserEmpId).IsManager;
                //employeeList = !isManager
                //    ? employeeList.Where(emp => emp.OrganizationId == currentUserOrgId || emp.CreatedById == parameter.UserId).ToList()
                //    : employeeList.Where(emp =>
                //        orgIdList.Any(id => id == emp.OrganizationId.Value) || emp.OrganizationId == currentUserOrgId || emp.CreatedById == parameter.UserId).ToList();

                return new SearchEmployeeResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    EmployeeList = employeeList
                };
            }
            catch (Exception e)
            {
                return new SearchEmployeeResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        private List<Guid> ListChildOfParamToSearch(Guid orgId, List<Organization> organizations)
        {
            //var orgParam = context.Organization.FirstOrDefault(org => org.OrganizationId == orgId);
            var _listOrgIdChild = organizations.Where(o => o.ParentId == orgId).Select(id => id.OrganizationId).ToList();
            var _tmpOrgId = new List<Guid>();
            _listOrgIdChild.ForEach(_orgId =>
            {
                _tmpOrgId.Add(_orgId);
                ListChildOfParamToSearch(_orgId, organizations).ForEach(child =>
                {
                    _tmpOrgId.Add(child);
                });
            });
            return _tmpOrgId;
        }

        public GetAllEmployeeResult GetAllEmployee(GetAllEmployeeParameter parameter)
        {
            try
            {
                var empList = context.Employee.Where(e => e.Active == true).Select(y => new EmployeeEntityModel
                {
                    EmployeeId = y.EmployeeId,
                    EmployeeCode = y.EmployeeCode,
                    EmployeeName = y.EmployeeName,
                    EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName
                }).OrderBy(z => z.EmployeeName).ToList();

                return new GetAllEmployeeResult
                {
                    EmployeeList = empList,
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetAllEmployeeResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetEmployeeByIdResult GetEmployeeById(GetEmployeeByIdParameter parameter)
        {
            try
            {
                this.iAuditTrace.Trace(ActionName.GETBYID, ObjectName.EMPLOYEE, "Get Employee by Id", parameter.UserId);
                var employee = context.Employee.FirstOrDefault(e => e.EmployeeId == parameter.EmployeeId);
                var userDisable = context.User.FirstOrDefault(e => e.EmployeeId == parameter.EmployeeId).Disabled;
                Contact contact;
                if (parameter.ContactId == Guid.Empty)
                    contact = context.Contact.FirstOrDefault(c => c.ObjectId == parameter.EmployeeId);
                else
                    contact = context.Contact.FirstOrDefault(c => c.ContactId == parameter.ContactId);
                var user = context.User.FirstOrDefault(u => u.EmployeeId == parameter.EmployeeId);
                var permissionMapping = context.PermissionMapping.FirstOrDefault(pm => pm.UserId == user.UserId);
                Guid permissionSetId;
                if (permissionMapping == null)
                    permissionSetId = Guid.Empty;
                else
                    permissionSetId = permissionMapping.PermissionSetId;
                string employeeName = employee?.EmployeeName;
                string phone = contact?.Phone;
                string gender = contact?.Gender;
                string email = contact?.Email;
                DateTime? dob = contact?.DateOfBirth;
                string identity = contact?.IdentityId;
                string positionname = context.Position.FirstOrDefault(p => p.PositionId == employee.PositionId)?.PositionName;
                string organizationName = context.Organization.FirstOrDefault(o => o.OrganizationId == employee.OrganizationId)?.OrganizationName;
                string username = user?.UserName;
                DateTime? startDate = employee?.StartedDate;
                string avatarUrl = contact?.AvatarUrl;

                var role = context.UserRole.FirstOrDefault(e => e.UserId == user.UserId);

                EmployeeEntityModel emp = new EmployeeEntityModel()
                {
                    EmployeeId = employee.EmployeeId,
                    EmployeeCode = employee.EmployeeCode,
                    EmployeeName = employeeName,
                    Username = username,
                    PositionId = employee.PositionId,
                    PositionName = positionname,
                    OrganizationId = employee.OrganizationId,
                    OrganizationName = organizationName,
                    StartedDate = startDate,
                    CreatedDate = employee.CreatedDate,
                    CreatedById = employee.CreatedById,
                    Active = employee.Active,
                    IsManager = employee.IsManager,
                    PermissionSetId = permissionSetId,
                    ProbationEndDate = employee.ProbationEndDate,
                    ProbationStartDate = employee.ProbationStartDate,
                    TrainingStartDate = employee.TrainingStartDate,
                    AvatarUrl = contact.AvatarUrl,
                    ContractType = employee.ContractType,
                    ContractEndDate = employee.ContractEndDate,
                    ActiveUser = userDisable,
                    RoleId = role == null ? null : role.RoleId,
                    IsTakeCare = employee.IsTakeCare
                };

                ContactEntityModel con = new ContactEntityModel()
                {
                    ContactId = contact.ContactId,
                    ObjectId = contact.ObjectId,
                    ObjectType = contact.ObjectType,
                    FirstName = contact.FirstName,
                    LastName = contact.LastName,
                    IdentityId = identity,
                    Phone = phone,
                    Gender = gender,
                    Email = email,
                    DateOfBirth = dob,
                    AvatarUrl = avatarUrl,
                    CreatedDate = contact.CreatedDate,
                    CreatedById = contact.CreatedById,
                    Active = contact.Active,
                    Note = contact.Note,
                    Address = contact.Address,
                    CountryId = contact.CountryId,
                    HealthInsuranceDateOfIssue = contact.HealthInsuranceDateOfIssue,
                    HealthInsuranceDateOfParticipation = contact.HealthInsuranceDateOfParticipation,
                    HealthInsuranceNumber = contact.HealthInsuranceNumber,
                    IdentityIddateOfIssue = contact.IdentityIddateOfIssue,
                    IdentityIddateOfParticipation = contact.IdentityIddateOfParticipation,
                    IdentityIdplaceOfIssue = contact.IdentityIdplaceOfIssue,
                    SocialInsuranceDateOfIssue = contact.SocialInsuranceDateOfIssue,
                    SocialInsuranceDateOfParticipation = contact.SocialInsuranceDateOfParticipation,
                    SocialInsuranceNumber = contact.SocialInsuranceNumber,
                    VisaDateOfIssue = contact.VisaDateOfIssue,
                    WorkPermitNumber = contact.WorkPermitNumber,
                    VisaExpirationDate = contact.VisaExpirationDate,
                    VisaNumber = contact.VisaNumber,
                    TypePaid = contact.TypePaid,
                    WorkHourOfEnd = contact.WorkHourOfEnd,
                    WorkHourOfStart = contact.WorkHourOfStart
                };

                UserEntityModel us = new UserEntityModel()
                {
                    UserId = user.UserId,
                    UserName = username,
                    EmployeeId = user.EmployeeId,
                    Active = user.Active,
                    Password = user.Password,
                    CreatedDate = user.CreatedDate,
                    CreatedById = user.CreatedById
                };

                return new GetEmployeeByIdResult()
                {
                    Employee = emp,
                    Contact = con,
                    User = us,
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeByIdResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public EditEmployeeByIdResult EditEmployeeById(EditEmployeeByIdParameter parameter)
        {
            try
            {

                Employee employee = context.Employee.FirstOrDefault(c => c.EmployeeId == parameter.Employee.EmployeeId);
                if (employee == null)
                {
                    return new EditEmployeeByIdResult
                    {
                        MessageCode = "Employee không tồn tại trong hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
                employee.Active = parameter.Employee.Active;
                employee.StartedDate = parameter.Employee.StartedDate;
                employee.ContractEndDate = parameter.Employee.ContractEndDate;
                employee.ProbationEndDate = parameter.Employee.ProbationEndDate;
                employee.ProbationStartDate = parameter.Employee.ProbationStartDate;
                employee.IsTakeCare = parameter.Employee.IsTakeCare ?? false;
                employee.IsCashier = parameter.Employee.IsCashier;
                employee.PositionId = parameter.Employee.PositionId;
                employee.IsOrder = parameter.Employee.IsOrder;
                employee.OrganizationId = parameter.Employee.OrganizationId;
                employee.ContractType = parameter.Employee.ContractType;
                employee.EmployeeCode = parameter.Employee.EmployeeCode;
                employee.TrainingStartDate = parameter.Employee.TrainingStartDate;
                Contact contact = context.Contact.FirstOrDefault(c => c.ContactId == parameter.Contact.ContactId);
                if (contact == null)
                {
                    return new EditEmployeeByIdResult
                    {
                        MessageCode = "Contact không tồn tại trong hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                contact.AccountNumber = parameter.Contact.AccountNumber;
                contact.Active = parameter.Contact.Active;
                contact.Address = parameter.Contact.Address;
                contact.CompanyAddress = parameter.Contact.CompanyAddress;
                contact.Agency = parameter.Contact.Agency;
                contact.AvatarUrl = parameter.Contact.AvatarUrl;
                contact.BankCode = parameter.Contact.BankCode;
                contact.BankName = parameter.Contact.BankName;
                contact.BankId = parameter.Contact.BankId;
                contact.Birthplace = parameter.Contact.Birthplace;
                contact.BranchName = parameter.Contact.BranchName;
                contact.CompanyName = parameter.Contact.CompanyName;
                contact.CountryId = parameter.Contact.CountryId;
                contact.CustomerPosition = parameter.Contact.CustomerPosition;
                contact.DateOfBirth = parameter.Contact.DateOfBirth;
                contact.DefaultAccount = parameter.Contact.DefaultAccount;
                contact.DistrictId = parameter.Contact.DistrictId;
                contact.Email = parameter.Contact.Email;
                contact.EvaluateContactPeople = parameter.Contact.EvaluateContactPeople;
                contact.FirstName = parameter.Contact.FirstName;
                contact.Gender = parameter.Contact.Gender;
                contact.GeographicalAreaId = parameter.Contact.GeographicalAreaId;
                contact.HealthInsuranceDateOfIssue = parameter.Contact.HealthInsuranceDateOfIssue;
                contact.HealthInsuranceDateOfParticipation = parameter.Contact.HealthInsuranceDateOfParticipation;
                contact.HealthInsuranceNumber = parameter.Contact.HealthInsuranceNumber;
                contact.IdentityIddateOfIssue = parameter.Contact.IdentityIddateOfIssue;
                contact.IdentityIddateOfParticipation = parameter.Contact.IdentityIddateOfParticipation;
                contact.IdentityIdplaceOfIssue = parameter.Contact.IdentityIdplaceOfIssue;
                contact.Job = parameter.Contact.Job;
                contact.Latitude = parameter.Contact.Latitude;
                contact.LinkFace = parameter.Contact.LinkFace;
                contact.Longitude = parameter.Contact.Longitude;
                contact.MaritalStatusId = parameter.Contact.MaritalStatusId;
                contact.WorkHourOfStart = parameter.Contact.WorkHourOfStart;
                contact.MoneyLimit = parameter.Contact.MoneyLimit;
                contact.Note = parameter.Contact.Note;
                contact.OptionPosition = parameter.Contact.OptionPosition;
                contact.Other = parameter.Contact.Other;
                contact.OtherEmail = parameter.Contact.OtherEmail;
                contact.OtherPhone = parameter.Contact.OtherPhone;
                contact.Phone = parameter.Contact.Phone;
                contact.PostCode = parameter.Contact.PostCode;
                contact.PotentialCustomerPosition = parameter.Contact.PotentialCustomerPosition;
                contact.ProvinceId = parameter.Contact.ProvinceId;
                contact.RelationShip = parameter.Contact.RelationShip;
                contact.Role = parameter.Contact.Role;
                contact.SocialInsuranceDateOfIssue = parameter.Contact.SocialInsuranceDateOfIssue;
                contact.SocialInsuranceDateOfParticipation = parameter.Contact.SocialInsuranceDateOfParticipation;
                contact.SocialInsuranceNumber = parameter.Contact.SocialInsuranceNumber;
                contact.SocialUrl = parameter.Contact.SocialUrl;
                contact.TaxCode = parameter.Contact.TaxCode;
                contact.TermsPayment = parameter.Contact.TermsPayment;
                contact.TypePaid = parameter.Contact.TypePaid;
                contact.VisaDateOfIssue = parameter.Contact.VisaDateOfIssue;
                contact.VisaExpirationDate = parameter.Contact.VisaExpirationDate;
                contact.VisaNumber = parameter.Contact.VisaNumber;
                contact.WardId = parameter.Contact.WardId;
                contact.WebsiteUrl = parameter.Contact.WebsiteUrl;
                contact.WorkEmail = parameter.Contact.WorkEmail;
                contact.WorkHourOfEnd = parameter.Contact.WorkHourOfEnd;
                contact.WorkPermitNumber = parameter.Contact.WorkPermitNumber;
                contact.WorkPhone = parameter.Contact.WorkPhone;

                User user = context.User.FirstOrDefault(c => c.UserId == parameter.User.UserId);
                user.Disabled = parameter.User.Disabled.Value;
                user.IsAdmin = parameter.User.IsAdmin;
                user.ResetCode = parameter.User.ResetCode;
                user.ResetCodeDate = parameter.User.ResetCodeDate;
                if (parameter.IsResetPass)
                {
                    var defaultPass = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "DefaultUserPassword")
                        .SystemValueString;
                    user.Password = AuthUtil.GetHashingPassword(defaultPass);
                    user.UpdatedById = parameter.UserId;
                    context.User.Update(user);
                    context.SaveChanges();
                }
                else
                {
                    #region Thêm Chi nhánh cho nhân viên (nếu có Chi nhánh)

                    var branch = context.Branch.FirstOrDefault();
                    employee.BranchId = branch?.BranchId;

                    #endregion

                    // Update ngay edit, nguoi edit
                    employee.EmployeeName =
                        parameter.Contact.FirstName.Trim() + " " + parameter.Contact.LastName.Trim();
                    employee.UpdatedById = parameter.UserId;
                    employee.UpdatedDate = DateTime.Now;
                    contact.UpdatedById = parameter.UserId;
                    contact.UpdatedDate = DateTime.Now;
                    //parameter.User.UpdatedById = parameter.UserId;
                    //parameter.User.UpdatedDate = DateTime.Now;

                    // Do khi mapping entity Password bị reset mà chưa biết lý do tại sao lại mã hóa như vậy nên fix code ở đây
                    var oldUser = context.User.FirstOrDefault(x => x.UserId == parameter.User.UserId);
                    oldUser.UpdatedById = parameter.UserId;
                    oldUser.UpdatedDate = DateTime.Now;
                    oldUser.EmployeeId = parameter.User.EmployeeId;
                    oldUser.Active = parameter.User.Active;

                    //Update db
                    context.Employee.Update(employee);
                    context.Contact.Update(contact);
                    context.User.Update(oldUser);
                    context.SaveChanges();
                }
            }
            catch (Exception e)
            {
                return new EditEmployeeByIdResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }

            #region Get Employee Infor to send email

            NotificationHelper.AccessNotification(context, "EMPLOYEE_DETAIL", "RESET", new User(), parameter.User, true);

            #endregion

            return new EditEmployeeByIdResult()
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                MessageCode = CommonMessage.Employee.EDIT_SUCCESS
            };
        }

        public GetAllEmpAccountResult GetAllEmpAccount(GetAllEmpAccountParameter parameter)
        {
            try
            {
                var empAccountlist = context.User.Select(u => u.UserName.ToLower()).ToList();
                return new GetAllEmpAccountResult()
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    EmpAccountList = empAccountlist
                };
            }
            catch (Exception e)
            {
                return new GetAllEmpAccountResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetAllEmployeeAccountResult GetAllEmployeeAccount()
        {
            try
            {
                var result = (from e in context.Employee
                              join u in context.User on e.EmployeeId equals u.EmployeeId
                              where e.Active == true
                              select new EmployeeEntityModel
                              {
                                  IsManager = e.IsManager,
                                  EmployeeId = e.EmployeeId,
                                  EmployeeName = e.EmployeeName,
                                  Username = u.UserName,
                                  EmployeeCode = e.EmployeeCode,
                                  OrganizationId = e.OrganizationId,
                                  PositionId = e.PositionId
                              });

                return new GetAllEmployeeAccountResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    EmployeeAcounts = result
                };
            }
            catch (Exception e)
            {
                return new GetAllEmployeeAccountResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetAllEmpIdentityResult GetAllEmpIdentity(GetAllEmpIdentityParameter parameter)
        {
            try
            {
                List<string> empIdentityList;
                if (parameter.CurrentEmpId == Guid.Empty)
                    empIdentityList = context.Employee.Select(c => c.EmployeeCode.ToLower()).ToList();
                else
                    empIdentityList = context.Employee.Where(c => c.EmployeeId != parameter.CurrentEmpId).Select(c => c.EmployeeCode.ToLower()).ToList();

                return new GetAllEmpIdentityResult()
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    EmpIdentityList = empIdentityList
                };
            }
            catch (Exception e)
            {
                return new GetAllEmpIdentityResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public EditEmployeeDataPermissionResult EditEmployeeDataPermission(EditEmployeeDataPermissionParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(e => e.EmployeeId == parameter.EmployeeId);
                emp.IsManager = parameter.IsManager;
                emp.UpdatedById = parameter.UserId;
                emp.UpdatedDate = DateTime.Now;
                context.Update(emp);
                context.SaveChanges();

                return new EditEmployeeDataPermissionResult()
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    MessageCode = CommonMessage.Employee.EDIT_SUCCESS
                };
            }
            catch (Exception e)
            {
                return new EditEmployeeDataPermissionResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public EmployeePermissionMappingResult EmployeePermissionMapping(EmployeePermissionMappingParameter parameter)
        {
            try
            {
                var userId = context.User.FirstOrDefault(u => u.EmployeeId == parameter.EmployeeId).UserId;
                var existedPermission = context.PermissionMapping.FirstOrDefault(pm => pm.UserId == userId);
                if (existedPermission == null)
                {
                    PermissionMapping pm = new PermissionMapping()
                    {
                        PermissionMappingId = Guid.NewGuid(),
                        UserId = userId,
                        PermissionSetId = parameter.PermissionSetId,
                        UseFor = "U",
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        Active = true
                    };

                    context.PermissionMapping.Add(pm);
                }
                else
                {
                    existedPermission.PermissionSetId = parameter.PermissionSetId;
                    existedPermission.UpdatedById = parameter.UserId;
                    existedPermission.UpdatedDate = DateTime.Now;
                    context.PermissionMapping.Update(existedPermission);
                }

                context.SaveChanges();

                return new EmployeePermissionMappingResult()
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    MessageCode = CommonMessage.Employee.GRAND_PERMISSION_SUCCESS
                };
            }
            catch (Exception e)
            {
                return new EmployeePermissionMappingResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetEmployeeByPositionCodeResult GetEmployeeByPositionCode(GetEmployeeByPositionCodeParameter parameter)
        {

            try
            {
                var employeeId = context.User.FirstOrDefault(u => u.UserId == parameter.UserId).EmployeeId;
                var employee = context.Employee.FirstOrDefault(e => e.EmployeeId == employeeId);
                var lst = new List<Entities.Employee>();
                if (employee.IsManager)
                {
                    var organization = context.Organization.ToList();
                    var organizationGD = organization.FirstOrDefault(o => o.OrganizationId == employee.OrganizationId);
                    var maxLever = organization.Max(o => o.Level);
                    List<Guid?> organizationId = new List<Guid?>();
                    organizationId.Add(organizationGD.OrganizationId);
                    if (organizationGD.Level == 0)
                    {
                        lst = context.Employee.Where(e => e.IsManager == false && e.Active == true).OrderBy(e => e.EmployeeName).ToList();
                    }
                    else
                    {
                        var organizationPB1 = organization.Where(o => o.ParentId == employee.OrganizationId).ToList();
                        organizationPB1.ForEach(addId =>
                        {
                            organizationId.Add(addId.OrganizationId);
                        });
                        for (int i = organizationGD.Level + 1; i <= maxLever; i++)
                        {
                            var organizationPB = organization.Where(o => o.Level == i && organizationId.Contains(o.ParentId)).ToList();
                            organizationPB.ForEach(addId =>
                            {
                                organizationId.Add(addId.OrganizationId);
                            });
                        }
                        //var positionId = context.Position.FirstOrDefault(p => p.PositionCode == parameter.PositionCode).PositionId;
                        lst = context.Employee.Where(e => e.IsManager == false && organizationId.Contains(e.OrganizationId) && e.Active == true).OrderBy(e => e.EmployeeName).ToList();
                    }

                    var empLikeLevel = context.Employee.Where(e => e.IsManager == true && e.OrganizationId == employee.OrganizationId && e.Active == true).ToList();
                    empLikeLevel.ForEach(ef =>
                    {
                        lst.Add(ef);
                    });
                }
                else
                {
                    lst = context.Employee.Where(e => e.EmployeeId == employeeId).ToList();
                }

                var lstResult = new List<EmployeeEntityModel>();
                lst.ForEach(item =>
                {
                    lstResult.Add(new EmployeeEntityModel(item));
                });

                return new GetEmployeeByPositionCodeResult()
                {
                    EmployeeList = lstResult,
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeByPositionCodeResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetEmployeeHighLevelByEmpIdResult GetEmployeeHighLevelByEmpId(GetEmployeeHighLevelByEmpIdParameter parameter)
        {
            try
            {

                var listEmpToApprove = new List<Employee>();
                var listEmpToNotify = new List<Employee>();
                var empList = context.Employee.Where(emac => emac.Active == true).ToList();
                var workFlows = context.WorkFlows.FirstOrDefault(w => w.WorkflowCode == "QTPDDXXN");
                var getWorkFlows = context.WorkFlowSteps.Where(ws => ws.WorkflowId == workFlows.WorkFlowId);
                var getMaxStep = getWorkFlows.Max(m => m.StepNumber);
                var getWorkFlowsEndStep = getWorkFlows.FirstOrDefault(wn => wn.StepNumber == getMaxStep);
                var empRequest = empList.FirstOrDefault(em => em.EmployeeId == parameter.EmployeeId);
                var organizationList = context.Organization.ToList();
                var getOrganizationReq = organizationList.FirstOrDefault(p => p.OrganizationId == empRequest.OrganizationId);
                var parentId = getOrganizationReq.ParentId;
                var listOrgId = new List<Guid?>();
                listOrgId.Add(getOrganizationReq.OrganizationId);

                // get list nhân viên thông báo cho
                var maxLevel = organizationList.Max(maxl => maxl.Level);
                if (maxLevel != getOrganizationReq.Level)
                {
                    for (int i = getOrganizationReq.Level; i < maxLevel; i++)
                    {
                        organizationList.ForEach(item =>
                        {
                            if (listOrgId.Contains(item.ParentId) && !listOrgId.Contains(item.OrganizationId))
                            {
                                listOrgId.Add(item.OrganizationId);
                            }
                        });
                    }
                }
                listEmpToNotify = empList.Where(emno => listOrgId.Contains(emno.OrganizationId) && emno.Active == true).ToList();

                // get list nhân viên approve
                if (getWorkFlowsEndStep.ApprovebyPosition)
                {
                    listEmpToApprove = empList.Where(emap => emap.OrganizationId == empRequest.OrganizationId && emap.PositionId == getWorkFlowsEndStep.ApproverPositionId).ToList();
                    if (listEmpToApprove.Count == 0 && getOrganizationReq.Level != 0)
                    {
                        for (int i = getOrganizationReq.Level; i > 0; i--)
                        {
                            listEmpToApprove = empList.Where(emap => emap.OrganizationId == parentId && emap.PositionId == getWorkFlowsEndStep.ApproverPositionId).ToList();
                            if (listEmpToApprove.Count == 0)
                            {
                                var getLevelParent = organizationList.FirstOrDefault(p => p.OrganizationId == parentId);
                                parentId = getLevelParent.ParentId;
                            }
                            else
                            {
                                i = -1;
                            }
                        }
                    }
                }
                else
                {
                    listEmpToApprove = empList.Where(e => e.EmployeeId == getWorkFlowsEndStep.ApproverId).ToList();
                }

                var listEmpToApproveResult = new List<EmployeeEntityModel>();
                listEmpToApprove.ForEach(item =>
                {
                    listEmpToApproveResult.Add(new EmployeeEntityModel(item));
                });

                var listEmpToNotifyResult = new List<EmployeeEntityModel>();
                listEmpToNotify.ForEach(item =>
                {
                    listEmpToNotifyResult.Add(new EmployeeEntityModel(item));
                });

                return new GetEmployeeHighLevelByEmpIdResult()
                {
                    ListReasons = new List<CategoryEntityModel>(),
                    ListEmployeeToApprove = listEmpToApproveResult,
                    ListEmployeeToNotify = listEmpToNotifyResult,
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeHighLevelByEmpIdResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        private List<string> GetPositionWithHigherLevel(string targetPosition)
        {
            var currentEmpCodeListLowLevel = new List<string>() { "GV", "CTV", "NV", "TG" };
            var currentEmpCodeListHightLevel = new List<string>() { "TGD", "GD", "TP", "PP", "QL" };
            if (currentEmpCodeListLowLevel.Contains(targetPosition))
            {
                return currentEmpCodeListHightLevel;
            }
            var result = new List<string>();
            currentEmpCodeListHightLevel.ForEach(code =>
            {
                if (code != targetPosition)
                {
                    result.Add(code);
                }
            });
            return result;
        }

        public GetEmployeeByOrganizationIdResult GetEmployeeByOrganizationId(GetEmployeeByOrganizationIdParameter parameter)
        {
            try
            {
                this.iAuditTrace.Trace(ActionName.GETBYID, ObjectName.EMPLOYEE, "Get Employee By OrganizationId", parameter.UserId);
                var listEmployee = (from employee in context.Employee
                                    where parameter.OrganizationId == employee.OrganizationId && employee.Active == true
                                    select new
                                    {
                                        employee.EmployeeId,
                                        employee.EmployeeName
                                    }
                                    ).ToList();

                List<dynamic> lstResult = new List<dynamic>();
                listEmployee.ForEach(item =>
                {
                    var sampleObject = new ExpandoObject() as IDictionary<string, Object>;
                    sampleObject.Add("EmployeeId", item.EmployeeId);
                    sampleObject.Add("EmployeeName", item.EmployeeName);
                    lstResult.Add(sampleObject);
                });

                return new GetEmployeeByOrganizationIdResult()
                {
                    listEmployee = lstResult
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeByOrganizationIdResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetEmployeeByTopRevenueResult GetEmployeeByTopRevenue(GetEmployeeByTopRevenueParameter parameter)
        {
            try
            {
                this.iAuditTrace.Trace(ActionName.GETBYID, ObjectName.EMPLOYEE, "Get Employee By Top Revenue", parameter.UserId);
                var listEmployee = (from customerOrder in context.CustomerOrder
                                    join orderStatus in context.OrderStatus on customerOrder.StatusId equals orderStatus.OrderStatusId
                                    join employee in context.Employee on customerOrder.Seller equals employee.EmployeeId
                                    join organization in context.Organization on employee.OrganizationId equals organization.OrganizationId
                                    join contact in context.Contact on employee.EmployeeId equals contact.ObjectId
                                    where (parameter.EmployeeId == null || parameter.EmployeeId == employee.EmployeeId)
                                    && (parameter.ListOrganizationId.Contains(organization.OrganizationId) || parameter.ListOrganizationId.Count == 0)
                                    && (orderStatus.OrderStatusCode == "IP" || orderStatus.OrderStatusCode == "DLV" || orderStatus.OrderStatusCode == "PD" || orderStatus.OrderStatusCode == "COMP")
                                    && (parameter.StartDate == null || parameter.StartDate == DateTime.MinValue || parameter.StartDate.Value.Date <= customerOrder.OrderDate.Date)
                                    && (parameter.EndDate == null || parameter.EndDate == DateTime.MinValue || parameter.EndDate.Value.Date >= customerOrder.OrderDate.Date)
                                    select new
                                    {
                                        employee.EmployeeId,
                                        employee.EmployeeCode,
                                        employee.EmployeeName,
                                        contact.ContactId,
                                        contact.AvatarUrl,
                                        organization.OrganizationName,
                                        Amount = (decimal)((customerOrder.DiscountType == true) ? (customerOrder.Amount * (1 - customerOrder.DiscountValue / 100)) : (customerOrder.Amount - customerOrder.DiscountValue))
                                    }
                                    ).ToList();
                var newList = listEmployee.GroupBy(x => new { x.EmployeeId, x.EmployeeCode, x.EmployeeName, x.ContactId, x.AvatarUrl, x.OrganizationName }).Select(y => new
                {
                    Id = y.Key,
                    y.Key.EmployeeId,
                    y.Key.EmployeeCode,
                    y.Key.EmployeeName,
                    y.Key.ContactId,
                    y.Key.AvatarUrl,
                    y.Key.OrganizationName,
                    Total = y.Sum(s => s.Amount)
                }).OrderByDescending(x => x.Total).ToList();

                List<dynamic> lstResultEmployee = new List<dynamic>();
                newList.ForEach(item =>
                {
                    var sampleObject = new ExpandoObject() as IDictionary<string, Object>;
                    sampleObject.Add("EmployeeId", item.EmployeeId);
                    sampleObject.Add("EmployeeCode", item.EmployeeCode);
                    sampleObject.Add("EmployeeName", item.EmployeeName);
                    sampleObject.Add("ContactId", item.ContactId);
                    sampleObject.Add("AvatarUrl", item.AvatarUrl);
                    sampleObject.Add("OrganizationName", item.OrganizationName);
                    sampleObject.Add("Total", item.Total);
                    lstResultEmployee.Add(sampleObject);
                });

                return new GetEmployeeByTopRevenueResult()
                {
                    listEmployee = lstResultEmployee
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeByTopRevenueResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public ExportEmployeeRevenueResult ExportEmployeeRevenue(ExportEmployeeRevenueParameter parameter)
        {
            try
            {
                GetEmployeeByTopRevenueParameter ttt = new GetEmployeeByTopRevenueParameter()
                {
                    EmployeeId = parameter.EmployeeId,
                    StartDate = parameter.StartDate,
                    EndDate = parameter.EndDate,
                    ListOrganizationId = parameter.ListOrganizationId,
                    UserId = parameter.UserId
                };
                var listEmployee = this.GetEmployeeByTopRevenue(ttt).listEmployee;
                byte[] excelOutput = null;
                this.iAuditTrace.Trace(ActionName.GETBYID, ObjectName.EMPLOYEE, "Export Employee Revenue", parameter.UserId);
                excelOutput = this.ExportEmployeeRevenue(listEmployee);

                return new ExportEmployeeRevenueResult()
                {
                    ExcelFile = excelOutput
                };
            }
            catch (Exception e)
            {
                return new ExportEmployeeRevenueResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetStatisticForEmpDashBoardResult GetStatisticForEmpDashBoard(GetStatisticForEmpDashBoardParameter parameter)
        {
            try
            {
                #region Phan quyen User va lay ra tat ca cac nhan vien co quyen
                var currentEmpId = context.User.FirstOrDefault(u => u.UserId == parameter.UserId).EmployeeId;
                var currentEmp = context.Employee.FirstOrDefault(emp => emp.EmployeeId == currentEmpId);
                var contacts = context.Contact.Where(w => w.ObjectType == ObjectType.EMPLOYEE).ToList();
                // Lay ra to chuc cua nguoi hien tai => orgRoot
                var organizations = context.Organization.ToList();
                var orgRoot = organizations.FirstOrDefault(o => o.OrganizationId == currentEmp.OrganizationId);
                var listOrg = ListChildOfParamToSearch(orgRoot.OrganizationId, organizations);
                var listEmpDashboard = new List<EmployeeEntityModel>();
                listEmpDashboard.Add(new EmployeeEntityModel()
                {
                    EmployeeName = "",
                    EmployeeCode = "ORG",
                    OrganizationName = orgRoot.OrganizationName,
                    OrganizationId = orgRoot.OrganizationId,
                    PositionId = null,
                    PositionName = orgRoot.Level.ToString()
                });
                if (!currentEmp.IsManager)
                {
                    listEmpDashboard.Add(new EmployeeEntityModel()
                    {
                        EmployeeId = currentEmpId,
                        ContactId = contacts.FirstOrDefault(c => c.ObjectId == currentEmpId).ContactId,
                        EmployeeName = currentEmp.EmployeeName,
                        EmployeeCode = currentEmp.EmployeeCode,
                        OrganizationId = currentEmp.OrganizationId,
                        AvatarUrl = contacts.FirstOrDefault(c => c.ObjectId == currentEmpId).AvatarUrl
                    });
                }
                else
                {
                    (from emp in context.Employee
                         //join con in context.Contact on emp.EmployeeId equals con.ObjectId
                     where emp.OrganizationId == orgRoot.OrganizationId && emp.EmployeeName.ToLower().Contains(parameter.KeyName.ToLower().Trim())
                     select new EmployeeEntityModel()
                     {
                         EmployeeId = emp.EmployeeId,
                         ContactId = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).ContactId,
                         EmployeeName = emp.EmployeeName,
                         EmployeeCode = emp.EmployeeCode,
                         OrganizationId = emp.OrganizationId,
                         AvatarUrl = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).AvatarUrl,
                         LastName = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).LastName
                     }).OrderBy(e => e.LastName).ToList().ForEach(l => listEmpDashboard.Add(l));

                    listOrg.ForEach(org =>
                    {
                        listEmpDashboard.Add(new EmployeeEntityModel()
                        {
                            EmployeeName = "",
                            EmployeeCode = "ORG",
                            OrganizationName = organizations.FirstOrDefault(o => o.OrganizationId == org).OrganizationName,
                            OrganizationId = organizations.FirstOrDefault(o => o.OrganizationId == org).OrganizationId,
                            PositionId = organizations.FirstOrDefault(o => o.OrganizationId == org).ParentId,
                            PositionName = organizations.FirstOrDefault(o => o.OrganizationId == org).Level.ToString()
                        });
                        (from emp in context.Employee
                             //join con in context.Contact on emp.EmployeeId equals con.ObjectId
                         where emp.Active == true && emp.OrganizationId == org && emp.EmployeeName.ToLower().Contains(parameter.KeyName.ToLower().Trim())
                         select new EmployeeEntityModel()
                         {
                             EmployeeId = emp.EmployeeId,
                             ContactId = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).ContactId,
                             EmployeeName = emp.EmployeeName,
                             EmployeeCode = emp.EmployeeCode,
                             OrganizationId = emp.OrganizationId,
                             AvatarUrl = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).AvatarUrl,
                             LastName = contacts.FirstOrDefault(f => f.ObjectId == emp.EmployeeId).LastName
                         }).OrderBy(e => e.LastName).ToList().ForEach(l => listEmpDashboard.Add(l));
                    });
                }
                #endregion

                #region Tim kiem cac EmpRequest lien quan den tuan hien tai          

                var typeRequestList = new List<string>() { "NKL", "NP" };
                var listRequest = (from rq in context.EmployeeRequest
                                   join stt in context.Category on rq.StatusId equals stt.CategoryId
                                   join typestt in context.Category on rq.TypeRequest equals typestt.CategoryId
                                   join start in context.Category on rq.StartTypeTime equals start.CategoryId
                                   join end in context.Category on rq.EndTypeTime equals end.CategoryId
                                   where stt.CategoryCode == "Approved" &&
                                   typeRequestList.Contains(typestt.CategoryCode) &&
                                         (
                                            (rq.StartDate.Value.Date >= parameter.FirstOfWeek.Date && rq.StartDate.Value.Date <= parameter.LastOfWeek.Date) ||
                                            (rq.EnDate.Value.Date >= parameter.FirstOfWeek.Date && rq.EnDate.Value.Date <= parameter.LastOfWeek.Date)
                                         )
                                   select new EmployeeRequestEntityModel()
                                   {
                                       EmployeeRequestId = rq.EmployeeRequestId,
                                       EmployeeRequestCode = rq.EmployeeRequestCode,
                                       OfferEmployeeCode = rq.OfferEmployeeCode,
                                       OfferEmployeeId = rq.OfferEmployeeId,
                                       StartDate = rq.StartDate,
                                       EnDate = rq.EnDate,
                                       ShiftName = start.CategoryCode + "," + end.CategoryCode
                                   }).OrderBy(r => r.StartDate.Value.Date).ToList();
                #endregion

                #region Tim kiem cac nhan vien co ngay sinh nhat gan nhat trong 2 tuan do lai
                var nextTwoWeek = DateTime.Now.AddDays(14);
                var listEmpNearestBirthday = (from emp in context.Employee
                                              join con in context.Contact on emp.EmployeeId equals con.ObjectId
                                              join org in context.Organization on emp.OrganizationId equals org.OrganizationId
                                              where emp.Active == true && con.DateOfBirth != null &&
                                                    (
                                                        (con.DateOfBirth.Value.Month > DateTime.Now.Month) ||
                                                        (con.DateOfBirth.Value.Month == DateTime.Now.Month && con.DateOfBirth.Value.Day >= DateTime.Now.Day)
                                                    ) &&
                                                    (
                                                        (con.DateOfBirth.Value.Month < nextTwoWeek.Month) ||
                                                        (con.DateOfBirth.Value.Month == nextTwoWeek.Month && con.DateOfBirth.Value.Day <= nextTwoWeek.Day)
                                                    ) &&
                                                    (
                                                        (emp.OrganizationId == orgRoot.OrganizationId) ||
                                                        (listOrg.Contains(emp.OrganizationId.Value))
                                                    ) && currentEmp.IsManager && ((emp.OrganizationId == orgRoot.OrganizationId || listOrg.Contains(emp.OrganizationId.Value)))
                                              select new EmployeeEntityModel()
                                              {
                                                  EmployeeId = emp.EmployeeId,
                                                  EmployeeName = emp.EmployeeName,
                                                  EmployeeCode = emp.EmployeeCode,
                                                  OrganizationName = org.OrganizationName,
                                                  StartedDate = con.DateOfBirth,
                                                  ContactId = con.ContactId
                                              }).OrderBy(r => r.StartedDate.Value.Day).OrderBy(r => r.StartedDate.Value.Month).ToList();
                #endregion
                #region Tim kiem cac nhan vien sap het han hop dong trong 1 thang do lai
                var nowofnextMonth = DateTime.Now.AddDays(30);
                var listEmpEndContract = (from emp in context.Employee
                                          join con in context.Contact on emp.EmployeeId equals con.ObjectId
                                          where emp.ContractEndDate != null && emp.Active == true && emp.ContractEndDate.Value.Date >= DateTime.Now.Date &&
                                                (
                                                    (currentEmp.IsManager && (emp.OrganizationId == orgRoot.OrganizationId || listOrg.Contains(emp.OrganizationId.Value))) ||
                                                    (!currentEmp.IsManager && emp.EmployeeId == currentEmp.EmployeeId)
                                                ) && emp.ContractEndDate.Value.Date <= nowofnextMonth.Date
                                          select new EmployeeEntityModel()
                                          {
                                              EmployeeId = emp.EmployeeId,
                                              ContactId = con.ContactId,
                                              ContractEndDate = emp.ContractEndDate,
                                              EmployeeName = emp.EmployeeName,
                                              EmployeeCode = emp.EmployeeCode
                                          }).OrderBy(d => d.ContractEndDate.Value.Date).ToList();
                listEmpEndContract.ForEach(item =>
                {
                    if (item.ContractType != null)
                    {
                        item.ContractName = context.Category.FirstOrDefault(l => l.CategoryId == item.ContractType)?.CategoryName;
                    }
                });
                #endregion
                return new GetStatisticForEmpDashBoardResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    IsManager = currentEmp.IsManager,
                    ListEmployee = listEmpDashboard,
                    ListRequestInsideWeek = listRequest,
                    ListEmpNearestBirthday = listEmpNearestBirthday,
                    ListEmpEndContract = listEmpEndContract
                };
            }
            catch (Exception e)
            {
                return new GetStatisticForEmpDashBoardResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        private byte[] ExportEmployeeRevenue(List<dynamic> lstEmployee)
        {
            string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
            string fileName = @"ExcelEmployeeRevenue.xlsx";
            FileInfo file = new FileInfo(Path.Combine(rootFolder, fileName));
            //MemoryStream output = new MemoryStream();
            byte[] data = null;
            using (ExcelPackage package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                //worksheet.Name =string.Format("Bảng lương {0}/{1}",month,year);
                worksheet.InsertRow(8, lstEmployee.Count);
                if (lstEmployee.Count > 0)
                {
                    int rowIndex = 6;
                    int i = 0;
                    while (i < lstEmployee.Count)
                    {
                        worksheet.Cells[rowIndex, 1].Value = lstEmployee[i].OrganizationName;
                        worksheet.Cells[rowIndex, 2].Value = lstEmployee[i].EmployeeCode;
                        worksheet.Cells[rowIndex, 3].Value = lstEmployee[i].EmployeeName;
                        worksheet.Cells[rowIndex, 4].Value = string.Format(new CultureInfo("vi-VN"), "{0:#,#}", lstEmployee[i].Total);
                        rowIndex++;
                        i++;
                    }
                    string newFilePath = Path.Combine(rootFolder, @"ExportedExcel.xlsx");
                    package.SaveAs(new FileInfo(newFilePath));
                    data = File.ReadAllBytes(newFilePath);
                    File.Delete(newFilePath);
                    //package.SaveAs(output);
                }
                return data;
            }
        }

        public GetEmployeeCareStaffResult GetEmployeeCareStaff(GetEmployeeCareStaffParameter parameter)
        {
            try
            {
                this.iAuditTrace.Trace(ActionName.GETBYID, ObjectName.EMPLOYEE, "Get Employee Care Staff", parameter.UserId);
                var IsManager = parameter.IsManager;
                List<dynamic> listResult = new List<dynamic>();

                if (IsManager)
                {
                    //Nếu là quản lý:
                    //Lấy danh sách tất cả nhân viên cấp dưới thuộc phòng ban quản lý
                    //Bước 1: Lấy danh sách tất cả phòng ban cấp dưới nếu có
                    var empl = (from employee in context.Employee
                                where employee.EmployeeId == parameter.EmployeeId
                                select new
                                {
                                    employee.OrganizationId
                                }).FirstOrDefault();

                    List<Guid?> listOrganizationChildrenId = new List<Guid?>();
                    listOrganizationChildrenId.Add(empl.OrganizationId);

                    #region Hung Edit this Function
                    var organizationList = context.Organization.ToList();
                    getOrganizationChildrenId(organizationList, empl.OrganizationId, listOrganizationChildrenId);
                    #endregion 
                    //Bước 2: Lấy danh sách tất cả nhân viên thuộc danh sách phòng ban vừa lấy được
                    var listEmployee = (from employee in context.Employee
                                            //where (listOrganizationChildrenId.Contains(employee.OrganizationId) || listOrganizationChildrenId.Count == 0) && (employee.Active == true)
                                        where (listOrganizationChildrenId.Contains(employee.OrganizationId) || listOrganizationChildrenId.Count == 0)
                                        select new
                                        {
                                            employee.EmployeeId,
                                            employee.EmployeeName,
                                            employee.EmployeeCode,
                                            employee.Active //thêm trạng thái nhân viên
                                        }).ToList();

                    listEmployee.ForEach(item =>
                    {
                        var sampleObject = new ExpandoObject() as IDictionary<string, Object>;
                        sampleObject.Add("employeeId", item.EmployeeId);
                        sampleObject.Add("employeeName", item.EmployeeName);
                        sampleObject.Add("employeeCode", item.EmployeeCode);
                        sampleObject.Add("active", item.Active); //thêm trạng thái nhân viên
                        listResult.Add(sampleObject);
                    });
                }
                else
                {
                    //Nếu là nhân viên:
                    //Lấy danh sách các nhân viên trong cùng phòng ban với nhân viên đang đăng nhập
                    //var organizationId = context.Employee.Where(e => e.EmployeeId == parameter.EmployeeId).Select(e => e.OrganizationId).FirstOrDefault();
                    //var listEmployee = context.Employee.Where(e => e.OrganizationId == organizationId && e.Active == true).ToList();

                    //Update SRS: nếu là nhân viên, chỉ lấy nhân viên đó - DUNGPT
                    var listEmployee = context.Employee.Where(e => e.EmployeeId == parameter.EmployeeId).ToList();
                    listEmployee.ForEach(item =>
                    {
                        var sampleObject = new ExpandoObject() as IDictionary<string, Object>;
                        sampleObject.Add("employeeId", item.EmployeeId);
                        sampleObject.Add("employeeName", item.EmployeeName);
                        sampleObject.Add("employeeCode", item.EmployeeCode);
                        sampleObject.Add("active", item.Active); //thêm trạng thái nhân viên
                        listResult.Add(sampleObject);
                    });

                }
                return new GetEmployeeCareStaffResult()
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    employeeList = listResult
                };
            }
            catch (Exception e)
            {
                return new GetEmployeeCareStaffResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        private List<Guid?> getOrganizationChildrenId(List<Organization> organizationList, Guid? id, List<Guid?> list)
        {
            var organizations = organizationList.Where(o => o.ParentId == id).ToList();
            organizations.ForEach(item =>
            {
                list.Add(item.OrganizationId);
                getOrganizationChildrenId(organizationList, item.OrganizationId, list);
            });

            return list;
        }

        public SearchEmployeeFromListResult SearchEmployeeFromList(SearchEmployeeFromListParameter parameter)
        {
            try
            {
                var currentUserEmpId = context.User.FirstOrDefault(u => u.UserId == parameter.UserId).EmployeeId;
                var employee = context.Employee.FirstOrDefault(u => u.EmployeeId == currentUserEmpId);
                Guid currentUserOrgId = Guid.Empty;
                bool isNhanSu = false;
                if (employee != null)
                {
                    currentUserOrgId = employee.OrganizationId.Value;
                    isNhanSu = employee.IsNhanSu;
                }


                var employeeList = new List<EmployeeEntityModel>();
                List<Organization> organizations = null;
                List<Guid?> listGetAllChild = new List<Guid?>();
                var organizationList = context.Organization.ToList();

                var isAccess = organizationList.FirstOrDefault(x => x.OrganizationId == employee.OrganizationId)?.IsAccess;
                //Nếu được xem dư liệu phòng ban khác
                if(isAccess == true)
                {
                    organizationList.ForEach(item =>
                    {
                        listGetAllChild.Add(item.OrganizationId);
                    });
                }
                //Nếu không được xem dữ liệu phòng ban khác
                else
                {
                    //Nếu là trưởng bộ phận thì xem phòng ban của mình và cấp dưới
                    if (parameter.IsManager)
                    {
                        if (currentUserOrgId != null && currentUserOrgId != Guid.Empty)
                        {
                            if (parameter.OrganizationId == null)
                            {
                                listGetAllChild.Add(currentUserOrgId);
                                listGetAllChild = getOrganizationChildrenId(organizationList, currentUserOrgId, listGetAllChild);
                            }

                            else
                            {
                                listGetAllChild.Add(parameter.OrganizationId.Value);
                                listGetAllChild = getOrganizationChildrenId(organizationList, parameter.OrganizationId.Value,
                                    listGetAllChild);
                            }
                            organizations = organizationList.Where(w => listGetAllChild.Contains(w.OrganizationId)).ToList();
                        }
                    }
                    else
                    {
                        if (parameter.OrganizationId == null)
                        {
                            listGetAllChild.Add(currentUserOrgId);
                            listGetAllChild = getOrganizationChildrenId(organizationList, currentUserOrgId, listGetAllChild);
                        }

                        else
                        {
                            listGetAllChild.Add(parameter.OrganizationId.Value);
                            listGetAllChild = getOrganizationChildrenId(organizationList, parameter.OrganizationId.Value, listGetAllChild);
                        }
                        organizations = organizationList.Where(w => listGetAllChild.Contains(w.OrganizationId)).ToList();
                    }
                }
                #region Add By Hung

                if (organizations == null)
                    organizations = context.Organization.Where(w => listGetAllChild.Contains(w.OrganizationId)).ToList();

                if (parameter.IsQuitWork)
                {
                    var userDisabledIds = context.User.Where(c => c.Disabled == false).Select(c => c.EmployeeId).ToList();
                    employeeList = context.Employee.Where(e => (e.Active == false) &&
                                                               userDisabledIds.Contains(e.EmployeeId) &&
                                                               (e.EmployeeCode.ToLower()
                                                                    .Contains(parameter.IdentityId.ToLower().Trim()) ||
                                                                parameter.IdentityId == null ||
                                                                parameter.IdentityId.Trim() == "") &&
                                                               (parameter.FromContractExpiryDate == null ||
                                                                parameter.FromContractExpiryDate == DateTime.MinValue ||
                                                                parameter.FromContractExpiryDate.Value.Date <=
                                                                e.ContractEndDate.Value.Date) &&
                                                               (listGetAllChild == null || listGetAllChild.Count == 0 ||
                                                                e.OrganizationId == null ||
                                                                listGetAllChild.Contains(e.OrganizationId.Value)) &&
                                                               (parameter.ListPosition.Count == 0 ||
                                                                parameter.ListPosition.Contains(e.PositionId.Value) ||
                                                                e.PositionId == null)
                                                                && (isAccess == true || parameter.IsManager == true || e.EmployeeId == employee.EmployeeId)) //là nhân viên thường thì lấy chính nó
                        .Select(e => new EmployeeEntityModel
                        {
                            EmployeeId = e.EmployeeId,
                            EmployeeName = e.EmployeeName,
                            OrganizationId = e.OrganizationId,
                            OrganizationName =
                                organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId) == null
                                    ? ""
                                    : organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId)
                                        .OrganizationName,
                            EmployeeCode = e.EmployeeCode,
                            PositionId = e.PositionId,
                            CreatedById = e.CreatedById,
                            CreatedDate = e.CreatedDate,
                            SoPhepConLai = e.SoNgayPhepConLai,
                            Active = e.Active,
                            //ActiveUser = u.Active
                        }).ToList();
                }
                else
                {
                    var userEmployeeIds = context.User.Where(c => c.Disabled == false).Select(c => c.EmployeeId).ToList();
                    employeeList = context.Employee.Where(e => e.Active == true &&
                                                               userEmployeeIds.Contains(e.EmployeeId) &&
                                                               (e.EmployeeCode.ToLower()
                                                                    .Contains(parameter.IdentityId.ToLower().Trim()) ||
                                                                parameter.IdentityId == null ||
                                                                parameter.IdentityId.Trim() == "") &&
                                                               (parameter.FromContractExpiryDate == null ||
                                                                parameter.FromContractExpiryDate == DateTime.MinValue ||
                                                                parameter.FromContractExpiryDate.Value.Date <=
                                                                e.ContractEndDate.Value.Date) &&
                                                               (parameter.ToContractExpiryDate == null ||
                                                                parameter.ToContractExpiryDate == DateTime.MinValue ||
                                                                parameter.ToContractExpiryDate.Value.Date >=
                                                                e.ContractEndDate.Value.Date) &&
                                                               (listGetAllChild == null || listGetAllChild.Count == 0 ||
                                                                e.OrganizationId == null ||
                                                                listGetAllChild.Contains(e.OrganizationId.Value)) &&
                                                               (parameter.ListPosition.Count == 0 ||
                                                                parameter.ListPosition.Contains(e.PositionId.Value) ||
                                                                e.PositionId == null)
                                                                && (isAccess == true || parameter.IsManager == true || e.EmployeeId == employee.EmployeeId)) //là nhân viên thường thì lấy chính nó
                        .Select(e => new EmployeeEntityModel
                        {
                            EmployeeId = e.EmployeeId,
                            EmployeeName = e.EmployeeName,
                            OrganizationId = e.OrganizationId,
                            OrganizationName =
                                organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId) == null
                                    ? ""
                                    : organizations.FirstOrDefault(o => o.OrganizationId == e.OrganizationId)
                                        .OrganizationName,
                            EmployeeCode = e.EmployeeCode,
                            PositionId = e.PositionId,
                            CreatedById = e.CreatedById,
                            CreatedDate = e.CreatedDate,
                            Active = e.Active,
                            SoPhepConLai = e.SoNgayPhepConLai,

                            //ActiveUser = u.Active
                        }).ToList();
                }
                List<Guid> listEmployeeId = new List<Guid>();
                employeeList.ForEach(item =>
                {
                    listEmployeeId.Add(item.EmployeeId.Value);
                });

                var contacts = context.Contact.Where(w =>
                    listEmployeeId.Contains(w.ObjectId) && w.ObjectType == ObjectType.EMPLOYEE &&
                    (parameter.FirstName == null || parameter.FirstName.Trim() == "" ||
                     w.FirstName.ToLower().Contains(parameter.FirstName.ToLower().Trim())) &&
                    (parameter.LastName == null || parameter.LastName.Trim() == "" ||
                     w.LastName.ToLower().Contains(parameter.LastName.ToLower().Trim())) &&
                    ((parameter.FromBirthDay == null) || (w.DateOfBirth.Value.Month > parameter.FromBirthDay.Value.Month) ||
                     (w.DateOfBirth.Value.Month == parameter.FromBirthDay.Value.Month &&
                      w.DateOfBirth.Value.Day >= parameter.FromBirthDay.Value.Day)) &&
                    ((parameter.ToBirthDay == null) || (w.DateOfBirth.Value.Month < parameter.ToBirthDay.Value.Month) ||
                     (w.DateOfBirth.Value.Month == parameter.ToBirthDay.Value.Month &&
                      w.DateOfBirth.Value.Day <= parameter.ToBirthDay.Value.Day))).ToList();

                var users = context.User.Where(w => listEmployeeId.Contains(w.EmployeeId.Value) &&
                                                    (parameter.UserName == null || parameter.UserName.Trim() == "" ||
                                                     w.UserName.ToLower().Contains(parameter.UserName.ToLower().Trim())))
                    .ToList();

                var listDoiTuongPhuThuoc = new List<Guid>();
                var quanHeGiaDinh = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "QHGD");
                if (quanHeGiaDinh != null)
                {
                    listDoiTuongPhuThuoc = context.Category.Where(x => x.CategoryTypeId == quanHeGiaDinh.CategoryTypeId && (x.CategoryCode == "CGAI" || x.CategoryCode == "CTRAI")).Select(x => x.CategoryId).ToList();
                }

                //danh sách đối tượng phụ thuộc của nhân viên là Con gái, Con trai
                var listContact = context.Contact.Where(x => x.ObjectType == "EMP_CON" && listDoiTuongPhuThuoc.Contains((Guid)x.QuanHeId) && x.PhuThuoc == true).ToList();

                employeeList.ForEach(item =>
                {
                    var contact = contacts.FirstOrDefault(f => f.ObjectId == item.EmployeeId);
                    if (contact != null)
                    {
                        item.ContactId = contact.ContactId;
                        item.Identity = contact.IdentityId;
                        item.AvatarUrl = contact.AvatarUrl;
                        item.LastName = contact.LastName;
                        item.Email = contact.Email;
                    }
                    var user = users.FirstOrDefault(f => f.EmployeeId == item.EmployeeId);
                    if (user != null)
                    {
                        item.Username = user.UserName;
                    }


                    var listThongTinPhuThuoc = listContact.Where(x => x.ObjectId == item.EmployeeId).ToList();
                    item.NumberChildren = listThongTinPhuThuoc.Count();
                });

                employeeList = employeeList.Where(w => w.Username != null && w.ContactId != null).OrderBy(x => x.LastName)
                    .ToList();

                #endregion

                var listThanhVienPhongBan = context.ThanhVienPhongBan.ToList();
                employeeList.ForEach(item =>
                {
                    var exists = listThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);

                    if (exists != null && exists.IsManager == 1)
                    {
                        item.IsTruongBoPhan = true;
                    }
                });

                return new SearchEmployeeFromListResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    CurrentOrganizationId = currentUserOrgId,
                    EmployeeList = employeeList,
                    IsNhanSu = isNhanSu
                };
            }
            catch (Exception ex)
            {
                return new SearchEmployeeFromListResult
                {
                    MessageCode = "",
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetAllEmpAccIdentityResult GetAllEmpAccIdentity(GetAllEmpAccIdentityParameter parameter)
        {
            try
            {
                List<string> listAccountEmployee;
                if (parameter.EmployeeId != Guid.Empty)
                    listAccountEmployee = context.User.Where(u => u.EmployeeId != parameter.EmployeeId).Select(x => x.UserName.ToLower()).ToList();
                else
                    listAccountEmployee = context.User.Select(x => x.UserName.ToLower()).ToList();
                return new GetAllEmpAccIdentityResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListAccEmployee = listAccountEmployee
                };
            }
            catch (Exception ex)
            {
                return new GetAllEmpAccIdentityResult
                {
                    MessageCode = "",
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DisableEmployeeResult DisableEmployee(DisableEmployeeParameter parameter)
        {
            try
            {
                var userDisable = context.User.FirstOrDefault(u => u.EmployeeId == parameter.EmployeeId);
                userDisable.Disabled = true;
                userDisable.UpdatedById = parameter.UserId;
                userDisable.UpdatedDate = DateTime.Now;

                //Xóa trong thành viên phòng ban
                var empThanhVienPhongBan = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if(empThanhVienPhongBan != null)
                {
                    context.ThanhVienPhongBan.Remove(empThanhVienPhongBan);
                }
                context.User.Update(userDisable);
                context.SaveChanges();

                return new DisableEmployeeResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    MessageCode = CommonMessage.Employee.DELETE_SUCCESS,
                };
            }
            catch (Exception ex)
            {
                return new DisableEmployeeResult
                {
                    MessageCode = CommonMessage.Employee.DELETE_FAIL,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CheckAdminLoginResult CheckAdminLogin(CheckAdminLoginParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(u => u.UserId == parameter.UserId);

                return new CheckAdminLoginResult
                {
                    IsAdmin = user.IsAdmin,
                    MessageCode = "OK",
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
            catch (Exception ex)
            {
                return new CheckAdminLoginResult
                {
                    MessageCode = ex.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetMasterDataEmployeeDetailResult GetMasterDataEmployeeDetail(GetMasterDataEmployeeDetailParameter parameter)
        {
            try
            {
                var ListOrganization = new List<OrganizationEntityModel>();
                var ListPosition = new List<PositionModel>();
                var ListRole = new List<RoleEntityModel>();
                var ListLoaiHopDong = new List<CategoryEntityModel>();
                var ListQuocGia = new List<CountryEntityModel>();
                var ListNganHang = new List<CategoryEntityModel>();

                ListOrganization = context.Organization.Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationCode = y.OrganizationCode,
                    OrganizationName = y.OrganizationName,
                    Level = y.Level,
                    ParentId = y.ParentId
                }).ToList();

                ListPosition = context.Position.Select(y => new PositionModel
                {
                    PositionId = y.PositionId,
                    PositionCode = y.PositionCode,
                    PositionName = y.PositionName
                }).ToList();

                ListRole = context.Role.Select(y => new RoleEntityModel
                {
                    RoleId = y.RoleId,
                    RoleValue = y.RoleValue
                }).ToList();

                var loaiHopDong = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS");
                if (loaiHopDong != null)
                {
                    ListLoaiHopDong = context.Category.Where(x => x.CategoryTypeId == loaiHopDong.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                ListQuocGia = context.Country.Select(y => new CountryEntityModel
                {
                    CountryId = y.CountryId,
                    CountryName = y.CountryName
                }).OrderBy(z => z.CountryName).ToList();

                var nganHang = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "NH");
                if (nganHang != null)
                {
                    ListNganHang = context.Category.Where(x => x.CategoryTypeId == nganHang.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                return new GetMasterDataEmployeeDetailResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListOrganization = ListOrganization,
                    ListPosition = ListPosition,
                    ListRole = ListRole,
                    ListLoaiHopDong = ListLoaiHopDong,
                    ListQuocGia = ListQuocGia,
                    ListNganHang = ListNganHang
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataEmployeeDetailResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinCaNhanThanhVienResult GetThongTinCaNhanThanhVien(GetThongTinCaNhanThanhVienParameter parameter)
        {
            try
            {
                var thongTinCaNhan = new ThongTinCaNhanThanhVienModel();

                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new GetThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại contact trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                thongTinCaNhan.EmployeeCode = employee.EmployeeCode;
                thongTinCaNhan.EmployeeName = employee.EmployeeName;
                thongTinCaNhan.Gender = contact.Gender;
                thongTinCaNhan.FirstName = contact.FirstName;
                thongTinCaNhan.LastName = contact.LastName;
                thongTinCaNhan.DateOfBirth = contact.DateOfBirth;
                thongTinCaNhan.Phone = contact.Phone;
                thongTinCaNhan.Email = contact.Email;
                thongTinCaNhan.Address = contact.Address;

                #region Tình hình công việc

                thongTinCaNhan.SoBuoiNghiCoPhep = 0;
                thongTinCaNhan.SoBuoiNghiKhongPhep = 0;
                thongTinCaNhan.SoBuoiPhepNam = 0;
                thongTinCaNhan.SoBuoiPhepCon = 0;

                var loaiDeXuat = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LXU");

                var nghiPhepId =
                    context.Category.FirstOrDefault(x =>
                        x.CategoryTypeId == loaiDeXuat.CategoryTypeId && x.CategoryCode.Trim() == "NP")?.CategoryId;
                var nghiKhongPhepId =
                    context.Category.FirstOrDefault(x =>
                        x.CategoryTypeId == loaiDeXuat.CategoryTypeId && x.CategoryCode.Trim() == "NKL")?.CategoryId;

                var empRequest = (from empR in context.EmployeeRequest
                                  join stt in context.Category on empR.StatusId equals stt.CategoryId
                                  where empR.OfferEmployeeId == parameter.EmployeeId &&
                                        empR.RequestDate.Value.Year == DateTime.Now.Year &&
                                        stt.CategoryCode.Trim() == "Approved"
                                  select empR).OrderByDescending(o => o.RequestDate).ToList();

                empRequest.ForEach(empR =>
                {
                    if (empR.TypeRequest == nghiPhepId)
                    {
                        if (empR.StartTypeTime == empR.EndTypeTime)
                        {
                            thongTinCaNhan.SoBuoiNghiCoPhep +=
                                ((empR.EnDate?.Date - empR.StartDate?.Date)?.Days ?? 0) + 0.5;
                        }
                        else
                        {
                            thongTinCaNhan.SoBuoiNghiCoPhep +=
                                ((empR.EnDate?.Date - empR.StartDate?.Date)?.Days ?? 0) + 1;
                        }
                    }

                    if (empR.TypeRequest == nghiKhongPhepId)
                    {
                        if (empR.StartTypeTime == empR.EndTypeTime)
                        {
                            thongTinCaNhan.SoBuoiNghiKhongPhep +=
                                ((empR.EnDate?.Date - empR.StartDate?.Date)?.Days ?? 0) + 1;
                        }
                        else
                        {
                            thongTinCaNhan.SoBuoiNghiKhongPhep +=
                                ((empR.EnDate?.Date - empR.StartDate?.Date)?.Days ?? 0) + 1;
                        }
                    }
                });

                //
                var empAllowance = context.EmployeeAllowance.Where(empalw => empalw.EmployeeId == parameter.EmployeeId)
                    .OrderByDescending(t => t.EffectiveDate.Value.Date).FirstOrDefault();

                if (empAllowance != null)
                {
                    thongTinCaNhan.SoBuoiPhepNam = (double)(empAllowance.MaternityAllowance ?? 0);
                }

                thongTinCaNhan.SoBuoiPhepCon = thongTinCaNhan.SoBuoiPhepNam - thongTinCaNhan.SoBuoiNghiCoPhep > 0
                    ? (thongTinCaNhan.SoBuoiPhepNam - thongTinCaNhan.SoBuoiNghiCoPhep)
                    : 0;

                #endregion

                return new GetThongTinCaNhanThanhVienResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ThongTinCaNhan = thongTinCaNhan
                };
            }
            catch (Exception e)
            {
                return new GetThongTinCaNhanThanhVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinChungThanhVienResult GetThongTinChungThanhVien(GetThongTinChungThanhVienParameter parameter)
        {
            try
            {
                var ThongTinChung = new ThongTinChungThanhVienModel();

                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new GetThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại contact trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                if (user == null)
                {
                    return new GetThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var _user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (_user == null)
                {
                    return new GetThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var _emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == _user.EmployeeId);
                if (_emp_user == null)
                {
                    return new GetThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                bool isShowButtonSua = _emp_user.IsNhanSu;

                //Avatar
                var avatarUrl = "";
                var folder = context.Folder.FirstOrDefault(x => x.FolderType == "QLNV");
                if (folder != null)
                {
                    var file = context.FileInFolder.FirstOrDefault(x => x.FolderId == folder.FolderId &&
                                                                        x.ObjectId == employee.EmployeeId &&
                                                                        x.ObjectType == "AVATAR");

                    if (file != null)
                    {
                        var fileName = file.FileName + "." + file.FileExtension;
                        avatarUrl = Path.Combine("images", folder.Url, fileName);
                    }
                }

                var trangThaiId = 0;
                if (employee.Active == true && user.Active == true)
                {
                    trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                }
                else if (employee.Active == true && user.Active == false)
                {
                    trangThaiId = 2; //Đang hoạt động - Không được truy cập
                }
                else
                {
                    trangThaiId = 3; //Ngừng hoạt động
                }

                //Phòng ban
                var organizationId = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId)
                    ?.OrganizationId;
                var organization = context.Organization.FirstOrDefault(x => x.OrganizationId == organizationId);

                ThongTinChung.EmployeeId = employee.EmployeeId;
                ThongTinChung.EmployeeCode = employee.EmployeeCode;
                ThongTinChung.UserName = user.UserName;
                ThongTinChung.AvatarUrl = avatarUrl != "" ? avatarUrl : null;
                ThongTinChung.FirstName = contact.FirstName;
                ThongTinChung.LastName = contact.LastName;
                ThongTinChung.TenTiengAnh = employee.HoTenTiengAnh;
                ThongTinChung.GioiTinh = contact.Gender;
                ThongTinChung.DateOfBirth = contact.DateOfBirth;
                ThongTinChung.QuocTich = employee.QuocTich;
                ThongTinChung.DanToc = employee.DanToc;
                ThongTinChung.TonGiao = employee.TonGiao;
                ThongTinChung.StartDateMayChamCong = employee.StartDateMayChamCong;
                ThongTinChung.OrganizationId = organizationId;
                ThongTinChung.OrganizationName = organization?.OrganizationName;
                ThongTinChung.PositionId = employee.PositionId;
                ThongTinChung.Phone = contact.Phone;
                ThongTinChung.OtherPhone = contact.OtherPhone;
                ThongTinChung.WorkPhone = contact.WorkPhone;
                ThongTinChung.Email = contact.Email;
                ThongTinChung.WorkEmail = contact.WorkEmail;
                ThongTinChung.TrangThaiId = trangThaiId;
                ThongTinChung.IsOverviewer = employee.IsOverviewer;
                ThongTinChung.ViTriLamViec = employee.ViTriLamViec;
                ThongTinChung.IsNhanSu = employee.IsNhanSu;
                ThongTinChung.NgayNghiViec = employee.NgayNghiViec;

                //Note: Hiện tại thiếu vị trí làm việc

                #region Thông tin ngày phép

                ThongTinChung.SoNgayDaNghiPhep = employee.SoNgayDaNghiPhep ?? 0;
                ThongTinChung.SoNgayPhepConLai = employee.SoNgayPhepConLai ?? 0;

                #endregion

                return new GetThongTinChungThanhVienResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ThongTinChung = ThongTinChung,
                    IsShowButtonSua = isShowButtonSua
                };
            }
            catch (Exception e)
            {
                return new GetThongTinChungThanhVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveThongTinChungThanhVienResult SaveThongTinChungThanhVien(SaveThongTinChungThanhVienParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.ThongTinChungThanhVien.EmployeeId);
                if (employee == null)
                {
                    return new SaveThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact = context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new SaveThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại contact trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                if (user == null)
                {
                    return new SaveThongTinChungThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                #region Kiểm tra thay đổi trên object employee

                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var contentNote = "";

                var _oldEmployeeModel = employee as Employee;
                var _newEmployeeModel = new Employee
                {
                    HoTenTiengAnh = parameter.ThongTinChungThanhVien.TenTiengAnh,
                    QuocTich = parameter.ThongTinChungThanhVien.QuocTich,
                    DanToc = parameter.ThongTinChungThanhVien.DanToc,
                    TonGiao = parameter.ThongTinChungThanhVien.TonGiao,
                    IsOverviewer = parameter.ThongTinChungThanhVien.IsOverviewer,
                    ViTriLamViec = parameter.ThongTinChungThanhVien.ViTriLamViec,
                    OrganizationId = parameter.ListPhongBanId[0],
                    NgayNghiViec = parameter.ThongTinChungThanhVien.NgayNghiViec
                };

                CompareLogic compareLogic = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareField = new List<string> { "HoTenTiengAnh", "QuocTich", "DanToc", "TonGiao", "ViTriLamViec", "IsOverviewer", "NgayNghiViec" };

                compareLogic.Config.MembersToInclude = listCompareField;
                compareLogic.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareEmployee = compareLogic.Compare(_oldEmployeeModel, _newEmployeeModel);

                var trangThaiId = 0;
                var trangThaiText = "";
                if (employee.Active == true && user.Active == true)
                {
                    trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                    trangThaiText = "Đang hoạt động - Được phê duyệt";
                }
                else if (employee.Active == true && user.Active == false)
                {
                    trangThaiId = 2; //Đang hoạt động - Không được truy cập
                    trangThaiText = "Đang hoạt động - Không được truy cập";
                }
                else
                {
                    trangThaiId = 3; //Ngừng hoạt động
                    trangThaiText = "Ngừng hoạt động";
                }

                //Nếu có thay đổi
                if (!compareEmployee.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="HoTenTiengAnh",
                                Key="Tên tiếng anh"
                            },
                            new BaseType()
                            {
                                Name="QuocTich",
                                Key="Quốc tich"
                            },
                            new BaseType()
                            {
                                Name="DanToc",
                                Key="Dân tộc"
                            },
                            new BaseType()
                            {
                                Name="TonGiao",
                                Key="Tôn giáo"
                            },
                            new BaseType()
                            {
                                Name="ViTriLamViec",
                                Key="Vị trí làm việc"
                            },
                            new BaseType()
                            {
                                Name="IsOverviewer",
                                Key="Phỏng vấn ứng viên"
                            },
                            new BaseType()
                            {
                                Name="NgayNghiViec",
                                Key="Ngày nghỉ việc"
                            }
                        };

                    compareEmployee.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        if (item.PropertyName == "NgayNghiViec")
                        {
                            var oldNgayNghiViec = (_oldEmployeeModel.NgayNghiViec != null ? _oldEmployeeModel.NgayNghiViec.Value.Date.ToString("dd/MM/yyyy") : "''");
                            var newNgayNghiViec = (_newEmployeeModel.NgayNghiViec != null ? _newEmployeeModel.NgayNghiViec.Value.Date.ToString("dd/MM/yyyy") : "''");
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayNghiViec + " sang " + newNgayNghiViec + "<p>";
                        }
                        else
                        {
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + item.Object1Value + " sang " + item.Object2Value + "<p>";
                        }
                    });
                }
                if (_oldEmployeeModel.OrganizationId != _newEmployeeModel.OrganizationId)
                {
                    //Phòng ban
                    var oldOrganization = context.Organization.FirstOrDefault(x => x.OrganizationId == _oldEmployeeModel.OrganizationId)?.OrganizationName;
                    var newOrganization = context.Organization.FirstOrDefault(x => x.OrganizationId == _newEmployeeModel.OrganizationId)?.OrganizationName;

                    contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Trạng thái từ " + oldOrganization + " sang " + newOrganization + "<p>";
                }

                #endregion

                #region Kiểm tra thay đổi trên object contact

                var _oldContactModel = contact as Contact;
                var _newContactModel = new Contact
                {
                    FirstName = parameter.ThongTinChungThanhVien.FirstName,
                    LastName = parameter.ThongTinChungThanhVien.LastName,
                    Gender = parameter.ThongTinChungThanhVien.GioiTinh,
                    DateOfBirth = parameter.ThongTinChungThanhVien.DateOfBirth,
                    Phone = parameter.ThongTinChungThanhVien.Phone,
                    OtherPhone = parameter.ThongTinChungThanhVien.OtherPhone,
                    WorkPhone = parameter.ThongTinChungThanhVien.WorkPhone,
                    Email = parameter.ThongTinChungThanhVien.Email,
                    WorkEmail = parameter.ThongTinChungThanhVien.WorkEmail
                };

                CompareLogic compareLogicContact = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareFieldContact = new List<string> { "FirstName", "LastName", "Gender", "DateOfBirth", "Phone", "OtherPhone", "WorkPhone", "Email", "WorkEmail" };

                compareLogicContact.Config.MembersToInclude = listCompareFieldContact;
                compareLogicContact.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareContact = compareLogicContact.Compare(_oldContactModel, _newContactModel);

                //Nếu có thay đổi
                if (!compareContact.AreEqual)
                {
                    var listField = new List<BaseType>()
                    {
                        new BaseType()
                        {
                            Name = "FirstName",
                            Key = "Họ và tên đệm"
                        },
                        new BaseType()
                        {
                            Name = "LastName",
                            Key = "Tên tiếng việt"
                        },
                        new BaseType()
                        {
                            Name = "Gender",
                            Key = "Giới tính"
                        },
                        new BaseType()
                        {
                            Name = "DateOfBirth",
                            Key = "Ngày sinh"
                        },
                        new BaseType()
                        {
                            Name = "Phone",
                            Key = "Số điện thoại cá nhân"
                        },
                        new BaseType()
                        {
                            Name = "OtherPhone",
                            Key = "Số điện thoại nhà riêng"
                        },
                        new BaseType()
                        {
                            Name = "WorkPhone",
                            Key = "Số điện thoại công ty"
                        },
                        new BaseType()
                        {
                            Name = "Email",
                            Key = "Email cá nhân"
                        },
                        new BaseType()
                        {
                            Name = "WorkEmail",
                            Key = "Email công ty"
                        }
                    };

                    compareContact.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        if (item.PropertyName == "Gender")
                        {
                            var oldGender = _oldContactModel.Gender != null ? (_oldContactModel.Gender == "NU" ? "Nữ" : "Nam") : "''";
                            var newGender = _newContactModel.Gender != null ? (_newContactModel.Gender == "NU" ? "Nữ" : "Nam") : "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldGender + " sang " + newGender + "<p>";
                        }
                        else if (item.PropertyName == "DateOfBirth")
                        {
                            var oldNgaySinh = (_oldContactModel.DateOfBirth != null ? _oldContactModel.DateOfBirth.Value.Date.ToString("dd/MM/yyyy") : "''");
                            var newNgaySinh = (_newContactModel.DateOfBirth != null ? _newContactModel.DateOfBirth.Value.Date.ToString("dd/MM/yyyy") : "''");
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgaySinh + " sang " + newNgaySinh + "<p>";
                        }
                        else
                        {
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                        }
                    });
                }

                #endregion

                #region Kiểm tra trùng tên tài khoản: Hiện tại Comment vì ko có tính năng đổi tên tài khoản

                //var existsUserName = context.User.FirstOrDefault(x => x.EmployeeId != employee.EmployeeId &&
                //                                                      x.UserName.Trim().ToLower() == parameter
                //                                                          .ThongTinChungThanhVien
                //                                                          .UserName.Trim().ToLower());

                //if (existsUserName != null)
                //{
                //    return new SaveThongTinChungThanhVienResult()
                //    {
                //        MessageCode = "Tài khoản này đã được sử dụng, vui lòng nhập lại tài khoản khác",
                //        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                //    };
                //}

                #endregion

                employee.HoTenTiengAnh = parameter.ThongTinChungThanhVien.TenTiengAnh;
                employee.QuocTich = parameter.ThongTinChungThanhVien.QuocTich;
                employee.DanToc = parameter.ThongTinChungThanhVien.DanToc;
                employee.TonGiao = parameter.ThongTinChungThanhVien.TonGiao;
                //employee.StartDateMayChamCong = parameter.ThongTinChungThanhVien.StartDateMayChamCong;
                employee.IsOverviewer = parameter.ThongTinChungThanhVien.IsOverviewer;
                employee.ViTriLamViec = parameter.ThongTinChungThanhVien.ViTriLamViec;
                employee.IsNhanSu = parameter.ThongTinChungThanhVien.IsNhanSu;
                employee.NgayNghiViec = parameter.ThongTinChungThanhVien.NgayNghiViec;
                employee.EmployeeName = parameter.ThongTinChungThanhVien.FirstName + " " + parameter.ThongTinChungThanhVien.LastName;
                employee.SoNgayDaNghiPhep = parameter.ThongTinChungThanhVien.SoNgayDaNghiPhep;
                employee.SoNgayPhepConLai = parameter.ThongTinChungThanhVien.SoNgayPhepConLai;

                #region Các phòng ban mà nhân viên trực thuộc

                var listThanhVienPhongBan = new List<ThanhVienPhongBan>();

                //Xóa phòng ban hiện tại
                var listOrganizationOld = context.ThanhVienPhongBan.Where(x => x.EmployeeId == employee.EmployeeId);
                var orgRole = listOrganizationOld.First();
                context.ThanhVienPhongBan.RemoveRange(listOrganizationOld);

                parameter.ListPhongBanId.ForEach(item =>
                {
                    var thanhVienPhongBan = new ThanhVienPhongBan();
                    thanhVienPhongBan.Id = Guid.NewGuid();
                    thanhVienPhongBan.EmployeeId = employee.EmployeeId;
                    thanhVienPhongBan.OrganizationId = item;
                    thanhVienPhongBan.IsManager = orgRole.IsManager;

                    listThanhVienPhongBan.Add(thanhVienPhongBan);
                });

                context.ThanhVienPhongBan.AddRange(listThanhVienPhongBan);

                if (listThanhVienPhongBan.Count > 0)
                {
                    employee.OrganizationId = listThanhVienPhongBan[0].OrganizationId;
                }

                #endregion

                //employee.PositionId = parameter.ThongTinChungThanhVien.PositionId;

                contact.FirstName = parameter.ThongTinChungThanhVien.FirstName;
                contact.LastName = parameter.ThongTinChungThanhVien.LastName;
                contact.Gender = parameter.ThongTinChungThanhVien.GioiTinh;
                contact.DateOfBirth = parameter.ThongTinChungThanhVien.DateOfBirth;
                contact.Phone = parameter.ThongTinChungThanhVien.Phone;
                contact.OtherPhone = parameter.ThongTinChungThanhVien.OtherPhone;
                contact.WorkPhone = parameter.ThongTinChungThanhVien.WorkPhone;
                contact.Email = parameter.ThongTinChungThanhVien.Email;
                contact.WorkEmail = parameter.ThongTinChungThanhVien.WorkEmail;
                //Note: Hiện tại thiếu vị trí làm việc

                //Trạng thái
                var newTrangThaiText = "";
                if (parameter.ThongTinChungThanhVien.TrangThaiId == 1)
                {
                    employee.Active = true;
                    user.Active = true;
                    newTrangThaiText = "Đang hoạt động - Được phê duyệt";
                }
                else if (parameter.ThongTinChungThanhVien.TrangThaiId == 2)
                {
                    employee.Active = true;
                    user.Active = false;
                    newTrangThaiText = "Đang hoạt động - Không được truy cập";
                }
                else if (parameter.ThongTinChungThanhVien.TrangThaiId == 3)
                {
                    employee.Active = false;
                    user.Active = false;
                    newTrangThaiText = "Ngừng hoạt động";
                }

                //Lưu ghi chú thay đổi trạng thái employee
                if (parameter.ThongTinChungThanhVien.TrangThaiId != trangThaiId)
                {
                    contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Trạng thái từ " + trangThaiText + " sang " + newTrangThaiText + "<p>";
                }

                context.Employee.Update(employee);
                context.Contact.Update(contact);
                context.User.Update(user);

                #region Upload file

                if (parameter.FileBase64 != null && !String.IsNullOrWhiteSpace(parameter.FileBase64.Base64))
                {
                    var folder = context.Folder.FirstOrDefault(x => x.FolderType == "QLNV");

                    if (folder != null)
                    {
                        string folderName = ConvertFolderUrl(folder.Url);
                        string webRootPath = hostingEnvironment.WebRootPath;
                        string newPath = Path.Combine(webRootPath, folderName);

                        var avatar = context.FileInFolder.FirstOrDefault(x => x.FolderId == folder.FolderId &&
                                                                              x.ObjectId == employee.EmployeeId &&
                                                                              x.ObjectType == "AVATAR");
                        //Xóa avatar cũ 
                        if (avatar != null)
                        {
                            context.FileInFolder.Remove(avatar);

                            //Xóa file vật lý
                            string url = webRootPath + "\\" + folder.Url + "\\" + avatar.FileName + "." +
                                         avatar.FileExtension;

                            //Nếu tồn tại file vật lý
                            if (File.Exists(url))
                            {
                                File.Delete(url);
                            }
                        }

                        //Lưu file avatar mới
                        var file = new FileInFolder()
                        {
                            Active = true,
                            CreatedById = Guid.Empty,
                            CreatedDate = DateTime.Now,
                            FileInFolderId = Guid.NewGuid(),
                            FileName = employee.EmployeeName?.Trim() + "_" + Guid.NewGuid(),
                            FolderId = folder.FolderId,
                            ObjectId = employee.EmployeeId,
                            ObjectType = "AVATAR",
                            Size = "0",
                            FileExtension = parameter.FileBase64.Extension
                        };

                        context.FileInFolder.Add(file);

                        var fileName = file.FileName + "." + parameter.FileBase64.Extension;

                        string fullPath = Path.Combine(newPath, fileName);
                        var bytes = Convert.FromBase64String(parameter.FileBase64.Base64);
                        using (var imageFile = new FileStream(fullPath, FileMode.Create))
                        {
                            imageFile.Write(bytes, 0, bytes.Length);
                            imageFile.Flush();
                        }
                    }
                }

                #endregion

                #region Thêm ghi chú

                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = employee.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion

                context.SaveChanges();

                return new SaveThongTinChungThanhVienResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinChungThanhVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveThongTinCaNhanThanhVienResult SaveThongTinCaNhanThanhVien(SaveThongTinCaNhanThanhVienParameter parameter)
        {
            try
            {
                var employee =
                    context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.ThongTinCaNhanThanhVien.EmployeeId);
                if (employee == null)
                {
                    return new SaveThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new SaveThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại contact trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var existsEmail = context.Contact.FirstOrDefault(x => x.ObjectId != employee.EmployeeId &&
                                                                      x.ObjectType == "EMP" &&
                                                                      x.Email != null &&
                                                                      x.Email.Trim().ToLower() ==
                                                                      parameter.ThongTinCaNhanThanhVien.Email.Trim()
                                                                          .ToLower());

                if (existsEmail != null)
                {
                    return new SaveThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Email đã được sử dụng bởi thành viên khác, vui lòng nhập lại email khác",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var existsEmployeeCode = context.Employee.FirstOrDefault(x => x.EmployeeCode != null &&
                                                                              x.EmployeeCode.Trim().ToLower() ==
                                                                              parameter.ThongTinCaNhanThanhVien
                                                                                  .EmployeeCode.Trim().ToLower() &&
                                                                              x.EmployeeId != employee.EmployeeId);

                if (existsEmployeeCode != null)
                {
                    return new SaveThongTinCaNhanThanhVienResult()
                    {
                        MessageCode = "Mã nhân viên đã được sử dụng, vui lòng nhập lại mã khác",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                contact.FirstName = parameter.ThongTinCaNhanThanhVien.FirstName?.Trim();
                contact.LastName = parameter.ThongTinCaNhanThanhVien.LastName?.Trim();
                contact.Gender = parameter.ThongTinCaNhanThanhVien.Gender;
                contact.DateOfBirth = parameter.ThongTinCaNhanThanhVien.DateOfBirth;
                contact.Phone = parameter.ThongTinCaNhanThanhVien.Phone?.Trim();
                contact.Email = parameter.ThongTinCaNhanThanhVien.Email?.Trim();
                contact.Address = parameter.ThongTinCaNhanThanhVien.Address?.Trim();

                employee.EmployeeCode = parameter.ThongTinCaNhanThanhVien.EmployeeCode?.Trim();
                employee.EmployeeName = (contact.FirstName + " " + contact.LastName)?.Trim();

                context.Contact.Update(contact);
                context.Employee.Update(employee);
                context.SaveChanges();

                return new SaveThongTinCaNhanThanhVienResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinCaNhanThanhVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetCauHinhPhanQuyenResult GetCauHinhPhanQuyen(GetCauHinhPhanQuyenParameter parameter)
        {
            try
            {
                Guid RoleId = Guid.Empty;

                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetCauHinhPhanQuyenResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                if (user == null)
                {
                    return new GetCauHinhPhanQuyenResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var userRole = context.UserRole.FirstOrDefault(x => x.UserId == user.UserId);
                if (userRole != null)
                {
                    RoleId = userRole.RoleId ?? Guid.Empty;
                }

                var listOrganization = context.Organization.ToList();
                var listSelectedDonVi = context.ThanhVienPhongBan.Where(x => x.EmployeeId == employee.EmployeeId)
                    .Select(y => new ThanhVienPhongBanModel
                    {
                        Id = y.Id,
                        EmployeeId = y.EmployeeId,
                        OrganizationId = y.OrganizationId,
                        IsManager = y.IsManager
                    }).ToList();

                listSelectedDonVi.ForEach(item =>
                {
                    var donVi = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                    item.OrganizationName = donVi?.OrganizationName;
                });

                var user_edit = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user_edit.EmployeeId);
                bool isShowButtonSua = emp_user.IsNhanSu;

                return new GetCauHinhPhanQuyenResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    RoleId = RoleId,
                    IsManager = employee.IsManager,
                    ListSelectedDonVi = listSelectedDonVi,
                    IsShowButtonSua = isShowButtonSua
                };
            }
            catch (Exception e)
            {
                return new GetCauHinhPhanQuyenResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveCauHinhPhanQuyenResult SaveCauHinhPhanQuyen(SaveCauHinhPhanQuyenParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new SaveCauHinhPhanQuyenResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                if (user == null)
                {
                    return new SaveCauHinhPhanQuyenResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                //Phân quyền dữ liệu
                employee.IsManager = parameter.IsManager;
                context.Employee.Update(employee);

                //Phân quyền chức năng
                var userRole = context.UserRole.FirstOrDefault(x => x.UserId == user.UserId);
                if (userRole != null)
                {
                    context.UserRole.Remove(userRole);
                }

                if (parameter.RoleId != null)
                {
                    var _newUserRole = new UserRole();
                    _newUserRole.UserRoleId = Guid.NewGuid();
                    _newUserRole.UserId = user.UserId;
                    _newUserRole.RoleId = parameter.RoleId;

                    context.UserRole.Add(_newUserRole);
                }

                //Phòng ban
                if (parameter.ListThanhVienPhongBan?.Count > 0)
                {
                    var listOld = context.ThanhVienPhongBan.Where(x => x.EmployeeId == employee.EmployeeId).ToList();
                    context.ThanhVienPhongBan.RemoveRange(listOld);

                    var listNew = new List<ThanhVienPhongBan>();
                    parameter.ListThanhVienPhongBan.ForEach(item =>
                    {
                        var newItem = new ThanhVienPhongBan();
                        newItem.Id = Guid.NewGuid();
                        newItem.EmployeeId = employee.EmployeeId;
                        newItem.OrganizationId = item.OrganizationId.Value;
                        newItem.IsManager = item.IsManager;

                        listNew.Add(newItem);
                    });

                    context.ThanhVienPhongBan.AddRange(listNew);

                    if (listNew.Count > 0)
                    {
                        employee.OrganizationId = listNew[0].OrganizationId;
                    }
                }
                else
                {
                    return new SaveCauHinhPhanQuyenResult()
                    {
                        MessageCode = "Nhân viên phải thuộc ít nhất một đơn vị",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                context.SaveChanges();

                return new SaveCauHinhPhanQuyenResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveCauHinhPhanQuyenResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinNhanSuResult GetThongTinNhanSu(GetThongTinNhanSuParameter parameter)
        {
            try
            {
                var ThongTinNhanSu = new ThongTinNhanSuModel();
                var listDeptCode = new List<BaseType>();
                var listSubCode1 = new List<BaseType>();
                var listSubCode2 = new List<BaseType>();
                var listCapBac = new List<CategoryEntityModel>();
                var listProvince = new List<ProvinceEntityModel>();

                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new GetThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new GetThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                bool isShowButtonSua = emp_user.IsNhanSu;

                ThongTinNhanSu.EmployeeId = employee.EmployeeId;
                ThongTinNhanSu.CodeMayChamCong = employee.CodeMayChamCong;
                ThongTinNhanSu.TenMayChamCong = employee.TenMayChamCong;
                ThongTinNhanSu.SubCode1Value = employee.SubCode1Value;
                ThongTinNhanSu.SubCode2Value = employee.SubCode2Value;
                ThongTinNhanSu.DeptCodeValue = employee.DeptCodeValue;
                ThongTinNhanSu.CapBacId = employee.CapBacId;
                ThongTinNhanSu.MaTest = employee.MaTest;
                ThongTinNhanSu.DiemTest = employee.DiemTest;
                ThongTinNhanSu.IdentityId = contact.IdentityId;
                ThongTinNhanSu.IdentityIddateOfIssue = contact.IdentityIddateOfIssue;
                ThongTinNhanSu.IdentityIdplaceOfIssue = contact.IdentityIdplaceOfIssue;
                ThongTinNhanSu.NoiCapCmndtiengAnh = contact.NoiCapCmndtiengAnh;
                ThongTinNhanSu.NguyenQuan = contact.NguyenQuan;
                ThongTinNhanSu.NoiSinh = contact.NoiSinh;
                ThongTinNhanSu.HoKhauThuongTruTv = contact.HoKhauThuongTruTv;
                ThongTinNhanSu.HoKhauThuongTruTa = contact.HoKhauThuongTruTa;
                ThongTinNhanSu.Address = contact.Address;
                ThongTinNhanSu.AddressTiengAnh = contact.AddressTiengAnh;
                ThongTinNhanSu.ProvinceId = contact.ProvinceId;

                listDeptCode = GeneralList.GetDeptCode();
                listSubCode1 = GeneralList.GetSubCode1();
                listSubCode2 = GeneralList.GetSubCode2();

                #region Lấy list cấp bậc
                var capBacType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "CAPBAC");
                if (capBacType != null)
                {
                    listCapBac = context.Category.Where(x => x.CategoryTypeId == capBacType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryName = y.CategoryName
                        }).OrderBy(z => z.CategoryName).ToList();
                }
                #endregion

                #region Lấy địa điểm làm việc
                listProvince = context.Province.Where(x => x.IsShowAsset == true).Select(p => new ProvinceEntityModel()
                {
                    ProvinceId = p.ProvinceId,
                    ProvinceName = p.ProvinceName,
                    ProvinceCode = p.ProvinceCode,
                }).OrderBy(p => p.ProvinceName).ToList();
                #endregion

                return new GetThongTinNhanSuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ThongTinNhanSu = ThongTinNhanSu,
                    ListSubCode1 = listSubCode1,
                    ListSubCode2 = listSubCode2,
                    ListDeptCode = listDeptCode,
                    ListCapBac = listCapBac,
                    ListProvince = listProvince,
                    IsShowButtonSua = isShowButtonSua
                };
            }
            catch (Exception e)
            {
                return new GetThongTinNhanSuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinGiaDinhResult GetThongTinGiaDinh(GetThongTinGiaDinhParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinGiaDinhResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact = context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId &&
                                                                  x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new GetThongTinGiaDinhResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetThongTinGiaDinhResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new GetThongTinGiaDinhResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                bool isManager = emp_user.IsNhanSu; //Chỉ ai là Quản lý nhân sự thì mới được Thêm, Sửa, Xóa thông tin

                var quanHeGiaDinh = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "QHGD");
                var listQuanHe = new List<CategoryEntityModel>();
                if (quanHeGiaDinh != null)
                {
                    listQuanHe = context.Category
                        .Where(x => x.CategoryTypeId == quanHeGiaDinh.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                var listThanhVienGiaDinh = context.Contact.Where(x => x.ObjectId == employee.EmployeeId &&
                                                                      x.ObjectType == ContactObjectType.EMP_CON &&
                                                                      x.Active == true)
                    .Select(obj => new ContactEntityModel
                    {
                        ContactId = obj.ContactId,
                        ObjectType = obj.ObjectType,
                        Phone = obj.Phone,
                        Email = obj.Email,
                        DateOfBirth = obj.DateOfBirth,
                        FullName = (obj.FirstName ?? "").Trim() + " " + (obj.LastName ?? "").Trim(),
                        QuanHeId = obj.QuanHeId,
                        PhuThuoc = obj.PhuThuoc,
                        PhuThuocTuNgay = obj.PhuThuocTuNgay,
                        PhuThuocDenNgay = obj.PhuThuocDenNgay
                    }).ToList();

                listThanhVienGiaDinh.ForEach(item =>
                {
                    var quanHe = listQuanHe.FirstOrDefault(x => x.CategoryId == item.QuanHeId);
                    item.TenQuanHe = quanHe?.CategoryName;
                });

                return new GetThongTinGiaDinhResult()
                {
                    MessageCode = "Success",
                    StatusCode = HttpStatusCode.OK,
                    ListThanhVienGiaDinh = listThanhVienGiaDinh,
                    IsManager = isManager,
                    ListQuanHe = listQuanHe
                };
            }
            catch (Exception e)
            {
                return new GetThongTinGiaDinhResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CreateOrUpdateThongTinGiaDinhResult CreateOrUpdateThongTinGiaDinh(CreateOrUpdateThongTinGiaDinhParameter parameter)
        {
            try
            {
                var thongTinGiaDinh = parameter.ThongTinGiaDinh;
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == thongTinGiaDinh.EmployeeId);
                if (employee == null)
                {
                    return new CreateOrUpdateThongTinGiaDinhResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var fullName = thongTinGiaDinh.FullName.Trim();
                if (String.IsNullOrWhiteSpace(fullName))
                {
                    return new CreateOrUpdateThongTinGiaDinhResult()
                    {
                        MessageCode = "Họ và tên không được để trống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new CreateOrUpdateThongTinGiaDinhResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new CreateOrUpdateThongTinGiaDinhResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp_user.IsManager != true)
                {
                    return new CreateOrUpdateThongTinGiaDinhResult()
                    {
                        MessageCode = "Chỉ quản lý mới được quyền thêm/sửa thông thông tin",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var listName = fullName.Split(" ");
                string firstName = "";
                string lastName = "";

                //Trim các từ
                for (var i = 0; i < listName.Length; i++)
                {
                    listName[i] = listName[i].Trim();
                }

                firstName = listName[0];

                //Nếu tên có nhiều hơn 1 từ
                if (listName.Length > 1)
                {

                    var listLastName = listName.Where(x => x != listName[0]).ToArray();
                    lastName = String.Join(" ", listLastName);
                }

                var mess = "";

                //Tạo mới thành viên gia đình
                if (thongTinGiaDinh.ContactId == null)
                {
                    var newThanhVien = new Contact();
                    newThanhVien.ContactId = Guid.NewGuid();
                    newThanhVien.ObjectId = thongTinGiaDinh.EmployeeId;
                    newThanhVien.ObjectType = ContactObjectType.EMP_CON;
                    newThanhVien.FirstName = firstName;
                    newThanhVien.LastName = lastName;
                    newThanhVien.Phone = thongTinGiaDinh.Phone;
                    newThanhVien.DateOfBirth = thongTinGiaDinh.DateOfBirth;
                    newThanhVien.Email = thongTinGiaDinh.Email;
                    newThanhVien.QuanHeId = thongTinGiaDinh.QuanHeId;
                    newThanhVien.CreatedById = parameter.UserId;
                    newThanhVien.CreatedDate = DateTime.Now;
                    newThanhVien.Active = true;
                    newThanhVien.PhuThuoc = thongTinGiaDinh.PhuThuoc;
                    newThanhVien.PhuThuocTuNgay = thongTinGiaDinh.PhuThuocTuNgay;
                    newThanhVien.PhuThuocDenNgay = thongTinGiaDinh.PhuThuocDenNgay;

                    context.Contact.Add(newThanhVien);
                    mess = "Thêm mới thành công";
                }
                //Cập nhật tt thành viên gia đình
                else
                {
                    var thanhVien = context.Contact.FirstOrDefault(x => x.ContactId == thongTinGiaDinh.ContactId &&
                                                                        x.ObjectType == ContactObjectType.EMP_CON);
                    if (thanhVien == null)
                    {
                        return new CreateOrUpdateThongTinGiaDinhResult()
                        {
                            MessageCode = "Thành viên này không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }

                    #region Kiểm tra thay đổi trên object thông tin gia đình
                    var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                    var listCategory = context.Category.ToList();
                    var contentNote = "";
                    var _oldContactModel = thanhVien as Contact;
                    var _newContactModel = new Contact
                    {
                        Phone = thongTinGiaDinh.Phone,
                        DateOfBirth = thongTinGiaDinh.DateOfBirth,
                        Email = thongTinGiaDinh.Email,
                        QuanHeId = thongTinGiaDinh.QuanHeId,
                        PhuThuoc = thongTinGiaDinh.PhuThuoc,
                        PhuThuocTuNgay = thongTinGiaDinh.PhuThuocTuNgay,
                        PhuThuocDenNgay = thongTinGiaDinh.PhuThuocDenNgay
                    };

                    var oldFullName = thanhVien.LastName != null ? (thanhVien.FirstName + ' ' + thanhVien.LastName) : thanhVien.FirstName;
                    if (oldFullName != fullName)
                    {
                        contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Họ và tên từ " + oldFullName + " sang " + fullName + "<p>";
                    }

                    CompareLogic compareLogic = new CompareLogic();

                    //danh sách trường muốn so sánh
                    var listCompareField = new List<string> {
                    "QuanHeId", "DateOfBirth", "Phone", "Email",  "PhuThuoc", "PhuThuocTuNgay", "PhuThuocDenNgay"};

                    compareLogic.Config.MembersToInclude = listCompareField;
                    compareLogic.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                    ComparisonResult compare = compareLogic.Compare(_oldContactModel, _newContactModel);

                    //Nếu có thay đổi
                    if (!compare.AreEqual)
                    {
                        var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="QuanHeId",
                                Key="Quan hệ"
                            },
                            new BaseType()
                            {
                                Name="DateOfBirth",
                                Key="Ngày sinh"
                            },
                            new BaseType()
                            {
                                Name="Phone",
                                Key="Số điện thoại"
                            },
                            new BaseType()
                            {
                                Name="Email",
                                Key="Email"
                            },
                            new BaseType()
                            {
                                Name="PhuThuoc",
                                Key="Người phụ thuộc"
                            },
                            new BaseType()
                            {
                                Name="PhuThuocTuNgay",
                                Key="Phụ thuộc từ ngày"
                            },
                            new BaseType()
                            {
                                Name="PhuThuocDenNgay",
                                Key="Phụ thuộc đến ngày"
                            }
                        };

                        compare.Differences.ForEach(item =>
                        {
                            var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;

                            if (item.PropertyName == "QuanHeId")
                            {
                                var oldQuanHe = listCategory.FirstOrDefault(x => x.CategoryId == _oldContactModel.QuanHeId)?.CategoryName ?? "''";
                                var newQuanHe = listCategory.FirstOrDefault(x => x.CategoryId == _newContactModel.QuanHeId)?.CategoryName ?? "''";
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldQuanHe + " sang " + newQuanHe + "<p>";
                            }
                            else if (item.PropertyName == "DateOfBirth")
                            {
                                var oldNgayCap = (_oldContactModel.DateOfBirth != null ? _oldContactModel.DateOfBirth.Value.Date.ToString("dd/MM/yyyy") : "''");
                                var newNgayCap = (_newContactModel.DateOfBirth != null ? _newContactModel.DateOfBirth.Value.Date.ToString("dd/MM/yyyy") : "''");
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayCap + " sang " + newNgayCap + "<p>";
                            }
                            else if (item.PropertyName == "PhuThuocTuNgay")
                            {
                                var oldNgayCap = (_oldContactModel.PhuThuocTuNgay != null ? _oldContactModel.PhuThuocTuNgay.Value.Date.ToString("dd/MM/yyyy") : "''");
                                var newNgayCap = (_newContactModel.PhuThuocTuNgay != null ? _newContactModel.PhuThuocTuNgay.Value.Date.ToString("dd/MM/yyyy") : "''");
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayCap + " sang " + newNgayCap + "<p>";
                            }
                            else if (item.PropertyName == "PhuThuocDenNgay")
                            {
                                var oldNgayCap = (_oldContactModel.PhuThuocDenNgay != null ? _oldContactModel.PhuThuocDenNgay.Value.Date.ToString("dd/MM/yyyy") : "''");
                                var newNgayCap = (_newContactModel.PhuThuocDenNgay != null ? _newContactModel.PhuThuocDenNgay.Value.Date.ToString("dd/MM/yyyy") : "''");
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayCap + " sang " + newNgayCap + "<p>";
                            }
                            else
                            {
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                            }

                        });
                    }

                    #endregion

                    thanhVien.FirstName = firstName;
                    thanhVien.LastName = lastName;
                    thanhVien.Phone = thongTinGiaDinh.Phone;
                    thanhVien.DateOfBirth = thongTinGiaDinh.DateOfBirth;
                    thanhVien.Email = thongTinGiaDinh.Email;
                    thanhVien.QuanHeId = thongTinGiaDinh.QuanHeId;
                    thanhVien.PhuThuoc = thongTinGiaDinh.PhuThuoc;
                    thanhVien.PhuThuocTuNgay = thongTinGiaDinh.PhuThuocTuNgay;
                    thanhVien.PhuThuocDenNgay = thongTinGiaDinh.PhuThuocDenNgay;

                    context.Contact.Update(thanhVien);

                    #region Thêm ghi chú
                    if (contentNote != "")
                    {
                        Note note = new Note
                        {
                            NoteId = Guid.NewGuid(),
                            Description = contentNote,
                            Type = "ADD",
                            ObjectId = thongTinGiaDinh.EmployeeId,
                            ObjectType = "EMP",
                            Active = true,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            NoteTitle = "đã thêm ghi chú"
                        };

                        context.Note.Add(note);
                    }
                    #endregion

                    mess = "Lưu thành công";
                }

                context.SaveChanges();

                return new CreateOrUpdateThongTinGiaDinhResult()
                {
                    MessageCode = mess,
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new CreateOrUpdateThongTinGiaDinhResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetCheckListTaiLieuResult GetCheckListTaiLieu(GetCheckListTaiLieuParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetCheckListTaiLieuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
                var contact = context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new GetCheckListTaiLieuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
                var listTaiLieu = context.TaiLieuNhanVien.Where(x => x.EmployeeId == employee.EmployeeId && x.Active == true)
                    .Select(obj => new TaiLieuNhanVienEntityModel
                    {
                        TaiLieuNhanVienId = obj.TaiLieuNhanVienId,
                        TenTaiLieu = obj.TenTaiLieu,
                        EmployeeId = obj.EmployeeId,
                        NgayNop = obj.NgayNop,
                        NgayHen = obj.NgayHen,
                    }).ToList();

                return new GetCheckListTaiLieuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListTaiLieu = listTaiLieu
                };
            }
            catch (Exception e)
            {
                return new GetCheckListTaiLieuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CreateHopDongNhanSuResult CreateHopDongNhanSu(CreateHopDongNhanSuParameter parameter)
        {
            try
            {
                //var loaiHopDongType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS");
                //if (loaiHopDongType == null)
                //{
                //    return new CreateHopDongNhanSuResult()
                //    {
                //        MessageCode = "Dữ liệu danh mục: Loại hợp đồng nhân sự - không tồn tại",
                //        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                //    };
                //}

                //var hopDongVoThoiHan = context.Category.FirstOrDefault(x =>
                //    x.CategoryTypeId == loaiHopDongType.CategoryTypeId &&
                //    x.CategoryCode == "HDVTH");
                //if (hopDongVoThoiHan == null)
                //{
                //    return new CreateHopDongNhanSuResult()
                //    {
                //        MessageCode = "Dữ liệu danh mục: Loại hợp đồng nhân sự => Hợp đồng không xác định thời hạn - không tồn tại",
                //        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                //    };
                //}

                var hopDongNhanSu = parameter.HopDongNhanSu.ToEntity();
                hopDongNhanSu.SoHopDong = hopDongNhanSu.SoHopDong.Trim();
                hopDongNhanSu.SoPhuLuc = hopDongNhanSu.SoPhuLuc.Trim();
                hopDongNhanSu.CreatedById = parameter.UserId;

                #region Validation

                var countSoHopDong = context.HopDongNhanSu.Count(x =>
                    x.SoHopDong.ToLower().Trim() == hopDongNhanSu.SoHopDong.ToLower().Trim());

                if (countSoHopDong > 0)
                {
                    return new CreateHopDongNhanSuResult()
                    {
                        MessageCode = "Số hợp đồng đã tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var countSoPhuLuc = context.HopDongNhanSu.Count(x =>
                    x.SoPhuLuc.ToLower().Trim() == hopDongNhanSu.SoPhuLuc.ToLower().Trim());

                if (countSoPhuLuc > 0)
                {
                    return new CreateHopDongNhanSuResult()
                    {
                        MessageCode = "Số phụ lục đã tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                //Ngày ký hợp đồng không được trùng với ngày ký hợp đồng đã tạo
                var countNgayKyHopDong = context.HopDongNhanSu
                    .Count(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId &&
                                x.NgayKyHopDong.Date == parameter.HopDongNhanSu.NgayKyHopDong.Date);

                if (countNgayKyHopDong > 0)
                {
                    return new CreateHopDongNhanSuResult()
                    {
                        MessageCode = "Ngày ký hợp đồng đã tồn tại",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
                //Lấy hợp đồng gần nhất
                var hopDongGanNhat = context.HopDongNhanSu
                    .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                    .OrderByDescending(z => z.NgayKyHopDong)
                    .FirstOrDefault();

                //Nếu nhân viên đã có hợp đồng
                if (hopDongGanNhat != null)
                {
                    if (hopDongGanNhat.NgayKetThucHopDong == null)
                    {
                        return new CreateHopDongNhanSuResult()
                        {
                            MessageCode = "Bạn cần cập nhật ngày kết thúc cho hợp đồng hiện tại trước khi tạo hợp đồng mới",
                            StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        };
                    }
                }

                if (hopDongNhanSu.NgayKyHopDong != null && hopDongNhanSu.NgayKetThucHopDong != null)
                {
                    if (hopDongNhanSu.NgayKyHopDong.Date > hopDongNhanSu.NgayKetThucHopDong.Value.Date)
                    {
                        return new CreateHopDongNhanSuResult()
                        {
                            MessageCode = "Ngày kết thúc hợp đồng không được bé hơn Ngày ký hợp đồng",
                            StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        };
                    }
                }

                var listHopDongCuaNhanVien = context.HopDongNhanSu
                    .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                    .OrderBy(x => x.NgayKyHopDong).ToList();

                bool isGiaoNhau = false;
                if (parameter.HopDongNhanSu.NgayKetThucHopDong != null)
                {
                    listHopDongCuaNhanVien.ForEach(item =>
                    {
                        if (item.NgayKetThucHopDong == null || (item.NgayKetThucHopDong != null && item.NgayKyHopDong.Date <= parameter.HopDongNhanSu.NgayKetThucHopDong.Value.Date &&
                            item.NgayKetThucHopDong.Value.Date >= parameter.HopDongNhanSu.NgayKyHopDong.Date))
                        {
                            isGiaoNhau = true;
                        }
                    });
                }
                else
                {
                    if (hopDongGanNhat != null &&
                        parameter.HopDongNhanSu.NgayKyHopDong.Date <= hopDongGanNhat.NgayKetThucHopDong.Value.Date)
                    {
                        isGiaoNhau = true;
                    }
                }

                if (isGiaoNhau)
                {
                    return new CreateHopDongNhanSuResult()
                    {
                        MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                #endregion

                context.HopDongNhanSu.Add(hopDongNhanSu);
                context.SaveChanges();

                #region Kiểm tra và thay đổi ngày vào + chức vụ nhân viên khi tạo hợp đồng
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == hopDongNhanSu.EmployeeId);
                var listDeXuat = context.DeXuatThayDoiChucVu.Where(x => x.TrangThai == 3).ToList(); //lấy đề xuất chức vụ đã duyệt

                var listDeXuatId = listDeXuat.Select(x => x.DeXuatThayDoiChucVuId).ToList();
                var listNhanVienDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => listDeXuatId.Contains(x.DeXuatThayDoiChucVuId)).ToList();

                //lấy đề xuất chức vụ đã duyệt mới nhất của nhân viên
                var deXuatChucVu = (from DX in listDeXuat
                                    join NvDX in listNhanVienDeXuat on DX.DeXuatThayDoiChucVuId equals NvDX.DeXuatThayDoiChucVuId
                                    where NvDX.EmployeeId == hopDongNhanSu.EmployeeId
                                    select new NhanVienDeXuatThayDoiChucVu
                                    {
                                        ChucVuDeXuatId = NvDX.ChucVuDeXuatId,
                                        CreatedDate = DX.NgayApDung //Ngày áp dụng
                                    }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                //kiểm tra xem hợp đồng mới tạo có phải là hợp đồng mới nhất của nhân viên
                var hopDongNhanSuNew = context.HopDongNhanSu.Where(x => x.EmployeeId == hopDongNhanSu.EmployeeId).OrderByDescending(x => x.NgayKyHopDong).FirstOrDefault();
                if (hopDongNhanSuNew.HopDongNhanSuId == hopDongNhanSu.HopDongNhanSuId)
                {
                    if (deXuatChucVu != null && deXuatChucVu.CreatedDate != null)
                    {
                        //đề xuất mới nhất lơn hơn hợp đồng mới nhất và đề xuất có thời gian nhỏ hơn tgian hiện tại => cập nhật chức vụ theo đề xuất và ngược lại
                        if (deXuatChucVu.CreatedDate.Value.Date > hopDongNhanSu.NgayKyHopDong.Date && deXuatChucVu.CreatedDate.Value.Date < DateTime.Now.Date)
                        {
                            employee.PositionId = deXuatChucVu.ChucVuDeXuatId;
                        }
                        else
                        {
                            employee.PositionId = hopDongNhanSu.PositionId;
                        }
                    }
                    else
                    {
                        employee.PositionId = hopDongNhanSu.PositionId;
                    }
                }

                //kiểm tra xem hợp đồng mới tạo có phải là hợp đồng cũ nhất của nhân viên
                var hopDongNhanSuOld = context.HopDongNhanSu.Where(x => x.EmployeeId == hopDongNhanSu.EmployeeId).OrderBy(x => x.NgayKyHopDong).FirstOrDefault();
                if (hopDongNhanSuOld.HopDongNhanSuId == hopDongNhanSu.HopDongNhanSuId)
                {
                    employee.StartDateMayChamCong = hopDongNhanSu?.NgayBatDauLamViec;
                }

                employee.UpdatedDate = DateTime.Now;
                context.Employee.Update(employee);
                context.SaveChanges();
                #endregion

                context.SaveChanges();

                return new CreateHopDongNhanSuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new CreateHopDongNhanSuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetHopDongNhanSuByIdResult GetHopDongNhanSuById(GetHopDongNhanSuByIdParameter parameter)
        {
            try
            {
                var hopDongNhanSu = context.HopDongNhanSu.FirstOrDefault(x => x.HopDongNhanSuId == parameter.Id);
                if (hopDongNhanSu == null)
                {
                    return new GetHopDongNhanSuByIdResult()
                    {
                        MessageCode = "Hợp đồng không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                return new GetHopDongNhanSuByIdResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    HopDongNhanSu = new HopDongNhanSuModel(hopDongNhanSu)
                };
            }
            catch (Exception e)
            {
                return new GetHopDongNhanSuByIdResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetListHopDongNhanSuResult GetListHopDongNhanSu(GetListHopDongNhanSuParameter parameter)
        {
            try
            {
                bool isShowButton = false;
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user != null)
                {
                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    isShowButton = emp?.IsNhanSu ?? false;
                }

                var listChucVu = context.Position.Select(y => new PositionModel
                {
                    PositionId = y.PositionId,
                    PositionName = y.PositionName
                }).ToList();

                var loaiHopDongNhanSuType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS");
                var listLoaiHopDongNhanSu = new List<CategoryEntityModel>();
                if (loaiHopDongNhanSuType != null)
                {
                    listLoaiHopDongNhanSu = context.Category
                        .Where(x => x.CategoryTypeId == loaiHopDongNhanSuType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryName = y.CategoryName,
                            CategoryCode = y.CategoryCode
                        }).ToList();
                }

                var listHopDongNhanSu = context.HopDongNhanSu.Where(x => x.EmployeeId == parameter.EmployeeId)
                    .Select(y => new HopDongNhanSuModel(y))
                    .OrderByDescending(z => z.NgayKyHopDong)
                    .ToList();

                var listKyLuong = context.KyLuong.Select(y => new
                {
                    KyLuongId = y.KyLuongId,
                    TuNgay = y.TuNgay,
                    DenNgay = y.DenNgay
                }).ToList();

                var listTongHopChamCong = context.TongHopChamCong
                    .Where(x => x.EmployeeId == parameter.EmployeeId)
                    .Select(y => new
                    {
                        KyLuongId = y.KyLuongId,
                        EmployeeId = y.EmployeeId
                    }).ToList();

                listHopDongNhanSu.ForEach(item =>
                {
                    var position = listChucVu.FirstOrDefault(x => x.PositionId == item.PositionId);
                    var loaiHopDong = listLoaiHopDongNhanSu.FirstOrDefault(x => x.CategoryId == item.LoaiHopDongId);

                    item.PositionName = position?.PositionName;
                    item.LoaiHopDong = loaiHopDong?.CategoryName;

                    //Lấy tất cả kỳ lương phát sinh sau ngày ký hợp đồng
                    var _listKyLuong = listKyLuong.Where(x => x.TuNgay.Date >= item.NgayKyHopDong.Date).ToList();
                    var _listKyLuongId = _listKyLuong.Select(y => y.KyLuongId).ToList();
                    var countTongHopChamCong = listTongHopChamCong.Where(x =>
                        _listKyLuongId.Contains(x.KyLuongId)).Count();

                    //Nếu nhân viên có phát sinh kỳ lương sau khi ký hợp đồng thì
                    if (countTongHopChamCong > 0)
                    {
                        item.IsPhatSinhKyLuong = true;
                    }
                    else
                    {
                        item.IsPhatSinhKyLuong = false;
                    }
                });

                return new GetListHopDongNhanSuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListChucVu = listChucVu,
                    ListLoaiHopDongNhanSu = listLoaiHopDongNhanSu,
                    ListHopDongNhanSu = listHopDongNhanSu,
                    IsShowButton = isShowButton
                };
            }
            catch (Exception e)
            {
                return new GetListHopDongNhanSuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public UpdateHopDongNhanSuResult UpdateHopDongNhanSu(UpdateHopDongNhanSuParameter parameter)
        {
            try
            {
                var hopDongNhanSu = context.HopDongNhanSu
                    .FirstOrDefault(x => x.HopDongNhanSuId == parameter.HopDongNhanSu.HopDongNhanSuId);
                if (hopDongNhanSu == null)
                {
                    return new UpdateHopDongNhanSuResult
                    {
                        MessageCode = "Hợp đồng không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.NotFound,
                    };
                }

                #region Validation

                var countSoHopDong = context.HopDongNhanSu.Count(x =>
                    x.HopDongNhanSuId != parameter.HopDongNhanSu.HopDongNhanSuId &&
                    x.SoHopDong.ToLower().Trim() == parameter.HopDongNhanSu.SoHopDong.ToLower().Trim());

                if (countSoHopDong > 0)
                {
                    return new UpdateHopDongNhanSuResult()
                    {
                        MessageCode = "Số hợp đồng đã tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var countSoPhuLuc = context.HopDongNhanSu.Count(x =>
                    x.HopDongNhanSuId != parameter.HopDongNhanSu.HopDongNhanSuId &&
                    x.SoPhuLuc.ToLower().Trim() == parameter.HopDongNhanSu.SoPhuLuc.ToLower().Trim());

                if (countSoPhuLuc > 0)
                {
                    return new UpdateHopDongNhanSuResult()
                    {
                        MessageCode = "Số phụ lục đã tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                if (parameter.HopDongNhanSu.NgayKyHopDong != null && parameter.HopDongNhanSu.NgayKetThucHopDong != null)
                {
                    if (parameter.HopDongNhanSu.NgayKyHopDong.Date > parameter.HopDongNhanSu.NgayKetThucHopDong.Value.Date)
                    {
                        return new UpdateHopDongNhanSuResult()
                        {
                            MessageCode = "Ngày kết thúc hợp đồng không được bé hơn Ngày ký hợp đồng",
                            StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        };
                    }
                }

                #endregion

                using (var transaction = context.Database.BeginTransaction())
                {
                    #region Kiểm tra thay đổi trên object hợp đồng nhân sự
                    var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                    var listCategory = context.Category.ToList();
                    var listChucVu = context.Position.ToList();
                    var contentNote = "";
                    var _oldHopDongModel = hopDongNhanSu as HopDongNhanSu;
                    var _newHopDongModel = parameter.HopDongNhanSu.ToEntity() as HopDongNhanSu;

                    CompareLogic compareLogic = new CompareLogic();

                    //danh sách trường muốn so sánh
                    var listCompareField = new List<string> {
                    "LoaiHopDongId", "SoHopDong", "SoPhuLuc", "NgayKetThucHopDong",
                    "NgayKyHopDong", "PositionId", "MucLuong"};

                    compareLogic.Config.MembersToInclude = listCompareField;
                    compareLogic.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                    ComparisonResult compare = compareLogic.Compare(_oldHopDongModel, _newHopDongModel);

                    //Nếu có thay đổi
                    if (!compare.AreEqual)
                    {
                        var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="LoaiHopDongId",
                                Key="Loại hợp đồng"
                            },
                            new BaseType()
                            {
                                Name="SoHopDong",
                                Key="Số hợp đồng"
                            },
                            new BaseType()
                            {
                                Name="SoPhuLuc",
                                Key="Số phụ lục"
                            },
                            new BaseType()
                            {
                                Name="NgayKyHopDong",
                                Key="Ngày ký HĐ"
                            },
                            new BaseType()
                            {
                                Name="NgayKetThucHopDong",
                                Key="Ngày kết thúc HĐ"
                            },
                            new BaseType()
                            {
                                Name="PositionId",
                                Key="Chức vụ"
                            },
                            new BaseType()
                            {
                                Name="MucLuong",
                                Key="Mức lương"
                            }
                        };

                        compare.Differences.ForEach(item =>
                        {
                            var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;

                            if (item.PropertyName == "LoaiHopDongId")
                            {
                                var oldLoaiHD = listCategory.FirstOrDefault(x => x.CategoryId == _oldHopDongModel.LoaiHopDongId)?.CategoryName ?? "''";
                                var newLoaiHD = listCategory.FirstOrDefault(x => x.CategoryId == _newHopDongModel.LoaiHopDongId)?.CategoryName ?? "''";
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldLoaiHD + " sang " + newLoaiHD + "<p>";
                            }
                            else if (item.PropertyName == "PositionId")
                            {
                                var oldChucVu = listChucVu.FirstOrDefault(x => x.PositionId == _oldHopDongModel.PositionId)?.PositionName ?? "''";
                                var newChucVu = listChucVu.FirstOrDefault(x => x.PositionId == _newHopDongModel.PositionId)?.PositionName ?? "''";
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldChucVu + " sang " + newChucVu + "<p>";
                            }
                            else if (item.PropertyName == "NgayKyHopDong")
                            {
                                var oldNgayKy = (_oldHopDongModel.NgayKyHopDong != null ? _oldHopDongModel.NgayKyHopDong.Date.ToString("dd/MM/yyyy") : "''");
                                var newNgayKy = (_newHopDongModel.NgayKyHopDong != null ? _newHopDongModel.NgayKyHopDong.Date.ToString("dd/MM/yyyy") : "''");
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayKy + " sang " + newNgayKy + "<p>";
                            }
                            else if (item.PropertyName == "NgayKetThucHopDong")
                            {
                                var oldNgayKetThuc = (_oldHopDongModel.NgayKetThucHopDong != null ? _oldHopDongModel.NgayKetThucHopDong.Value.Date.ToString("dd/MM/yyyy") : "''");
                                var newNgayKetThuc = (_newHopDongModel.NgayKetThucHopDong != null ? _newHopDongModel.NgayKetThucHopDong.Value.Date.ToString("dd/MM/yyyy") : "''");
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayKetThuc + " sang " + newNgayKetThuc + "<p>";
                            }
                            else
                            {
                                contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                            }

                        });
                    }

                    #endregion

                    hopDongNhanSu.LoaiHopDongId = parameter.HopDongNhanSu.LoaiHopDongId;
                    hopDongNhanSu.SoHopDong = parameter.HopDongNhanSu.SoHopDong.Trim();
                    hopDongNhanSu.SoPhuLuc = parameter.HopDongNhanSu.SoPhuLuc.Trim();
                    hopDongNhanSu.NgayKetThucHopDong = parameter.HopDongNhanSu.NgayKetThucHopDong;
                    hopDongNhanSu.UpdatedById = parameter.UserId;
                    hopDongNhanSu.UpdatedDate = DateTime.Now;

                    //Kiểm tra đã có phát sinh kỳ lương sau khi ký hợp đồng không?
                    var listKyLuong = context.KyLuong
                        .Where(x => x.TuNgay.Date >= hopDongNhanSu.NgayKyHopDong.Date).ToList();
                    var listKyLuongId = listKyLuong.Select(y => y.KyLuongId).ToList();
                    var countTongHopChamCong = context.TongHopChamCong.Where(x =>
                            listKyLuongId.Contains(x.KyLuongId) &&
                            x.EmployeeId == hopDongNhanSu.EmployeeId).Count();

                    bool isPhatSinhKyLuong = false;
                    if (countTongHopChamCong > 0) isPhatSinhKyLuong = true;

                    //Nếu hợp đồng chưa phát sinh kỳ lương thì cho phép sửa các trường
                    if (!isPhatSinhKyLuong)
                    {
                        hopDongNhanSu.NgayKyHopDong = parameter.HopDongNhanSu.NgayKyHopDong;
                        hopDongNhanSu.NgayBatDauLamViec = parameter.HopDongNhanSu.NgayBatDauLamViec;
                        hopDongNhanSu.PositionId = parameter.HopDongNhanSu.PositionId;
                        hopDongNhanSu.MucLuong = parameter.HopDongNhanSu.MucLuong;
                    }

                    context.HopDongNhanSu.Update(hopDongNhanSu);

                    #region Thêm ghi chú
                    if (contentNote != "")
                    {
                        Note note = new Note
                        {
                            NoteId = Guid.NewGuid(),
                            Description = contentNote,
                            Type = "ADD",
                            ObjectId = hopDongNhanSu.EmployeeId,
                            ObjectType = "EMP",
                            Active = true,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            NoteTitle = "đã thêm ghi chú"
                        };

                        context.Note.Add(note);
                    }
                    #endregion

                    context.SaveChanges();

                    #region Kiểm tra giao nhau

                    var listHopDong = context.HopDongNhanSu
                    .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                    .OrderBy(z => z.NgayKyHopDong).ToList();

                    var hopDong = listHopDong
                        .FirstOrDefault(x => x.HopDongNhanSuId == parameter.HopDongNhanSu.HopDongNhanSuId);

                    //Nếu sửa hợp đồng => có thời hạn
                    if (hopDong.NgayKetThucHopDong != null)
                    {
                        var hopDongVoThoiHan = context.HopDongNhanSu
                            .FirstOrDefault(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId &&
                                        x.NgayKetThucHopDong == null);

                        //Nếu có hợp đồng vô thời hạn
                        if (hopDongVoThoiHan != null)
                        {
                            var hopDongMoiNhat = context.HopDongNhanSu
                            .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                            .OrderByDescending(x => x.NgayKyHopDong)
                            .FirstOrDefault();

                            //Nếu hợp đồng vô thời hạn không phải hợp đồng mới nhất thì
                            if (hopDongVoThoiHan.HopDongNhanSuId != hopDongMoiNhat.HopDongNhanSuId)
                            {
                                return new UpdateHopDongNhanSuResult
                                {
                                    MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                                };
                            }
                        }

                        bool isGiaoNhau = false;
                        var lstHopDong = listHopDong.Where(x => x.HopDongNhanSuId != parameter.HopDongNhanSu.HopDongNhanSuId).ToList();
                        lstHopDong.ForEach(item =>
                        {
                            if (item.NgayKyHopDong.Date <= hopDong.NgayKetThucHopDong.Value.Date &&
                                item.NgayKetThucHopDong.Value.Date >= hopDong.NgayKyHopDong.Date)
                            {
                                isGiaoNhau = true;
                            }
                        });

                        if (isGiaoNhau)
                        {
                            return new UpdateHopDongNhanSuResult
                            {
                                MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            };
                        }
                    }
                    //Nếu sửa hợp đồng => vô thời hạn
                    else
                    {
                        var countHopDongVoThoiHan = context.HopDongNhanSu
                            .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                            .Count(x => x.NgayKetThucHopDong == null);

                        //Nếu có nhiều hơn 1 hợp đồng vô thời hạn thì
                        if (countHopDongVoThoiHan > 1)
                        {
                            return new UpdateHopDongNhanSuResult
                            {
                                MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            };
                        }

                        var hopDongMoiNhat = context.HopDongNhanSu
                            .Where(x => x.EmployeeId == parameter.HopDongNhanSu.EmployeeId)
                            .OrderByDescending(x => x.NgayKyHopDong)
                            .FirstOrDefault();

                        //Nếu hợp đồng hiện tại là vô thời hạn nhưng không phải hợp đồng mới nhất thì
                        if (hopDong.HopDongNhanSuId != hopDongMoiNhat.HopDongNhanSuId)
                        {
                            return new UpdateHopDongNhanSuResult
                            {
                                MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            };
                        }

                        bool isGiaoNhau = false;
                        var lstHopDong = listHopDong.Where(x => x.HopDongNhanSuId != hopDong.HopDongNhanSuId).ToList();
                        lstHopDong.ForEach(item =>
                        {
                            if (item.NgayKetThucHopDong.Value.Date >= hopDong.NgayKyHopDong.Date)
                            {
                                isGiaoNhau = true;
                            }
                        });

                        if (isGiaoNhau)
                        {
                            return new UpdateHopDongNhanSuResult
                            {
                                MessageCode = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                                StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            };
                        }
                    }

                    #endregion

                    #region Kiểm tra và thay đổi ngày vào + chức vụ nhân viên khi cập nhật hợp đồng
                    var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == hopDongNhanSu.EmployeeId);
                    var listDeXuat = context.DeXuatThayDoiChucVu.Where(x => x.TrangThai == 3).ToList(); //lấy đề xuất chức vụ đã duyệt

                    var listDeXuatId = listDeXuat.Select(x => x.DeXuatThayDoiChucVuId).ToList();
                    var listNhanVienDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => listDeXuatId.Contains(x.DeXuatThayDoiChucVuId)).ToList();

                    //lấy đề xuất chức vụ đã duyệt mới nhất của nhân viên
                    var deXuatChucVu = (from DX in listDeXuat
                                        join NvDX in listNhanVienDeXuat on DX.DeXuatThayDoiChucVuId equals NvDX.DeXuatThayDoiChucVuId
                                        where NvDX.EmployeeId == hopDongNhanSu.EmployeeId
                                        select new NhanVienDeXuatThayDoiChucVu
                                        {
                                            ChucVuDeXuatId = NvDX.ChucVuDeXuatId,
                                            CreatedDate = DX.NgayApDung //Ngày áp dụng
                                        }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                    //kiểm tra xem hợp đồng hiện tại có phải là hợp đồng mới nhất của nhân viên
                    var hopDongNhanSuNew = context.HopDongNhanSu.Where(x => x.EmployeeId == hopDongNhanSu.EmployeeId).OrderByDescending(x => x.NgayKyHopDong).FirstOrDefault();
                    if (hopDongNhanSuNew.HopDongNhanSuId == hopDongNhanSu.HopDongNhanSuId)
                    {
                        if (deXuatChucVu != null && deXuatChucVu.CreatedDate != null)
                        {
                            if (deXuatChucVu.CreatedDate.Value.Date > hopDongNhanSu.NgayKyHopDong.Date && deXuatChucVu.CreatedDate.Value.Date < DateTime.Now.Date)
                            {
                                employee.PositionId = deXuatChucVu.ChucVuDeXuatId;
                            }
                            else
                            {
                                employee.PositionId = hopDongNhanSu.PositionId;
                            }
                        }
                        else
                        {
                            employee.PositionId = hopDongNhanSu.PositionId;
                        }
                    }

                    //kiểm tra xem hợp đồng hiện tại có phải là hợp đồng cũ nhất của nhân viên
                    var hopDongNhanSuOld = context.HopDongNhanSu.Where(x => x.EmployeeId == hopDongNhanSu.EmployeeId).OrderBy(x => x.NgayKyHopDong).FirstOrDefault();
                    if (hopDongNhanSuOld.HopDongNhanSuId == hopDongNhanSu.HopDongNhanSuId)
                    {
                        employee.StartDateMayChamCong = hopDongNhanSu?.NgayBatDauLamViec;
                    }

                    employee.UpdatedDate = DateTime.Now;
                    context.Employee.Update(employee);
                    context.SaveChanges();
                    #endregion

                    transaction.Commit();
                }

                return new UpdateHopDongNhanSuResult
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new UpdateHopDongNhanSuResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DeleteHopDongNhanSuByIdResult DeleteHopDongNhanSuById(DeleteHopDongNhanSuByIdParameter parameter)
        {
            try
            {
                var hopDongNhanSu = context.HopDongNhanSu
                    .FirstOrDefault(x => x.HopDongNhanSuId == parameter.Id);
                if (hopDongNhanSu == null)
                {
                    return new DeleteHopDongNhanSuByIdResult
                    {
                        MessageCode = "Hợp đồng không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.NotFound,
                    };
                }

                //Kiểm tra đã có phát sinh kỳ lương sau khi ký hợp đồng không?
                var listKyLuong = context.KyLuong
                    .Where(x => x.TuNgay.Date >= hopDongNhanSu.NgayKyHopDong.Date).ToList();
                var listKyLuongId = listKyLuong.Select(y => y.KyLuongId).ToList();
                var countTongHopChamCong = context.TongHopChamCong.Where(x =>
                        listKyLuongId.Contains(x.KyLuongId) &&
                        x.EmployeeId == hopDongNhanSu.EmployeeId).Count();

                bool isPhatSinhKyLuong = false;
                if (countTongHopChamCong > 0) isPhatSinhKyLuong = true;

                if (isPhatSinhKyLuong)
                {
                    return new DeleteHopDongNhanSuByIdResult
                    {
                        MessageCode = "Hợp đồng đã phát sinh kỳ lương",
                        StatusCode = System.Net.HttpStatusCode.Conflict,
                    };
                }

                context.HopDongNhanSu.Remove(hopDongNhanSu);
                //Cập nhật chức vụ cho nhân viên sau khi xóa chức vụ

                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == hopDongNhanSu.EmployeeId);
                var listData = new List<LichSuThayDoiChucVuModel>();

                //Lấy hợp đồng đầu tiên mà nhân viên ký với công ty
                var hopDongNhanSuList = context.HopDongNhanSu.Where(x => x.EmployeeId == employee.EmployeeId)
                    .OrderBy(z => z.NgayKyHopDong)
                    .ToList();
                var hopDongNhanSuFirst = hopDongNhanSuList[0];
                if (hopDongNhanSuList.Count > 1)
                {
                    var dataHopDong = new LichSuThayDoiChucVuModel
                    {
                        NgayBatDau = hopDongNhanSuFirst.NgayKyHopDong,
                        NgayKetThuc = null,
                        PositionId = hopDongNhanSuFirst.PositionId
                    };
                    var listHopDongNhanSu = context.HopDongNhanSu.Where(x => x.EmployeeId == employee.EmployeeId)
                        .Select(y => new LichSuThayDoiChucVuModel
                        {
                            NgayBatDau = y.NgayKyHopDong,
                            NgayKetThuc = null,
                            PositionId = y.PositionId
                        }).ToList();


                    var listDeXuatChucVu = context.NhanVienDeXuatThayDoiChucVu
                            .Join(context.DeXuatThayDoiChucVu,
                                dxnv => dxnv.DeXuatThayDoiChucVuId,
                                dx => dx.DeXuatThayDoiChucVuId,
                                (dxnv, dx) => new { Dxnv = dxnv, Dx = dx })
                            .Where(x => x.Dx.TrangThai == 3 &&
                                        x.Dxnv.TrangThai == 3 &&
                                        x.Dxnv.EmployeeId == employee.EmployeeId &&
                                        x.Dx.NgayApDung != null &&
                                        x.Dx.NgayApDung.Value.Date > hopDongNhanSuFirst.NgayKyHopDong.Date)
                            .Select(y => new LichSuThayDoiChucVuModel
                            {
                                NgayBatDau = y.Dx.NgayApDung.Value,
                                NgayKetThuc = null,
                                PositionId = y.Dxnv.ChucVuDeXuatId
                            }).ToList();

                    //listData.Add(dataHopDong);
                    listData.AddRange(listHopDongNhanSu);
                    listData.AddRange(listDeXuatChucVu);

                    listData = listData.OrderByDescending(z => z.NgayBatDau).ToList();
                    if (listData.Count > 1)
                    {
                        employee.PositionId = listData[1].PositionId;
                        context.Employee.Update(employee);
                    }
                    else
                    {
                        employee.PositionId = null;
                        context.Employee.Update(employee);
                    }
                } else
                {
                        employee.PositionId = null;
                        context.Employee.Update(employee);
                }

                #region Thêm ghi chú
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                Note note = new Note
                {
                    NoteId = Guid.NewGuid(),
                    Description = userUpdate.UserName + " đã xóa hợp đồng",
                    Type = "ADD",
                    ObjectId = hopDongNhanSu.EmployeeId,
                    ObjectType = "EMP",
                    Active = true,
                    CreatedById = parameter.UserId,
                    CreatedDate = DateTime.Now,
                    NoteTitle = "đã thêm ghi chú"
                };

                context.Note.Add(note);
                #endregion

                context.SaveChanges();

                return new DeleteHopDongNhanSuByIdResult
                {
                    MessageCode = "Xóa thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeleteHopDongNhanSuByIdResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetLichSuHopDongNhanSuResult GetLichSuHopDongNhanSu(GetLichSuHopDongNhanSuParameter parameter)
        {
            try
            {
                var listData = new List<LichSuHopDongNhanSuModel>();

                var listHopDong = context.HopDongNhanSu
                    .Where(x => parameter.ListId.Contains(x.HopDongNhanSuId))
                    .Select(y => new LichSuHopDongNhanSuModel
                    {
                        SoHopDong = y.SoHopDong,
                        NgayBatDau = y.NgayKyHopDong,
                        MucLuong = y.MucLuong
                    }).ToList();

                var listDeXuatTangLuongNhanVien = context.DeXuatTangLuongNhanVien
                    .Join(context.DeXuatTangLuong, // the source table of the inner join
                        dxnv => dxnv.DeXuatTangLuongId, // Select the primary key (the first part of the "on" clause in an sql "join" statement)
                        dx => dx.DeXuatTangLuongId, // Select the foreign key (the second part of the "on" clause)
                        (dxnv, dx) => new { Dxnv = dxnv, Dx = dx }) // selection
                    .Where(x => x.Dxnv.EmployeeId == parameter.EmployeeId &&
                                x.Dxnv.TrangThai == 3 &&
                                x.Dx.TrangThai == 3 &&
                                x.Dx.NgayApDung != null)
                    .Select(y => new LichSuHopDongNhanSuModel
                    {
                        NgayBatDau = y.Dx.NgayApDung.Value,
                        MucLuong = y.Dxnv.LuongDeXuat,
                    }).ToList();

                listData.AddRange(listHopDong);
                listData.AddRange(listDeXuatTangLuongNhanVien);

                listData = listData.OrderByDescending(z => z.NgayBatDau).ToList();

                return new GetLichSuHopDongNhanSuResult
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListData = listData
                };
            }
            catch (Exception e)
            {
                return new GetLichSuHopDongNhanSuResult
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetLichSuThayDoiChucVuResult GetLichSuThayDoiChucVu(GetLichSuThayDoiChucVuParameter parameter)
        {
            try
            {
                var listData = new List<LichSuThayDoiChucVuModel>();

                //Lấy hợp đồng đầu tiên mà nhân viên ký với công ty
                var hopDongNhanSu = context.HopDongNhanSu.Where(x => x.EmployeeId == parameter.EmployeeId)
                    .OrderBy(z => z.NgayKyHopDong)
                    .FirstOrDefault();

                if (hopDongNhanSu != null)
                {
                    var listPosition = context.Position.ToList();
                    var listHopDongNhanSu = context.HopDongNhanSu.Where(x => x.EmployeeId == parameter.EmployeeId)
                        .Select(y => new LichSuThayDoiChucVuModel
                        {
                            NgayBatDau = y.NgayKyHopDong,
                            NgayKetThuc = null,
                            PositionId = y.PositionId
                        }).ToList();
                

                var listDeXuatChucVu = context.NhanVienDeXuatThayDoiChucVu
                        .Join(context.DeXuatThayDoiChucVu,
                            dxnv => dxnv.DeXuatThayDoiChucVuId,
                            dx => dx.DeXuatThayDoiChucVuId,
                            (dxnv, dx) => new { Dxnv = dxnv, Dx = dx })
                        .Where(x => x.Dx.TrangThai == 3 &&
                                    x.Dxnv.TrangThai == 3 &&
                                    x.Dxnv.EmployeeId == parameter.EmployeeId &&
                                    x.Dx.NgayApDung != null &&
                                    x.Dx.NgayApDung.Value.Date > hopDongNhanSu.NgayKyHopDong.Date)
                        .Select(y => new LichSuThayDoiChucVuModel
                        {
                            NgayBatDau = y.Dx.NgayApDung.Value,
                            NgayKetThuc = null,
                            PositionId = y.Dxnv.ChucVuDeXuatId
                        }).ToList();

                    //listData.Add(dataHopDong);
                    listData.AddRange(listHopDongNhanSu);
                    listData.AddRange(listDeXuatChucVu);

                    listData = listData.OrderByDescending(z => z.NgayBatDau).ToList();

                    #region Thêm ngày kết thúc
  
                    //tính ngày kết thúc cho chức vụ 
                        for (var i = 0; i < listData.Count; i++)
                        {
                            var item = listData[i];

                            //Nếu item không phải là item đầu tiên
                            if (i != 0)
                            {
                                var item_pre = listData[i - 1];

                                item.NgayKetThuc = item_pre.NgayBatDau.AddDays(-1);
                            }
                        }
                    #endregion

                    listData.ForEach(item =>
                    {
                        var position = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                        item.PositionName = position?.PositionName;
                    });
                }

                return new GetLichSuThayDoiChucVuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListData = listData
                };
            }
            catch (Exception e)
            {
                return new GetLichSuThayDoiChucVuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinBaoHiemVaThueResult GetThongTinBaoHiemVaThue(GetThongTinBaoHiemVaThueParameter parameter)
        {
            try
            {
                bool isShowButton = false;
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user != null)
                {
                    var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    isShowButton = emp_user?.IsNhanSu ?? false;
                }

                var baoHiemXaHoi = new BaoHiemXaHoiNhanSuModel();
                var baoHiemLoftCare = new BaoHiemLoftCareNhanSuModel();
                var thongTinThueVaGiamTru = new ThongTinThueVaGiamTruModel();
                var listDoiTuongPhuThuoc = new List<CategoryEntityModel>();
                var listLichSuThanhToanBaoHiem = new List<LichSuThanhToanBaoHiemModel>();
                var listLoaiBaoHiem = GeneralList.GetLoaiBaoHiem();

                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new GetThongTinBaoHiemVaThueResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var emp_contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == emp.EmployeeId && x.ObjectType == "EMP");
                if (emp_contact == null)
                {
                    return new GetThongTinBaoHiemVaThueResult()
                    {
                        MessageCode = "Thông tin liên hệ Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var listDonViBaoHiemLoftCare = GeneralList.GetTrangThais("DonViBaoHiemLoft");
                var listDoiTuongBaoHiemLoftCare = GeneralList.GetTrangThais("DoiTuongBaoHiemLoft");

                var quanHeGiaDinh = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "QHGD");
                if (quanHeGiaDinh != null)
                {
                    listDoiTuongPhuThuoc = context.Category
                        .Where(x => x.CategoryTypeId == quanHeGiaDinh.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                #region Bảo hiểm xã hội

                //Số BHXH
                baoHiemXaHoi.SoSoBhxh = emp_contact.SocialInsuranceNumber;

                //Mã thẻ BHYT
                baoHiemXaHoi.MaTheBhyt = emp_contact.HealthInsuranceNumber;

                //Lấy cấu hình BHXH hiện tại
                var cauHinhBaoHiem = context.CauHinhBaoHiem.FirstOrDefault(x => x.Active == true);
                if (cauHinhBaoHiem != null)
                {
                    //Full lương
                    if (cauHinhBaoHiem.LoaiDong == 1)
                    {
                        decimal luongHienTai = CommonHelper.GetMucLuongHienTaiByEmployeeId(context, parameter.EmployeeId);
                        if (luongHienTai >= cauHinhBaoHiem.MucDongToiDa)
                        {
                            baoHiemXaHoi.MucDongBhxh = cauHinhBaoHiem.MucDongToiDa;
                        }
                        else
                        {
                            baoHiemXaHoi.MucDongBhxh = luongHienTai;
                        }
                    }
                    //Mức đóng
                    else if (cauHinhBaoHiem.LoaiDong == 2)
                    {
                        baoHiemXaHoi.MucDongBhxh = cauHinhBaoHiem.MucDong;
                    }

                    baoHiemXaHoi.TyLeDongBhxh = cauHinhBaoHiem.TiLePhanBoMucDongBhxhcuaNld;
                    baoHiemXaHoi.TyLeDongBhyt = cauHinhBaoHiem.TiLePhanBoMucDongBhytcuaNld;
                    baoHiemXaHoi.TyLeDongBhtn = cauHinhBaoHiem.TiLePhanBoMucDongBhtncuaNld;
                    baoHiemXaHoi.TyLeDongBhtnnn = cauHinhBaoHiem.TiLePhanBoMucDongBhtnnncuaNld;
                }

                #endregion

                #region Bảo hiểm Loft Care

                baoHiemLoftCare.MaTheBhLoftCare = emp_contact.MaTheBhLoftCare;

                //Tính số năm kinh nghiệm
                var soNamKinhNghiem = CommonHelper.GetSoNamKinhNghiemByEmployeeId(context, parameter.EmployeeId);

                //Lấy cấu hình bh
                var namHienTai = DateTime.Now.Year;
                var cauHinhBaoHiemLoftCare = context.CauHinhBaoHiemLoftCare.FirstOrDefault(x => x.NamCauHinh == namHienTai.ToString());//lấy cấu hình bảo hiểm LoftCare của năm hiện tại
                if (cauHinhBaoHiemLoftCare != null)
                {
                    var nhomBaoHiemLoftCare = context.NhomBaoHiemLoftCare.Where(x => x.CauHinhBaoHiemLoftCareId == cauHinhBaoHiemLoftCare.CauHinhBaoHiemLoftCareId).ToList();
                    var nhomBaoHiemLoftCareId = nhomBaoHiemLoftCare.Select(x => x.NhomBaoHiemLoftCareId).ToList();

                    var listChucVuBaoHiemLoftCare = context.ChucVuBaoHiemLoftCare
                        .Where(x => x.PositionId == emp.PositionId && nhomBaoHiemLoftCareId.Contains((int)x.NhomBaoHiemLoftCareId))
                        .OrderByDescending(z => z.SoNamKinhNghiem).ToList();

                    var listChucVuLoftCare =
                        listChucVuBaoHiemLoftCare
                            .Where(x => x.SoNamKinhNghiem <= soNamKinhNghiem)
                            .ToList();

                    if (listChucVuLoftCare.Count > 0)
                    {
                        var listNhomBaoHiemLoftCareId = listChucVuLoftCare.Select(y => y.NhomBaoHiemLoftCareId).ToList();
                        baoHiemLoftCare.NhomBhLoftCare = String.Join(", ", nhomBaoHiemLoftCare.Where(x => listNhomBaoHiemLoftCareId.Contains(x.NhomBaoHiemLoftCareId)).Select(x => x.TenNhom).ToArray());
                        var listQuyenLoiBaoHiemLoftCare = context.QuyenLoiBaoHiemLoftCare.Where(x => listNhomBaoHiemLoftCareId.Contains(x.NhomBaoHiemLoftCareId)).ToList();
                        var listQuyenLoiBaoHiemLoftCareId = listQuyenLoiBaoHiemLoftCare.Select(x => x.QuyenLoiBaoHiemLoftCareId).ToList();

                        baoHiemLoftCare.ListQuyenLoi = context.MucHuongBaoHiemLoftCare
                            .Where(x => listQuyenLoiBaoHiemLoftCareId.Contains((int)x.QuyenLoiBaoHiemLoftCareId))
                            .Select(y => new QuyenLoiBaoHiemLoftCareNhanSuModel()
                            {
                                TenQuyenLoi = listQuyenLoiBaoHiemLoftCare
                                    .FirstOrDefault(x => x.QuyenLoiBaoHiemLoftCareId == y.QuyenLoiBaoHiemLoftCareId)
                                    .TenQuyenLoi,
                                DoiTuong = listDoiTuongBaoHiemLoftCare.FirstOrDefault(x => x.Value == y.DoiTuongHuong).Name,
                                MucHuong = y.MucHuong,
                                DonVi = y.DonVi != null ? listDonViBaoHiemLoftCare.FirstOrDefault(x => x.Value == y.DonVi).Name : null,
                                LePhi = y.LePhi,
                                PhiCoDinh = y.PhiCoDinh,
                                PhiTheoLuong = y.PhiTheoLuong,
                                MucGiam = y.MucGiam
                            }).OrderBy(z => z.TenQuyenLoi).ThenBy(z => z.DoiTuong).ToList();
                    }
                }

                #endregion

                #region Thông tin thuế và giảm trừ

                thongTinThueVaGiamTru.MaSoThueCaNhan = emp.MaSoThueCaNhan;

                var listThongTinPhuThuoc = context.Contact.Where(x => x.ObjectId == parameter.EmployeeId && x.ObjectType == "EMP_CON" && x.PhuThuoc == true).ToList();
                thongTinThueVaGiamTru.SoNguoiDangKyPhuThuoc = Convert.ToDecimal(listThongTinPhuThuoc.Count());
                //thongTinThueVaGiamTru.ThangNopDangKyGiamTru = emp.ThangNopDangKyGiamTru;
                thongTinThueVaGiamTru.ListDoiTuongPhuThuocId = listThongTinPhuThuoc.Select(y => y.QuanHeId).Distinct().ToList();

                #endregion

                #region Lịch sử thanh toán bảo hiểm

                listLichSuThanhToanBaoHiem = context.LichSuThanhToanBaoHiem.Where(x => x.EmployeeId == parameter.EmployeeId).Select(
                    y => new LichSuThanhToanBaoHiemModel
                    {
                        LichSuThanhToanBaoHiemId = y.LichSuThanhToanBaoHiemId,
                        NgayThanhToan = y.NgayThanhToan,
                        LoaiBaoHiem = y.LoaiBaoHiem,
                        LoaiBaoHiemName = listLoaiBaoHiem.Find(x => x.Value == y.LoaiBaoHiem).Name,
                        SoTienThanhToan = y.SoTienThanhToan,
                        GhiChu = y.GhiChu
                    }
                ).OrderByDescending(x => x.NgayThanhToan).ToList();

                #endregion

                return new GetThongTinBaoHiemVaThueResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    BaoHiemXaHoi = baoHiemXaHoi,
                    BaoHiemLoftCare = baoHiemLoftCare,
                    ThongTinThueVaGiamTru = thongTinThueVaGiamTru,
                    ListDoiTuongPhuThuoc = listDoiTuongPhuThuoc,
                    ListLichSuThanhToanBaoHiem = listLichSuThanhToanBaoHiem,
                    ListLoaiBaoHiem = listLoaiBaoHiem,
                    IsShowButton = isShowButton
                };
            }
            catch (Exception e)
            {
                return new GetThongTinBaoHiemVaThueResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveThongTinBaoHiemVaThueResult SaveThongTinBaoHiemVaThue(SaveThongTinBaoHiemVaThueParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new SaveThongTinBaoHiemVaThueResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var emp_contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == emp.EmployeeId && x.ObjectType == "EMP");
                if (emp_contact == null)
                {
                    return new SaveThongTinBaoHiemVaThueResult()
                    {
                        MessageCode = "Thông tin liên hệ Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                #region Kiểm tra thay đổi trên object employee
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var contentNote = "";

                if (emp.MaSoThueCaNhan != parameter.ThongTinThueVaGiamTru.MaSoThueCaNhan)
                {
                    contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Mã số thuế cá nhân từ " + (emp.MaSoThueCaNhan != null ? emp.MaSoThueCaNhan : "''") + " sang " + parameter.ThongTinThueVaGiamTru.MaSoThueCaNhan + "<p>";
                }

                #endregion

                #region Kiểm tra thay đổi trên object contact
                var _oldContactModel = emp_contact as Contact;
                var _newContactModel = new Contact
                {
                    SocialInsuranceNumber = parameter.BaoHiemXaHoi.SoSoBhxh,
                    HealthInsuranceNumber = parameter.BaoHiemXaHoi.MaTheBhyt,
                    MaTheBhLoftCare = parameter.BaoHiemLoftCare.MaTheBhLoftCare
                };

                CompareLogic compareLogicContact = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareFieldContact = new List<string> {
                    "SocialInsuranceNumber", "HealthInsuranceNumber", "MaTheBhLoftCare"};

                compareLogicContact.Config.MembersToInclude = listCompareFieldContact;
                compareLogicContact.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareContact = compareLogicContact.Compare(_oldContactModel, _newContactModel);

                //Nếu có thay đổi
                if (!compareContact.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="SocialInsuranceNumber",
                                Key="Số sổ BHXH"
                            },
                            new BaseType()
                            {
                                Name="HealthInsuranceNumber",
                                Key="Mã thẻ BHYT"
                            },
                            new BaseType()
                            {
                                Name="MaTheBhLoftCare",
                                Key="Mã thẻ BH Loftcare"
                            }
                        };

                    compareContact.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                    });
                }

                #endregion

                #region Bảo hiểm xã hội

                //Số BHXH
                emp_contact.SocialInsuranceNumber = parameter.BaoHiemXaHoi.SoSoBhxh;

                //Mã thẻ BHYT
                emp_contact.HealthInsuranceNumber = parameter.BaoHiemXaHoi.MaTheBhyt;

                #endregion

                #region Bảo hiểm Loft Care

                emp_contact.MaTheBhLoftCare = parameter.BaoHiemLoftCare.MaTheBhLoftCare;

                #endregion

                #region Thông tin thuế và giảm trừ

                emp.MaSoThueCaNhan = parameter.ThongTinThueVaGiamTru.MaSoThueCaNhan;
                //emp.SoNguoiDangKyPhuThuoc = parameter.ThongTinThueVaGiamTru.SoNguoiDangKyPhuThuoc ?? 0;
                //emp.ThangNopDangKyGiamTru = parameter.ThongTinThueVaGiamTru.ThangNopDangKyGiamTru;

                //var listOld = context.DoiTuongPhuThuocMapping
                //    .Where(x => x.EmployeeId == parameter.EmployeeId).ToList();
                //context.DoiTuongPhuThuocMapping.RemoveRange(listOld);

                //var listDoiTuongPhuThuocMapping = new List<DoiTuongPhuThuocMapping>();
                //parameter.ThongTinThueVaGiamTru.ListDoiTuongPhuThuocId.ForEach(item =>
                //{
                //    var _item = new DoiTuongPhuThuocMapping()
                //    {
                //        CategoryId = item,
                //        EmployeeId = emp.EmployeeId,
                //    };
                //    listDoiTuongPhuThuocMapping.Add(_item);
                //});

                //context.DoiTuongPhuThuocMapping.AddRange(listDoiTuongPhuThuocMapping);

                #endregion

                context.Employee.Update(emp);
                context.Contact.Update(emp_contact);

                #region Thêm ghi chú
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = emp.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion

                context.SaveChanges();

                return new SaveThongTinBaoHiemVaThueResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinBaoHiemVaThueResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CreateOrUpdateLichSuThanhToanBaoHiemResult CreateOrUpdateLichSuThanhToanBaoHiem(CreateOrUpdateLichSuThanhToanBaoHiemParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new CreateOrUpdateLichSuThanhToanBaoHiemResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new CreateOrUpdateLichSuThanhToanBaoHiemResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var lichSuThanhToan = context.LichSuThanhToanBaoHiem.FirstOrDefault(x => x.LichSuThanhToanBaoHiemId == parameter.LichSuThanhToanBaoHiem.LichSuThanhToanBaoHiemId);

                //Thêm mới Lịch sử thanh toán bảo hiểm
                if (lichSuThanhToan == null)
                {
                    lichSuThanhToan = parameter.LichSuThanhToanBaoHiem.ToEntity();
                    lichSuThanhToan.CreatedById = parameter.UserId;
                    lichSuThanhToan.CreatedDate = DateTime.Now;
                    context.LichSuThanhToanBaoHiem.Add(lichSuThanhToan);
                }
                else
                //Cập nhật Lịch sử thanh toán bảo hiểm
                {
                    lichSuThanhToan.NgayThanhToan = parameter.LichSuThanhToanBaoHiem.NgayThanhToan;
                    lichSuThanhToan.LoaiBaoHiem = parameter.LichSuThanhToanBaoHiem.LoaiBaoHiem;
                    lichSuThanhToan.SoTienThanhToan = parameter.LichSuThanhToanBaoHiem.SoTienThanhToan;
                    lichSuThanhToan.GhiChu = parameter.LichSuThanhToanBaoHiem.GhiChu;
                    lichSuThanhToan.UpdatedDate = DateTime.Now;
                    context.LichSuThanhToanBaoHiem.Update(lichSuThanhToan);
                }

                context.SaveChanges();

                return new CreateOrUpdateLichSuThanhToanBaoHiemResult()
                {
                    MessageCode = "Thêm mới/Cập nhật thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new CreateOrUpdateLichSuThanhToanBaoHiemResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DeleteLichSuThanhToanBaoHiemByIdResult DeleteLichSuThanhToanBaoHiemById(DeleteLichSuThanhToanBaoHiemByIdParameter parameter)
        {
            try
            {
                var lichSuThanhToan = context.LichSuThanhToanBaoHiem.FirstOrDefault(x => x.LichSuThanhToanBaoHiemId == parameter.LichSuThanhToanBaoHiemId);
                if (lichSuThanhToan == null)
                {
                    return new DeleteLichSuThanhToanBaoHiemByIdResult()
                    {
                        MessageCode = "Lịch sử thanh toán bảo hiểm không tồn tại trên hệ thống, vui lòng tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new DeleteLichSuThanhToanBaoHiemByIdResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                context.LichSuThanhToanBaoHiem.Remove(lichSuThanhToan);
                context.SaveChanges();

                return new DeleteLichSuThanhToanBaoHiemByIdResult()
                {
                    MessageCode = "Xóa thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeleteLichSuThanhToanBaoHiemByIdResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetListTaiLieuNhanVienResult GetListTaiLieuNhanVien(GetListTaiLieuNhanVienParameter parameter)
        {
            try
            {
                var listTaiLieu = new List<TaiLieuNhanVienEntityModel>();

                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new GetListTaiLieuNhanVienResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetListTaiLieuNhanVienResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new GetListTaiLieuNhanVienResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var listCauHinhChecklist = context.CauHinhChecklist.Where(x => x.Active == true).ToList();
                var listCauHinhChecklistId = listCauHinhChecklist.Select(x => (int?)x.CauHinhChecklistId).ToList();

                var listTaiLieuNhanVien = context.TaiLieuNhanVien.Where(x => x.EmployeeId == parameter.EmployeeId).ToList();

                listCauHinhChecklist.ForEach(item =>
                {
                    var taiLieu = listTaiLieuNhanVien.FirstOrDefault(x => x.CauHinhChecklistId == item.CauHinhChecklistId);
                    var taiLieuNhanVien = new TaiLieuNhanVienEntityModel
                    {
                        TaiLieuNhanVienId = taiLieu?.TaiLieuNhanVienId,
                        TenTaiLieu = item.TenTaiLieu,
                        NgayNop = taiLieu?.NgayNop,
                        NgayHen = taiLieu?.NgayHen,
                        CauHinhChecklistId = item.CauHinhChecklistId
                    };
                    listTaiLieu.Add(taiLieuNhanVien);
                });

                #region set điều kiện hiển thị button

                bool isShowButtonTuChoi = false;
                bool isShowButtonXacNhan = false;
                bool isShowButtonYeuCauXacNhan = false;
                bool isShowButtonThemMoi = false;
                bool isShowButtonSua = false;
                bool isShowButtonXoa = false;

                //Người dùng vào xem hồ sơ của chính mình
                if (emp.EmployeeId == emp_user.EmployeeId)
                {
                    //Nếu người dùng là nhân viên thường (ko phải quản lý nhân sự)
                    if (emp.IsNhanSu != true)
                    {
                        if (emp.IsXacNhanTaiLieu == false && listTaiLieu.Count > 0)
                        {
                            isShowButtonTuChoi = true;
                            isShowButtonXacNhan = true;
                        }
                    }
                    //Nếu người dùng là quản lý nhân sự
                    else
                    {
                        isShowButtonThemMoi = true;
                        isShowButtonSua = true;
                        isShowButtonXoa = true;

                        if (listTaiLieu.Count > 0)
                        {
                            if (emp.IsXacNhanTaiLieu == false)
                            {
                                isShowButtonTuChoi = true;
                                isShowButtonXacNhan = true;
                            }
                            else
                            {
                                isShowButtonYeuCauXacNhan = true;
                            }
                        }
                    }
                }
                //Nếu người dùng xem hồ sơ của nhân viên khác
                else
                {
                    //Nếu người dùng là quản lý nhân sự
                    if (emp_user.IsNhanSu == true)
                    {
                        isShowButtonThemMoi = true;
                        isShowButtonSua = true;
                        isShowButtonXoa = true;

                        //Nếu nhân viên đã xác nhận tài liệu
                        if (emp.IsXacNhanTaiLieu == true && listTaiLieu.Count > 0)
                        {
                            isShowButtonYeuCauXacNhan = true;
                        }
                    }
                }

                #endregion

                return new GetListTaiLieuNhanVienResult()
                {
                    MessageCode = "Success",
                    StatusCode = HttpStatusCode.OK,
                    IsShowButtonTuChoi = isShowButtonTuChoi,
                    IsShowButtonXacNhan = isShowButtonXacNhan,
                    IsShowButtonYeuCauXacNhan = isShowButtonYeuCauXacNhan,
                    IsShowButtonThemMoi = isShowButtonThemMoi,
                    IsShowButtonSua = isShowButtonSua,
                    IsShowButtonXoa = isShowButtonXoa,
                    ListTaiLieu = listTaiLieu
                };
            }
            catch (Exception e)
            {
                return new GetListTaiLieuNhanVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CreateTaiLieuNhanVienResult CreateTaiLieuNhanVien(CreateTaiLieuNhanVienParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new CreateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new CreateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp_user.IsManager != true)
                {
                    return new CreateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Không thể Thêm mới tài liệu vì bạn không phải quản lý",
                        StatusCode = HttpStatusCode.Conflict,
                    };
                }

                parameter.TaiLieu.TaiLieuNhanVienId = null;
                var taiLieu = parameter.TaiLieu.ToEntity();
                taiLieu.CreatedById = parameter.UserId;

                context.TaiLieuNhanVien.Add(taiLieu);
                context.SaveChanges();

                return new CreateTaiLieuNhanVienResult()
                {
                    MessageCode = "Thêm mới thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new CreateTaiLieuNhanVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public TuChoiCheckListTaiLieuResult TuChoiCheckListTaiLieu(TuChoiCheckListTaiLieuParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new TuChoiCheckListTaiLieuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp.IsXacNhanTaiLieu == true)
                {
                    return new TuChoiCheckListTaiLieuResult()
                    {
                        MessageCode = "Trạng thái đã được xử lý trước đó, bạn hãy tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                emp.IsXacNhanTaiLieu = true;
                context.Employee.Update(emp);
                context.SaveChanges();

                #region Gửi email đến người yêu cầu xác nhận

                if (emp.NguoiYeuCauXacNhanId != null)
                {

                }

                #endregion

                #region Thêm ghi chú
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var contentNote = "";
                contentNote += "<p>Nhân viên <strong>" + userUpdate.UserName + "</strong> đã từ chối xác nhận tài liệu với lý do: " + parameter.LyDo + "<p>";
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = emp.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion
                context.SaveChanges();

                return new TuChoiCheckListTaiLieuResult()
                {
                    MessageCode = "Từ chối thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new TuChoiCheckListTaiLieuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public XacNhanCheckListTaiLieuResult XacNhanCheckListTaiLieu(XacNhanCheckListTaiLieuParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new XacNhanCheckListTaiLieuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp.IsXacNhanTaiLieu == true)
                {
                    return new XacNhanCheckListTaiLieuResult()
                    {
                        MessageCode = "Trạng thái đã được xử lý trước đó, bạn hãy tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                emp.IsXacNhanTaiLieu = true;
                context.Employee.Update(emp);
                context.SaveChanges();

                #region Gửi email đến người yêu cầu xác nhận

                if (emp.NguoiYeuCauXacNhanId != null)
                {

                }

                #endregion

                #region Thêm ghi chú
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var contentNote = "";
                contentNote += "<p>Nhân viên <strong>" + userUpdate.UserName + "</strong> đã xác nhận nộp các tài liệu: ";

                var listTaiLieu = context.TaiLieuNhanVien
                    .Join(context.CauHinhChecklist,
                            taiLieu => taiLieu.CauHinhChecklistId,
                            checklist => checklist.CauHinhChecklistId,
                            (taiLieu, checklist) => new { TaiLieu = taiLieu, Checklist = checklist })
                        .Where(x => x.TaiLieu.CauHinhChecklistId != null && x.TaiLieu.EmployeeId == parameter.EmployeeId)
                        .Select(y => new TaiLieuNhanVienEntityModel
                        {
                            TenTaiLieu = y.Checklist.TenTaiLieu,
                            NgayNop = y.TaiLieu.NgayNop
                        }).ToList();
                int i = 1;
                if(listTaiLieu.Count > 0)
                {
                    listTaiLieu.ForEach(item =>
                    {
                        contentNote += i + ". " + item.TenTaiLieu + ", ngày nộp " + (item.NgayNop != null ? item.NgayNop.Value.ToString("dd/MM/yyyy") : "''") + ";";
                        i++;
                    });
                }
                contentNote += "</p>";
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = emp.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion
                context.SaveChanges();


                return new XacNhanCheckListTaiLieuResult()
                {
                    MessageCode = "Xác nhận thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new XacNhanCheckListTaiLieuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public YeuCauXacNhanCheckListTaiLieuResult YeuCauXacNhanCheckListTaiLieu(YeuCauXacNhanCheckListTaiLieuParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new YeuCauXacNhanCheckListTaiLieuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp.IsXacNhanTaiLieu == false)
                {
                    return new YeuCauXacNhanCheckListTaiLieuResult()
                    {
                        MessageCode = "Trạng thái đã được xử lý trước đó, bạn hãy tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                emp.IsXacNhanTaiLieu = false;
                context.Employee.Update(emp);
                context.SaveChanges();

                #region Gửi email đến nhân viên



                #endregion

                #region Thêm ghi chú
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var contentNote = "";
                contentNote += "<p>Nhân viên <strong>" + userUpdate.UserName + "</strong> đã gửi yêu cầu xác nhận" + "<p>";
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = emp.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion
                context.SaveChanges();

                return new YeuCauXacNhanCheckListTaiLieuResult()
                {
                    MessageCode = "Gửi yêu cầu thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new YeuCauXacNhanCheckListTaiLieuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DeleteTaiLieuNhanVienByIdResult DeleteTaiLieuNhanVienById(DeleteTaiLieuNhanVienByIdParameter parameter)
        {
            try
            {
                var taiLieu = context.TaiLieuNhanVien.FirstOrDefault(x => x.TaiLieuNhanVienId == parameter.Id);
                if (taiLieu == null)
                {
                    return new DeleteTaiLieuNhanVienByIdResult()
                    {
                        MessageCode = "Tài liệu không tồn tại trên hệ thống, vui lòng tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new DeleteTaiLieuNhanVienByIdResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user.IsManager != true)
                {
                    return new DeleteTaiLieuNhanVienByIdResult()
                    {
                        MessageCode = "Chỉ quản lý mới có quyền xóa tài liệu",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                context.TaiLieuNhanVien.Remove(taiLieu);
                context.SaveChanges();

                return new DeleteTaiLieuNhanVienByIdResult()
                {
                    MessageCode = "Xóa thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeleteTaiLieuNhanVienByIdResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public UpdateTaiLieuNhanVienResult UpdateTaiLieuNhanVien(UpdateTaiLieuNhanVienParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new UpdateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user.IsManager != true)
                {
                    return new UpdateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Chỉ quản lý mới có quyền sửa tài liệu",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var taiLieu =
                    context.TaiLieuNhanVien.FirstOrDefault(x =>
                        x.TaiLieuNhanVienId == parameter.TaiLieu.TaiLieuNhanVienId);

                if (taiLieu == null)
                {
                    return new UpdateTaiLieuNhanVienResult()
                    {
                        MessageCode = "Tài liệu không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                taiLieu.TenTaiLieu = parameter.TaiLieu.TenTaiLieu;
                taiLieu.NgayHen = parameter.TaiLieu.NgayHen;
                taiLieu.NgayNop = parameter.TaiLieu.NgayNop;
                taiLieu.UpdatedById = parameter.UserId;
                taiLieu.UpdatedDate = DateTime.Now;

                context.TaiLieuNhanVien.Update(taiLieu);
                context.SaveChanges();

                return new UpdateTaiLieuNhanVienResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new UpdateTaiLieuNhanVienResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetTrinhDoHocVanTuyenDungResult GetTrinhDoHocVanTuyenDung(GetTrinhDoHocVanTuyenDungParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (emp == null)
                {
                    return new GetTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new GetTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                bool isShowButtonSua = emp_user.IsNhanSu == true ? true : false;

                var trinhDoHocVanTuyenDung = new TrinhDoHocVanTuyenDungModel();
                trinhDoHocVanTuyenDung.TenTruongHocCaoNhat = emp.TenTruongHocCaoNhat;
                trinhDoHocVanTuyenDung.ChuyenNganhHoc = emp.ChuyenNganhHoc;
                trinhDoHocVanTuyenDung.BangCapCaoNhatDatDuocId = emp.BangCapCaoNhatDatDuocId;
                trinhDoHocVanTuyenDung.KyNangTayNghes = emp.KyNangTayNghes;
                trinhDoHocVanTuyenDung.TomTatHocVan = emp.TomTatHocVan;
                trinhDoHocVanTuyenDung.PhuongThucTuyenDungId = emp.PhuongThucTuyenDungId;
                trinhDoHocVanTuyenDung.LoaiChuyenNganhHoc = emp.LoaiChuyenNganhHoc;
                trinhDoHocVanTuyenDung.MucPhi = emp.MucPhi;
                trinhDoHocVanTuyenDung.NguonTuyenDungId = emp.NguonTuyenDungId;
                trinhDoHocVanTuyenDung.KinhNghiemLamViec = emp.KinhNghiemLamViec;

                /* Get Master data */
                var phuongThucType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTTD");
                trinhDoHocVanTuyenDung.ListPhuongThucTuyenDung = new List<CategoryEntityModel>();
                if (phuongThucType != null)
                {
                    trinhDoHocVanTuyenDung.ListPhuongThucTuyenDung = context.Category
                        .Where(x => x.CategoryTypeId == phuongThucType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                var nguonTuyenType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD");
                trinhDoHocVanTuyenDung.ListNguonTuyenDung = new List<CategoryEntityModel>();
                if (phuongThucType != null)
                {
                    trinhDoHocVanTuyenDung.ListNguonTuyenDung = context.Category
                        .Where(x => x.CategoryTypeId == nguonTuyenType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                var bangCapType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP");
                trinhDoHocVanTuyenDung.ListBangCap = new List<CategoryEntityModel>();
                if (phuongThucType != null)
                {
                    trinhDoHocVanTuyenDung.ListBangCap = context.Category
                        .Where(x => x.CategoryTypeId == bangCapType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                }

                trinhDoHocVanTuyenDung.ListKyNangTayNghe = GeneralList.GetKyNangTayNghe();

                return new GetTrinhDoHocVanTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "OK",
                    TrinhDoHocVanTuyenDung = trinhDoHocVanTuyenDung,
                    IsShowButtonSua = isShowButtonSua
                };
            }
            catch (Exception e)
            {
                return new GetTrinhDoHocVanTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public UpdateTrinhDoHocVanTuyenDungResult UpdateTrinhDoHocVanTuyenDung(UpdateTrinhDoHocVanTuyenDungParameter parameter)
        {
            try
            {
                var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.TrinhDoHocVanTuyenDung.EmployeeId);
                if (emp == null)
                {
                    return new UpdateTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new UpdateTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new UpdateTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp_user.IsManager != true)
                {
                    return new UpdateTrinhDoHocVanTuyenDungResult()
                    {
                        MessageCode = "Chỉ quản lý mới được sửa thông tin",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var trinhDoHocVanTuyenDung = parameter.TrinhDoHocVanTuyenDung;

                #region Kiểm tra thay đổi trên object employee
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var listCategory = context.Category.ToList();
                var listKyNang = GeneralList.GetKyNangTayNghe();
                var contentNote = "";

                var _oldEmployeeModel = emp as Employee;
                var _newEmployeeModel = new Employee
                {
                    TenTruongHocCaoNhat = trinhDoHocVanTuyenDung.TenTruongHocCaoNhat,
                    ChuyenNganhHoc = trinhDoHocVanTuyenDung.ChuyenNganhHoc,
                    BangCapCaoNhatDatDuocId = trinhDoHocVanTuyenDung.BangCapCaoNhatDatDuocId,
                    KyNangTayNghes = trinhDoHocVanTuyenDung.KyNangTayNghes,
                    TomTatHocVan = trinhDoHocVanTuyenDung.TomTatHocVan,
                    PhuongThucTuyenDungId = trinhDoHocVanTuyenDung.PhuongThucTuyenDungId,
                    LoaiChuyenNganhHoc = trinhDoHocVanTuyenDung.LoaiChuyenNganhHoc,
                    MucPhi = trinhDoHocVanTuyenDung.MucPhi ?? 0,
                    NguonTuyenDungId = trinhDoHocVanTuyenDung.NguonTuyenDungId,
                    KinhNghiemLamViec = trinhDoHocVanTuyenDung.KinhNghiemLamViec
                };

                CompareLogic compareLogic = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareField = new List<string> {
                    "TenTruongHocCaoNhat", "ChuyenNganhHoc", "BangCapCaoNhatDatDuocId", "KyNangTayNghes", "TomTatHocVan", "KinhNghiemLamViec",
                    "PhuongThucTuyenDungId", "LoaiChuyenNganhHoc", "MucPhi", "NguonTuyenDungId" };

                compareLogic.Config.MembersToInclude = listCompareField;
                compareLogic.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareEmployee = compareLogic.Compare(_oldEmployeeModel, _newEmployeeModel);

                //Nếu có thay đổi
                if (!compareEmployee.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="TenTruongHocCaoNhat",
                                Key="Tên trường học cao nhất"
                            },
                            new BaseType()
                            {
                                Name="ChuyenNganhHoc",
                                Key="Chuyên ngành học"
                            },
                            new BaseType()
                            {
                                Name="BangCapCaoNhatDatDuocId",
                                Key="Bằng cấp cao nhất đạt được"
                            },
                            new BaseType()
                            {
                                Name="KyNangTayNghes",
                                Key="Kỹ năng, tay nghề"
                            },
                            new BaseType()
                            {
                                Name="TomTatHocVan",
                                Key="Tóm tắt học vấn"
                            },
                            new BaseType()
                            {
                                Name="KinhNghiemLamViec",
                                Key="Kinh nghiệm làm việc"
                            },
                            new BaseType()
                            {
                                Name="PhuongThucTuyenDungId",
                                Key="Phương thức tuyển dụng"
                            },
                            new BaseType()
                            {
                                Name="LoaiChuyenNganhHoc",
                                Key="Chuyên ngành học"
                            },
                            new BaseType()
                            {
                                Name="MucPhi",
                                Key="Mức phí"
                            },
                            new BaseType()
                            {
                                Name="NguonTuyenDungId",
                                Key="Nguồn tuyển dụng"
                            }
                        };

                    compareEmployee.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        if (item.PropertyName == "BangCapCaoNhatDatDuocId")
                        {
                            var oldBangCap = listCategory.FirstOrDefault(x => x.CategoryId == _oldEmployeeModel.BangCapCaoNhatDatDuocId)?.CategoryName ?? "''";
                            var newBangCap = listCategory.FirstOrDefault(x => x.CategoryId == _newEmployeeModel.BangCapCaoNhatDatDuocId)?.CategoryName ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldBangCap + " sang " + newBangCap + "<p>";
                        }
                        else if (item.PropertyName == "PhuongThucTuyenDungId")
                        {
                            var oldPhuongThuc = listCategory.FirstOrDefault(x => x.CategoryId == _oldEmployeeModel.PhuongThucTuyenDungId)?.CategoryName ?? "''";
                            var newPhuongThuc = listCategory.FirstOrDefault(x => x.CategoryId == _newEmployeeModel.PhuongThucTuyenDungId)?.CategoryName ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldPhuongThuc + " sang " + newPhuongThuc + "<p>";
                        }
                        else if (item.PropertyName == "NguonTuyenDungId")
                        {
                            var oldNguonTD = listCategory.FirstOrDefault(x => x.CategoryId == _oldEmployeeModel.NguonTuyenDungId)?.CategoryName ?? "''";
                            var newNguonTD = listCategory.FirstOrDefault(x => x.CategoryId == _newEmployeeModel.NguonTuyenDungId)?.CategoryName ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNguonTD + " sang " + newNguonTD + "<p>";
                        }
                        else if (item.PropertyName == "LoaiChuyenNganhHoc")
                        {
                            var oldChuyenNganh = (_oldEmployeeModel.LoaiChuyenNganhHoc != null ? (_oldEmployeeModel.LoaiChuyenNganhHoc == "a" ? "Có phí" : "Miễn phí") : "''");
                            var newChuyenNganh = (_newEmployeeModel.LoaiChuyenNganhHoc != null ? (_newEmployeeModel.LoaiChuyenNganhHoc == "a" ? "Có phí" : "Miễn phí") : "''");
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldChuyenNganh + " sang " + newChuyenNganh + "<p>";
                        }
                        else if (item.PropertyName == "KyNangTayNghes")
                        {
                            var oldKyNang = listKyNang.FirstOrDefault(x => x.Value == _oldEmployeeModel.KyNangTayNghes)?.Name ?? "''";
                            var newKyNang = listKyNang.FirstOrDefault(x => x.Value == _newEmployeeModel.KyNangTayNghes)?.Name ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldKyNang + " sang " + newKyNang + "<p>";
                        }
                        else
                        {
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                        }
                    });
                }

                #endregion

                emp.TenTruongHocCaoNhat = trinhDoHocVanTuyenDung.TenTruongHocCaoNhat;
                emp.ChuyenNganhHoc = trinhDoHocVanTuyenDung.ChuyenNganhHoc;
                emp.BangCapCaoNhatDatDuocId = trinhDoHocVanTuyenDung.BangCapCaoNhatDatDuocId;
                emp.KyNangTayNghes = trinhDoHocVanTuyenDung.KyNangTayNghes;
                emp.TomTatHocVan = trinhDoHocVanTuyenDung.TomTatHocVan;
                emp.PhuongThucTuyenDungId = trinhDoHocVanTuyenDung.PhuongThucTuyenDungId;
                emp.LoaiChuyenNganhHoc = trinhDoHocVanTuyenDung.LoaiChuyenNganhHoc;
                emp.MucPhi = trinhDoHocVanTuyenDung.MucPhi ?? 0;
                emp.NguonTuyenDungId = trinhDoHocVanTuyenDung.NguonTuyenDungId;
                emp.KinhNghiemLamViec = trinhDoHocVanTuyenDung.KinhNghiemLamViec;

                context.Employee.Update(emp);

                #region Thêm ghi chú
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = emp.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion

                context.SaveChanges();

                return new UpdateTrinhDoHocVanTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Lưu thành công"
                };
            }
            catch (Exception e)
            {
                return new UpdateTrinhDoHocVanTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteThongTinGiaDinhByIdResult DeleteThongTinGiaDinhById(DeleteThongTinGiaDinhByIdParameter parameter)
        {
            try
            {
                var nguoiThan = context.Contact.FirstOrDefault(x => x.ContactId == parameter.ContactId &&
                                                                    x.ObjectType == ContactObjectType.EMP_CON);
                if (nguoiThan == null)
                {
                    return new DeleteThongTinGiaDinhByIdResult()
                    {
                        StatusCode = HttpStatusCode.NotFound,
                        MessageCode = "Bản ghi không tồn tại trên hệ thống"
                    };
                }

                context.Contact.Remove(nguoiThan);

                #region Thêm ghi chú
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                Note note = new Note
                {
                    NoteId = Guid.NewGuid(),
                    Description = userUpdate.UserName + " đã xóa thông tin gia đình",
                    Type = "ADD",
                    ObjectId = nguoiThan.ObjectId,
                    ObjectType = "EMP",
                    Active = true,
                    CreatedById = parameter.UserId,
                    CreatedDate = DateTime.Now,
                    NoteTitle = "đã thêm ghi chú"
                };

                context.Note.Add(note);
                #endregion

                context.SaveChanges();

                return new DeleteThongTinGiaDinhByIdResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Xóa thành công"
                };
            }
            catch (Exception e)
            {
                return new DeleteThongTinGiaDinhByIdResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public SaveThongTinNhanSuResult SaveThongTinNhanSu(SaveThongTinNhanSuParameter parameter)
        {
            try
            {
                var employee =
                    context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.ThongTinNhanSu.EmployeeId);
                if (employee == null)
                {
                    return new SaveThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact =
                    context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId && x.ObjectType == "EMP");
                if (contact == null)
                {
                    return new SaveThongTinNhanSuResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var checkCode = context.Employee.FirstOrDefault(x => x.EmployeeId != parameter.ThongTinNhanSu.EmployeeId && x.CodeMayChamCong == parameter.ThongTinNhanSu.CodeMayChamCong);
                if (checkCode != null)
                {
                    return new SaveThongTinNhanSuResult()
                    {
                        MessageCode = "Code máy chấm công đã tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                #region Kiểm tra thay đổi trên object employee
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var listCategory = context.Category.ToList();
                var listDeptCode = GeneralList.GetDeptCode();
                var listSubCode1 = GeneralList.GetSubCode1();
                var listSubCode2 = GeneralList.GetSubCode2();
                var contentNote = "";

                var _oldEmployeeModel = employee as Employee;
                var _newEmployeeModel = new Employee
                {
                    CodeMayChamCong = parameter.ThongTinNhanSu.CodeMayChamCong,
                    TenMayChamCong = parameter.ThongTinNhanSu.TenMayChamCong,
                    SubCode1Value = parameter.ThongTinNhanSu.SubCode1Value,
                    SubCode2Value = parameter.ThongTinNhanSu.SubCode2Value,
                    DeptCodeValue = parameter.ThongTinNhanSu.DeptCodeValue,
                    CapBacId = parameter.ThongTinNhanSu.CapBacId,
                    MaTest = parameter.ThongTinNhanSu.MaTest,
                    DiemTest = parameter.ThongTinNhanSu.DiemTest
                };

                CompareLogic compareLogic = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareField = new List<string> { "CodeMayChamCong", "TenMayChamCong", "SubCode1Value", "SubCode2Value", "DeptCodeValue", "CapBacId", "MaTest", "DiemTest" };

                compareLogic.Config.MembersToInclude = listCompareField;
                compareLogic.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareEmployee = compareLogic.Compare(_oldEmployeeModel, _newEmployeeModel);

                //Nếu có thay đổi
                if (!compareEmployee.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="CodeMayChamCong",
                                Key="Code máy chấm công"
                            },
                            new BaseType()
                            {
                                Name="TenMayChamCong",
                                Key="Họ tên trên máy chấm công"
                            },
                            new BaseType()
                            {
                                Name="SubCode1Value",
                                Key="Sub code 1"
                            },
                            new BaseType()
                            {
                                Name="SubCode2Value",
                                Key="Sub code 2"
                            },
                            new BaseType()
                            {
                                Name="DeptCodeValue",
                                Key="Dept code"
                            },
                            new BaseType()
                            {
                                Name="CapBacId",
                                Key="Cấp bậc"
                            },
                            new BaseType()
                            {
                                Name="MaTest",
                                Key="Mã testing"
                            },
                            new BaseType()
                            {
                                Name="DiemTest",
                                Key="Điểm test"
                            }
                        };

                    compareEmployee.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        if (item.PropertyName == "SubCode1Value")
                        {
                            var oldSubCode1 = listSubCode1.FirstOrDefault(x => x.Value == _oldEmployeeModel.SubCode1Value)?.Name ?? "''";
                            var newSubCode1 = listSubCode1.FirstOrDefault(x => x.Value == _newEmployeeModel.SubCode1Value)?.Name ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldSubCode1 + " sang " + newSubCode1 + "<p>";
                        }
                        else if (item.PropertyName == "SubCode2Value")
                        {
                            var oldSubCode2 = listSubCode2.FirstOrDefault(x => x.Value == _oldEmployeeModel.SubCode2Value)?.Name ?? "''";
                            var newSubCode2 = listSubCode2.FirstOrDefault(x => x.Value == _newEmployeeModel.SubCode2Value)?.Name ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldSubCode2 + " sang " + newSubCode2 + "<p>";
                        }
                        else if (item.PropertyName == "DeptCodeValue")
                        {
                            var oldDeptCode = listDeptCode.FirstOrDefault(x => x.Value == _oldEmployeeModel.DeptCodeValue)?.Name ?? "''";
                            var newDeptCode = listDeptCode.FirstOrDefault(x => x.Value == _newEmployeeModel.DeptCodeValue)?.Name ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldDeptCode + " sang " + newDeptCode + "<p>";
                        }
                        else if (item.PropertyName == "CapBacId")
                        {
                            var oldCapBac = listCategory.FirstOrDefault(x => x.CategoryId == _oldEmployeeModel.CapBacId)?.CategoryName ?? "''";
                            var newCapBac = listCategory.FirstOrDefault(x => x.CategoryId == _newEmployeeModel.CapBacId)?.CategoryName ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldCapBac + " sang " + newCapBac + "<p>";
                        }
                        else
                        {
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                        }
                    });
                }

                #endregion

                #region Kiểm tra thay đổi trên object contact
                var listProvince = context.Province.Where(x => x.IsShowAsset == true).ToList();
                var _oldContactModel = contact as Contact;
                var _newContactModel = new Contact
                {
                    IdentityId = parameter.ThongTinNhanSu.IdentityId,
                    IdentityIddateOfIssue = parameter.ThongTinNhanSu.IdentityIddateOfIssue,
                    IdentityIdplaceOfIssue = parameter.ThongTinNhanSu.IdentityIdplaceOfIssue,
                    NoiCapCmndtiengAnh = parameter.ThongTinNhanSu.NoiCapCmndtiengAnh,
                    NguyenQuan = parameter.ThongTinNhanSu.NguyenQuan,
                    NoiSinh = parameter.ThongTinNhanSu.NoiSinh,
                    HoKhauThuongTruTv = parameter.ThongTinNhanSu.HoKhauThuongTruTv,
                    HoKhauThuongTruTa = parameter.ThongTinNhanSu.HoKhauThuongTruTa,
                    Address = parameter.ThongTinNhanSu.Address,
                    AddressTiengAnh = parameter.ThongTinNhanSu.AddressTiengAnh,
                    ProvinceId = parameter.ThongTinNhanSu.ProvinceId
                };

                CompareLogic compareLogicContact = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareFieldContact = new List<string> {
                    "IdentityId", "IdentityIddateOfIssue", "IdentityIdplaceOfIssue", "NoiCapCmndtiengAnh",
                    "NguyenQuan", "NoiSinh", "HoKhauThuongTruTv", "HoKhauThuongTruTa", "Address", "AddressTiengAnh", "ProvinceId" };

                compareLogicContact.Config.MembersToInclude = listCompareFieldContact;
                compareLogicContact.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareContact = compareLogicContact.Compare(_oldContactModel, _newContactModel);

                //Nếu có thay đổi
                if (!compareContact.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="IdentityId",
                                Key="Số CMND/Hộ chiếu"
                            },
                            new BaseType()
                            {
                                Name="IdentityIddateOfIssue",
                                Key="Ngày cấp"
                            },
                            new BaseType()
                            {
                                Name="IdentityIdplaceOfIssue",
                                Key="Nơi cấp tiếng việt"
                            },
                            new BaseType()
                            {
                                Name="NoiCapCmndtiengAnh",
                                Key="Nơi cấp tiếng anh"
                            },
                            new BaseType()
                            {
                                Name="NguyenQuan",
                                Key="Nguyên quán"
                            },
                            new BaseType()
                            {
                                Name="NoiSinh",
                                Key="Nơi sinh"
                            },
                            new BaseType()
                            {
                                Name="HoKhauThuongTruTv",
                                Key="Hộ khẩu thường trú"
                            },
                            new BaseType()
                            {
                                Name="HoKhauThuongTruTa",
                                Key="Hộ khẩu thường trú tiếng anh"
                            },
                            new BaseType()
                            {
                                Name="Address",
                                Key="Nơi ở hiện tại"
                            },
                            new BaseType()
                            {
                                Name="AddressTiengAnh",
                                Key="Nơi ở hiện tại - tiếng anh"
                            },
                            new BaseType()
                            {
                                Name="ProvinceId",
                                Key="Địa điểm làm việc"
                            }
                        };

                    compareContact.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        if (item.PropertyName == "IdentityIddateOfIssue")
                        {
                            var oldNgayCap = (_oldContactModel.IdentityIddateOfIssue != null ? _oldContactModel.IdentityIddateOfIssue.Value.Date.ToString("dd/MM/yyyy") : "''");
                            var newNgayCap = (_newContactModel.IdentityIddateOfIssue != null ? _newContactModel.IdentityIddateOfIssue.Value.Date.ToString("dd/MM/yyyy") : "''");
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldNgayCap + " sang " + newNgayCap + "<p>";
                        }
                        else if (item.PropertyName == "ProvinceId")
                        {
                            var oldProvince = listProvince.FirstOrDefault(x => x.ProvinceId == _oldContactModel.ProvinceId)?.ProvinceName ?? "''";
                            var newProvince = listProvince.FirstOrDefault(x => x.ProvinceId == _newContactModel.ProvinceId)?.ProvinceName ?? "''";
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + oldProvince + " sang " + newProvince + "<p>";
                        }
                        else
                        {
                            contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                        }

                    });
                }

                #endregion

                employee.CodeMayChamCong = parameter.ThongTinNhanSu.CodeMayChamCong;
                employee.TenMayChamCong = parameter.ThongTinNhanSu.TenMayChamCong;
                employee.SubCode1Value = parameter.ThongTinNhanSu.SubCode1Value;
                employee.SubCode2Value = parameter.ThongTinNhanSu.SubCode2Value;
                employee.DeptCodeValue = parameter.ThongTinNhanSu.DeptCodeValue;
                employee.CapBacId = parameter.ThongTinNhanSu.CapBacId;
                employee.MaTest = parameter.ThongTinNhanSu.MaTest;
                employee.DiemTest = parameter.ThongTinNhanSu.DiemTest;
                employee.DiaDiemLamviec = context.Province.FirstOrDefault(x => x.ProvinceId == parameter.ThongTinNhanSu.ProvinceId)?.ProvinceName;
                contact.IdentityId = parameter.ThongTinNhanSu.IdentityId;
                contact.IdentityIddateOfIssue = parameter.ThongTinNhanSu.IdentityIddateOfIssue;
                contact.IdentityIdplaceOfIssue = parameter.ThongTinNhanSu.IdentityIdplaceOfIssue;
                contact.NoiCapCmndtiengAnh = parameter.ThongTinNhanSu.NoiCapCmndtiengAnh;
                contact.NguyenQuan = parameter.ThongTinNhanSu.NguyenQuan;
                contact.NoiSinh = parameter.ThongTinNhanSu.NoiSinh;
                contact.HoKhauThuongTruTv = parameter.ThongTinNhanSu.HoKhauThuongTruTv;
                contact.HoKhauThuongTruTa = parameter.ThongTinNhanSu.HoKhauThuongTruTa;
                contact.Address = parameter.ThongTinNhanSu.Address;
                contact.AddressTiengAnh = parameter.ThongTinNhanSu.AddressTiengAnh;
                contact.ProvinceId = parameter.ThongTinNhanSu.ProvinceId;

                context.Employee.Update(employee);
                context.Contact.Update(contact);

                #region Thêm ghi chú
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = employee.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion

                context.SaveChanges();

                return new SaveThongTinNhanSuResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinNhanSuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinLuongVaTroCapResult GetThongTinLuongVaTroCap(GetThongTinLuongVaTroCapParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinLuongVaTroCapResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                decimal luongHienTai = CommonHelper.GetMucLuongHienTaiByEmployeeId(context, parameter.EmployeeId);
                decimal mucLuongKyHopDong = 0;

                var listHopDong = context.HopDongNhanSu
                    .Where(x => x.EmployeeId == parameter.EmployeeId)
                    .OrderByDescending(z => z.NgayKyHopDong).ToList();

                var hopDong = listHopDong.FirstOrDefault();//hợp đồng hiện tại là hợp đồng có ngày ký mới nhất
                mucLuongKyHopDong = hopDong?.MucLuong ?? 0;

                var listAllTroCapType = context.CategoryType.Where(x => x.CategoryTypeCode == "LTCCD" || x.CategoryTypeCode == "LTCK").Select(y => y.CategoryTypeId).ToList();

                var listAllLoaiTroCap = context.Category
                    .Where(x => listAllTroCapType.Contains(x.CategoryTypeId))
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryName = y.CategoryName
                    }).ToList();
                var listAllLoaiTroCapId = listAllLoaiTroCap.Select(x => x.CategoryId).ToList();
                var _listTroCap = context.TroCap.Where(x => listAllLoaiTroCapId.Contains(x.LoaiTroCapId)).ToList();

                var listAllLoaiTroCapNhanVien = (from Tc in _listTroCap
                                                 join TcCv in context.TroCapChucVuMapping on Tc.TroCapId equals TcCv.TroCapId
                                                 join TcLhd in context.TroCapLoaiHopDongMapping on Tc.TroCapId equals TcLhd.TroCapId
                                                 where TcCv.PositionId == employee.PositionId && TcLhd.LoaiHopDongId == hopDong.LoaiHopDongId
                                                 select new TroCapNhanSuModel
                                                 {
                                                     TenTroCap = listAllLoaiTroCap.FirstOrDefault(x => x.CategoryId == Tc.LoaiTroCapId)?.CategoryName,
                                                     MucTroCap = Tc.MucTroCap
                                                 }).ToList();

                return new GetThongTinLuongVaTroCapResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    LuongHienTai = luongHienTai,
                    MucLuongKyHopDong = mucLuongKyHopDong,
                    ListTroCap = listAllLoaiTroCapNhanVien
                };
            }
            catch (Exception e)
            {
                return new GetThongTinLuongVaTroCapResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveThongTinKhacResult SaveThongTinKhac(SaveThongTinKhacParameter parameter)
        {
            try
            {
                var thongTinKhac = parameter.ThongTinKhac;
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == thongTinKhac.EmployeeId);
                if (employee == null)
                {
                    return new SaveThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact = context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId &&
                                                                  x.ObjectType == ContactObjectType.EMP);
                if (contact == null)
                {
                    return new SaveThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new SaveThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new SaveThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                if (emp_user.IsManager != true)
                {
                    return new SaveThongTinKhacResult()
                    {
                        MessageCode = "Chỉ quản lý mới có quyền sửa thông tin",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                #region Kiểm tra thay đổi trên object employee
                var userUpdate = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var listCategory = context.Category.ToList();
                var contentNote = "";
                if (employee.BienSo != thongTinKhac.BienSo)
                {
                    contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Biển số xe từ " + (employee.BienSo != null ? employee.BienSo : "''") + " sang " + (thongTinKhac.BienSo != null ? thongTinKhac.BienSo : "''") + "<p>";
                }

                if (employee.LoaiXe != thongTinKhac.LoaiXe)
                {
                    contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi Loại xe từ " + (employee.LoaiXe != null ? employee.LoaiXe : "''") + " sang " + (thongTinKhac.LoaiXe != null ? thongTinKhac.LoaiXe : "''") + "<p>";
                }

                #endregion

                #region Kiểm tra thay đổi trên object contact
                var _oldContactModel = contact as Contact;
                var _newContactModel = new Contact
                {
                    BankName = thongTinKhac.BankName,
                    BankOwnerName = thongTinKhac.BankOwnerName,
                    BankAccount = thongTinKhac.BankAccount,
                    BankAddress = thongTinKhac.BankAddress
                };

                CompareLogic compareLogicContact = new CompareLogic();

                //danh sách trường muốn so sánh
                var listCompareFieldContact = new List<string> {
                    "BankName", "BankOwnerName", "BankAccount", "BankAddress"};

                compareLogicContact.Config.MembersToInclude = listCompareFieldContact;
                compareLogicContact.Config.MaxDifferences = 20; //So sánh tối đa 20 trường
                ComparisonResult compareContact = compareLogicContact.Compare(_oldContactModel, _newContactModel);

                //Nếu có thay đổi
                if (!compareContact.AreEqual)
                {
                    var listField = new List<BaseType>() {
                            new BaseType()
                            {
                                Name="BankName",
                                Key="Mã ngân hàng"
                            },
                            new BaseType()
                            {
                                Name="BankOwnerName",
                                Key="Chủ tài khoản ngân hàng"
                            },
                            new BaseType()
                            {
                                Name="BankAccount",
                                Key="Số tài khoản ngân hàng"
                            },
                            new BaseType()
                            {
                                Name="BankAddress",
                                Key="Tên và địa chỉ ngân hàng"
                            }
                        };

                    compareContact.Differences.ForEach(item =>
                    {
                        var fieldName = listField.Find(x => x.Name == item.PropertyName)?.Key;
                        contentNote += "<p>- <strong>" + userUpdate.UserName + "</strong> đã thay đổi " + fieldName + " từ " + (item.Object1 != null ? item.Object1Value : "''") + " sang " + (item.Object2 != null ? item.Object2Value : "''") + "<p>";
                    });
                }

                #endregion

                employee.BienSo = thongTinKhac.BienSo;
                employee.LoaiXe = thongTinKhac.LoaiXe;

                contact.BankName = thongTinKhac.BankName;
                contact.BankOwnerName = thongTinKhac.BankOwnerName;
                contact.BankAccount = thongTinKhac.BankAccount;
                contact.BankAddress = thongTinKhac.BankAddress;

                context.Update(employee);
                context.Update(contact);

                #region Thêm ghi chú
                if (contentNote != "")
                {
                    Note note = new Note
                    {
                        NoteId = Guid.NewGuid(),
                        Description = contentNote,
                        Type = "ADD",
                        ObjectId = employee.EmployeeId,
                        ObjectType = "EMP",
                        Active = true,
                        CreatedById = parameter.UserId,
                        CreatedDate = DateTime.Now,
                        NoteTitle = "đã thêm ghi chú"
                    };

                    context.Note.Add(note);
                }
                #endregion

                context.SaveChanges();

                return new SaveThongTinKhacResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinKhacResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinKhacResult GetThongTinKhac(GetThongTinKhacParameter parameter)
        {
            try
            {
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new GetThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var contact = context.Contact.FirstOrDefault(x => x.ObjectId == employee.EmployeeId &&
                                                                  x.ObjectType == ContactObjectType.EMP);
                if (contact == null)
                {
                    return new GetThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại liên hệ trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new GetThongTinKhacResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                bool isShowButtonSua = emp_user.IsNhanSu;

                var thongTinKhac = new ThongTinKhacNhanSuModel();
                thongTinKhac.EmployeeId = employee.EmployeeId;
                thongTinKhac.BienSo = employee.BienSo;
                thongTinKhac.LoaiXe = employee.LoaiXe;
                thongTinKhac.BankName = contact.BankName;
                thongTinKhac.BankOwnerName = contact.BankOwnerName;
                thongTinKhac.BankAccount = contact.BankAccount;
                thongTinKhac.BankAddress = contact.BankAddress;

                return new GetThongTinKhacResult()
                {
                    ThongTinKhac = thongTinKhac,
                    IsShowButtonSua = isShowButtonSua,
                    MessageCode = "Success",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetThongTinKhacResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public SaveThongTinLuongVaTroCapResult SaveThongTinLuongVaTroCap(SaveThongTinLuongVaTroCapParameter parameter)
        {
            try
            {
                var employee =
                    context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.ThongTinLuongVaTroCap.EmployeeId);
                if (employee == null)
                {
                    return new SaveThongTinLuongVaTroCapResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                //Lương cơ bản
                var employeeSalary = new EmployeeSalary();
                employeeSalary.EmployeeSalaryId = Guid.NewGuid();
                employeeSalary.EmployeeId = employee.EmployeeId;
                employeeSalary.EmployeeSalaryBase = parameter.ThongTinLuongVaTroCap.EmployeeSalaryBase;
                employeeSalary.EffectiveDate = parameter.ThongTinLuongVaTroCap.EffectiveDate;
                employeeSalary.CreateById = parameter.UserId;
                employeeSalary.CreateDate = DateTime.Now;

                context.EmployeeSalary.Add(employeeSalary);

                //Chính sách lương
                var employeeAllowance = new EmployeeAllowance();
                employeeAllowance.EmployeeAllowanceId = Guid.NewGuid();
                employeeAllowance.EmployeeId = employee.EmployeeId;
                employeeAllowance.LunchAllowance = parameter.ThongTinLuongVaTroCap.LunchAllowance;
                employeeAllowance.MaternityAllowance = parameter.ThongTinLuongVaTroCap.MaternityAllowance;
                employeeAllowance.FuelAllowance = parameter.ThongTinLuongVaTroCap.FuelAllowance;
                employeeAllowance.PhoneAllowance = parameter.ThongTinLuongVaTroCap.PhoneAllowance;
                employeeAllowance.OtherAllownce = parameter.ThongTinLuongVaTroCap.OtherAllownce;
                employeeAllowance.EffectiveDate = DateTime.Now;
                employeeAllowance.CreateById = parameter.UserId;
                employeeAllowance.CreateDate = DateTime.Now;

                context.EmployeeAllowance.Add(employeeAllowance);

                //Thông tin bảo hiểm
                var employeeInsurance = new EmployeeInsurance();
                employeeInsurance.EmployeeInsuranceId = Guid.NewGuid();
                employeeInsurance.EmployeeId = employee.EmployeeId;
                employeeInsurance.SocialInsuranceSalary = parameter.ThongTinLuongVaTroCap.SocialInsuranceSalary ?? 0;
                employeeInsurance.SocialInsuranceSupportPercent = parameter.ThongTinLuongVaTroCap.SocialInsuranceSupportPercent ?? (decimal)17.5;
                employeeInsurance.SocialInsurancePercent = parameter.ThongTinLuongVaTroCap.SocialInsurancePercent ?? 1;
                employeeInsurance.HealthInsuranceSupportPercent = parameter.ThongTinLuongVaTroCap.HealthInsuranceSupportPercent ?? 3;
                employeeInsurance.UnemploymentinsuranceSupportPercent = parameter.ThongTinLuongVaTroCap.UnemploymentinsuranceSupportPercent ?? (decimal)8.5;
                employeeInsurance.HealthInsurancePercent = parameter.ThongTinLuongVaTroCap.HealthInsurancePercent ?? 1;
                employeeInsurance.UnemploymentinsurancePercent = parameter.ThongTinLuongVaTroCap.UnemploymentinsurancePercent ?? 1;
                employeeInsurance.EffectiveDate = DateTime.Now;
                employeeInsurance.CreateById = parameter.UserId;
                employeeInsurance.CreateDate = DateTime.Now;

                context.EmployeeInsurance.Add(employeeInsurance);

                //Chi phí theo giờ
                employee.ChiPhiTheoGio = parameter.ThongTinLuongVaTroCap.ChiPhiTheoGio;

                context.Employee.Update(employee);

                context.SaveChanges();

                return new SaveThongTinLuongVaTroCapResult()
                {
                    MessageCode = "Lưu thành công",
                    StatusCode = System.Net.HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new SaveThongTinLuongVaTroCapResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public GetThongTinGhiChuResult GetThongTinGhiChu(GetThongTinGhiChuParameter parameter)
        {
            try
            {
                #region Lấy list ghi chú

                var listNote = new List<NoteEntityModel>();

                listNote = context.Note
                    .Where(x => x.ObjectId == parameter.EmployeeId && x.ObjectType == "EMP" && x.Active == true)
                    .Select(
                        y => new NoteEntityModel
                        {
                            NoteId = y.NoteId,
                            Description = y.Description,
                            Type = y.Type,
                            ObjectId = y.ObjectId,
                            ObjectType = y.ObjectType,
                            NoteTitle = y.NoteTitle,
                            Active = y.Active,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate,
                            ResponsibleName = "",
                            ResponsibleAvatar = "",
                            NoteDocList = new List<NoteDocumentEntityModel>()
                        }).ToList();

                if (listNote.Count > 0)
                {
                    var listNoteId = listNote.Select(x => x.NoteId).ToList();
                    var listUser = context.User.Select(y => new { y.UserId, y.EmployeeId }).ToList();
                    var _listAllEmployee = context.Employee.Select(y => new { y.EmployeeId, y.EmployeeName }).ToList();
                    var listFileNote = context.FileInFolder
                        .Where(x => listNoteId.Contains(x.ObjectId.Value) && x.ObjectType == "NOTE").Select(
                            y => new FileInFolderEntityModel
                            {
                                FileInFolderId = y.FileInFolderId,
                                FolderId = y.FolderId,
                                ObjectId = y.ObjectId,
                                FileName = y.FileName,
                                Size = y.Size,
                                FileExtension = y.FileExtension,
                                CreatedById = y.CreatedById,
                                CreatedDate = y.CreatedDate
                            }).ToList();

                    listNote.ForEach(item =>
                    {
                        var _user = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                        var _employee = _listAllEmployee.FirstOrDefault(x => x.EmployeeId == _user?.EmployeeId);
                        item.ResponsibleName = _employee?.EmployeeName;
                        item.ListFile = listFileNote.Where(x => x.ObjectId.Value == item.NoteId)
                            .OrderByDescending(z => z.CreatedDate).ToList();
                    });

                    //Sắp xếp lại listNote
                    listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();
                }

                #endregion

                return new GetThongTinGhiChuResult()
                {
                    MessageCode = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK,
                    ListNote = listNote
                };
            }
            catch (Exception e)
            {
                return new GetThongTinGhiChuResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public ResetPasswordResult ResetPassword(ResetPasswordParameter parameter)
        {
            var user = new User();
            try
            {
                var defaultPass = context.SystemParameter.FirstOrDefault(w => w.SystemKey == "DefaultUserPassword")?
                    .SystemValueString;
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.EmployeeId);
                if (employee == null)
                {
                    return new ResetPasswordResult()
                    {
                        MessageCode = "Nhân viên không tồn tại trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                user = context.User.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                if (user == null)
                {
                    return new ResetPasswordResult()
                    {
                        MessageCode = "Nhân viên không tồn tại tài khoản trên hệ thống",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                user.Password = AuthUtil.GetHashingPassword(defaultPass);
                user.UpdatedById = parameter.UserId;
                context.User.Update(user);
                context.SaveChanges();
            }
            catch (Exception e)
            {
                return new ResetPasswordResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }

            #region Get Employee Infor to send email

            NotificationHelper.AccessNotification(context, "EMPLOYEE_DETAIL", "RESET", new User(), user, true);

            #endregion

            return new ResetPasswordResult()
            {
                MessageCode = "Đặt lại mật khẩu thành công",
                StatusCode = System.Net.HttpStatusCode.OK,
            };
        }

        public GetMasterDataDashboardResult GetMasterDataDashboard(GetMasterDataDashboardParameter parameter)
        {
            try
            {
                var listCandidate = context.Candidate.Where(x => x.CreatedDate.Month == parameter.TimeType).ToList();
                var listCategory = context.Category.ToList();
                var listEmployee = context.Employee.Where(x => x.IsCustomer != true).ToList();

                #region Tỉ lệ ứng viên theo trạng thái

                var totalCandidate = listCandidate.Count();

                var listChartCandidateFollowStatus = listCandidate.GroupBy(x => x.Status)
                    .Select(y => new ChartCandidateFollowStatus()
                    {
                        Status = y.Key,
                        Count = y.Count(),
                    }).ToList();

                listChartCandidateFollowStatus.ForEach(item =>
                {
                    switch (item.Status)
                    {
                        case 1:
                            item.StatusName = "Mới";
                            break;
                        case 2:
                            item.StatusName = "Hẹn phỏng vấn";
                            break;
                        case 3:
                            item.StatusName = "Đạt phỏng vấn";
                            break;
                        case 4:
                            item.StatusName = "Gửi offer";
                            break;
                        case 5:
                            item.StatusName = "Từ chối offer";
                            break;
                        case 6:
                            item.StatusName = "Không đạt";
                            break;
                        case 7:
                            item.StatusName = "NV/Thử việc";
                            break;

                    }

                    item.PercentValue = ((float)item.Count / totalCandidate * 100).ToString("0");
                });

                listChartCandidateFollowStatus = listChartCandidateFollowStatus.OrderBy(x => x.Status).ToList();

                #endregion

                #region Số lượng ứng viên theo kênh tuyển dụng

                var listNumberCandidateFollowRecruitmentChannel = listCandidate.GroupBy(x => x.RecruitmentChannelId)
                    .Select(y => new NumberCandidateFollowRecruitmentChannel()
                    {
                        RecruitmentChannelId = y.Key,
                        TotalCandidateCount = y.Count(),
                        TotalCandidateInterviewCount = y.Count(z => z.Status == 2),
                        TotalCandidateEmployeeCount = y.Count(z => z.Status == 7),
                    }).ToList();

                listNumberCandidateFollowRecruitmentChannel.ForEach(item =>
                {
                    item.RecruitmentChannelName = listCategory
                        .FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                });

                #endregion

                #region SỐ LƯỢNG NV/THỬ VIỆC TUYỂN ĐƯỢC THEO NHÂN VIÊN

                var listCandidateTurnEmp = listCandidate.Where(x => x.Status == 7).Select(y => y.CandidateId).ToList();

                var listCandidateMapping = context.CandidateVacanciesMapping
                    .Where(x => listCandidateTurnEmp.Contains(x.CandidateId)).ToList();

                var listNumberCandidateTurnEmployeeFollowEmployee = context.Vacancies.GroupBy(x => x.PersonInChargeId)
                    .Select(y => new NumberCandidateTurnEmployeeFollowEmployee()
                    {
                        PersonInChargeId = y.Key,
                        ListVacanciesId = y.Select(z => z.VacanciesId).ToList(),
                    }).ToList();

                listNumberCandidateTurnEmployeeFollowEmployee.ForEach(item =>
                {
                    item.PersonInChargeName = listEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)
                        ?.EmployeeName;
                    item.Count = listCandidateMapping.Count(x => item.ListVacanciesId.Contains(x.VacanciesId));
                });

                #endregion

                #region Danh sách lịch phỏng vấn

                var listInterview = context.InterviewSchedule.Select(x => new InterviewScheduleEntityModel()
                {
                    InterviewScheduleId = x.InterviewScheduleId,
                    InterviewDate = x.InterviewDate,
                    InterviewTitle = x.InterviewTitle,
                    InterviewTime = x.InterviewTime ?? 0,
                    CreatedById = x.CreatedById
                }).ToList();

                #endregion

                var isManagerOfHR = false;
                var isGD = false;
                var isNguoiPhuTrach = false;

                //Kiểm tra xem người đăng nhập có phải trưởng phòng nhân sự hay không
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetMasterDataDashboardResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                var loginEmp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (loginEmp == null)
                {
                    return new GetMasterDataDashboardResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                //Kiểm tra xem có thuộc phòng nhân sự hay không và có phải trưởng phòng nhân sự ?
                var organization = context.Organization.FirstOrDefault(x => x.OrganizationId == loginEmp.OrganizationId);
                var PositionCode = context.Position.FirstOrDefault(x => x.PositionId == loginEmp.PositionId)?.PositionCode;
                if (organization != null && organization.IsHr == true && PositionCode != null && PositionCode == "TP")
                {
                    isManagerOfHR = true;
                }
                //Kiểm tra xem có phải giám đốc hay không
                if (PositionCode == "GD")
                {
                    isGD = true;
                }
                //Kiểm tra xem có phải người phụ trách vị trí tuyển dụng
                var listNguoiPhuTrach = context.Vacancies.Select(x => x.PersonInChargeId).ToList();
                if (listNguoiPhuTrach.Contains(loginEmp.EmployeeId))
                {
                    isNguoiPhuTrach = true;
                }



                return new GetMasterDataDashboardResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListChartCandidateFollowStatus = listChartCandidateFollowStatus,
                    ListNumberCandidateFollowRecruitmentChannel = listNumberCandidateFollowRecruitmentChannel,
                    ListNumberCandidateTurnEmployeeFollowEmployee = listNumberCandidateTurnEmployeeFollowEmployee,
                    ListInterviewSchedule = listInterview,
                    IsNguoiPhuTrach = isNguoiPhuTrach,
                    IsGD = isGD,
                    IsManagerOfHR = isManagerOfHR,
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataDashboardResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateRecruitmentCampaignResult CreateRecruitmentCampaign(CreateRecruitmentCampaignParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    var objectId = Guid.Empty;
                    if (parameter.RecruitmentCampaignModel.RecruitmentCampaignId == Guid.Empty)
                    {
                        #region Check trùng thoi gian cua hai chien dich

                        var check = true;

                        var listRecruitmentCampaign = context.RecruitmentCampaign.ToList();
                        listRecruitmentCampaign?.ForEach(item =>
                        {
                            if ((item.StartDate.Date <= parameter.RecruitmentCampaignModel.StartDate.Date && parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date) ||
                                (item.StartDate.Date <= parameter.RecruitmentCampaignModel.StartDate.Date && parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date &&
                                 item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date && parameter.RecruitmentCampaignModel.EndDateDate.Date <= item.EndDateDate.Date) ||
                                (parameter.RecruitmentCampaignModel.StartDate.Date <= item.StartDate.Date && item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date &&
                                 parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date && item.EndDateDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date) ||
                                (item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date && parameter.RecruitmentCampaignModel.EndDateDate.Date <= item.EndDateDate.Date))
                            {
                                check = false;
                            }
                        });

                        if (!check)
                        {
                            return new CreateRecruitmentCampaignResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Trong khoảng thời gian này đang diễn ra một chiến dịch, không thể tạo chiến dịch mới."
                            };
                        }

                        #endregion

                        #region Tạo chiến dịch

                        var recruitmentCampaign = new RecruitmentCampaign()
                        {
                            RecruitmentCampaignId = Guid.NewGuid(),
                            RecruitmentCampaignName = parameter.RecruitmentCampaignModel.RecruitmentCampaignName,
                            PersonInChargeId = parameter.RecruitmentCampaignModel.PersonInChargeId,
                            StartDate = parameter.RecruitmentCampaignModel.StartDate,
                            EndDateDate = parameter.RecruitmentCampaignModel.EndDateDate,
                            RecruitmentCampaignDes = parameter.RecruitmentCampaignModel.RecruitmentCampaignDes,
                            CreatedDate = DateTime.Now,
                            CreatedById = parameter.UserId,
                        };

                        context.RecruitmentCampaign.Add(recruitmentCampaign);
                        context.SaveChanges();

                        #endregion

                        objectId = recruitmentCampaign.RecruitmentCampaignId;
                    }
                    else
                    {
                        #region Check trùng thoi gian cua hai chien dich

                        var check = true;

                        var listRecruitmentCampaign = context.RecruitmentCampaign.Where(x =>
                                x.RecruitmentCampaignId != parameter.RecruitmentCampaignModel.RecruitmentCampaignId)
                            .ToList();

                        listRecruitmentCampaign?.ForEach(item =>
                        {
                            if ((item.StartDate.Date <= parameter.RecruitmentCampaignModel.StartDate.Date && parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date) ||
                                ((item.StartDate.Date <= parameter.RecruitmentCampaignModel.StartDate.Date && parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date) &&
                                 (item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date && parameter.RecruitmentCampaignModel.EndDateDate.Date <= item.EndDateDate.Date)) ||
                                ((parameter.RecruitmentCampaignModel.StartDate.Date <= item.StartDate.Date && item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date) &&
                                 (parameter.RecruitmentCampaignModel.StartDate.Date <= item.EndDateDate.Date && item.EndDateDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date)) ||
                                (item.StartDate.Date <= parameter.RecruitmentCampaignModel.EndDateDate.Date && parameter.RecruitmentCampaignModel.EndDateDate.Date <= item.EndDateDate.Date))
                            {
                                check = false;
                            }
                        });

                        if (!check)
                        {
                            return new CreateRecruitmentCampaignResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Trong khoảng thời gian này đang diễn ra một chiến dịch, không thể tạo chiến dịch mới."
                            };
                        }

                        #endregion

                        #region update chiến dịch

                        var newRecruitmentCampaign = new RecruitmentCampaign()
                        {
                            RecruitmentCampaignId = parameter.RecruitmentCampaignModel.RecruitmentCampaignId,
                            RecruitmentCampaignName = parameter.RecruitmentCampaignModel.RecruitmentCampaignName,
                            PersonInChargeId = parameter.RecruitmentCampaignModel.PersonInChargeId,
                            StartDate = parameter.RecruitmentCampaignModel.StartDate,
                            EndDateDate = parameter.RecruitmentCampaignModel.EndDateDate,
                            RecruitmentCampaignDes = parameter.RecruitmentCampaignModel.RecruitmentCampaignDes,
                            CreatedById = parameter.RecruitmentCampaignModel.CreatedById.Value,
                            CreatedDate = parameter.RecruitmentCampaignModel.CreatedDate.Value,
                            UpdatedDate = DateTime.Now,
                            UpdatedById = parameter.UserId,
                        };

                        context.RecruitmentCampaign.Update(newRecruitmentCampaign);
                        context.SaveChanges();

                        #endregion

                        objectId = newRecruitmentCampaign.RecruitmentCampaignId;
                    }

                    #region Lưu tài liệu liên quan

                    if (parameter.ListFile != null && parameter.ListFile.Count > 0)
                    {
                        var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                        if (folder == null)
                        {
                            return new CreateRecruitmentCampaignResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Thư mục upload không tồn tại, bạn cần cấu hình thư mục để tiếp tục."
                            };
                        }

                        var listFileDelete = new List<string>();

                        var listFileResult = new List<FileInFolderEntityModel>();

                        bool isSave = true;
                        parameter.ListFile.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = item.FileInFolder.FileName + "_" + Guid.NewGuid().ToString(),
                                    FolderId = folder.FolderId,
                                    ObjectId = objectId,
                                    ObjectType = "RE_CAMP",
                                    Size = item.FileInFolder.Size,
                                    FileExtension =
                                        item.FileSave.FileName.Substring(item.FileSave.FileName.LastIndexOf(".") + 1)
                                };

                                context.FileInFolder.Add(file);
                                context.SaveChanges();

                                string fileName = file.FileName + "." + file.FileExtension;

                                if (isSave)
                                {
                                    string fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                        listFileDelete.Add(fullPath);
                                    }
                                }
                            }
                        });
                        if (!isSave)
                        {
                            listFileDelete.ForEach(File.Delete);

                            return new CreateRecruitmentCampaignResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu",
                            };
                        }
                    }


                    #endregion

                    transaction.Commit();

                    return new CreateRecruitmentCampaignResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                        RecruitmentCampaignId = objectId,
                    };
                }
            }
            catch (Exception e)
            {
                return new CreateRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterSearchRecruitmentCampaignResult GetMasterSearchRecruitmentCampaign(GetMasterSearchRecruitmentCampaignParameter parameter)
        {
            try
            {
                // Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.Where(x => x.Active == true).ToList();
                if (lstOrganizationHCNS.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                var listEmp = listAllEmployee.Where(x => x.IsCustomer != true).Select(y => new EmployeeEntityModel()
                {
                    EmployeeId = y.EmployeeId,
                    EmployeeName = y.EmployeeName,
                    EmployeeCode = y.EmployeeCode,
                    EmployeeCodeName = $"{y.EmployeeCode} - {y.EmployeeName}",
                }).ToList();

                return new GetMasterSearchRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListEmployee = listEmp,
                };
            }
            catch (Exception e)
            {
                return new GetMasterSearchRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteRecruitmentCampaignResult DeleteRecruitmentCampaign(DeleteRecruitmentCampaignParameter parameter)
        {
            try
            {

                var recruitmentCampaign =
                    context.RecruitmentCampaign.FirstOrDefault(x =>
                        x.RecruitmentCampaignId == parameter.RecruitmentCampaignId);

                if (recruitmentCampaign == null)
                {
                    return new DeleteRecruitmentCampaignResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Chiến dịch không tồn tại.",
                    };
                }

                var listVacancies = context.Vacancies
                    .Where(x => x.RecruitmentCampaignId == recruitmentCampaign.RecruitmentCampaignId).ToList();
                if (listVacancies.Count() > 0)
                {
                    return new DeleteRecruitmentCampaignResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Chiến dịch tồn tại vị trí tuyển dụng.",
                    };
                }

                var listVacanciesId = listVacancies.Select(x => x.VacanciesId).ToList();

                //danh sach map Ứng viên với vị trí tuyển dụng
                var listCandidateVacanciesMapping = context.CandidateVacanciesMapping
                    .Where(x => listVacanciesId.Contains(x.VacanciesId)).ToList();

                using (var transaction = context.Database.BeginTransaction())
                {
                    // Xoa
                    context.CandidateVacanciesMapping.RemoveRange(listCandidateVacanciesMapping);
                    context.SaveChanges();

                    context.Vacancies.RemoveRange(listVacancies);
                    context.SaveChanges();

                    context.RecruitmentCampaign.Remove(recruitmentCampaign);
                    context.SaveChanges();

                    transaction.Commit();
                }

                return new DeleteRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                };
            }
            catch (Exception e)
            {
                return new DeleteRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public SearchRecruitmentCampaignResult SearchRecruitmentCampaign(SearchRecruitmentCampaignParameter parameter)
        {
            try
            {
                var listAllUser = context.User.ToList();
                var listEmp = context.Employee.Where(x => x.IsCustomer != true).ToList();
                var listVacancies = context.Vacancies.ToList();

                //// Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                //// Quản lý phòng HCNS
                //var listAllEmployee = context.Employee.Where(x => x.Active == true).ToList();
                //List<Guid> listNSEmployee = new List<Guid>();
                //if (organizationHCNS != null)
                //{
                //    listNSEmployee = listAllEmployee.Where(x => x.OrganizationId == organizationHCNS.OrganizationId && x.IsManager == true).Select(y => y.EmployeeId).ToList();
                //}

                ////Lấy danh sách nhân viên phụ trách vị trí tuyển dụng
                //var listVacancies = context.Vacancies.ToList();
                //var listNVPhuTrachTuyenDung = listVacancies.Select(x => x.PersonInChargeId).ToList();

                ////Lấy người phụ trách của chiến dịch
                //var listNguoiPhuTrachChienDich = context.RecruitmentCampaign.Select(x => x.PersonInChargeId).ToList();

                List<RecruitmentCampaignEntityModel> listRecruitmentCampaign = new List<RecruitmentCampaignEntityModel>();

                listRecruitmentCampaign = context.RecruitmentCampaign.Select(y => new RecruitmentCampaignEntityModel()
                {
                    RecruitmentCampaignId = y.RecruitmentCampaignId,
                    RecruitmentCampaignName = y.RecruitmentCampaignName,
                    PersonInChargeId = y.PersonInChargeId,
                    StartDate = y.StartDate,
                    EndDateDate = y.EndDateDate,
                    RecruitmentQuantity = 0,
                    SortOrder = 0,
                    CreatedById = y.CreatedById
                }).ToList();

                #region Check permision: manager
                var user = listAllUser.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new SearchRecruitmentCampaignResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new SearchRecruitmentCampaignResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }
                var employeeId = user.EmployeeId;
                var employee = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                var isManager = employee.IsManager;
                #endregion


                if (isManager)
                {
                    //Lấy list phòng ban con của user
                    List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                    if (employee.OrganizationId != null && isManager)
                    {
                        listGetAllChild.Add(employee.OrganizationId.Value);
                        listGetAllChild = getOrganizationChildrenId(employee.OrganizationId.Value, listGetAllChild);
                    }
                    //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                    var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                    List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();
                    List<Guid> listUserByManagerId = new List<Guid>();

                    listEmployeeInChargeByManager.ForEach(item =>
                    {
                        if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                            listEmployeeInChargeByManagerId.Add(item.EmployeeId);
                    });

                    //Lấy danh sách nhân viên UserId mà user phụ trách
                    listEmployeeInChargeByManagerId.ForEach(item =>
                    {
                        var user_employee = listAllUser.FirstOrDefault(x => x.EmployeeId == item);
                        if (user_employee != null)
                            listUserByManagerId.Add(user_employee.UserId);
                    });

                    //Nếu là quản lý
                    listRecruitmentCampaign = listRecruitmentCampaign.Where(x => (x.PersonInChargeId != null && (listEmployeeInChargeByManagerId == null || listEmployeeInChargeByManagerId.Count == 0 || listEmployeeInChargeByManagerId.FirstOrDefault(y => y.Equals(x.PersonInChargeId.Value)) != Guid.Empty)) ||
                                                                 (x.PersonInChargeId == null && (listUserByManagerId == null || listUserByManagerId.Count == 0 || listUserByManagerId.FirstOrDefault(y => y.Equals(x.CreatedById)) != Guid.Empty))
                                                           ).ToList();
                }
                else
                {
                    //Nếu không phải quản lý
                    listRecruitmentCampaign = listRecruitmentCampaign.Where(x => (x.PersonInChargeId != null && x.PersonInChargeId == employeeId) || (x.PersonInChargeId == null && x.CreatedById.Equals(user.UserId))).ToList();
                }







                listRecruitmentCampaign.ForEach(item =>
                {
                    if (item.StartDate.Date > DateTime.Now.Date)
                    {
                        item.StatusName = "Mới";
                        item.SortOrder = 2;
                    }
                    else if (item.StartDate.Date <= DateTime.Now.Date && DateTime.Now.Date <= item.EndDateDate.Date)
                    {
                        item.StatusName = "Đang diễn ra";
                        item.SortOrder = 1;
                    }
                    else if (item.EndDateDate.Date < DateTime.Now.Date)
                    {
                        item.StatusName = "Kết thúc";
                        item.SortOrder = 3;
                    }

                    item.PersonInChargeName = listEmp
                        .FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)?.EmployeeName;

                    item.RecruitmentQuantity = listVacancies
                        .Where(x => x.RecruitmentCampaignId == item.RecruitmentCampaignId).Sum(y => y.Quantity);
                });

                //Bo loc
                if (parameter.RecruitmentCampaignName != "")
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => x.RecruitmentCampaignName.ToLower().Contains(parameter.RecruitmentCampaignName.ToLower())).ToList();
                }

                if (parameter.StartDateFrom != null && parameter.StartDateTo == null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.StartDateFrom.Value.Date <= x.StartDate.Date).ToList();
                }

                if (parameter.StartDateFrom != null && parameter.StartDateTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.StartDateFrom.Value.Date <= x.StartDate.Date &&
                                    x.StartDate.Date <= parameter.StartDateTo.Value.Date).ToList();
                }

                if (parameter.StartDateFrom == null && parameter.StartDateTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => x.StartDate.Date <= parameter.StartDateTo.Value.Date).ToList();
                }

                if (parameter.EndDateFrom == null && parameter.EndDateTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => x.EndDateDate.Date <= parameter.EndDateTo.Value.Date).ToList();
                }

                if (parameter.EndDateFrom != null && parameter.EndDateTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.EndDateFrom.Value.Date <= x.EndDateDate.Date &&
                                    x.EndDateDate.Date <= parameter.EndDateTo.Value.Date).ToList();
                }

                if (parameter.EndDateFrom != null && parameter.EndDateTo == null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.EndDateFrom.Value.Date <= x.EndDateDate.Date).ToList();
                }

                if (parameter.ListPersonInChangeId.Count > 0)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => x.PersonInChargeId != null &&
                                    parameter.ListPersonInChangeId.Contains(x.PersonInChargeId)).ToList();
                }

                if (parameter.RecruitmentQuantityFrom != null && parameter.RecruitmentQuantityTo == null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.RecruitmentQuantityFrom.Value <= x.RecruitmentQuantity).ToList();
                }

                if (parameter.RecruitmentQuantityFrom != null && parameter.RecruitmentQuantityTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => parameter.RecruitmentQuantityFrom.Value <= x.RecruitmentQuantity &&
                                    x.RecruitmentQuantity <= parameter.RecruitmentQuantityTo.Value).ToList();
                }

                if (parameter.RecruitmentQuantityFrom == null && parameter.RecruitmentQuantityTo != null)
                {
                    listRecruitmentCampaign = listRecruitmentCampaign
                        .Where(x => x.RecruitmentQuantity <= parameter.RecruitmentQuantityTo.Value).ToList();
                }

                listRecruitmentCampaign = listRecruitmentCampaign.OrderBy(x => x.SortOrder).ToList();

                return new SearchRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListRecruitmentCampaign = listRecruitmentCampaign,
                };
            }
            catch (Exception e)
            {
                return new SearchRecruitmentCampaignResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterRecruitmentCampaignDetailResult GetMasterRecruitmentCampaignDetail(GetMasterRecruitmentCampaignDetailParameter parameter)
        {
            try
            {
                var listEmployee = new List<EmployeeEntityModel>();
                #region Lấy thông tin chiến dịch

                var recruitmentCampaign = context.RecruitmentCampaign
                    .Where(x => x.RecruitmentCampaignId == parameter.RecruitmentCampaignId)
                    .Select(y => new RecruitmentCampaignEntityModel()
                    {
                        RecruitmentCampaignId = y.RecruitmentCampaignId,
                        RecruitmentCampaignName = y.RecruitmentCampaignName,
                        RecruitmentCampaignDes = y.RecruitmentCampaignDes,
                        PersonInChargeId = y.PersonInChargeId,
                        StartDate = y.StartDate,
                        EndDateDate = y.EndDateDate,
                        CreatedDate = y.CreatedDate,
                        CreatedById = y.CreatedById,
                        RecruitmentQuantity = 0,
                    }).FirstOrDefault();

                if (recruitmentCampaign == null)
                {
                    return new GetMasterRecruitmentCampaignDetailResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Chiến dịch không tồn tại trong hệ thống.",
                    };
                }

                if (recruitmentCampaign.StartDate.Date > DateTime.Now.Date)
                {
                    recruitmentCampaign.StatusName = "Mới";
                }
                else if (recruitmentCampaign.StartDate.Date <= DateTime.Now.Date && DateTime.Now.Date <= recruitmentCampaign.EndDateDate.Date)
                {
                    recruitmentCampaign.StatusName = "Đang diễn ra";
                }
                else if (recruitmentCampaign.EndDateDate.Date < DateTime.Now.Date)
                {
                    recruitmentCampaign.StatusName = "Kết thúc";
                }

                recruitmentCampaign.PersonInChargeName = context.Employee
                    .FirstOrDefault(x => x.EmployeeId == recruitmentCampaign.PersonInChargeId)?.EmployeeName;
                recruitmentCampaign.PersonInChargeCode = context.Employee
                    .FirstOrDefault(x => x.EmployeeId == recruitmentCampaign.PersonInChargeId)?.EmployeeCode;
                recruitmentCampaign.PersonInChargeCodeName =
                    $"{recruitmentCampaign.PersonInChargeCode} - {recruitmentCampaign.PersonInChargeName}";

                #endregion

                #region Loại công việc

                var listExperience = new List<CategoryEntityModel>();
                var listLoaiCV = new List<CategoryEntityModel>();
                var listChanel = new List<CategoryEntityModel>();
                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                var listAllEmployee = context.Employee.Where(x => x.Active == true).ToList();

                var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD").CategoryTypeId;
                listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listLoaiCV = listLoaiCV.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kinh nghiệm làm việc
                var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV").CategoryTypeId;
                listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                listExperience = listExperience.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kênh tuyển dụng
                var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Lấy danh sách vị trí tuyển dụng

                var listVacancy = context.Vacancies
                    .Where(x => x.RecruitmentCampaignId == parameter.RecruitmentCampaignId)
                    .Select(y => new VacancyEntityModel()
                    {
                        VacanciesId = y.VacanciesId,
                        VacanciesName = y.VacanciesName,
                        Priority = y.Priority,
                        Quantity = y.Quantity,
                        SalarType = y.SalarType,
                        SalaryFrom = y.SalaryFrom,
                        SalaryTo = y.SalaryTo,
                        ExperienceId = y.ExperienceId,
                        RecruitmentCampaignId = y.RecruitmentCampaignId,
                        TypeOfWork = y.TypeOfWork,
                        PersonInChargeId = y.PersonInChargeId
                    }).ToList();

                listVacancy.ForEach(item =>
                {
                    item.TypeOfWorkName = listLoaiCV.FirstOrDefault(x => x.CategoryId == item.TypeOfWork)?.CategoryName;
                    item.PersonInChargeName = listAllEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)?.EmployeeName;
                    item.ExperienceName = listExperience.FirstOrDefault(x => x.CategoryId == item.ExperienceId)?.CategoryName;

                    recruitmentCampaign.RecruitmentQuantity += item.Quantity;
                });
                listVacancy = listVacancy.OrderBy(x => x.Priority).ToList();

                #endregion

                #region Lấy danh sách tài liệu liên quan
                var listNote = new List<NoteEntityModel>();
                var objectType = "RE_CAMP";
                var folderUrl = context.Folder.FirstOrDefault(x => x.FolderType == objectType)?.Url;
                var webRootPath = hostingEnvironment.WebRootPath + "\\";
                var folder = context.Folder.FirstOrDefault(x => x.FolderType == "RE_CAMP");

                var listFileResult = context.FileInFolder
                    .Where(x => x.ObjectId == parameter.RecruitmentCampaignId && x.FolderId == folder.FolderId).Select(y =>
                        new FileInFolderEntityModel
                        {
                            Size = y.Size,
                            ObjectId = y.ObjectId,
                            Active = y.Active,
                            FileExtension = y.FileExtension,
                            FileInFolderId = y.FileInFolderId,
                            FileName = y.FileName,
                            FolderId = y.FolderId,
                            ObjectType = y.ObjectType,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate
                        }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                });


                listFileResult.ForEach(item =>
                {
                    var fileName = $"{item.FileName}.{item.FileExtension}";
                    var folderName = ConvertFolderUrl(folderUrl);
                    item.FileName = fileName;
                    item.FileUrl = Path.Combine(webRootPath, folderName, fileName);

                });
                #endregion

                #region Lấy thông tin ghi chú

                // list ghi chú 
                listNote = context.Note.Where(x =>
                        x.ObjectId == parameter.RecruitmentCampaignId && x.ObjectType == objectType && x.Active == true)
                    .Select(y => new NoteEntityModel
                    {
                        NoteId = y.NoteId,
                        Description = y.Description,
                        Type = y.Type,
                        ObjectId = y.ObjectId,
                        ObjectType = y.ObjectType,
                        NoteTitle = y.NoteTitle,
                        Active = y.Active,
                        CreatedById = y.CreatedById,
                        CreatedDate = y.CreatedDate,
                        UpdatedById = y.UpdatedById,
                        UpdatedDate = y.UpdatedDate,
                        ResponsibleName = "",
                        ResponsibleAvatar = "",
                        NoteDocList = new List<NoteDocumentEntityModel>()
                    }).ToList();


                if (listNote.Count > 0)
                {
                    var listNoteId = listNote.Select(x => x.NoteId).ToList();
                    var listUser = context.User.ToList();
                    var _listAllEmployee = context.Employee.ToList();
                    var listNoteDocument = context.NoteDocument.Where(x => listNoteId.Contains(x.NoteId)).Select(
                        y => new NoteDocumentEntityModel
                        {
                            DocumentName = y.DocumentName,
                            DocumentSize = y.DocumentSize,
                            DocumentUrl = y.DocumentUrl,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate,
                            NoteDocumentId = y.NoteDocumentId,
                            NoteId = y.NoteId
                        }
                    ).ToList();

                    var listFileInFolder = context.FileInFolder.Where(x => listNoteId.Contains((Guid)x.ObjectId))
                        .ToList();

                    listFileInFolder.ForEach(item =>
                    {
                        var file = new NoteDocumentEntityModel
                        {
                            DocumentName = item.FileName.Substring(0, item.FileName.LastIndexOf("_")),
                            DocumentSize = item.Size,
                            CreatedById = item.CreatedById,
                            CreatedDate = item.CreatedDate,
                            UpdatedById = item.UpdatedById,
                            UpdatedDate = item.UpdatedDate,
                            NoteDocumentId = item.FileInFolderId,
                            NoteId = (Guid)item.ObjectId
                        };

                        var fileName = $"{item.FileName}.{item.FileExtension}";
                        var folderName = ConvertFolderUrl(folderUrl);

                        file.DocumentUrl = Path.Combine(webRootPath, folderName, fileName);

                        listNoteDocument.Add(file);
                    });

                    listNote.ForEach(item =>
                    {
                        var _user = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                        if (_user != null)
                        {
                            var _employee = _listAllEmployee.FirstOrDefault(x => x.EmployeeId == _user.EmployeeId);
                            item.ResponsibleName = _employee.EmployeeName;
                            item.NoteDocList = listNoteDocument.Where(x => x.NoteId == item.NoteId)
                                .OrderBy(z => z.UpdatedDate).ToList();
                        }
                    });

                    // Sắp xếp lại listnote
                    listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();
                }

                #endregion

                #region Người phụ trách tuyển dụng thuộc phòng HCNS
                // Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x => x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                // Danh sách NV phòng HCNS
                if (lstOrganizationHCNS.Count() > 0)
                {
                    listEmployee = listAllEmployee.Where(x => x.IsCustomer != true && x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).Select(y => new EmployeeEntityModel()
                    {
                        EmployeeId = y.EmployeeId,
                        EmployeeName = y.EmployeeName,
                        EmployeeCode = y.EmployeeCode,
                        EmployeeCodeName = $"{y.EmployeeCode} - {y.EmployeeName}",
                        IsManager = y.IsManager,
                        Active = y.Active
                    }).ToList();
                }
                #endregion

                var isManagerOfHR = false;
                var isGD = false;
                var isNguoiPhuTrach = false;


                //Kiểm tra xem người đăng nhập có phải trưởng phòng nhân sự hay không
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetMasterRecruitmentCampaignDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                var loginEmp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (loginEmp == null)
                {
                    return new GetMasterRecruitmentCampaignDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                //Kiểm tra xem có thuộc phòng nhân sự hay không và có phải trưởng phòng nhân sự ?
                var organization = context.Organization.FirstOrDefault(x => x.OrganizationId == loginEmp.OrganizationId);
                var PositionCode = context.Position.FirstOrDefault(x => x.PositionId == loginEmp.PositionId)?.PositionCode;
                //if (OrganizationCode != null && OrganizationCode == "PHCNS" && PositionCode != null && PositionCode == "TP")
                if (organization != null && organization.IsHr == true && PositionCode != null)
                {
                    isManagerOfHR = true;
                }
                //Kiểm tra xem có phải giám đốc hay không
                if (PositionCode == "GD")
                {
                    isGD = true;
                }

                //Kiểm tra xem có phải người phụ trách vị trí tuyển dụng
                var listNguoiPhuTrach = context.Vacancies.Where(y => y.RecruitmentCampaignId == recruitmentCampaign.RecruitmentCampaignId).Select(x => x.PersonInChargeId).ToList();
                if (listNguoiPhuTrach.Contains(loginEmp.EmployeeId))
                {
                    isNguoiPhuTrach = true;
                }

                return new GetMasterRecruitmentCampaignDetailResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    RecruitmentCampaign = recruitmentCampaign,
                    ListVacancies = listVacancy,
                    ListFileInFolder = listFileResult,
                    ListNote = listNote,
                    ListChanel = listChanel,
                    ListKinhNghiem = listExperience,
                    ListLoaiCongViec = listLoaiCV,
                    listEmployeePTTD = listEmployee,
                    IsManagerOfHR = isManagerOfHR,
                    IsGD = isGD,
                    IsNguoiPhuTrach = isNguoiPhuTrach
                };
            }
            catch (Exception e)
            {
                return new GetMasterRecruitmentCampaignDetailResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public UploadFileVacanciesResult UploadFile(UploadFileParameter parameter)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

            if (folder == null)
            {
                return new UploadFileVacanciesResult()
                {
                    Status = false,
                    Message = "Thư mục upload không tồn tại"
                };
            }

            var listFileDelete = new List<string>();
            try
            {
                var listFileResult = new List<FileInFolderEntityModel>();
                if (parameter.ListFile != null && parameter.ListFile.Count > 0)
                {
                    bool isSave = true;
                    parameter.ListFile.ForEach(item =>
                    {
                        if (folder == null)
                        {
                            isSave = false;
                        }
                        string folderName = ConvertFolderUrl(folder.Url);
                        string webRootPath = hostingEnvironment.WebRootPath;
                        string newPath = Path.Combine(webRootPath, folderName);

                        if (!Directory.Exists(newPath))
                        {
                            isSave = false;
                        }

                        if (isSave)
                        {
                            var file = new FileInFolder()
                            {
                                Active = true,
                                CreatedById = parameter.UserId,
                                CreatedDate = DateTime.Now,
                                FileInFolderId = Guid.NewGuid(),
                                FileName = item.FileInFolder.FileName + "_" + Guid.NewGuid().ToString(),
                                FolderId = folder.FolderId,
                                ObjectId = item.FileInFolder.ObjectId,
                                ObjectNumber = parameter.ObjectNumber, // item.FileInFolder.ObjectNumber,
                                ObjectType = item.FileInFolder.ObjectType,
                                Size = item.FileInFolder.Size,
                                FileExtension =
                                    item.FileSave.FileName.Substring(item.FileSave.FileName.LastIndexOf(".") + 1)
                            };
                            context.Add(file);

                            string fileName = file.FileName + "." + file.FileExtension;

                            if (isSave)
                            {
                                string fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                    listFileDelete.Add(fullPath);
                                }
                            }
                        }
                    });
                    if (!isSave)
                    {
                        listFileDelete.ForEach(item =>
                        {
                            File.Delete(item);
                        });

                        return new UploadFileVacanciesResult()
                        {
                            Status = false,
                            Message = "Bạn phải cấu hình thư mục để lưu"
                        };
                    }
                }

                context.SaveChanges();

                #region Lấy danh sách file
                var listCommonFolders = context.Folder.Where(x => x.ObjectNumber == parameter.ObjectNumber && x.FolderType == parameter.FolderType)
               .Select(y => new FolderEntityModel
               {
                   FolderId = y.FolderId,
                   ParentId = y.ParentId,
                   Name = y.Name,
               }).ToList();

                listCommonFolders.ForEach(item =>
                {
                    item.HasChild = context.Folder.FirstOrDefault(x => x.ParentId == item.FolderId) != null;
                });

                var listCommonFile = context.FileInFolder.Where(x => x.ObjectNumber == parameter.ObjectNumber).ToList();

                var webRootPathR = hostingEnvironment.WebRootPath + "\\";

                var folderObject = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);
                listFileResult = GetAllFile(folderObject.FolderId, listCommonFolders, listCommonFile);


                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrl = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPathR, folderUrl, x.FileFullName);
                });

                listFileResult = listFileResult.OrderBy(x => x.CreatedDate).ToList();
                #endregion

                return new UploadFileVacanciesResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    ListFileInFolder = listFileResult
                };
            }
            catch (Exception ex)
            {
                listFileDelete.ForEach(item =>
                {
                    Directory.Delete(item);
                });

                return new UploadFileVacanciesResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = ex.Message
                };
            }
        }

        public CreateOrUpdateVacanciesResult CreateOrUpdateVacancies(CreateOrUpdateVacanciesParameter parameter)
        {

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var viTriTuyenDung = new Vacancies();
                    viTriTuyenDung.VacanciesId = Guid.NewGuid();
                    viTriTuyenDung.RecruitmentCampaignId = parameter.ViTriTuyenDung.RecruitmentCampaignId;
                    viTriTuyenDung.VacanciesName = parameter.ViTriTuyenDung.VacanciesName;
                    viTriTuyenDung.Quantity = parameter.ViTriTuyenDung.Quantity;
                    viTriTuyenDung.Priority = parameter.ViTriTuyenDung.Priority;
                    viTriTuyenDung.PersonInChargeId = parameter.ViTriTuyenDung.PersonInChargeId;
                    viTriTuyenDung.TypeOfWork = parameter.ViTriTuyenDung.TypeOfWork;
                    viTriTuyenDung.ExperienceId = parameter.ViTriTuyenDung.ExperienceId;
                    viTriTuyenDung.PlaceOfWork = parameter.ViTriTuyenDung.PlaceOfWork;
                    viTriTuyenDung.Currency = parameter.ViTriTuyenDung.Currency;
                    viTriTuyenDung.SalarType = parameter.ViTriTuyenDung.SalarType;
                    viTriTuyenDung.SalaryFrom = parameter.ViTriTuyenDung.SalaryFrom;
                    viTriTuyenDung.SalaryTo = parameter.ViTriTuyenDung.SalaryTo;
                    viTriTuyenDung.VacanciesDes = parameter.ViTriTuyenDung.VacanciesDes;
                    viTriTuyenDung.ProfessionalRequirements = parameter.ViTriTuyenDung.ProfessionalRequirements;
                    viTriTuyenDung.CandidateBenefits = parameter.ViTriTuyenDung.CandidateBenefits;
                    viTriTuyenDung.CreatedDate = DateTime.Now;
                    viTriTuyenDung.CreatedById = parameter.UserId;

                    context.Vacancies.Add(viTriTuyenDung);
                    context.SaveChanges();

                    #region Lưu tài liệu liên quan

                    if (parameter.ListFile != null && parameter.ListFile.Count > 0)
                    {
                        var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                        if (folder == null)
                        {
                            return new CreateOrUpdateVacanciesResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Thư mục upload không tồn tại, bạn cần cấu hình thư mục để tiếp tục."
                            };
                        }

                        var listFileDelete = new List<string>();
                        var listFileInFolder = new List<FileInFolder>();
                        bool isSave = true;

                        parameter.ListFile.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = item.FileInFolder.FileName + "_" + Guid.NewGuid().ToString(),
                                    FolderId = folder.FolderId,
                                    ObjectId = viTriTuyenDung.VacanciesId,
                                    ObjectType = "VACANCIES",
                                    Size = item.FileInFolder.Size,
                                    FileExtension =
                                        item.FileSave.FileName.Substring(item.FileSave.FileName.LastIndexOf(".") + 1)
                                };
                                listFileInFolder.Add(file);

                                string fileName = file.FileName + "." + file.FileExtension;

                                if (isSave)
                                {
                                    string fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                        listFileDelete.Add(fullPath);
                                    }
                                }
                            }
                        });
                        if (!isSave)
                        {
                            listFileDelete.ForEach(File.Delete);
                            return new CreateOrUpdateVacanciesResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu",
                            };
                        }

                        context.FileInFolder.AddRange(listFileInFolder);
                        context.SaveChanges();
                    }
                    #endregion

                    transaction.Commit();

                    #region Loại công việc

                    var listExperience = new List<CategoryEntityModel>();
                    var listLoaiCV = new List<CategoryEntityModel>();
                    var listChanel = new List<CategoryEntityModel>();
                    var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                    var listCategory = context.Category.Where(x => x.Active == true).ToList();
                    var listAllEmployee = context.Employee.Where(x => x.Active == true).ToList();

                    var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD").CategoryTypeId;
                    listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                    listLoaiCV = listLoaiCV.OrderBy(x => x.SortOrder).ToList();
                    #endregion

                    #region Kinh nghiệm làm việc
                    var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV").CategoryTypeId;
                    listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();

                    listExperience = listExperience.OrderBy(x => x.SortOrder).ToList();
                    #endregion

                    #region Lấy danh sách vị trí tuyển dụng

                    var listVacancy = context.Vacancies
                        .Where(x => x.RecruitmentCampaignId == parameter.ViTriTuyenDung.RecruitmentCampaignId)
                        .Select(y => new VacancyEntityModel()
                        {
                            VacanciesId = y.VacanciesId,
                            VacanciesName = y.VacanciesName,
                            Priority = y.Priority,
                            Quantity = y.Quantity,
                            SalarType = y.SalarType,
                            SalaryFrom = y.SalaryFrom,
                            SalaryTo = y.SalaryTo,
                            ExperienceId = y.ExperienceId,
                            RecruitmentCampaignId = y.RecruitmentCampaignId,
                            TypeOfWork = y.TypeOfWork,
                            PersonInChargeId = y.PersonInChargeId
                        }).ToList();

                    listVacancy.ForEach(item =>
                    {
                        item.TypeOfWorkName = listLoaiCV.FirstOrDefault(x => x.CategoryId == item.TypeOfWork)?.CategoryName;
                        item.PersonInChargeName = listAllEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)?.EmployeeName;
                        item.ExperienceName = listExperience.FirstOrDefault(x => x.CategoryId == item.ExperienceId)?.CategoryName;
                    });
                    listVacancy = listVacancy.OrderBy(x => x.Priority).ToList();

                    #endregion

                    return new CreateOrUpdateVacanciesResult
                    {
                        VacanciesId = viTriTuyenDung.VacanciesId,
                        ListVacancies = listVacancy,
                        Message = "Success",
                        StatusCode = System.Net.HttpStatusCode.OK
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateVacanciesResult
                    {
                        Message = ex.Message,
                        StatusCode = System.Net.HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public CreateCandidateResult CreateCandidate(CreateCandidateParameter parameter)
        {
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    #region Tạo ung vien

                    var candidate = new Candidate()
                    {
                        CandidateId = Guid.NewGuid(),
                        FullName = parameter.CandidateModel.FullName,
                        DateOfBirth = parameter.CandidateModel.DateOfBirth,
                        Phone = parameter.CandidateModel.Phone,
                        Address = parameter.CandidateModel.Address,
                        Email = parameter.CandidateModel.Email,
                        RecruitmentChannelId = parameter.CandidateModel.RecruitmentChannel,
                        Sex = parameter.CandidateModel.Sex,
                        ApplicationDate = parameter.CandidateModel.ApplicationDate,
                        Status = 1,

                        CreatedDate = DateTime.Now,
                        CreatedById = parameter.UserId,
                    };

                    context.Candidate.Add(candidate);
                    context.SaveChanges();

                    #endregion

                    #region Tạo mapping giữa ứng viên và vị trí

                    var mapping = new CandidateVacanciesMapping()
                    {
                        CandidateVacanciesMappingId = Guid.NewGuid(),
                        CandidateId = candidate.CandidateId,
                        VacanciesId = parameter.VacanciesId,
                        CreatedDate = DateTime.Now,
                        CreatedById = parameter.UserId,
                    };

                    context.CandidateVacanciesMapping.Add(mapping);
                    context.SaveChanges();

                    #endregion

                    #region Lưu tài liệu liên quan

                    if (parameter.ListFile != null && parameter.ListFile.Count > 0)
                    {
                        var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                        if (folder == null)
                        {
                            return new CreateCandidateResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Thư mục upload không tồn tại, bạn cần cấu hình thư mục để tiếp tục."
                            };
                        }

                        var listFileDelete = new List<string>();

                        var listFileResult = new List<FileInFolderEntityModel>();

                        bool isSave = true;
                        parameter.ListFile.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = item.FileInFolder.FileName + "_" + Guid.NewGuid().ToString(),
                                    FolderId = folder.FolderId,
                                    ObjectId = candidate.CandidateId,
                                    ObjectType = "CANDIDATE",
                                    Size = item.FileInFolder.Size,
                                    FileExtension =
                                        item.FileSave.FileName.Substring(item.FileSave.FileName.LastIndexOf(".") + 1)
                                };

                                context.FileInFolder.Add(file);
                                context.SaveChanges();

                                string fileName = file.FileName + "." + file.FileExtension;

                                if (isSave)
                                {
                                    string fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                        listFileDelete.Add(fullPath);
                                    }
                                }
                            }
                        });
                        if (!isSave)
                        {
                            listFileDelete.ForEach(File.Delete);

                            return new CreateCandidateResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu",
                            };
                        }
                    }

                    #endregion

                    #region Danh sách trả về
                    var listChanel = new List<CategoryEntityModel>();
                    List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();

                    #region Common
                    var lstAllEmp = context.Employee.Where(x => x.Active == true && x.IsCustomer != true).ToList();
                    // Phòng HC - Nhân sự
                    //var organizationHCNS = context.Organization.FirstOrDefault(x => x.IsHR == true);
                    var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                    var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                    // Danh sách NV phòng HCNS
                    var listAllEmployee = lstAllEmp.Where(x => x.Active == true).ToList();
                    if (lstOrganizationHCNS.Count() > 0)
                        listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                    var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                    var listCategory = context.Category.Where(x => x.Active == true).ToList();
                    #endregion

                    #region Kênh tuyển dụng
                    var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                    listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                    listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                    #endregion

                    var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                    if (lstCandidateIdOfMapping.Count() > 0)
                    {
                        lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                        {
                            CandidateId = candi.CandidateId,
                            FullName = candi.FullName,
                            ApplicationDate = candi.ApplicationDate,
                            Email = candi.Email,
                            Phone = candi.Phone,
                            RecruitmentChannelId = candi.RecruitmentChannelId,
                            Status = candi.Status,
                            Sex = candi.Sex,
                            Address = candi.Address,
                            DateOfBirth = candi.DateOfBirth
                        }).ToList();

                        var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                        var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                            .Select(y => new CategoryEntityModel
                            {
                                CategoryId = y.CategoryId,
                                CategoryName = y.CategoryName
                            }).ToList();

                        lstCandidate.ForEach(item =>
                        {
                            item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                            switch (item.Status)
                            {
                                case 1:
                                    item.StatusName = "Mới";
                                    item.StatusCode = "UVMOI";
                                    break;
                                case 2:
                                    item.StatusName = "Hẹn phỏng vấn";
                                    item.StatusCode = "UVHPV";
                                    break;
                                case 3:
                                    item.StatusName = "Đạt phỏng vấn";
                                    item.StatusCode = "UVDPV";
                                    break;
                                case 4:
                                    item.StatusName = "Gửi offer";
                                    item.StatusCode = "UVGOF";
                                    break;
                                case 5:
                                    item.StatusName = "Từ chối offer";
                                    item.StatusCode = "UVTC";
                                    break;
                                case 6:
                                    item.StatusName = "Không đạt";
                                    item.StatusCode = "UVKD";
                                    break;
                            }
                        });
                    }
                    lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();

                    GetAllVacanciesParameter para = new GetAllVacanciesParameter();
                    para.UserId = parameter.UserId;
                    var lstVTCD = GetAllVacancies(para).ListViTriTuyenDung;
                    #endregion



                    transaction.Commit();

                    return new CreateCandidateResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                        CandidateId = candidate.CandidateId,
                        ListCandidate = lstCandidate,
                        ListViTriTuyenDung = lstVTCD
                    };
                }
            }
            catch (Exception e)
            {
                return new CreateCandidateResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetAllVacanciesResult GetAllVacancies(GetAllVacanciesParameter parameter)
        {
            try
            {
                var listExperience = new List<CategoryEntityModel>();
                var listViTriFilter = new List<CategoryEntityModel>();
                var listLoaiCV = new List<CategoryEntityModel>();
                var listEmployee = new List<EmployeeEntityModel>();
                var listChanel = new List<CategoryEntityModel>();
                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                var lstOverviewCandidate = context.OverviewCandidate.ToList();


                var listAllUser = context.User.ToList();
                var listEmp = context.Employee.Where(x => x.IsCustomer != true).ToList();
                var listVacancies = context.Vacancies.ToList();

                //// Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                //// Quản lý phòng HCNS
                //var listAllEmployee = context.Employee.Where(x => x.Active == true).ToList();
                //List<Guid> listNSEmployee = new List<Guid>();
                //if (organizationHCNS != null)
                //{
                //    listNSEmployee = listAllEmployee.Where(x => x.OrganizationId == organizationHCNS.OrganizationId && x.IsManager == true).Select(y => y.EmployeeId).ToList();
                //}

                ////Lấy danh sách nhân viên phụ trách vị trí tuyển dụng
                //var listVacancies = context.Vacancies.ToList();
                //var listNVPhuTrachTuyenDung = listVacancies.Select(x => x.PersonInChargeId).ToList();

                ////Lấy người phụ trách của chiến dịch
                //var listNguoiPhuTrachChienDich = context.RecruitmentCampaign.Select(x => x.PersonInChargeId).ToList();


                var lstVacancies = context.Vacancies.Select(item => new EmployeeVacanciesEntityModel
                {
                    VacanciesId = item.VacanciesId,
                    VacanciesName = item.VacanciesName,
                    Priority = item.Priority,
                    Quantity = item.Quantity,
                    SalarType = item.SalarType,
                    SalaryFrom = item.SalaryFrom,
                    SalaryTo = item.SalaryTo,
                    ExperienceId = item.ExperienceId,
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    TypeOfWork = item.TypeOfWork,
                    CreatedById = item.CreatedById,
                    PersonInChargeId = item.PersonInChargeId
                }).ToList();

                #region Check permision: manager
                var user = listAllUser.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new GetAllVacanciesResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new GetAllVacanciesResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }
                var employeeId = user.EmployeeId;
                var employee = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                var isManager = employee.IsManager;
                #endregion


                if (isManager)
                {
                    //Lấy list phòng ban con của user
                    List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                    if (employee.OrganizationId != null && isManager)
                    {
                        listGetAllChild.Add(employee.OrganizationId.Value);
                        listGetAllChild = getOrganizationChildrenId(employee.OrganizationId.Value, listGetAllChild);
                    }
                    //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                    var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                    List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();
                    List<Guid> listUserByManagerId = new List<Guid>();

                    listEmployeeInChargeByManager.ForEach(item =>
                    {
                        if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                            listEmployeeInChargeByManagerId.Add(item.EmployeeId);
                    });

                    //Lấy danh sách nhân viên UserId mà user phụ trách
                    listEmployeeInChargeByManagerId.ForEach(item =>
                    {
                        var user_employee = listAllUser.FirstOrDefault(x => x.EmployeeId == item);
                        if (user_employee != null)
                            listUserByManagerId.Add(user_employee.UserId);
                    });

                    //Nếu là quản lý
                    lstVacancies = lstVacancies.Where(x => ((x.PersonInChargeId != Guid.Empty && (listEmployeeInChargeByManagerId == null || listEmployeeInChargeByManagerId.Count == 0 || listEmployeeInChargeByManagerId.FirstOrDefault(y => y.Equals(x.PersonInChargeId.Value)) != Guid.Empty))) ||
                                                                 ((x.PersonInChargeId == Guid.Empty && (listUserByManagerId == null || listUserByManagerId.Count == 0 || listUserByManagerId.FirstOrDefault(y => y.Equals(x.CreatedById)) != Guid.Empty)))
                                                           ).ToList();
                }
                else
                {
                    //Nếu không phải quản lý
                    lstVacancies = lstVacancies.Where(x => (x.PersonInChargeId != Guid.Empty && x.PersonInChargeId == employeeId) || (x.PersonInChargeId == null && x.CreatedById.Equals(user.UserId))).ToList();
                }

                // Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x => x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();

                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.ToList();
                if (lstOrganizationHCNS.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                #region Người phụ trách tuyển dụng
                listEmployee = listAllEmployee.Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeCode = y.EmployeeCode,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                             OrganizationId = y.OrganizationId,
                             IsManager = y.IsManager,
                             Active = y.Active
                         }).ToList();

                listEmployee.ForEach(item =>
                {
                    if (lstOrganizationHCNS.Count() > 0)
                    {
                        item.OrganizationLevel = lstOrganizationHCNS.FirstOrDefault(x => x.OrganizationId == item.OrganizationId).Level;
                    }
                });
                #endregion

                #region Danh sách chiến dịch
                var lstRecruitCamp = context.RecruitmentCampaign.Select(item => new RecruitmentCampaignEntityModel
                {
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    RecruitmentCampaignName = item.RecruitmentCampaignName
                }).ToList();
                #endregion

                #region Loại công việc
                var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD").CategoryTypeId;
                listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listLoaiCV = listLoaiCV.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kinh nghiệm làm việc
                var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV").CategoryTypeId;
                listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                listExperience = listExperience.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kênh tuyển dụng
                var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                #endregion


                // List filter
                listViTriFilter = lstVacancies.Select(item => new CategoryEntityModel
                {
                    CategoryId = item.VacanciesId,
                    CategoryName = item.VacanciesName
                }).ToList();

                lstVacancies.ForEach(item =>
                {
                    item.RecruitmentCampaignName = lstRecruitCamp.FirstOrDefault(x => x.RecruitmentCampaignId == item.RecruitmentCampaignId)?.RecruitmentCampaignName;
                    item.TypeOfWorkName = listLoaiCV.FirstOrDefault(x => x.CategoryId == item.TypeOfWork)?.CategoryName;
                    item.PersonInChargeName = listAllEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)?.EmployeeName;
                    item.ExperienceName = listExperience.FirstOrDefault(x => x.CategoryId == item.ExperienceId)?.CategoryName;
                });

                lstVacancies = lstVacancies.OrderBy(x => x.Priority).ToList();
                return new GetAllVacanciesResult
                {
                    ListViTriTuyenDung = lstVacancies,
                    ListViTriFilter = listViTriFilter,
                    ListChienDich = lstRecruitCamp,
                    ListExperience = listExperience,
                    ListLoaiCV = listLoaiCV,
                    ListChanel = listChanel,
                    ListNguoiPT = listEmployee,
                    Message = "Success",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetAllVacanciesResult
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public DeleteVacanciesByIdResult DeleteVacanciesById(DeleteVacanciesByIdParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var viTri = context.Vacancies.FirstOrDefault(x => x.VacanciesId == parameter.VacanciesId);
                    if (viTri == null)
                    {
                        return new DeleteVacanciesByIdResult()
                        {
                            StatusCode = HttpStatusCode.NotFound,
                            Message = "Không tồn tại vị trí tuyển dụng.",
                        };
                    }
                    var lstCandidateVacanciesMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).ToList();
                    if (lstCandidateVacanciesMapping.Count() == 0)
                    {
                        // Xóa vị trí không có ứng viên
                        context.Vacancies.Remove(viTri);
                        context.SaveChanges();
                        transaction.Commit();

                        return new DeleteVacanciesByIdResult
                        {
                            Message = "Xóa vị trí tuyển dụng thành công.",
                            StatusCode = HttpStatusCode.OK
                        };
                    }
                    else
                    {
                        return new DeleteVacanciesByIdResult
                        {
                            Message = "Tồn tại ứng viên trong vị trí tuyển dụng.",
                            StatusCode = HttpStatusCode.Forbidden
                        };
                    }
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteVacanciesByIdResult
                    {
                        Message = e.Message,
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public GetMasterDataRecruitmentCampaignInformationResult GetMasterDataRecruitmentCampaignInformation(GetMasterDataRecruitmentCampaignInformationParameter parameter)
        {
            try
            {
                #region Thông tin chiến dịch
                var recruitmentCamp = context.RecruitmentCampaign.Where(x => x.RecruitmentCampaignId == parameter.RecruitmentCampaignId).Select(y => new RecruitmentCampaignEntityModel
                {
                    RecruitmentCampaignId = y.RecruitmentCampaignId,
                    RecruitmentCampaignName = y.RecruitmentCampaignName,
                    StartDate = y.StartDate,
                    EndDateDate = y.EndDateDate,
                    PersonInChargeId = y.PersonInChargeId,
                }).FirstOrDefault();

                if (recruitmentCamp == null)
                {
                    return new GetMasterDataRecruitmentCampaignInformationResult
                    {
                        Message = "Chiến dịch không tồn tại trong hệ thống",
                        Status = false
                    };
                }
                //// Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                //// Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.ToList();
                //if (organizationHCNS != null)
                //    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId == organizationHCNS.OrganizationId).ToList();


                recruitmentCamp.PersonInChargeName = listAllEmployee.FirstOrDefault(x => x.EmployeeId == recruitmentCamp.PersonInChargeId)?.EmployeeName;
                // Trạng thái chiến dịch
                DateTime dateTimeNow = DateTime.Now;
                if (DateTime.Compare(dateTimeNow.Date, recruitmentCamp.StartDate.Date) < 0)
                {
                    recruitmentCamp.StatusName = "Mới";
                }
                if (DateTime.Compare(dateTimeNow.Date, recruitmentCamp.StartDate.Date) > 0 && DateTime.Compare(dateTimeNow.Date, recruitmentCamp.EndDateDate.Date) < 0)
                {
                    recruitmentCamp.StatusName = "Đang diễn ra";
                }
                if (DateTime.Compare(dateTimeNow.Date, recruitmentCamp.EndDateDate.Date) > 0)
                {
                    recruitmentCamp.StatusName = "Kết thúc";
                }

                // Số lượng kế hoạch tuyển dụng
                recruitmentCamp.QuantityVacancies = context.Vacancies.Where(x => x.RecruitmentCampaignId == recruitmentCamp.RecruitmentCampaignId).Sum(x => x.Quantity);

                #endregion

                return new GetMasterDataRecruitmentCampaignInformationResult
                {
                    RecruitmentCampaign = recruitmentCamp,
                    Message = "Success",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataRecruitmentCampaignInformationResult
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetMasterDataBaoCaoTuyenDungResult GetMasterDataBaoCaoTuyenDung(GetMasterDataBaoCaoTuyenDungParameter parameter)
        {
            try
            {
                var listRecamp = context.RecruitmentCampaign.Select(y => new RecruitmentCampaignEntityModel
                {
                    RecruitmentCampaignId = y.RecruitmentCampaignId,
                    RecruitmentCampaignName = y.RecruitmentCampaignName,
                    RecruitmentCampaignYearName = y.StartDate.Year.ToString() + " - " + y.RecruitmentCampaignName

                }).OrderBy(z => z.StartDate).ToList();
                // Phòng HC - Nhân sự
                var lstOrganizationHCNSId = context.Organization.Select(x => x.OrganizationId).ToList();
                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.Where(x => x.Active == true && (x.IsCustomer == false || x.IsCustomer == null)).ToList();
                //if (lstOrganizationHCNSId.Count() > 0)
                //    listAllEmployee = listAllEmployee.Where(x => lstOrganizationHCNSId.Contains(x.OrganizationId.Value)).ToList();

                var listEmployee = listAllEmployee.Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeCode = y.EmployeeCode,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode == null ? y.EmployeeName : y.EmployeeCode + " - " + y.EmployeeName,
                             OrganizationId = y.OrganizationId,
                             IsManager = y.IsManager,
                             Active = y.Active
                         }).OrderBy(z => z.EmployeeName).ToList();

                var listVacancies = context.Vacancies.Select(y => new VacancyEntityModel
                {
                    VacanciesId = y.VacanciesId,
                    VacanciesName = y.VacanciesName,
                    RecruitmentCampaignId = y.RecruitmentCampaignId,
                    PersonInChargeId = y.PersonInChargeId
                }).OrderBy(z => z.VacanciesName).ToList();

                return new GetMasterDataBaoCaoTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListEmployee = listEmployee,
                    ListRecruitmentCampaign = listRecamp,
                    ListVacancies = listVacancies
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataBaoCaoTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetBaoCaoBaoCaoTuyenDungResult GetBaoCaoBaoCaoTuyenDung(GetBaoCaoBaoCaoTuyenDungParameter parameter)
        {
            try
            {
                var nowDate = DateTime.Now;

                #region Báo cáo

                //Nếu Tháng hoặc Năm không tồn tại thì lấy giá trị mặc định là Tháng = tháng hiện tại và Năm = năm hiện tại
                if (parameter.Thang == null || parameter.Nam == null)
                {
                    parameter.Thang = nowDate.Month;
                    parameter.Nam = nowDate.Year;
                }
                var listEmployeeId = parameter.ListEmployeeId;
                var listRecruitId = parameter.ListRecruitId;
                var listVacanciesId = parameter.ListVacanciesId;

                var lstAllCandi = context.Candidate.ToList();
                var lstAllCandiMapping = context.CandidateVacanciesMapping.ToList();
                var lstEmployee = context.Employee.Where(x => x.Active == true).ToList();
                var lstAllVacan = context.Vacancies.ToList();

                var listDataChienDich = context.RecruitmentCampaign.Where(x => (listRecruitId == null || listRecruitId.Count == 0 || listRecruitId.Contains(x.RecruitmentCampaignId))
                && x.CreatedDate.Year == parameter.Nam && x.CreatedDate.Month == parameter.Thang
                ).Select(re => new RecruitmentCampaignReportEntityModel
                {
                    RecruitmentCampaignId = re.RecruitmentCampaignId,
                    RecruitmentCampaignName = re.RecruitmentCampaignName,
                    RecruitmentCampaignYearName = re.StartDate.Year.ToString(),
                    StartDate = re.StartDate,
                    EndDateDate = re.EndDateDate,
                }).OrderBy(x => x.StartDate).ToList();

                var lstNguoiPT = new List<Guid>();
                var lstAllCandiCalculation = new List<CandidateEntityModel>();
                var lstAllVacanCalculation = new List<VacancyEntityModel>();

                listDataChienDich.ForEach(cd =>
                {
                    // Danh sach vị trí
                    cd.ListVacancies = lstAllVacan.Where(x => x.RecruitmentCampaignId == cd.RecruitmentCampaignId && (listVacanciesId == null || listVacanciesId.Count == 0 || listVacanciesId.Contains(x.VacanciesId))
                    && (listEmployeeId == null || listEmployeeId.Count == 0 || listEmployeeId.Contains(x.PersonInChargeId.Value))
                    ).Select(item => new VacancyEntityModel
                    {
                        VacanciesId = item.VacanciesId,
                        VacanciesName = item.VacanciesName,
                        Quantity = item.Quantity,
                        Priority = item.Priority,
                        PersonInChargeId = item.PersonInChargeId,
                        PersonInChargeName = item.PersonInChargeId != null && item.PersonInChargeId != Guid.Empty ? lstEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId).EmployeeName : "",
                        PriorityName = item.Priority == 1 ? "Cao" : (item.Priority == 2 ? "Trung Bình" : "Thấp"),
                        ListCandidate = new List<CandidateEntityModel>()
                    }).OrderBy(x => x.PersonInChargeName).ToList();

                    lstAllVacanCalculation.AddRange(cd.ListVacancies);

                    cd.ListVacancies.ForEach(vacan =>
                    {
                        if (vacan.PersonInChargeId != null && vacan.PersonInChargeId != Guid.Empty)
                            lstNguoiPT.Add(vacan.PersonInChargeId.Value);

                        var lstCandiId = lstAllCandiMapping.Where(x => x.VacanciesId == vacan.VacanciesId).Select(z => z.CandidateId).ToList();
                        vacan.ListCandidate = lstAllCandi.Where(x => lstCandiId.Contains(x.CandidateId)).Select(item => new CandidateEntityModel
                        {
                            CandidateId = item.CandidateId,
                            FullName = item.FullName,
                            Status = item.Status,
                            VacanciesId = vacan.VacanciesId
                        }).ToList();
                        lstAllCandiCalculation.AddRange(vacan.ListCandidate);
                    });
                });

                var listData = new List<List<DataRowModel>>();
                int indexRow = 0;
                lstNguoiPT.Distinct().ToList().ForEach(ngPTId =>
                {
                    listDataChienDich.ForEach(recruit =>
                    {
                        var lstAllVacanOfPersion = recruit.ListVacancies.Where(x => x.PersonInChargeId == ngPTId).ToList();
                        // danh sach vi tri do nguoi nay phu trach
                        var lstAllVacanIdOfPersion = lstAllVacanOfPersion.Select(x => x.VacanciesId).ToList();
                        //ALl ứng viên do người này phụ trách
                        var lstCandiId = lstAllCandiMapping.Where(x => lstAllVacanIdOfPersion.Contains(x.VacanciesId)).Select(x => x.CandidateId).ToList();

                        decimal allCandiConvertEmp = lstAllCandiCalculation.FindAll(x => lstCandiId.Contains(x.CandidateId) && x.Status == 7).ToList().Count();

                        // Tổng SL Tuyển dụng cho tất cả vị trí do người phụ trách
                        decimal totalSLuongTuyen = lstAllVacanOfPersion.Select(x => x.Quantity).Sum();

                        recruit.ListVacancies.ForEach(item =>
                        {
                            var _listDataRow = new List<DataRowModel>();
                            var _dataRow0 = new DataRowModel();
                            var _dataRow1 = new DataRowModel();
                            var _dataRow2 = new DataRowModel();
                            var _dataRow3 = new DataRowModel();
                            var _dataRow4 = new DataRowModel();
                            var _dataRow5 = new DataRowModel();

                            var _dataRowTong1 = new DataRowModel();
                            var _dataRowTong2 = new DataRowModel();
                            var _dataRowTong3 = new DataRowModel();

                            // Kiểm tra xem người phụ trách có phụ trách không
                            if (item.PersonInChargeId == ngPTId)
                            {
                                #region MyRegion
                                indexRow++;
                                var dataRow1 = new DataRowModel();
                                dataRow1.ColumnKey = "stt";
                                dataRow1.ColumnValue = indexRow.ToString();
                                dataRow1.Width = "50px";
                                dataRow1.TextAlign = "center";
                                _listDataRow.Add(dataRow1);

                                var dataRow2 = new DataRowModel();
                                dataRow2.ColumnKey = "recruitName";
                                dataRow2.ColumnValue = recruit.RecruitmentCampaignName;
                                dataRow2.Width = "200px";
                                dataRow2.TextAlign = "left";
                                _listDataRow.Add(dataRow2);

                                var dataRow3 = new DataRowModel();
                                dataRow3.ColumnKey = "vacanciesName";
                                dataRow3.ColumnValue = item.VacanciesName;
                                dataRow3.Width = "200px";
                                dataRow3.TextAlign = "left";
                                _listDataRow.Add(dataRow3);

                                var dataRow4 = new DataRowModel();
                                dataRow4.ColumnKey = "employeeName";
                                dataRow4.ColumnValue = item.PersonInChargeName;
                                dataRow4.Width = "150px";
                                dataRow4.TextAlign = "left";
                                _listDataRow.Add(dataRow4);

                                var dataRow5 = new DataRowModel();
                                dataRow5.ColumnKey = "quantity";
                                dataRow5.ColumnValue = item.Quantity.ToString();
                                dataRow5.ValueType = ValueTypeEnum.NUMBER;
                                dataRow5.Width = "80px";
                                dataRow5.TextAlign = "right";
                                _listDataRow.Add(dataRow5);

                                var dataRow6 = new DataRowModel();
                                dataRow6.ColumnKey = "totalCV";
                                dataRow6.ColumnValue = item.ListCandidate.Count().ToString();
                                dataRow6.ValueType = ValueTypeEnum.NUMBER;
                                dataRow6.Width = "80px";
                                dataRow6.TextAlign = "right";
                                _listDataRow.Add(dataRow6);

                                var dataRow7 = new DataRowModel();
                                dataRow7.ColumnKey = "totalConvert";
                                dataRow7.ColumnValue = item.ListCandidate.Count() > 0 ? item.ListCandidate.FindAll(x => x.Status == 7).Count().ToString() : "0";
                                dataRow7.ValueType = ValueTypeEnum.NUMBER;
                                dataRow7.Width = "80px";
                                dataRow7.TextAlign = "right";
                                _listDataRow.Add(dataRow7);


                                _dataRow0.ColumnKey = "new";
                                _dataRow0.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 1).Count().ToString();
                                _dataRow0.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow0.Width = "80px";
                                _dataRow0.TextAlign = "right";

                                _dataRow1.ColumnKey = "henPV";
                                _dataRow1.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 2).Count().ToString();
                                _dataRow1.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow1.Width = "80px";
                                _dataRow1.TextAlign = "right";

                                _dataRow2.ColumnKey = "datPV";
                                _dataRow2.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 3).Count().ToString();
                                _dataRow2.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow2.Width = "80px";
                                _dataRow2.TextAlign = "right";

                                _dataRow3.ColumnKey = "guiOff";
                                _dataRow3.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 4).Count().ToString();
                                _dataRow3.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow3.Width = "80px";
                                _dataRow3.TextAlign = "right";

                                _dataRow4.ColumnKey = "tuChoiOff";
                                _dataRow4.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 5).Count().ToString();
                                _dataRow4.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow4.Width = "80px";
                                _dataRow4.TextAlign = "right";

                                _dataRow5.ColumnKey = "khongDat";
                                _dataRow5.ColumnValue = item.ListCandidate.FindAll(x => x.Status == 6).Count().ToString();
                                _dataRow5.ValueType = ValueTypeEnum.NUMBER;
                                _dataRow5.Width = "80px";
                                _dataRow5.TextAlign = "right";

                                _listDataRow.Add(_dataRow0);
                                _listDataRow.Add(_dataRow1);
                                _listDataRow.Add(_dataRow2);
                                _listDataRow.Add(_dataRow3);
                                _listDataRow.Add(_dataRow4);
                                _listDataRow.Add(_dataRow5);
                                #endregion

                                decimal slConvertEmp = item.ListCandidate.Count() > 0 ? item.ListCandidate.FindAll(x => x.Status == 7).Count() : 0;

                                _dataRowTong1.ColumnKey = "uuTien";
                                _dataRowTong1.ColumnValue = item.PriorityName;
                                _dataRowTong1.Width = "80px";
                                _dataRowTong1.TextAlign = "right";

                                _dataRowTong2.ColumnKey = "ptDat";
                                _dataRowTong2.ColumnValue = item.Quantity == 0 ? "0" : Math.Round(slConvertEmp * 100 / item.Quantity, 2).ToString();
                                _dataRowTong2.ValueType = ValueTypeEnum.NUMBER;
                                _dataRowTong2.Width = "80px";
                                _dataRowTong2.TextAlign = "right";

                                _dataRowTong3.ColumnKey = "ptHieuSuat";
                                _dataRowTong3.ColumnValue = totalSLuongTuyen == 0 ? "0" : Math.Round(allCandiConvertEmp * 100 / totalSLuongTuyen, 2).ToString();
                                _dataRowTong3.ValueType = ValueTypeEnum.NUMBER;
                                _dataRowTong3.Width = "80px";
                                _dataRowTong3.TextAlign = "right";

                                _listDataRow.Add(_dataRowTong1);
                                _listDataRow.Add(_dataRowTong2);
                                _listDataRow.Add(_dataRowTong3);

                                listData.Add(_listDataRow);
                            }

                        });
                    });
                });

                var listHeaderRow1 = new List<DataHeaderModel>()
                {
                    new DataHeaderModel()
                    {
                        ColumnKey = "stt",
                        ColumnValue = "STT",
                        TextAlign = "center",
                        Width = "50px",
                        Rowspan = 2,
                        Colspan = 0
                    },
                    new DataHeaderModel()
                    {
                        ColumnKey = "recruitName",
                        ColumnValue = "Tên chiến dịch",
                        TextAlign = "left",
                        Width = "200px",
                        Rowspan = 2,
                        Colspan = 0
                    },
                    new DataHeaderModel()
                    {
                        ColumnKey = "vacanciesName",
                        ColumnValue = "Vị trí tuyển dụng",
                        TextAlign = "left",
                        Width = "200px",
                        Rowspan = 2,
                        Colspan = 0
                    },
                      new DataHeaderModel()
                    {
                        ColumnKey = "employeeName",
                        ColumnValue = "Người phụ trách vị trí",
                        TextAlign = "left",
                        Width = "150px",
                        Rowspan = 2,
                        Colspan = 0
                    }
                      ,
                      new DataHeaderModel()
                    {
                        ColumnKey = "quantity",
                        ColumnValue = "SL tuyển",
                        TextAlign = "right",
                        Width = "80px",
                        Rowspan = 2,
                        Colspan = 0
                    },
                      new DataHeaderModel()
                    {
                        ColumnKey = "totalCV",
                        ColumnValue = "Tổng cv",
                        TextAlign = "right",
                        Width = "80px",
                        Rowspan = 2,
                        Colspan = 0
                    },
                      new DataHeaderModel()
                    {
                        ColumnKey = "totalConvert",
                        ColumnValue = "NV/ thử việc",
                        TextAlign = "right",
                        Width = "80px",
                        Rowspan = 2,
                        Colspan = 0
                    }
            };

                var listHeaderRow2 = new List<DataHeaderModel>();
                var header = new DataHeaderModel();

                header.ColumnValue = "Trạng thái ứng viên";
                header.TextAlign = "center";
                header.Width = "480px";
                header.Colspan = 6;
                header.Rowspan = 0;

                listHeaderRow1.Add(header);

                var headerRow2_1 = new DataHeaderModel();
                headerRow2_1.ColumnValue = "Mới";
                headerRow2_1.TextAlign = "right";
                headerRow2_1.Width = "80px";

                var headerRow2_2 = new DataHeaderModel();
                headerRow2_2.ColumnValue = "Hẹn PV";
                headerRow2_2.TextAlign = "right";
                headerRow2_2.Width = "80px";

                var headerRow2_3 = new DataHeaderModel();
                headerRow2_3.ColumnValue = "Đạt PV";
                headerRow2_3.TextAlign = "right";
                headerRow2_3.Width = "80px";

                var headerRow2_4 = new DataHeaderModel();
                headerRow2_4.ColumnValue = "Gửi offer";
                headerRow2_4.TextAlign = "right";
                headerRow2_4.Width = "80px";

                var headerRow2_5 = new DataHeaderModel();
                headerRow2_5.ColumnValue = "Từ chối offer";
                headerRow2_5.TextAlign = "right";
                headerRow2_5.Width = "80px";

                var headerRow2_6 = new DataHeaderModel();
                headerRow2_6.ColumnValue = "Không đạt";
                headerRow2_6.TextAlign = "right";
                headerRow2_6.Width = "80px";

                listHeaderRow2.Add(headerRow2_1);
                listHeaderRow2.Add(headerRow2_2);
                listHeaderRow2.Add(headerRow2_3);
                listHeaderRow2.Add(headerRow2_4);
                listHeaderRow2.Add(headerRow2_5);
                listHeaderRow2.Add(headerRow2_6);

                var headerUuTien = new DataHeaderModel();

                headerUuTien.ColumnKey = "uuTien";
                headerUuTien.ColumnValue = "Ưu tiên";
                headerUuTien.TextAlign = "right";
                headerUuTien.Width = "80px";
                headerUuTien.Colspan = 0;
                headerUuTien.Rowspan = 2;

                listHeaderRow1.Add(headerUuTien);

                var headerPTDat = new DataHeaderModel();

                headerPTDat.ColumnKey = "ptDat";
                headerPTDat.ColumnValue = "% Đạt";
                headerPTDat.TextAlign = "right";
                headerPTDat.Width = "80px";
                headerPTDat.Colspan = 0;
                headerPTDat.Rowspan = 2;

                listHeaderRow1.Add(headerPTDat);

                var headerHieuSuat = new DataHeaderModel();

                headerHieuSuat.ColumnKey = "ptHieuSuat";
                headerHieuSuat.ColumnValue = "% Hiệu suất";
                headerHieuSuat.TextAlign = "right";
                headerHieuSuat.Width = "80px";
                headerHieuSuat.Colspan = 0;
                headerHieuSuat.Rowspan = 2;

                listHeaderRow1.Add(headerHieuSuat);
                #endregion
                listData = listData.OrderByDescending(x => x[1].ColumnValue).ThenByDescending(x => x[3].ColumnValue).ToList();

                return new GetBaoCaoBaoCaoTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListData = listData,
                    ListHeaderRow1 = listHeaderRow1,
                    ListHeaderRow2 = listHeaderRow2,
                };
            }
            catch (Exception e)
            {
                return new GetBaoCaoBaoCaoTuyenDungResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterDataVacanciesCreateResult GetMasterDataVacanciesCreate(GetMasterDataVacanciesCreateParameter parameter)
        {
            try
            {
                var listEmployee = new List<EmployeeEntityModel>();
                var listRecruitment = new List<EmployeeRecruitmentEntityModel>();
                var listExperience = new List<CategoryEntityModel>();
                var listLoaiCV = new List<CategoryEntityModel>();

                #region Common
                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                #endregion

                #region Danh sách - thông tin chiến dịch
                listRecruitment = context.RecruitmentCampaign.Select(item => new EmployeeRecruitmentEntityModel
                {
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    RecruitmentCampaignName = item.RecruitmentCampaignName,
                    StartDate = item.StartDate,
                    EndDateDate = item.EndDateDate,
                    PersonInChargeId = item.PersonInChargeId,
                    RecruitmentCampaignDes = item.RecruitmentCampaignDes,
                    CreateById = item.CreatedById,
                    CreateDate = item.CreatedDate,
                    UpdateById = item.UpdatedById,
                    UpdateDate = item.UpdatedDate
                }).ToList();
                #endregion

                #region Người phụ trách tuyển dụng
                // Phòng HC - Nhân sự
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                if (lstHCNSId.Count() > 0)
                {
                    // Danh sách NV phòng HCNS
                    var listAllEmployee = context.Employee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                    listEmployee = listAllEmployee.Select(y =>
                             new EmployeeEntityModel
                             {
                                 EmployeeId = y.EmployeeId,
                                 EmployeeCode = y.EmployeeCode,
                                 EmployeeName = y.EmployeeName,
                                 EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                                 OrganizationId = y.OrganizationId,
                                 IsManager = y.IsManager,
                                 Active = y.Active
                             }).ToList();

                    listEmployee.ForEach(item =>
                    {
                        if (lstOrganizationHCNS.Count() > 0)
                        {
                            item.OrganizationLevel = lstOrganizationHCNS.FirstOrDefault(x => x.OrganizationId == item.OrganizationId).Level;
                        }
                    });
                }
                #endregion

                #region Loại công việc
                var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD")?.CategoryTypeId;
                listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listLoaiCV = listLoaiCV.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kinh nghiệm làm việc
                var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV").CategoryTypeId;
                listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                listExperience = listExperience.OrderBy(x => x.SortOrder).ToList();
                #endregion

                return new GetMasterDataVacanciesCreateResult
                {
                    ListEmployee = listEmployee,
                    ListEmployeeRecruit = listRecruitment,
                    ListKinhNghiem = listExperience,
                    ListLoaiCV = listLoaiCV,
                    Message = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new GetMasterDataVacanciesCreateResult
                {
                    Message = ex.Message,
                    StatusCode = System.Net.HttpStatusCode.Forbidden
                };
            }




        }

        public GetMasterDataVacanciesDetailResult GetMasterDataVacanciesDetail(GetMasterDataVacanciesDetailParameter parameter)
        {
            try
            {
                var listEmployeePTTD = new List<EmployeeEntityModel>();
                var listRecruitment = new List<EmployeeRecruitmentEntityModel>();
                var listExperience = new List<CategoryEntityModel>();
                var listLoaiCV = new List<CategoryEntityModel>();
                var listChanel = new List<CategoryEntityModel>();
                var listNote = new List<NoteEntityModel>();
                var listEmployeeResult = new List<EmployeeEntityModel>();
                List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();
                int pageSize = 10;
                int pageIndex = 1;
                var isManagerOfHR = false;

                //Kiểm tra xem người đăng nhập có phải trưởng phòng nhân sự hay không
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetMasterDataVacanciesDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                var loginEmp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (loginEmp == null)
                {
                    return new GetMasterDataVacanciesDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                //Kiểm tra xem có thuộc phòng nhân sự hay không và có phải trưởng phòng nhân sự ?
                var OrganizationCode = context.Organization.FirstOrDefault(x => x.OrganizationId == loginEmp.OrganizationId)?.OrganizationCode;
                var PositionCode = context.Position.FirstOrDefault(x => x.PositionId == loginEmp.PositionId)?.PositionCode;
                if (OrganizationCode != null && OrganizationCode == "HCNS" && PositionCode != null)  // && PositionCode == "TP"
                {
                    isManagerOfHR = true;
                }

                #region Thông tin xuất excel
                var inforExportExcel = new InforExportExcelModel();
                // get dữ liệu để xuất excel
                var company = context.CompanyConfiguration.FirstOrDefault();
                inforExportExcel.CompanyName = company.CompanyName;
                inforExportExcel.Address = company.CompanyAddress;
                inforExportExcel.Phone = company.Phone;
                inforExportExcel.Website = "";
                inforExportExcel.Email = company.Email;
                #endregion

                #region Common
                var listAllContact = context.Contact.ToList();
                var lstAllEmp = context.Employee.Where(x => x.Active == true && x.IsCustomer != true).ToList();
                // Phòng HC - Nhân sự
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS?.Select(x => x.OrganizationId).ToList();

                // Danh sách NV phòng HCNS
                var listAllEmployee = lstAllEmp.Where(x => x.Active == true).ToList();
                if (lstHCNSId.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                #endregion

                listEmployeeResult = lstAllEmp.Where(x => x.IsOverviewer == true).Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                             Active = y.Active,
                         }).ToList();

                listEmployeeResult.ForEach(emp =>
                {
                    // lấy email của người PV
                    emp.Email = listAllContact.FirstOrDefault(c => c.ObjectId == emp.EmployeeId && c.ObjectType == "EMP")?.Email;

                });

                #region Chi tiết vị trí tuyển dụng
                var chiTietTD = context.Vacancies.Where(x => x.VacanciesId == parameter.VacanciesId).Select(item => new EmployeeVacanciesEntityModel
                {
                    VacanciesId = item.VacanciesId,
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    VacanciesName = item.VacanciesName,
                    Quantity = item.Quantity,
                    Priority = item.Priority,
                    PersonInChargeId = item.PersonInChargeId,
                    TypeOfWork = item.TypeOfWork,
                    PlaceOfWork = item.PlaceOfWork,
                    ExperienceId = item.ExperienceId,
                    Currency = item.Currency,
                    SalarType = item.SalarType,
                    SalaryFrom = item.SalaryFrom,
                    SalaryTo = item.SalaryTo,
                    VacanciesDes = item.VacanciesDes,
                    ProfessionalRequirements = item.ProfessionalRequirements,
                    CandidateBenefits = item.CandidateBenefits,
                }).FirstOrDefault();

                #endregion

                #region Danh sách - thông tin chiến dịch
                listRecruitment = context.RecruitmentCampaign.Select(item => new EmployeeRecruitmentEntityModel
                {
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    RecruitmentCampaignName = item.RecruitmentCampaignName,
                    StartDate = item.StartDate,
                    EndDateDate = item.EndDateDate,
                    PersonInChargeId = item.PersonInChargeId,
                    RecruitmentCampaignDes = item.RecruitmentCampaignDes,
                    CreateById = item.CreatedById,
                    CreateDate = item.CreatedDate,
                    UpdateById = item.UpdatedById,
                    UpdateDate = item.UpdatedDate
                }).ToList();
                #endregion

                #region Người phụ trách tuyển dụng
                listEmployeePTTD = listAllEmployee.Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeCode = y.EmployeeCode,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                             OrganizationId = y.OrganizationId,
                             IsManager = y.IsManager,
                             Active = y.Active,

                         }).ToList();

                listEmployeePTTD.ForEach(item =>
                {
                    item.Phone = listAllContact
                        .FirstOrDefault(x => x.ObjectId == item.EmployeeId && x.ObjectType == "EMP")?.Phone;
                    if (lstOrganizationHCNS.Count() > 0)
                    {
                        item.OrganizationLevel = lstOrganizationHCNS.FirstOrDefault(x => x.OrganizationId == item.OrganizationId).Level;
                    }
                });
                #endregion

                #region Loại công việc
                var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD")?.CategoryTypeId;
                listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listLoaiCV = listLoaiCV.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kênh tuyển dụng
                var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Kinh nghiệm làm việc
                var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV")?.CategoryTypeId;
                listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                listExperience = listExperience.OrderBy(x => x.SortOrder).ToList();
                #endregion

                var objectType = "VACANCIES";
                var folderUrl = context.Folder.FirstOrDefault(x => x.FolderType == objectType)?.Url;
                var webRootPath = hostingEnvironment.WebRootPath + "\\";

                #region get list notes
                if (chiTietTD != null)
                {
                    listNote = context.Note.Where(w => w.Active == true && w.ObjectType == objectType && w.ObjectId == chiTietTD.VacanciesId).Select(w => new NoteEntityModel
                    {
                        NoteId = w.NoteId,
                        Description = w.Description,
                        Type = w.Type,
                        ObjectId = w.ObjectId,
                        ObjectType = w.ObjectType,
                        NoteTitle = w.NoteTitle,
                        CreatedById = w.CreatedById,
                        CreatedDate = w.CreatedDate,
                        UpdatedById = w.UpdatedById,
                        UpdatedDate = w.UpdatedDate,
                        NoteDocList = new List<NoteDocumentEntityModel>()
                    }).ToList();

                    if (listNote.Count > 0)
                    {
                        var listNoteId = listNote.Select(x => x.NoteId).ToList();
                        var listUser = context.User.ToList();
                        var _listAllEmployee = context.Employee.ToList();
                        var listNoteDocument = context.NoteDocument.Where(x => listNoteId.Contains(x.NoteId)).Select(
                            y => new NoteDocumentEntityModel
                            {
                                DocumentName = y.DocumentName,
                                DocumentSize = y.DocumentSize,
                                DocumentUrl = y.DocumentUrl,
                                CreatedById = y.CreatedById,
                                CreatedDate = y.CreatedDate,
                                UpdatedById = y.UpdatedById,
                                UpdatedDate = y.UpdatedDate,
                                NoteDocumentId = y.NoteDocumentId,
                                NoteId = y.NoteId
                            }
                        ).ToList();

                        var listFileInFolder = context.FileInFolder.Where(x => listNoteId.Contains((Guid)x.ObjectId))
                            .ToList();

                        listFileInFolder.ForEach(item =>
                        {
                            var file = new NoteDocumentEntityModel
                            {
                                DocumentName = item.FileName.Substring(0, item.FileName.LastIndexOf("_")),
                                DocumentSize = item.Size,
                                CreatedById = item.CreatedById,
                                CreatedDate = item.CreatedDate,
                                UpdatedById = item.UpdatedById,
                                UpdatedDate = item.UpdatedDate,
                                NoteDocumentId = item.FileInFolderId,
                                NoteId = (Guid)item.ObjectId
                            };

                            var fileName = $"{item.FileName}.{item.FileExtension}";
                            var folderName = ConvertFolderUrl(folderUrl);

                            file.DocumentUrl = Path.Combine(webRootPath, folderName, fileName);

                            listNoteDocument.Add(file);
                        });

                        listNote.ForEach(item =>
                        {
                            var _user = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                            if (_user != null)
                            {
                                var _employee = _listAllEmployee.FirstOrDefault(x => x.EmployeeId == _user.EmployeeId);
                                item.ResponsibleName = _employee.EmployeeName;
                                item.NoteDocList = listNoteDocument.Where(x => x.NoteId == item.NoteId)
                                    .OrderBy(z => z.UpdatedDate).ToList();
                            }
                        });

                        // Sắp xếp lại listnote
                        listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();

                        listNote = listNote
                            .Skip(pageSize * (pageIndex - 1))
                            .Take(pageSize).ToList();
                    }
                }
                #endregion

                #region Danh sách ứng viên
                var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == chiTietTD.VacanciesId).Select(a => a.CandidateId).ToList();
                if (lstCandidateIdOfMapping.Count() > 0)
                {
                    lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 7).Select(candi => new CandidateEntityModel
                    {
                        CandidateId = candi.CandidateId,
                        FullName = candi.FullName,
                        ApplicationDate = candi.ApplicationDate,
                        Email = candi.Email,
                        Phone = candi.Phone,
                        RecruitmentChannelId = candi.RecruitmentChannelId,
                        Status = candi.Status,
                        Sex = candi.Sex,
                        Address = candi.Address,
                        DateOfBirth = candi.DateOfBirth
                    }).ToList();

                    var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                    var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryName = y.CategoryName
                        }).ToList();

                    lstCandidate.ForEach(item =>
                    {
                        item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                        switch (item.Status)
                        {
                            case 1:
                                item.StatusName = "Mới";
                                item.StatusCode = "UVMOI";
                                break;
                            case 2:
                                item.StatusName = "Hẹn phỏng vấn";
                                item.StatusCode = "UVHPV";
                                break;
                            case 3:
                                item.StatusName = "Đạt phỏng vấn";
                                item.StatusCode = "UVDPV";
                                break;
                            case 4:
                                item.StatusName = "Gửi offer";
                                item.StatusCode = "UVGOF";
                                break;
                            case 5:
                                item.StatusName = "Từ chối offer";
                                item.StatusCode = "UVTC";
                                break;
                            case 6:
                                item.StatusName = "Không đạt";
                                item.StatusCode = "UVKD";
                                break;
                        }
                    });
                }
                lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();
                #endregion

                #region Lấy danh sách file tài liệu liên quan
                var listCommonFolders = context.Folder.Where(x => x.ObjectId == parameter.VacanciesId && x.FolderType == objectType)
               .Select(y => new FolderEntityModel
               {
                   FolderId = y.FolderId,
                   ParentId = y.ParentId,
                   Name = y.Name,
               }).ToList();

                listCommonFolders.ForEach(item =>
                {
                    item.HasChild = context.Folder.FirstOrDefault(x => x.ParentId == item.FolderId) != null;
                });

                var listCommonFile = context.FileInFolder.Where(x => x.ObjectId == parameter.VacanciesId).ToList();
                var listFileResult = new List<FileInFolderEntityModel>();

                var folder = context.Folder.FirstOrDefault(x => x.FolderType == objectType);
                listFileResult = GetAllFile(folder.FolderId, listCommonFolders, listCommonFile);


                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrlDocument = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPath, folderUrlDocument, x.FileFullName);
                });

                listFileResult = listFileResult.OrderBy(x => x.CreatedDate).ToList();

                #endregion

                var isGD = false;
                var isNguoiPhuTrach = false;

                //Kiểm tra xem có phải giám đốc hay không
                if (PositionCode == "GD")
                {
                    isGD = true;
                }
                //Kiểm tra xem có phải người phụ trách vị trí tuyển dụng

                var empIdNguoiPhuTrachViTri = listRecruitment.FirstOrDefault(x => x.RecruitmentCampaignId == parameter.RecruitmentCampaignId);
                if (empIdNguoiPhuTrachViTri.PersonInChargeId == loginEmp.EmployeeId)
                {
                    isNguoiPhuTrach = true;
                }


                return new GetMasterDataVacanciesDetailResult
                {
                    ViTriTuyenDung = chiTietTD,
                    ListEmployeePTTD = listEmployeePTTD,
                    ListEmployeeRecruit = listRecruitment,
                    ListKinhNghiem = listExperience,
                    ListLoaiCV = listLoaiCV,
                    ListCandidate = lstCandidate,
                    ListChanel = listChanel,
                    ListNote = listNote,
                    ListAllEmployee = listEmployeeResult,
                    InforExportExcel = inforExportExcel,
                    ListFileResult = listFileResult,
                    IsManagerOfHR = isManagerOfHR,
                    IsGD = isGD,
                    IsNguoiPhuTrach = isNguoiPhuTrach,
                    Message = "Success",
                    StatusCode = System.Net.HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new GetMasterDataVacanciesDetailResult
                {
                    Message = ex.Message,
                    StatusCode = System.Net.HttpStatusCode.Forbidden
                };
            }
        }

        public CreateOrUpdateVacanciesResult UpdateVacancies(CreateOrUpdateVacanciesParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var vacancies = context.Vacancies.FirstOrDefault(x => x.VacanciesId == parameter.ViTriTuyenDung.VacanciesId);
                    if (vacancies == null)
                    {
                        return new CreateOrUpdateVacanciesResult()
                        {
                            Status = false,
                            Message = "Không tồn tại vị trí tuyển dụng",
                        };
                    }

                    vacancies.VacanciesName = parameter.ViTriTuyenDung.VacanciesName;
                    vacancies.Quantity = parameter.ViTriTuyenDung.Quantity;
                    vacancies.Priority = parameter.ViTriTuyenDung.Priority;
                    vacancies.PersonInChargeId = parameter.ViTriTuyenDung.PersonInChargeId;
                    vacancies.TypeOfWork = parameter.ViTriTuyenDung.TypeOfWork;
                    vacancies.ExperienceId = parameter.ViTriTuyenDung.ExperienceId;
                    vacancies.PlaceOfWork = parameter.ViTriTuyenDung.PlaceOfWork;
                    vacancies.Currency = parameter.ViTriTuyenDung.Currency;
                    vacancies.SalarType = parameter.ViTriTuyenDung.SalarType;
                    vacancies.SalaryFrom = parameter.ViTriTuyenDung.SalaryFrom;
                    vacancies.SalaryTo = parameter.ViTriTuyenDung.SalaryTo;
                    vacancies.VacanciesDes = parameter.ViTriTuyenDung.VacanciesDes;
                    vacancies.ProfessionalRequirements = parameter.ViTriTuyenDung.ProfessionalRequirements;
                    vacancies.CandidateBenefits = parameter.ViTriTuyenDung.CandidateBenefits;
                    vacancies.UpdatedDate = DateTime.Now;
                    vacancies.UpdatedById = parameter.UserId;

                    context.Vacancies.Update(vacancies);
                    context.SaveChanges();
                    transaction.Commit();
                    return new CreateOrUpdateVacanciesResult
                    {
                        VacanciesId = vacancies.VacanciesId,
                        Message = "Success",
                        StatusCode = System.Net.HttpStatusCode.OK
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateVacanciesResult
                    {
                        Message = ex.Message,
                        StatusCode = System.Net.HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public UpdateCandidateStatusFromVacanciesResult UpdateStatusCandidateFromVacancies(UpdateCandidateStatusFromVacanciesParameter parameter)
        {
            try
            {
                var lstCandidateUpdate = context.Candidate.Where(x => parameter.ListCandidate.Contains(x.CandidateId)).ToList();

                if (lstCandidateUpdate.Count() == 0)
                {
                    return new UpdateCandidateStatusFromVacanciesResult()
                    {
                        Status = false,
                        Message = "Không tồn tại ứng viên",
                    };
                }
                var listChanel = new List<CategoryEntityModel>();

                #region Common
                // Phòng HC - Nhân sự
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();

                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.ToList();
                if (lstHCNSId.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                var user = context.User.Where(x => x.Active == true).FirstOrDefault(x => x.UserId == parameter.UserId);
                #endregion

                #region Kênh tuyển dụng
                var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                #endregion

                #region Cập nhập ứng viên
                lstCandidateUpdate.ForEach(can =>
                {
                    can.UpdatedById = parameter.UserId;
                    can.UpdatedDate = DateTime.Now;
                    can.Status = parameter.Status;
                });

                context.Candidate.UpdateRange(lstCandidateUpdate);
                context.SaveChanges();
                #endregion

                #region Danh sách ứng viên
                List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();
                var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                if (lstCandidateIdOfMapping.Count() > 0)
                {
                    lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                    {
                        CandidateId = candi.CandidateId,
                        FullName = candi.FullName,
                        ApplicationDate = candi.ApplicationDate,
                        Email = candi.Email,
                        Phone = candi.Phone,
                        RecruitmentChannelId = candi.RecruitmentChannelId,
                        Status = candi.Status,
                        Sex = candi.Sex,
                        Address = candi.Address,
                        DateOfBirth = candi.DateOfBirth
                    }).ToList();

                    var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                    var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryName = y.CategoryName
                        }).ToList();

                    lstCandidate.ForEach(item =>
                    {
                        item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                        switch (item.Status)
                        {
                            case 1:
                                item.StatusName = "Mới";
                                item.StatusCode = "UVMOI";
                                break;
                            case 2:
                                item.StatusName = "Hẹn phỏng vấn";
                                item.StatusCode = "UVHPV";
                                break;
                            case 3:
                                item.StatusName = "Đạt phỏng vấn";
                                item.StatusCode = "UVDPV";
                                break;
                            case 4:
                                item.StatusName = "Gửi offer";
                                item.StatusCode = "UVGOF";
                                break;
                            case 5:
                                item.StatusName = "Từ chối offer";
                                item.StatusCode = "UVTC";
                                break;
                            case 6:
                                item.StatusName = "Không đạt";
                                item.StatusCode = "UVKD";
                                break;
                        }
                    });
                }
                lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();
                #endregion

                return new UpdateCandidateStatusFromVacanciesResult()
                {
                    ListCandidate = lstCandidate,
                    StatusCode = System.Net.HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new UpdateCandidateStatusFromVacanciesResult()
                {
                    StatusCode = System.Net.HttpStatusCode.BadRequest,
                    Message = ex.Message,
                };
            }

        }

        public CreateInterviewScheduleResult CreateInterviewSchedule(CreateInterviewScheduleParameter parameter)
        {
            try
            {
                List<InterviewSchedule> lstInterviewSche = new List<InterviewSchedule>();
                List<InterviewScheduleMapping> lstInterScheMapping = new List<InterviewScheduleMapping>();
                InterviewScheduleMapping mapping = new InterviewScheduleMapping();

                parameter.ListInterviewSchedule?.ForEach(sche =>
                {
                    InterviewSchedule obj = new InterviewSchedule();
                    obj.InterviewScheduleId = Guid.NewGuid();
                    obj.VacanciesId = sche.VacanciesId;
                    obj.CandidateId = sche.CandidateId;
                    obj.InterviewTitle = sche.InterviewTitle;
                    obj.InterviewDate = sche.InterviewDate;
                    obj.Address = sche.Address;
                    obj.CreatedById = parameter.UserId;
                    obj.InterviewScheduleType = sche.InterviewScheduleType;
                    obj.CreatedDate = DateTime.Now;

                    lstInterviewSche.Add(obj);
                    sche.InterviewScheduleId = obj.InterviewScheduleId;
                    sche.InterviewDate = obj.InterviewDate;

                    // Lưu người phỏng vấn vào bảng mapping
                    sche.ListEmployeeId?.ForEach(empId =>
                    {
                        mapping = new InterviewScheduleMapping();
                        mapping.InterviewScheduleMappingId = Guid.NewGuid();
                        mapping.InterviewScheduleId = obj.InterviewScheduleId;
                        mapping.EmployeeId = empId;
                        mapping.CreatedById = parameter.UserId;
                        mapping.CreatedDate = DateTime.Now;

                        lstInterScheMapping.Add(mapping);
                    });
                });

                context.InterviewSchedule.AddRange(lstInterviewSche);
                context.InterviewScheduleMapping.AddRange(lstInterScheMapping);

                // Update status của ứng viên sang Hẹn phỏng vấn
                List<CandidateEntityModel> lstCandi = new List<CandidateEntityModel>();
                var lstCandidateInterId = context.Candidate.Where(x => parameter.ListInterviewSchedule.Select(a => a.CandidateId).Contains(x.CandidateId)).Select(x => x.CandidateId).ToList();
                if (lstCandidateInterId.Count() > 0)
                {
                    UpdateCandidateStatusFromVacanciesParameter para = new UpdateCandidateStatusFromVacanciesParameter();
                    para.ListCandidate = lstCandidateInterId;
                    para.Status = 2;
                    para.VacanciesId = parameter.ListInterviewSchedule.FirstOrDefault().VacanciesId;
                    lstCandi = UpdateStatusCandidateFromVacancies(para).ListCandidate;
                }
                context.SaveChanges();

                var lstInterviewSchedule = new List<InterviewScheduleEntityModel>();
                if (parameter.ScreenType == "UNGVIEN" && lstCandidateInterId.Count() > 0)
                {
                    lstInterviewSchedule = context.InterviewSchedule
                    .Where(x => x.CandidateId == lstCandidateInterId.FirstOrDefault())
                    .Select(y => new InterviewScheduleEntityModel()
                    {
                        InterviewScheduleId = y.InterviewScheduleId,
                        CandidateId = y.CandidateId,
                        InterviewTitle = y.InterviewTitle,
                        InterviewTime = y.InterviewTime,
                        InterviewDate = y.InterviewDate,
                        InterviewScheduleType = y.InterviewScheduleType,
                        Address = y.Address,
                    }).ToList();
                }

                #region Gửi thông báo email cho Ứng viên và người phỏng vấn
                NotificationHelper.AccessNotification(context, TypeModel.CandidateInterview, "CANDIDATE_INTERVIEW", new Candidate(),
                    null, true, null, Guid.Empty, null, lstInterviewSche.Select(x => x.InterviewScheduleId).ToList());
                #endregion

                return new CreateInterviewScheduleResult()
                {
                    ListCandidate = lstCandi,
                    ListInterviewSchedule = lstInterviewSchedule,
                    StatusCode = System.Net.HttpStatusCode.OK
                };
            }
            catch (Exception e)
            {
                return new CreateInterviewScheduleResult()
                {
                    StatusCode = System.Net.HttpStatusCode.Forbidden
                };
            }
        }

        public UpdateCandidateResult UpdateCandidate(UpdateCandidateParameter parameter)
        {
            var listAllCandidate = context.Candidate.ToList();
            var candidate =
                listAllCandidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateModel.CandidateId);

            if (candidate == null)
            {
                return new UpdateCandidateResult()
                {
                    StatusCode = HttpStatusCode.FailedDependency,
                    MessageCode = "Ứng viên không tồn tại trong hệ thống",
                };
            }
            var listAllEmp = context.Employee.ToList();
            var listAllContact = context.Contact.ToList();
            var listAllCandidateVacanciesMapping = context.CandidateVacanciesMapping.ToList();
            var listAllVacancies = context.Vacancies.ToList();
            var listAllRecruitmentCampaign = context.RecruitmentCampaign.ToList();
            var listAllOrg = context.Organization.ToList();

            //Check ứng viên theo Họ tên + email cá nhân + số điện thoại cá nhân

            //-Nếu là nhân viên công ty 
            var checkEmp = listAllContact.FirstOrDefault(x => x.Email == parameter.CandidateModel.Email && x.Phone == parameter.CandidateModel.Phone);
            if (checkEmp != null)
            {
                var emp = listAllEmp.FirstOrDefault(x => x.EmployeeId == checkEmp.ObjectId);
                if (emp.EmployeeName == parameter.CandidateModel.FullName)
                {
                    var org = listAllOrg.FirstOrDefault(x => x.OrganizationId == emp.OrganizationId);
                    //Check xem nhân viên đó đã nghỉ việc chưa
                    var user = context.User.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);
                    //Nvien đã nghỉ việc
                    if (!emp.Active.Value && !user.Active.Value)
                    {
                        return new UpdateCandidateResult()
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Ứng viên đang là nhân viên thuộc phòng ban " + org?.OrganizationName + " đã nghỉ việc",
                        };
                    }
                    else
                    {
                        return new UpdateCandidateResult()
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Ứng viên đang là nhân viên thuộc phòng ban " + org?.OrganizationName,
                        };
                    }
                }
            }

            //- Nếu là trong danh sách  ứng viên đã có:
            var checkUv = listAllCandidate.FirstOrDefault(x => x.Email == parameter.CandidateModel.Email
                                                && x.Phone == parameter.CandidateModel.Phone
                                                && x.FullName == parameter.CandidateModel.FullName
                                                && x.CandidateId != parameter.CandidateModel.CandidateId && x.Status != 6);
            if (checkUv != null)
            {
                var candidateVacanciesMapping = listAllCandidateVacanciesMapping.FirstOrDefault(x => x.CandidateId == checkUv.CandidateId);
                var vacancies = listAllVacancies.FirstOrDefault(x => x.VacanciesId == candidateVacanciesMapping.VacanciesId);
                var recruitmentCampaign = listAllRecruitmentCampaign.FirstOrDefault(x => x.RecruitmentCampaignId == vacancies.RecruitmentCampaignId);
                var trangThaiUngVien = "";
                switch (checkUv.Status)
                {
                    case 1:
                        trangThaiUngVien = "Mới";
                        break;
                    case 2:
                        trangThaiUngVien = "Hẹn phỏng vấn";
                        break;
                    case 3:
                        trangThaiUngVien = "Đạt phỏng vấn";
                        break;
                    case 4:
                        trangThaiUngVien = "Gửi offer";
                        break;
                    case 5:
                        trangThaiUngVien = "Từ chối offer";
                        break;
                    case 6:
                        trangThaiUngVien = "Không đạt";
                        break;
                }

                if (checkUv.Status != 6)
                {
                    return new UpdateCandidateResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Ứng viên đã  ứng tuyển ở vị trí  " + vacancies?.VacanciesName + " trong đợt tuyển dụng " + recruitmentCampaign?.RecruitmentCampaignName + " và ở trạng thái " + trangThaiUngVien,
                    };
                }

                if (checkUv.Status == 6)
                {
                    return new UpdateCandidateResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Ứng viên không đạt ở đợt tuyển dụng " + recruitmentCampaign?.RecruitmentCampaignName,
                    };
                }
            }
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    #region update ung vien

                    candidate.FullName = parameter.CandidateModel.FullName;
                    candidate.DateOfBirth = parameter.CandidateModel.DateOfBirth;
                    candidate.Phone = parameter.CandidateModel.Phone;
                    candidate.Address = parameter.CandidateModel.Address;
                    candidate.Avatar = parameter.CandidateModel.Avatar;
                    candidate.Email = parameter.CandidateModel.Email;
                    candidate.RecruitmentChannelId = parameter.CandidateModel.RecruitmentChannel;
                    candidate.Sex = parameter.CandidateModel.Sex;
                    candidate.Status = parameter.CandidateModel.StatusId;
                    candidate.UpdatedDate = DateTime.Now;
                    candidate.UpdatedById = parameter.UserId;
                    candidate.ApplicationDate = parameter.CandidateModel.ApplicationDate;
                    candidate.TomTatHocVan = parameter.CandidateModel.TomTatHocVan;
                    candidate.PhuongThucTuyenDungId = parameter.CandidateModel.PhuongThucTuyenDungId;
                    candidate.MucPhi = parameter.CandidateModel.MucPhi;

                    context.Candidate.Update(candidate);
                    context.SaveChanges();

                    #endregion

                    #region update tai lieu lien quan


                    if (parameter.ListFileInFolder != null && parameter.ListFileInFolder.Count > 0)
                    {
                        var folder = context.Folder.FirstOrDefault(x => x.FolderType == "CANDIDATE");

                        if (folder == null)
                        {
                            return new UpdateCandidateResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Thư mục upload không tồn tại, bạn cần cấu hình thư mục để tiếp tục."
                            };
                        }

                        var listFileDelete = new List<string>();

                        var listFileResult = new List<FileInFolderEntityModel>();

                        bool isSave = true;
                        parameter.ListFileInFolder.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = item.FileInFolder.FileName + "_" + Guid.NewGuid().ToString(),
                                    FolderId = folder.FolderId,
                                    ObjectId = candidate.CandidateId,
                                    ObjectType = "CANDIDATE",
                                    Size = item.FileInFolder.Size,
                                    FileExtension =
                                        item.FileSave.FileName.Substring(item.FileSave.FileName.LastIndexOf(".") + 1)
                                };

                                context.FileInFolder.Add(file);
                                context.SaveChanges();

                                string fileName = file.FileName + "." + file.FileExtension;

                                if (isSave)
                                {
                                    string fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                        listFileDelete.Add(fullPath);
                                    }
                                }
                            }
                        });
                        if (!isSave)
                        {
                            listFileDelete.ForEach(File.Delete);

                            return new UpdateCandidateResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu",
                            };
                        }
                    }

                    #endregion

                    #region update ho so tong quan Học vấn - Kinh nghiệm làm việc - cmt by longhdh

                    //var createById = Guid.Empty;
                    //var createDate = new DateTime();

                    //var listOverviewCandidate = context.OverviewCandidate
                    //    .Where(x => x.CandidateId == candidate.CandidateId).ToList();

                    //var listNewOverviewCandidate = new List<OverviewCandidate>();
                    //parameter.ListOverviewCandidate.ForEach(item =>
                    //{
                    //    var overview = new OverviewCandidate()
                    //    {
                    //        OverviewCandidateId = Guid.NewGuid(),
                    //        CandidateId = item.CandidateId,
                    //        EducationAndWorkExpName = item.EducationAndWorkExpName,
                    //        CertificatePlace = item.CertificatePlace,
                    //        SpecializedTraining = item.SpecializedTraining,
                    //        JobDescription = item.JobDescription,
                    //        StartDate = item.StartDate,
                    //        EndDate = item.EndDate,
                    //        Phone = item.Phone,
                    //        Type = item.Type,
                    //        CreatedById = createById,
                    //        CreatedDate = createDate,
                    //        UpdatedById = parameter.UserId,
                    //        UpdatedDate = DateTime.Now,
                    //    };

                    //    listNewOverviewCandidate.Add(overview);
                    //});

                    //listNewOverviewCandidate.ForEach(item =>
                    //{
                    //    if (listOverviewCandidate.Count > 0)
                    //    {
                    //        createById = listOverviewCandidate[0].CreatedById;
                    //        createDate = listOverviewCandidate[0].CreatedDate;

                    //        item.CreatedById = createById;
                    //        item.CreatedDate = createDate;
                    //    }
                    //    else
                    //    {
                    //        item.CreatedById = parameter.UserId;
                    //        item.CreatedDate = DateTime.Now;
                    //    }
                    //});

                    //context.OverviewCandidate.RemoveRange(listOverviewCandidate);
                    //context.SaveChanges();

                    //context.OverviewCandidate.AddRange(listNewOverviewCandidate);
                    //context.SaveChanges();

                    #endregion

                    #region update lich phong van - cmt by longhdh

                    //var listInterviewSchedule = context.InterviewSchedule
                    //    .Where(x => x.CandidateId == candidate.CandidateId && x.VacanciesId == parameter.VacanciesId).ToList();

                    //createById = listInterviewSchedule[0].CreatedById;
                    //createDate = listInterviewSchedule[0].CreatedDate;

                    //context.InterviewSchedule.RemoveRange(listInterviewSchedule);
                    //context.SaveChanges();

                    //var listNewInterviewSchedule = new List<InterviewSchedule>();
                    //parameter.ListInterviewSchedule.ForEach(item =>
                    //{
                    //    var interviewSchedule = new InterviewSchedule()
                    //    {
                    //        InterviewScheduleId = item.InterviewScheduleId,
                    //        VacanciesId = parameter.VacanciesId,
                    //        CandidateId = item.CandidateId,
                    //        InterviewTitle = item.InterviewTitle,
                    //        InterviewDate = item.InterviewDate,
                    //        Address = item.Address,
                    //        SortOrder = item.SortOrder,
                    //        Status = item.Status,
                    //        TypeOfInterview = item.TypeOfInterview,
                    //        CreatedById = createById,
                    //        CreatedDate = createDate,
                    //        UpdatedById = parameter.UserId,
                    //        UpdatedDate = DateTime.Now,
                    //    };

                    //    listNewInterviewSchedule.Add(interviewSchedule);
                    //});

                    //context.InterviewSchedule.AddRange(listNewInterviewSchedule);
                    //context.SaveChanges();

                    #endregion

                    #region update ho so tong quan Học vấn - Kinh nghiệm làm việc

                    //var listOverviewCandidate = context.OverviewCandidate
                    //    .Where(x => x.CandidateId == candidate.CandidateId).ToList();

                    //createById = listOverviewCandidate[0].CreatedById;
                    //createDate = listOverviewCandidate[0].CreatedDate;

                    //context.OverviewCandidate.RemoveRange(listOverviewCandidate);
                    //context.SaveChanges();

                    //var listNewOverviewCandidate = new List<OverviewCandidate>();
                    //parameter.ListOverviewCandidate.ForEach(item =>
                    //{
                    //    var overview = new OverviewCandidate()
                    //    {
                    //        OverviewCandidateId = Guid.NewGuid(),
                    //        CandidateId = item.CandidateId,
                    //        EducationAndWorkExpName = item.EducationAndWorkExpName,
                    //        CertificatePlace = item.CertificatePlace,
                    //        SpecializedTraining = item.SpecializedTraining,
                    //        JobDescription = item.JobDescription,
                    //        StartDate = item.StartDate,
                    //        EndDate = item.EndDate,
                    //        Phone = item.Phone,
                    //        Type = item.Type,
                    //        CreatedById = createById,
                    //        CreatedDate = createDate,
                    //        UpdatedById = parameter.UserId,
                    //        UpdatedDate = DateTime.Now,
                    //    };

                    //    listNewOverviewCandidate.Add(overview);
                    //});

                    //context.OverviewCandidate.AddRange(listNewOverviewCandidate);
                    //context.SaveChanges();

                    #endregion

                    #region update ho so tong quan Học vấn - Kinh nghiệm làm việc

                    //var listOverviewCandidate = context.OverviewCandidate
                    //    .Where(x => x.CandidateId == candidate.CandidateId).ToList();

                    //createById = listOverviewCandidate[0].CreatedById;
                    //createDate = listOverviewCandidate[0].CreatedDate;

                    //context.OverviewCandidate.RemoveRange(listOverviewCandidate);
                    //context.SaveChanges();

                    //var listNewOverviewCandidate = new List<OverviewCandidate>();
                    //parameter.ListOverviewCandidate.ForEach(item =>
                    //{
                    //    var overview = new OverviewCandidate()
                    //    {
                    //        OverviewCandidateId = Guid.NewGuid(),
                    //        CandidateId = item.CandidateId,
                    //        EducationAndWorkExpName = item.EducationAndWorkExpName,
                    //        CertificatePlace = item.CertificatePlace,
                    //        SpecializedTraining = item.SpecializedTraining,
                    //        JobDescription = item.JobDescription,
                    //        StartDate = item.StartDate,
                    //        EndDate = item.EndDate,
                    //        Phone = item.Phone,
                    //        Type = item.Type,
                    //        CreatedById = createById,
                    //        CreatedDate = createDate,
                    //        UpdatedById = parameter.UserId,
                    //        UpdatedDate = DateTime.Now,
                    //    };

                    //    listNewOverviewCandidate.Add(overview);
                    //});

                    //context.OverviewCandidate.AddRange(listNewOverviewCandidate);
                    //context.SaveChanges();

                    #endregion

                    trans.Commit();

                    #region Danh sách ứng viên
                    #region Common                 
                    var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                    var listCategory = context.Category.Where(x => x.Active == true).ToList();
                    var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                    var listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                    listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                    #endregion

                    List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();
                    var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                    if (lstCandidateIdOfMapping.Count() > 0)
                    {
                        lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                        {
                            CandidateId = candi.CandidateId,
                            FullName = candi.FullName,
                            ApplicationDate = candi.ApplicationDate,
                            Email = candi.Email,
                            Phone = candi.Phone,
                            RecruitmentChannelId = candi.RecruitmentChannelId,
                            Status = candi.Status,
                            Sex = candi.Sex,
                            Address = candi.Address,
                            DateOfBirth = candi.DateOfBirth
                        }).ToList();

                        var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                        var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                            .Select(y => new CategoryEntityModel
                            {
                                CategoryId = y.CategoryId,
                                CategoryName = y.CategoryName
                            }).ToList();

                        lstCandidate.ForEach(item =>
                        {
                            item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                            switch (item.Status)
                            {
                                case 1:
                                    item.StatusName = "Mới";
                                    item.StatusCode = "UVMOI";
                                    break;
                                case 2:
                                    item.StatusName = "Hẹn phỏng vấn";
                                    item.StatusCode = "UVHPV";
                                    break;
                                case 3:
                                    item.StatusName = "Đạt phỏng vấn";
                                    item.StatusCode = "UVDPV";
                                    break;
                                case 4:
                                    item.StatusName = "Gửi offer";
                                    item.StatusCode = "UVGOF";
                                    break;
                                case 5:
                                    item.StatusName = "Từ chối offer";
                                    item.StatusCode = "UVTC";
                                    break;
                                case 6:
                                    item.StatusName = "Không đạt";
                                    item.StatusCode = "UVKD";
                                    break;
                            }
                        });
                    }
                    lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();
                    #endregion

                    return new UpdateCandidateResult()
                    {
                        ListCandidate = lstCandidate,
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new UpdateCandidateResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = e.Message
                    };
                }
            }
        }

        public DeleteCandidatesResult DeleteCandidates(DeleteCandidatesParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();
                var listChanel = new List<CategoryEntityModel>();
                var candidateId = Guid.Empty;
                #region Common
                // Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x => x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();

                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.ToList();
                if (lstOrganizationHCNS.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                var user = context.User.Where(x => x.Active == true).FirstOrDefault(x => x.UserId == parameter.UserId);
                var lstAllCandi = context.Candidate.ToList();
                #endregion

                #region Kênh tuyển dụng
                var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                #endregion
                try
                {
                    // Xóa ứng viên - chỉ xóa khi trạng thái MỚI
                    var lstCan = lstAllCandi.Where(x => parameter.ListCandidateId.Contains(x.CandidateId) && (x.Status == 1 || x.Status == null)).ToList();
                    if (lstCan.Count() > 0)
                    {
                        context.Candidate.RemoveRange(lstCan);

                        // Xóa ở bảng mapping
                        var lstCandidateVacanciesMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId && parameter.ListCandidateId.Contains(x.CandidateId)).ToList();
                        if (lstCandidateVacanciesMapping.Count() > 0)
                            context.CandidateVacanciesMapping.RemoveRange(lstCandidateVacanciesMapping);

                        candidateId = lstCan.FirstOrDefault().CandidateId;
                        // Thêm ghi chú
                        Note note = new Note
                        {
                            NoteId = Guid.NewGuid(),
                            Type = "SYS",
                            ObjectType = "VACANCIES",
                            Active = true,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            NoteTitle = "đã thêm ghi chú"
                        };
                        string des = "";
                        parameter.ListCandidateId.ForEach(can =>
                        {
                            var fullName = lstAllCandi.FirstOrDefault(x => x.CandidateId == can)?.FullName;
                            note.ObjectId = can;
                            des = des + "<p><strong>" + user.UserName + "</strong>" + " xóa ứng viên <strong>" + fullName + "</strong></p>";
                        });

                        context.Note.Add(note);
                        context.SaveChanges();
                    }
                    else
                    {
                        transaction.Rollback();
                        return new DeleteCandidatesResult
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Xóa ứng viên thất bại.",
                            Status = false
                        };
                    }
                    #region Danh sách ghi chú
                    var listNote = new List<NoteEntityModel>();
                    var folder = context.Folder.FirstOrDefault(x => x.FolderType == "VACANCIES");
                    listNote = context.Note.Where(x => parameter.ListCandidateId.Contains(x.ObjectId) && x.Active == true)
                        .Select(y => new NoteEntityModel
                        {
                            NoteId = y.NoteId,
                            Description = y.Description,
                            Type = y.Type,
                            ObjectId = y.ObjectId,
                            ObjectType = y.ObjectType,
                            NoteTitle = y.NoteTitle,
                            Active = y.Active,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate,
                            ResponsibleName = "",
                            ResponsibleAvatar = "",
                            NoteDocList = new List<NoteDocumentEntityModel>()
                        }).ToList();

                    if (listNote.Count > 0)
                    {
                        var listNoteId = listNote.Select(x => x.NoteId).ToList();
                        var listUser = context.User.ToList();
                        var listEmployee = context.Employee.ToList();

                        var listFileInFolder = context.FileInFolder.Where(x => listNoteId.Contains((Guid)x.ObjectId))
                            .ToList();
                        var listNoteDocument = new List<NoteDocumentEntityModel>();

                        listFileInFolder.ForEach(item =>
                        {
                            var file = new NoteDocumentEntityModel
                            {
                                DocumentName = item.FileName.Substring(0, item.FileName.LastIndexOf("_", StringComparison.Ordinal)),
                                DocumentSize = item.Size,
                                CreatedById = item.CreatedById,
                                CreatedDate = item.CreatedDate,
                                UpdatedById = item.UpdatedById,
                                UpdatedDate = item.UpdatedDate,
                                NoteDocumentId = item.FileInFolderId,
                                NoteId = (Guid)item.ObjectId
                            };
                            var fileName = $"{item.FileName}.{item.FileExtension}";
                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            file.DocumentUrl = Path.Combine(webRootPath, folderName, fileName);

                            listNoteDocument.Add(file);
                        });
                        listNote.ForEach(item =>
                        {
                            var userNote = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                            var employee = listEmployee.FirstOrDefault(x => x.EmployeeId == userNote.EmployeeId);
                            item.ResponsibleName = employee.EmployeeName;
                            item.NoteDocList = listNoteDocument.Where(x => x.NoteId == item.NoteId)
                                .OrderByDescending(z => z.UpdatedDate).ToList();
                        });

                        //Sắp xếp lại listNote
                        listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();
                    }
                    #endregion

                    #region Danh sách ứng viên
                    var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                    if (lstCandidateIdOfMapping.Count() > 0)
                    {
                        lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                        {
                            CandidateId = candi.CandidateId,
                            FullName = candi.FullName,
                            ApplicationDate = candi.ApplicationDate,
                            Email = candi.Email,
                            Phone = candi.Phone,
                            RecruitmentChannelId = candi.RecruitmentChannelId,
                            Status = candi.Status,
                            Sex = candi.Sex
                        }).ToList();

                        var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                        var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                            .Select(y => new CategoryEntityModel
                            {
                                CategoryId = y.CategoryId,
                                CategoryName = y.CategoryName
                            }).ToList();

                        lstCandidate.ForEach(item =>
                        {
                            item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                            switch (item.Status)
                            {
                                case 1:
                                    item.StatusName = "Mới";
                                    item.StatusCode = "UVMOI";
                                    break;
                                case 2:
                                    item.StatusName = "Hẹn phỏng vấn";
                                    item.StatusCode = "UVHPV";
                                    break;
                                case 3:
                                    item.StatusName = "Đạt phỏng vấn";
                                    item.StatusCode = "UVDPV";
                                    break;
                                case 4:
                                    item.StatusName = "Gửi offer";
                                    item.StatusCode = "UVGOF";
                                    break;
                                case 5:
                                    item.StatusName = "Từ chối offer";
                                    item.StatusCode = "UVTC";
                                    break;
                                case 6:
                                    item.StatusName = "Không đạt";
                                    item.StatusCode = "UVKD";
                                    break;
                            }
                        });
                    }
                    lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();

                    #endregion

                    transaction.Commit();
                    return new DeleteCandidatesResult
                    {
                        ListCandidate = lstCandidate,
                        ListNote = listNote,
                        Message = "Xóa ứng viên dụng thành công.",
                        StatusCode = HttpStatusCode.OK
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteCandidatesResult
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = "Xóa ứng viên thất bại.",
                        Status = false
                    };
                }

            }
        }

        public DownloadTemplateImportResult DownloadTemplateImportCandidate(DownloadTemplateImportParameter parameter)
        {
            try
            {
                string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
                string fileName = @"Template_Import_UngVien.xls";

                string newFilePath = Path.Combine(rootFolder, fileName);
                byte[] data = File.ReadAllBytes(newFilePath);

                return new DownloadTemplateImportResult
                {
                    TemplateExcel = data,
                    Message = string.Format("Đã dowload file Template_Import_UngVien"),
                    FileName = "Template_Import_UngVien",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DownloadTemplateImportResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetAllVacanciesResult FilterVacancies(FilterVacanciesParameter parameter)
        {
            try
            {
                var listExperience = new List<CategoryEntityModel>();
                var listLoaiCV = new List<CategoryEntityModel>();
                var listEmployee = new List<EmployeeEntityModel>();

                var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();
                var listCategory = context.Category.Where(x => x.Active == true).ToList();
                var lstOverviewCandidate = context.OverviewCandidate.ToList();
                // Phòng HC - Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                // Danh sách NV phòng HCNS
                var listAllEmployee = context.Employee.ToList();
                if (lstOrganizationHCNS.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                #region Người phụ trách tuyển dụng
                listEmployee = listAllEmployee.Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeCode = y.EmployeeCode,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                             OrganizationId = y.OrganizationId,
                             IsManager = y.IsManager,
                             Active = y.Active
                         }).ToList();

                listEmployee.ForEach(item =>
                {
                    if (lstOrganizationHCNS.Count() > 0)
                    {
                        item.OrganizationLevel = lstOrganizationHCNS.FirstOrDefault(x => x.OrganizationId == item.OrganizationId).Level;
                    }
                });
                #endregion

                #region Danh sách chiến dịch
                var lstRecruitCamp = context.RecruitmentCampaign.Select(item => new RecruitmentCampaignEntityModel
                {
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    RecruitmentCampaignName = item.RecruitmentCampaignName
                }).ToList();
                #endregion

                #region Loại công việc
                var categoryTypeLoaiCVId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LCVTD").CategoryTypeId;
                listLoaiCV = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeLoaiCVId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                #endregion

                #region Kinh nghiệm làm việc
                var categoryTypeKNId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KNLV").CategoryTypeId;
                listExperience = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeKNId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();
                #endregion

                var selectedViTriId = parameter.SelectedViTriId;
                var selectedChienDichId = parameter.SelectedChienDichId;
                var selectedMucDoUTId = parameter.SelectedMucDoUTId;
                var selectedKinhNghiemId = parameter.SelectedKinhNghiemId;
                var selectedLoaiCVId = parameter.SelectedLoaiCVId;
                var selectedNguoiPTId = parameter.SelectedNguoiPTId;

                var lstVacancies = context.Vacancies.Where(c =>
                (selectedChienDichId == null || selectedChienDichId.Count == 0 || selectedChienDichId.Contains(c.RecruitmentCampaignId)) &&
                 (selectedViTriId == null || selectedViTriId.Count == 0 || selectedViTriId.Contains(c.VacanciesId)) &&
                  (selectedKinhNghiemId == null || selectedKinhNghiemId.Count == 0 || selectedKinhNghiemId.Contains(c.ExperienceId.Value)) &&
                   (selectedLoaiCVId == null || selectedLoaiCVId.Count == 0 || selectedLoaiCVId.Contains(c.TypeOfWork.Value)) &&
                    (selectedMucDoUTId == null || selectedMucDoUTId.Count == 0 || selectedMucDoUTId.Contains(c.Priority)) &&
                (parameter.EndMoney == null || c.SalaryTo <= parameter.EndMoney) &&
                (selectedNguoiPTId == null || selectedNguoiPTId.Count == 0 || selectedNguoiPTId.Contains(c.PersonInChargeId.Value))).Select(item => new EmployeeVacanciesEntityModel
                {
                    VacanciesId = item.VacanciesId,
                    VacanciesName = item.VacanciesName,
                    Priority = item.Priority,
                    Quantity = item.Quantity,
                    SalarType = item.SalarType,
                    SalaryFrom = item.SalaryFrom,
                    SalaryTo = item.SalaryTo,
                    ExperienceId = item.ExperienceId,
                    RecruitmentCampaignId = item.RecruitmentCampaignId,
                    TypeOfWork = item.TypeOfWork,
                    PersonInChargeId = item.PersonInChargeId
                }).ToList();

                lstVacancies.ForEach(item =>
                {
                    item.RecruitmentCampaignName = lstRecruitCamp.FirstOrDefault(x => x.RecruitmentCampaignId == item.RecruitmentCampaignId)?.RecruitmentCampaignName;
                    item.TypeOfWorkName = listLoaiCV.FirstOrDefault(x => x.CategoryId == item.TypeOfWork)?.CategoryName;
                    item.PersonInChargeName = listAllEmployee.FirstOrDefault(x => x.EmployeeId == item.PersonInChargeId)?.EmployeeName;
                    item.ExperienceName = listExperience.FirstOrDefault(x => x.CategoryId == item.ExperienceId)?.CategoryName;
                });

                return new GetAllVacanciesResult
                {
                    ListViTriTuyenDung = lstVacancies,
                    ListChienDich = lstRecruitCamp,
                    ListExperience = listExperience,
                    ListLoaiCV = listLoaiCV,
                    ListNguoiPT = listEmployee,
                    Message = "Success",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new GetAllVacanciesResult
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetMasterCreateCandidateResult GetMasterCreateCandidate(GetMasterCreateCandidateParameter parameter)
        {
            try
            {
                var listVacancies = context.Vacancies.Select(x => new VacancyEntityModel()
                {
                    RecruitmentCampaignId = x.RecruitmentCampaignId,
                    VacanciesId = x.VacanciesId,
                    VacanciesName = x.VacanciesName,
                }).ToList();

                var listRecruitmentCampaign = context.RecruitmentCampaign
                    .Select(x => new RecruitmentCampaignEntityModel()
                    {
                        RecruitmentCampaignId = x.RecruitmentCampaignId,
                        RecruitmentCampaignName = x.RecruitmentCampaignName,
                    }).ToList();

                var categoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")
                    ?.CategoryTypeId;

                var listRecruitmentChannel = context.Category.Where(x => x.CategoryTypeId == categoryTypeId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                    }).ToList();

                // Bằng cấp
                var certiTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP")
                    ?.CategoryTypeId;

                var listCertificate = context.Category.Where(x => x.CategoryTypeId == certiTypeId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                    }).ToList();

                //Phương thức tuyển dụng
                var pttdCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTTD" && x.Active == true)?.CategoryTypeId;
                var listPTTD = context.Category.Where(x => x.CategoryTypeId == pttdCategoryTypeId && x.Active == true)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                    }).ToList();

                return new GetMasterCreateCandidateResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListVacancies = listVacancies,
                    ListRecruitmentChannel = listRecruitmentChannel,
                    ListRecruitmentCampaign = listRecruitmentCampaign,
                    ListCertificate = listCertificate,
                    ListPTTD = listPTTD,
                };
            }
            catch (Exception e)
            {
                return new GetMasterCreateCandidateResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterCandidateDetailResult GetMasterCandidateDetail(GetMasterCandidateDetailParameter parameter)
        {
            try
            {
                var listEmp = context.Employee.Where(x => x.Active == true && x.IsCustomer != true).ToList();
                var candidate = context.Candidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateId);
                #region Common
                var listAllContact = context.Contact.ToList();
                //Phòng HC -Nhân sự
                //var organizationHCNS = context.Organization.FirstOrDefault(x =>  x.IsHR == true);
                var lstOrganizationHCNS = context.Organization.Where(x => x.IsHr == true).ToList();
                var lstHCNSId = lstOrganizationHCNS.Select(x => x.OrganizationId).ToList();
                // Danh sách NV phòng HCNS
                var listAllEmployee = listEmp.Where(x => x.Active == true).ToList();
                if (lstOrganizationHCNS.Count() > 0)
                    listAllEmployee = listAllEmployee.Where(x => x.OrganizationId != null && lstHCNSId.Contains(x.OrganizationId.Value)).ToList();

                #endregion


                if (candidate == null)
                {
                    return new GetMasterCandidateDetailResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Ứng viên không tồn tại trong hệ thống."
                    };
                }

                #region Lấy dữ liệu ứng viên

                var candidateModel = new CandidateEntityModel()
                {
                    CandidateId = candidate.CandidateId,
                    FullName = candidate.FullName,
                    Phone = candidate.Phone,
                    Email = candidate.Email,
                    Sex = candidate.Sex,
                    DateOfBirth = candidate.DateOfBirth,
                    Address = candidate.Address,
                    ApplicationDate = candidate.ApplicationDate,
                    RecruitmentChannel = candidate.RecruitmentChannelId,
                    StatusId = candidate.Status,
                    TomTatHocVan = candidate.TomTatHocVan,
                    PhuongThucTuyenDungId = candidate.PhuongThucTuyenDungId,
                    MucPhi = candidate.MucPhi,
                };

                switch (candidateModel.StatusId)
                {
                    case 1:
                        candidateModel.StatusName = "Mới";
                        candidateModel.StatusCode = "UVMOI";
                        break;
                    case 2:
                        candidateModel.StatusName = "Hẹn phỏng vấn";
                        candidateModel.StatusCode = "UVHPV";
                        break;
                    case 3:
                        candidateModel.StatusName = "Đạt phỏng vấn";
                        candidateModel.StatusCode = "UVDPV";
                        break;
                    case 4:
                        candidateModel.StatusName = "Gửi offer";
                        candidateModel.StatusCode = "UVGOF";
                        break;
                    case 5:
                        candidateModel.StatusName = "Từ chối offer";
                        candidateModel.StatusCode = "UVTC";
                        break;
                    case 6:
                        candidateModel.StatusName = "Không đạt";
                        candidateModel.StatusCode = "UVKD";
                        break;
                }

                #endregion

                #region Lấy dữ liệu vị trí truyển dung

                var vacancyId = context.CandidateVacanciesMapping
                    .FirstOrDefault(x => x.CandidateId == candidateModel.CandidateId)?.VacanciesId;

                var vacancyModel = context.Vacancies.Where(x => x.VacanciesId == vacancyId)
                    .Select(y => new VacancyEntityModel()
                    {
                        RecruitmentCampaignId = y.RecruitmentCampaignId,
                        VacanciesId = y.VacanciesId,
                        VacanciesName = y.VacanciesName,
                        PersonInChargeId = y.PersonInChargeId,
                        PlaceOfWork = y.PlaceOfWork,
                        Quantity = y.Quantity,
                        TypeOfWork = y.TypeOfWork,
                        ExperienceId = y.ExperienceId,
                        SalarType = y.SalarType,
                        SalaryFrom = y.SalaryFrom,
                        SalaryTo = y.SalaryTo,
                        Priority = y.Priority,
                        Currency = y.Currency,
                    }).FirstOrDefault();

                if (vacancyModel != null)
                {
                    // nguoi phu trach
                    vacancyModel.PersonInChargeCode = listEmp
                        .FirstOrDefault(x => x.EmployeeId == vacancyModel.PersonInChargeId)?.EmployeeCode;

                    vacancyModel.PersonInChargeName = listEmp
                        .FirstOrDefault(x => x.EmployeeId == vacancyModel.PersonInChargeId)?.EmployeeName;

                    // type of work
                    vacancyModel.TypeOfWorkName = context.Category
                        .FirstOrDefault(x => x.CategoryId == vacancyModel.TypeOfWork)?.CategoryName;

                    // Experience
                    vacancyModel.ExperienceName = context.Category
                        .FirstOrDefault(x => x.CategoryId == vacancyModel.ExperienceId)?.CategoryName;

                    // Priority
                    if (vacancyModel.Priority == 1)
                    {
                        vacancyModel.PriorityName = "Cao";
                    }
                    else if (vacancyModel.Priority == 2)
                    {
                        vacancyModel.PriorityName = "Trung bình";
                    }
                    else if (vacancyModel.Priority == 3)
                    {
                        vacancyModel.PriorityName = "Thấp";
                    }
                }

                #endregion

                #region Lấy dữ liệu chiến dịch tuyển dụng

                var recruitmentCampaign = context.RecruitmentCampaign
                    .Where(x => x.RecruitmentCampaignId == vacancyModel.RecruitmentCampaignId)
                    .Select(y => new RecruitmentCampaignEntityModel()
                    {
                        RecruitmentCampaignId = y.RecruitmentCampaignId,
                        RecruitmentCampaignName = y.RecruitmentCampaignName,
                        StartDate = y.StartDate,
                        EndDateDate = y.EndDateDate,
                        PersonInChargeId = y.PersonInChargeId,
                    }).FirstOrDefault();

                if (recruitmentCampaign != null)
                {
                    // trang thai
                    if (recruitmentCampaign.StartDate.Date > DateTime.Now.Date)
                    {
                        recruitmentCampaign.StatusName = "Mới";
                    }
                    else if (recruitmentCampaign.StartDate.Date <= DateTime.Now.Date && DateTime.Now.Date <= recruitmentCampaign.EndDateDate.Date)
                    {
                        recruitmentCampaign.StatusName = "Đang diễn ra";
                    }
                    else if (recruitmentCampaign.EndDateDate.Date < DateTime.Now.Date)
                    {
                        recruitmentCampaign.StatusName = "Kết thúc";
                    }

                    // nguoi phu trach
                    recruitmentCampaign.PersonInChargeName = listEmp
                        .FirstOrDefault(x => x.EmployeeId == recruitmentCampaign.PersonInChargeId)?.EmployeeName;

                    // Kế hoạch tuyển dụng
                    recruitmentCampaign.RecruitmentQuantity = context.Vacancies
                        .Where(x => x.RecruitmentCampaignId == recruitmentCampaign.RecruitmentCampaignId)
                        .Sum(y => y.Quantity);
                }

                #endregion

                #region Lấy dách file đinh kèm 
                var objectType = "CANDIDATE";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                    .Where(x => x.ObjectId == parameter.CandidateId && x.FolderId == folder.FolderId).Select(y =>
                        new FileInFolderEntityModel
                        {
                            Size = y.Size,
                            ObjectId = y.ObjectId,
                            Active = y.Active,
                            FileExtension = y.FileExtension,
                            FileInFolderId = y.FileInFolderId,
                            FileName = y.FileName,
                            FolderId = y.FolderId,
                            ObjectType = y.ObjectType,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate
                        }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                });

                #endregion

                #region Lấy thông tin ghi chú
                var listNote = new List<NoteEntityModel>();

                var folderUrl = folderCommon.FirstOrDefault(x => x.FolderType == objectType)?.Url;
                var webRootPath = hostingEnvironment.WebRootPath + "\\";
                // list ghi chú 
                listNote = context.Note.Where(x =>
                        x.ObjectId == parameter.CandidateId && x.ObjectType == objectType && x.Active == true)
                    .Select(y => new NoteEntityModel
                    {
                        NoteId = y.NoteId,
                        Description = y.Description,
                        Type = y.Type,
                        ObjectId = y.ObjectId,
                        ObjectType = y.ObjectType,
                        NoteTitle = y.NoteTitle,
                        Active = y.Active,
                        CreatedById = y.CreatedById,
                        CreatedDate = y.CreatedDate,
                        UpdatedById = y.UpdatedById,
                        UpdatedDate = y.UpdatedDate,
                        ResponsibleName = "",
                        ResponsibleAvatar = "",
                        NoteDocList = new List<NoteDocumentEntityModel>()
                    }).ToList();


                if (listNote.Count > 0)
                {
                    var listNoteId = listNote.Select(x => x.NoteId).ToList();
                    var listUser = context.User.ToList();
                    var _listAllEmployee = context.Employee.ToList();
                    var listNoteDocument = context.NoteDocument.Where(x => listNoteId.Contains(x.NoteId)).Select(
                        y => new NoteDocumentEntityModel
                        {
                            DocumentName = y.DocumentName,
                            DocumentSize = y.DocumentSize,
                            DocumentUrl = y.DocumentUrl,
                            CreatedById = y.CreatedById,
                            CreatedDate = y.CreatedDate,
                            UpdatedById = y.UpdatedById,
                            UpdatedDate = y.UpdatedDate,
                            NoteDocumentId = y.NoteDocumentId,
                            NoteId = y.NoteId
                        }
                    ).ToList();

                    var listFileInFolder = context.FileInFolder.Where(x => listNoteId.Contains((Guid)x.ObjectId))
                        .ToList();

                    listFileInFolder.ForEach(item =>
                    {
                        var file = new NoteDocumentEntityModel
                        {
                            DocumentName = item.FileName.Substring(0, item.FileName.LastIndexOf("_")),
                            DocumentSize = item.Size,
                            CreatedById = item.CreatedById,
                            CreatedDate = item.CreatedDate,
                            UpdatedById = item.UpdatedById,
                            UpdatedDate = item.UpdatedDate,
                            NoteDocumentId = item.FileInFolderId,
                            NoteId = (Guid)item.ObjectId
                        };

                        var fileName = $"{item.FileName}.{item.FileExtension}";
                        var folderName = ConvertFolderUrl(folderUrl);

                        file.DocumentUrl = Path.Combine(webRootPath, folderName, fileName);

                        listNoteDocument.Add(file);
                    });

                    listNote.ForEach(item =>
                    {
                        var _user = listUser.FirstOrDefault(x => x.UserId == item.CreatedById);
                        if (_user != null)
                        {
                            var _employee = _listAllEmployee.FirstOrDefault(x => x.EmployeeId == _user.EmployeeId);
                            item.ResponsibleName = _employee.EmployeeName;
                            item.NoteDocList = listNoteDocument.Where(x => x.NoteId == item.NoteId)
                                .OrderBy(z => z.UpdatedDate).ToList();
                        }
                    });

                    // Sắp xếp lại listnote
                    listNote = listNote.OrderByDescending(x => x.CreatedDate).ToList();
                }
                #endregion

                #region File tài liệu hồ sơ
                var listCommonFolders = folderCommon.Where(x => x.ObjectId == parameter.CandidateId && x.FolderType == objectType)
              .Select(y => new FolderEntityModel
              {
                  FolderId = y.FolderId,
                  ParentId = y.ParentId,
                  Name = y.Name,
              }).ToList();

                listCommonFolders.ForEach(item =>
                {
                    item.HasChild = folderCommon.FirstOrDefault(x => x.ParentId == item.FolderId) != null;
                });

                var listCommonFile = context.FileInFolder.Where(x => x.ObjectId == parameter.CandidateId).ToList();
                listFileResult = GetAllFile(folder.FolderId, listCommonFolders, listCommonFile);

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrlDocument = folderCommon.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPath, folderUrlDocument, x.FileFullName);
                });

                listFileResult = listFileResult.OrderBy(x => x.CreatedDate).ToList();

                #endregion

                #region danh sách đánh giá tổng quan
                var certiTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP")
                 ?.CategoryTypeId;

                var listCertificate = context.Category.Where(x => x.CategoryTypeId == certiTypeId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                    }).ToList();


                var listOverviewCandidate = context.OverviewCandidate
                    .Where(x => x.CandidateId == candidate.CandidateId)
                    .Select(y => new OverviewCandidateEntityModel()
                    {
                        OverviewCandidateId = y.OverviewCandidateId,
                        CandidateId = y.CandidateId,
                        Certificate = listCertificate == null || listCertificate.FirstOrDefault(x => x.CategoryId == y.CertificateId) == null ? null : listCertificate.FirstOrDefault(x => x.CategoryId == y.CertificateId).CategoryName,
                        CertificateId = y.CertificateId,
                        EducationAndWorkExpName = y.EducationAndWorkExpName,
                        CertificatePlace = y.CertificatePlace,
                        SpecializedTraining = y.SpecializedTraining,
                        JobDescription = y.JobDescription,
                        ProficiencyLevel = y.ProficiencyLevel,
                        StartDate = y.StartDate,
                        EndDate = y.EndDate,
                        Phone = y.Phone,
                        Type = y.Type,
                    }).ToList();

                #endregion

                #region Danh sách lịch phỏng vấn

                var listInterviewSchedule = context.InterviewSchedule
                    .Where(x => x.CandidateId == candidate.CandidateId)
                    .Select(y => new InterviewScheduleEntityModel()
                    {
                        InterviewScheduleId = y.InterviewScheduleId,
                        CandidateId = y.CandidateId,
                        InterviewTitle = y.InterviewTitle,
                        InterviewDate = y.InterviewDate,
                        InterviewScheduleType = y.InterviewScheduleType,
                        Address = y.Address,
                        CreatedById = y.CreatedById
                    }).ToList();

                listInterviewSchedule.ForEach(item =>
                {
                    item.ListInterviewScheduleMapping = context.InterviewScheduleMapping
                        .Where(x => x.InterviewScheduleId == item.InterviewScheduleId)
                        .Select(y => new InterviewScheduleMappingEntityModel()
                        {
                            InterviewScheduleMappingId = y.InterviewScheduleMappingId,
                            InterviewScheduleId = y.InterviewScheduleId,
                            EmployeeId = y.EmployeeId,
                        }).ToList();

                    item.ListInterviewScheduleMapping.ForEach(emp =>
                    {
                        emp.EmployeeName = listEmp.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId)?.EmployeeName;
                        emp.EmployeeCode = listEmp.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId)?.EmployeeCode;
                    });
                });

                #endregion

                #region danh sách điểm test IQ/EQ

                var listQuiz = context.Quiz.Where(x =>
                        x.CandidateId == candidateModel.CandidateId && x.VacanciesId == vacancyModel.VacanciesId)
                    .Select(y => new QuizEntityModel()
                    {
                        QuizId = y.QuizId,
                        CandidateId = y.CandidateId,
                        VacanciesId = y.VacanciesId,
                        QuizName = y.QuizName,
                        Score = y.Score,
                        Status = y.Status,
                    }).ToList();

                listQuiz.ForEach(item =>
                {
                    if (item.Status == 1)
                    {
                        item.StatusName = "Đạt";
                    }
                    else if (item.Status == 2)
                    {
                        item.StatusName = "Không đạt";
                    }
                });

                #endregion

                #region danh sach danh gia ung vien

                var listCandidateAssessment = context.CandidateAssessment
                    .Where(x => x.CandidateId == candidate.CandidateId && x.VacanciesId == vacancyId)
                    .Select(y => new CandidateAssessmentEntityModel()
                    {
                        CandidateAssessmentId = y.CandidateAssessmentId,
                        CandidateId = y.CandidateId,
                        VacanciesId = y.VacanciesId,
                        OtherReview = y.OtherReview,
                        EmployeeId = y.EmployeeId,
                        Status = y.Status,
                        CreatedDate = y.CreatedDate,
                        CreatedById = y.CreatedById
                    }).ToList();

                var lstUser = context.User.ToList();
                var lstAllDetail = context.CandidateAssessmentDetail.ToList();

                listCandidateAssessment.ForEach(item =>
                {
                    var empId = lstUser.FirstOrDefault(x => x.UserId == item.EmployeeId)?.EmployeeId;
                    item.EmployeeCode = listEmp.FirstOrDefault(x => x.EmployeeId == empId)?.EmployeeCode;
                    item.EmployeeName = listEmp.FirstOrDefault(x => x.EmployeeId == empId)?.EmployeeName;

                    item.CandidateAssessmentDetail = new List<CandidateAssessmentDetailEntityModel>();
                    item.CandidateAssessmentDetail = lstAllDetail.Where(x => x.CandidateAssessmentId == item.CandidateAssessmentId)
                    .Select(detail => new CandidateAssessmentDetailEntityModel()
                    {
                        CandidateAssessmentDetailId = detail.CandidateAssessmentDetailId,
                        CandidateAssessmentId = detail.CandidateAssessmentId,
                        ReviewsSectionId = detail.ReviewsSectionId,
                        Rating = detail.Rating,
                        Review = detail.Review,
                        SortOrder = detail.SortOrder.Value
                    }).ToList();
                });
                listCandidateAssessment = listCandidateAssessment.OrderByDescending(x => x.CreatedDate).ToList();
                #endregion

                #region Người phỏng vấn
                var listEmployeePTTD = new List<EmployeeEntityModel>();
                listEmployeePTTD = listEmp.Where(x => x.IsOverviewer == true).Select(y =>
                         new EmployeeEntityModel
                         {
                             EmployeeId = y.EmployeeId,
                             EmployeeCode = y.EmployeeCode,
                             EmployeeName = y.EmployeeName,
                             EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                             OrganizationId = y.OrganizationId,
                             IsManager = y.IsManager,
                             Active = y.Active,

                         }).ToList();

                listEmployeePTTD.ForEach(item =>
                {
                    item.Phone = context.Contact
                        .FirstOrDefault(x => x.ObjectId == item.EmployeeId && x.ObjectType == "EMP")?.Phone;
                });
                #endregion

                #region Danh sách sesion đánh giá
                var listSessionReview = new List<CategoryEntityModel>();
                var categoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "DMDGUV").CategoryTypeId;
                listSessionReview = context.Category.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                        SortOrder = y.SortOrder
                    }).ToList();
                listSessionReview = listSessionReview.OrderBy(x => x.SortOrder).ToList();
                #endregion


                var isNguoiPhongVan = false;
                var isNVPhuTrach = false;
                var isTruongBoPhan = false;
                //Lấy thông tin người đăng nhập để check quyền
                //Kiểm tra xem người đăng nhập có phải trưởng phòng nhân sự hay không
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetMasterCandidateDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                var loginEmp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (loginEmp == null)
                {
                    return new GetMasterCandidateDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                //Kiểm tra xem có thuộc phòng nhân sự hay không và có phải trưởng phòng nhân sự ?
                var OrganizationCode = context.Organization.FirstOrDefault(x => x.OrganizationId == loginEmp.OrganizationId)?.OrganizationCode;
                var PositionCode = context.Position.FirstOrDefault(x => x.PositionId == loginEmp.PositionId)?.PositionCode;
                if (OrganizationCode != null && OrganizationCode == "HCNS" && PositionCode != null)// && PositionCode == "TP"
                {
                    isTruongBoPhan = true;
                }
                if (loginEmp.EmployeeId == vacancyModel.PersonInChargeId)
                {
                    isNVPhuTrach = true;
                }
                //lấy danh sách người phỏng vấn
                var interViewScheduleId = context.InterviewSchedule.FirstOrDefault(x => x.CandidateId == parameter.CandidateId)?.InterviewScheduleId;
                if (interViewScheduleId != null)
                {
                    var listNguoiPhongVan = context.InterviewScheduleMapping.Where(x => x.InterviewScheduleId == interViewScheduleId).Select(y => y.EmployeeId).ToList();
                    if (listNguoiPhongVan != null && listNguoiPhongVan.Count > 0 && listNguoiPhongVan.Contains(loginEmp.EmployeeId))
                    {
                        isNguoiPhongVan = true;
                    }

                }

                return new GetMasterCandidateDetailResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    CandidateModel = candidateModel,
                    VacancyModel = vacancyModel,
                    RecruitmentCampaignModel = recruitmentCampaign,
                    ListFileInFolder = listFileResult,
                    ListNote = listNote,
                    ListOverviewCandidate = listOverviewCandidate,
                    ListInterviewSchedule = listInterviewSchedule,
                    ListQuiz = listQuiz,
                    ListCandidateAssessment = listCandidateAssessment,
                    ListEmployeeModels = listEmployeePTTD,
                    ListSessionReview = listSessionReview,
                    IsNguoiPhongVan = isNguoiPhongVan,
                    IsNVPhuTrach = isNVPhuTrach,
                    IsTruongBoPhan = isTruongBoPhan,
                    LoginEmp = user.UserId,
                };
            }
            catch (Exception e)
            {
                return new GetMasterCandidateDetailResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteCandidateResult DeleteCandidate(DeleteCandidateParameter parameter)
        {
            try
            {
                var candidate =
                    context.Candidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateId);

                if (candidate == null)
                {
                    return new DeleteCandidateResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Ứng viên không tồn tại trong hệ thống",
                    };
                }



                using (var trans = context.Database.BeginTransaction())
                {
                    var listMapping = context.CandidateVacanciesMapping
                        .Where(x => x.CandidateId == parameter.CandidateId).ToList();

                    if (listMapping.Count > 0)
                    {
                        context.CandidateVacanciesMapping.RemoveRange(listMapping);
                        context.SaveChanges();
                    }

                    var listOverviewCandidate = context.OverviewCandidate
                        .Where(x => x.CandidateId == parameter.CandidateId).ToList();

                    if (listOverviewCandidate.Count > 0)
                    {
                        context.OverviewCandidate.RemoveRange(listOverviewCandidate);
                        context.SaveChanges();
                    }

                    var listInterviewSchedule = context.InterviewSchedule
                        .Where(x => x.CandidateId == parameter.CandidateId && x.VacanciesId == parameter.VacanciesId).ToList();

                    var listInterviewScheduleId = listInterviewSchedule.Select(x => x.InterviewScheduleId).ToList();

                    var listInterviewScheduleMapping = context.InterviewScheduleMapping
                        .Where(x => listInterviewScheduleId.Contains(x.InterviewScheduleId)).ToList();


                    if (listInterviewScheduleMapping.Count > 0)
                    {
                        context.InterviewScheduleMapping.RemoveRange(listInterviewScheduleMapping);
                        context.SaveChanges();
                    }

                    if (listInterviewSchedule.Count > 0)
                    {
                        context.InterviewSchedule.RemoveRange(listInterviewSchedule);
                        context.SaveChanges();
                    }

                    var listQuiz = context.Quiz
                        .Where(x => x.CandidateId == parameter.CandidateId && x.VacanciesId == parameter.VacanciesId).ToList();

                    if (listQuiz.Count > 0)
                    {
                        context.Quiz.RemoveRange(listQuiz);
                        context.SaveChanges();
                    }

                    var listCandidateAssessment = context.CandidateAssessment
                        .Where(x => x.CandidateId == parameter.CandidateId && x.VacanciesId == parameter.VacanciesId).ToList();

                    if (listCandidateAssessment.Count > 0)
                    {
                        context.CandidateAssessment.RemoveRange(listCandidateAssessment);
                        context.SaveChanges();
                    }


                    context.Candidate.Remove(candidate);
                    context.SaveChanges();

                    trans.Commit();

                    return new DeleteCandidateResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteCandidateResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public UpdateCandidateStatusResult UpdateCandidateStatus(UpdateCandidateStatusParameter parameter)
        {
            try
            {
                var candidate =
                    context.Candidate.FirstOrDefault(x => x.CandidateId == parameter.CandidateId);

                if (candidate == null)
                {
                    return new UpdateCandidateStatusResult()
                    {
                        StatusCode = HttpStatusCode.FailedDependency,
                        MessageCode = "Ứng viên không tồn tại trong hệ thống",
                    };
                }

                using (var trans = context.Database.BeginTransaction())
                {
                    candidate.Status = parameter.Status;
                    candidate.UpdatedById = parameter.UserId;
                    candidate.UpdatedDate = DateTime.Now;

                    context.Candidate.Update(candidate);
                    context.SaveChanges();

                    trans.Commit();

                    return new UpdateCandidateStatusResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new UpdateCandidateStatusResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteCandidateAssessmentResult DeleteCandidateAssessment(DeleteCandidateAssessmentParameter parameter)
        {
            try
            {

                using (var trans = context.Database.BeginTransaction())
                {
                    var candidateAssessment = context.CandidateAssessment
                        .FirstOrDefault(x => parameter.CandidateAssessmentId == x.CandidateAssessmentId);

                    if (candidateAssessment != null)
                    {
                        context.CandidateAssessment.Remove(candidateAssessment);
                        // Xóa detail
                        var lstCandidateAssessmentDetail = context.CandidateAssessmentDetail
                        .FirstOrDefault(x => parameter.CandidateAssessmentId == x.CandidateAssessmentId);
                        if (lstCandidateAssessmentDetail != null)
                        {
                            context.CandidateAssessmentDetail.RemoveRange(lstCandidateAssessmentDetail);

                        }
                        context.SaveChanges();
                    }
                    trans.Commit();
                    return new DeleteCandidateAssessmentResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteCandidateAssessmentResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateCandidateAssessmentResult CreateOrUpdateCandidateAssessment(CreateOrUpdateCandidateAssessmentParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {

                    var candidateAssessment = context.CandidateAssessment
                        .FirstOrDefault(x => x.CandidateId == parameter.CandidateAssessment.CandidateId && x.VacanciesId == parameter.CandidateAssessment.VacanciesId &&
                                    x.EmployeeId == parameter.CandidateAssessment.EmployeeId && x.CandidateAssessmentId == parameter.CandidateAssessment.CandidateAssessmentId);
                    var candidateAssessmentId = Guid.NewGuid();

                    // Update
                    if (candidateAssessment != null && parameter.CandidateAssessment.CandidateAssessmentId != Guid.Empty)
                    {
                        candidateAssessmentId = candidateAssessment.CandidateAssessmentId;
                        candidateAssessment.OtherReview = parameter.CandidateAssessment.OtherReview;
                        candidateAssessment.UpdatedDate = DateTime.Now;
                        candidateAssessment.CreatedById = parameter.UserId;
                        candidateAssessment.Status = parameter.CandidateAssessment.Status;

                        context.CandidateAssessment.Update(candidateAssessment);

                        var lstAllDetail = context.CandidateAssessmentDetail.Where(x => x.CandidateAssessmentId == parameter.CandidateAssessment.CandidateAssessmentId).ToList();
                        // Xóa detail
                        context.CandidateAssessmentDetail.RemoveRange(lstAllDetail);
                        context.SaveChanges();
                    }
                    else
                    {
                        var candidateAssessmentNew = new CandidateAssessment()
                        {
                            CandidateAssessmentId = candidateAssessmentId,
                            Active = true,
                            Status = parameter.CandidateAssessment.Status,
                            CandidateId = parameter.CandidateAssessment.CandidateId,
                            EmployeeId = parameter.CandidateAssessment.EmployeeId,
                            VacanciesId = parameter.CandidateAssessment.VacanciesId,
                            CreatedById = parameter.UserId,
                            OtherReview = parameter.CandidateAssessment.OtherReview,
                            CreatedDate = DateTime.Now,
                        };
                        context.CandidateAssessment.Add(candidateAssessmentNew);
                    }
                    // Thêm lại detail
                    parameter.CandidateAssessmentDetail.ForEach(detail =>
                    {
                        var candiDetail = new CandidateAssessmentDetail()
                        {
                            CandidateAssessmentDetailId = Guid.NewGuid(),
                            CandidateAssessmentId = candidateAssessmentId,
                            Rating = detail.Rating,
                            Review = detail.Review,
                            SortOrder = detail.SortOrder,
                            ReviewsSectionId = detail.ReviewsSectionId,
                            CreatedDate = DateTime.Now,
                            CreatedById = parameter.UserId
                        };
                        context.CandidateAssessmentDetail.Add(candiDetail);
                    });
                    context.SaveChanges();
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new CreateOrUpdateCandidateAssessmentResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = e.Message
                    };
                }
                try
                {
                    #region danh sach danh gia ung vien
                    var listCandidateAssessment = context.CandidateAssessment
                            .Where(x => x.CandidateId == parameter.CandidateAssessment.CandidateId && x.VacanciesId == parameter.CandidateAssessment.VacanciesId)
                            .Select(y => new CandidateAssessmentEntityModel()
                            {
                                CandidateAssessmentId = y.CandidateAssessmentId,
                                CandidateId = y.CandidateId,
                                VacanciesId = y.VacanciesId,
                                OtherReview = y.OtherReview,
                                EmployeeId = y.EmployeeId,
                                Status = y.Status,
                                CreatedDate = y.CreatedDate
                            }).ToList();

                    var listEmp = context.Employee.Where(x => x.Active == true && x.IsCustomer != true);
                    var lstUser = context.User.ToList();
                    var lstAllDetailNew = context.CandidateAssessmentDetail.ToList();
                    listCandidateAssessment.ForEach(item =>
                    {
                        var empId = lstUser.FirstOrDefault(x => x.UserId == item.EmployeeId)?.EmployeeId;
                        item.EmployeeCode = listEmp.FirstOrDefault(x => x.EmployeeId == empId)?.EmployeeCode;
                        item.EmployeeName = listEmp.FirstOrDefault(x => x.EmployeeId == empId)?.EmployeeName;

                        item.CandidateAssessmentDetail = new List<CandidateAssessmentDetailEntityModel>();
                        item.CandidateAssessmentDetail = lstAllDetailNew.Where(x => x.CandidateAssessmentId == item.CandidateAssessmentId)
                        .Select(detail => new CandidateAssessmentDetailEntityModel()
                        {
                            CandidateAssessmentDetailId = detail.CandidateAssessmentDetailId,
                            CandidateAssessmentId = detail.CandidateAssessmentId,
                            ReviewsSectionId = detail.ReviewsSectionId,
                            Rating = detail.Rating,
                            Review = detail.Review,
                            //SortOrder = detail.SortOrder
                        }).ToList();
                    });
                    listCandidateAssessment = listCandidateAssessment.OrderByDescending(x => x.CreatedDate).ToList();
                    #endregion

                    return new CreateOrUpdateCandidateAssessmentResult()
                    {
                        ListCandidateAssessment = listCandidateAssessment,
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
                catch (Exception ex)
                {
                    return new CreateOrUpdateCandidateAssessmentResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = ex.Message
                    };
                }
            }
        }

        public CreateOrUpdateCandidateDetailInforResult CreateOrUpdateCandidateDetailInfor(CreateOrUpdateCandidateDetailInforParameter parameter)
        {
            try
            {
                using (var trans = context.Database.BeginTransaction())
                {
                    if (parameter.OverviewCandidate.OverviewCandidateId != Guid.Empty)
                    {
                        var overview = context.OverviewCandidate.FirstOrDefault(x =>
                            x.OverviewCandidateId == parameter.OverviewCandidate.OverviewCandidateId);

                        if (overview == null)
                        {
                            return new CreateOrUpdateCandidateDetailInforResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Dữ liệu không tồn tại trong hệ thống"
                            };
                        }

                        overview.EducationAndWorkExpName = parameter.OverviewCandidate.EducationAndWorkExpName;
                        overview.CertificateId = parameter.OverviewCandidate.CertificateId == null ? Guid.Empty : parameter.OverviewCandidate.CertificateId.Value;
                        overview.CertificatePlace = parameter.OverviewCandidate.CertificatePlace;
                        overview.SpecializedTraining = parameter.OverviewCandidate.SpecializedTraining;
                        overview.JobDescription = parameter.OverviewCandidate.JobDescription;
                        overview.StartDate = parameter.OverviewCandidate.StartDate;
                        overview.EndDate = parameter.OverviewCandidate.EndDate;
                        overview.Phone = parameter.OverviewCandidate.Phone;
                        overview.Type = parameter.OverviewCandidate.Type;
                        overview.ProficiencyLevel = parameter.OverviewCandidate.ProficiencyLevel;
                        overview.UpdatedById = parameter.UserId;
                        overview.UpdatedDate = DateTime.Now;

                        context.OverviewCandidate.Update(overview);
                        context.SaveChanges();

                        trans.Commit();

                        return new CreateOrUpdateCandidateDetailInforResult()
                        {
                            StatusCode = HttpStatusCode.OK,
                            MessageCode = "Success",
                        };

                    }
                    else
                    {
                        var newOverview = new OverviewCandidate
                        {
                            OverviewCandidateId = Guid.NewGuid(),
                            CandidateId = parameter.OverviewCandidate.CandidateId,
                            CertificateId = parameter.OverviewCandidate.CertificateId == null ? Guid.Empty : parameter.OverviewCandidate.CertificateId.Value,
                            EducationAndWorkExpName = parameter.OverviewCandidate.EducationAndWorkExpName,
                            CertificatePlace = parameter.OverviewCandidate.CertificatePlace,
                            SpecializedTraining = parameter.OverviewCandidate.SpecializedTraining,
                            JobDescription = parameter.OverviewCandidate.JobDescription,
                            StartDate = parameter.OverviewCandidate.StartDate,
                            EndDate = parameter.OverviewCandidate.EndDate,
                            Phone = parameter.OverviewCandidate.Phone,
                            Type = parameter.OverviewCandidate.Type,
                            ProficiencyLevel = parameter.OverviewCandidate.ProficiencyLevel,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                        };

                        context.OverviewCandidate.Add(newOverview);
                        context.SaveChanges();

                        trans.Commit();

                        return new CreateOrUpdateCandidateDetailInforResult()
                        {
                            StatusCode = HttpStatusCode.OK,
                            MessageCode = "Success",
                            OverviewCandidateId = newOverview.OverviewCandidateId
                        };
                    }
                }
            }
            catch (Exception e)
            {
                return new CreateOrUpdateCandidateDetailInforResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public UpdateInterviewScheduleResult UpdateInterviewSchedule(UpdateInterviewScheduleParameter parameter)
        {
            try
            {
                var interviewSchedule = context.InterviewSchedule.FirstOrDefault(x =>
                    x.InterviewScheduleId == parameter.InterviewSchedule.InterviewScheduleId);

                if (interviewSchedule == null)
                {
                    return new UpdateInterviewScheduleResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        MessageCode = "Lịch phỏng vấn không tồn tại",
                    };
                }

                using (var trans = context.Database.BeginTransaction())
                {

                    interviewSchedule.InterviewTitle = parameter.InterviewSchedule.InterviewTitle;
                    interviewSchedule.InterviewDate = parameter.InterviewSchedule.InterviewDate;
                    interviewSchedule.Address = parameter.InterviewSchedule.Address;
                    interviewSchedule.InterviewScheduleType = parameter.InterviewSchedule.InterviewScheduleType;
                    interviewSchedule.UpdatedById = parameter.UserId;
                    interviewSchedule.UpdatedDate = DateTime.Now;

                    context.InterviewSchedule.Update(interviewSchedule);
                    context.SaveChanges();

                    trans.Commit();

                    return new UpdateInterviewScheduleResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new UpdateInterviewScheduleResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateQuizResult CreateOrUpdateQuiz(CreateOrUpdateQuizParameter parameter)
        {
            try
            {
                using (var trans = context.Database.BeginTransaction())
                {
                    var quizId = Guid.Empty;

                    if (parameter.QuizModel.QuizId != Guid.Empty)
                    {
                        var quiz = context.Quiz.FirstOrDefault(x => x.QuizId == parameter.QuizModel.QuizId);

                        if (quiz == null)
                        {
                            return new CreateOrUpdateQuizResult()
                            {
                                StatusCode = HttpStatusCode.Forbidden,
                                MessageCode = "Bài test không tồn tại trong hệ thống"
                            };
                        }

                        quiz.QuizName = parameter.QuizModel.QuizName;
                        quiz.Score = parameter.QuizModel.Score;
                        quiz.Status = parameter.QuizModel.Status;
                        quiz.UpdatedById = parameter.UserId;
                        quiz.UpdatedDate = DateTime.Now;

                        context.Quiz.Update(quiz);
                        context.SaveChanges();

                        quizId = quiz.QuizId;
                    }
                    else
                    {
                        var quiz = new Quiz()
                        {
                            QuizId = Guid.NewGuid(),
                            CandidateId = parameter.QuizModel.CandidateId,
                            VacanciesId = parameter.QuizModel.VacanciesId,
                            QuizName = parameter.QuizModel.QuizName,
                            Score = parameter.QuizModel.Score,
                            Status = parameter.QuizModel.Status,
                            CreatedDate = DateTime.Now,
                            CreatedById = parameter.UserId,
                        };

                        context.Quiz.Add(quiz);
                        context.SaveChanges();

                        quizId = quiz.QuizId;
                    }

                    trans.Commit();

                    return new CreateOrUpdateQuizResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                        QuizId = quizId,
                    };
                }
            }
            catch (Exception e)
            {
                return new CreateOrUpdateQuizResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterCauHinhBaoHiemResult GetMasterCauHinhBaoHiem(GetMasterCauHinhBaoHiemParameter parameter)
        {
            try
            {
                var listLoaiDong = GeneralList.GetTrangThais("LoaiDongBaoHiem").ToList();

                var cauHinhBaoHiemModel = new CauHinhBaoHiemModel();
                bool isExists = false;
                var cauHinhBaoHiem = context.CauHinhBaoHiem.FirstOrDefault();

                if (cauHinhBaoHiem != null)
                {
                    cauHinhBaoHiemModel = new CauHinhBaoHiemModel(cauHinhBaoHiem);
                    isExists = true;
                }

                return new GetMasterCauHinhBaoHiemResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    IsExists = isExists,
                    CauHinhBaoHiemModel = cauHinhBaoHiemModel,
                    ListLoaiDong = listLoaiDong,
                };
            }
            catch (Exception e)
            {
                return new GetMasterCauHinhBaoHiemResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateCauHinhBaoHiemResult CreateOrUpdateCauHinhBaoHiem(CreateOrUpdateCauHinhBaoHiemParameter parameter)
        {
            try
            {
                var _cauHinhBaoHiem = parameter.CauHinhBaoHiem;
                using (var trans = context.Database.BeginTransaction())
                {
                    var cauHinhBaoHiemId = 0;
                    var mess = "";

                    //Update
                    if (_cauHinhBaoHiem.CauHinhBaoHiemId != 0 && _cauHinhBaoHiem.CauHinhBaoHiemId != null)
                    {
                        var cauHinhBaoHiem = context.CauHinhBaoHiem
                           .FirstOrDefault(x => x.CauHinhBaoHiemId == _cauHinhBaoHiem.CauHinhBaoHiemId);

                        if (cauHinhBaoHiem == null)
                        {
                            return new CreateOrUpdateCauHinhBaoHiemResult()
                            {
                                StatusCode = HttpStatusCode.NotFound,
                                MessageCode = "Cấu hình bảo hiểm không tồn tại trong hệ thống"
                            };
                        }

                        cauHinhBaoHiem.LoaiDong = _cauHinhBaoHiem.LoaiDong;
                        cauHinhBaoHiem.MucDong = _cauHinhBaoHiem.MucDong;
                        cauHinhBaoHiem.MucDongToiDa = _cauHinhBaoHiem.MucDongToiDa;
                        cauHinhBaoHiem.MucLuongCoSo = _cauHinhBaoHiem.MucLuongCoSo;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhxhcuaNld = _cauHinhBaoHiem.TiLePhanBoMucDongBhxhcuaNld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhxhcuaNsdld = _cauHinhBaoHiem.TiLePhanBoMucDongBhxhcuaNsdld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhytcuaNld = _cauHinhBaoHiem.TiLePhanBoMucDongBhytcuaNld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhytcuaNsdld = _cauHinhBaoHiem.TiLePhanBoMucDongBhytcuaNsdld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhtncuaNld = _cauHinhBaoHiem.TiLePhanBoMucDongBhtncuaNld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhtncuaNsdld = _cauHinhBaoHiem.TiLePhanBoMucDongBhtncuaNsdld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhtnnncuaNld = _cauHinhBaoHiem.TiLePhanBoMucDongBhtnnncuaNld;
                        cauHinhBaoHiem.TiLePhanBoMucDongBhtnnncuaNsdld = _cauHinhBaoHiem.TiLePhanBoMucDongBhtnnncuaNsdld;
                        cauHinhBaoHiem.UpdatedById = parameter.UserId;
                        cauHinhBaoHiem.UpdatedDate = DateTime.Now;

                        context.CauHinhBaoHiem.Update(cauHinhBaoHiem);
                        context.SaveChanges();

                        cauHinhBaoHiemId = cauHinhBaoHiem.CauHinhBaoHiemId;
                        mess = "Cập nhật cấu hình thành công";
                    }
                    //Create
                    else
                    {
                        _cauHinhBaoHiem.CauHinhBaoHiemId = null;
                        var cauHinhBaoHiem = _cauHinhBaoHiem.ToEntity();
                        cauHinhBaoHiem.CreatedById = parameter.UserId;
                        cauHinhBaoHiem.CreatedDate = DateTime.Now;

                        context.CauHinhBaoHiem.Add(cauHinhBaoHiem);
                        context.SaveChanges();

                        cauHinhBaoHiemId = cauHinhBaoHiem.CauHinhBaoHiemId;
                        mess = "Tạo mới cấu hình thành công";
                    }

                    trans.Commit();

                    return new CreateOrUpdateCauHinhBaoHiemResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = mess,
                        CauHinhBaoHiemId = cauHinhBaoHiemId,
                    };
                }
            }
            catch (Exception e)
            {
                return new CreateOrUpdateCauHinhBaoHiemResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateCauHinhBaoHiemLoftCareResult CreateOrUpdateCauHinhBaoHiemLoftCare(CreateOrUpdateCauHinhBaoHiemLoftCareParameter parameter)
        {
            try
            {
                var _cauHinhBaoHiemLoftCare = parameter.CauHinhBaoHiemLoftCare;
                using (var trans = context.Database.BeginTransaction())
                {
                    var mess = "";
                    if (parameter.Type == 1)
                    {
                        //thêm mới/cập nhật Năm cấu hình bảo hiểm LoftCare
                        //Update
                        if (_cauHinhBaoHiemLoftCare.CauHinhBaoHiemLoftCareId != null &&
                            _cauHinhBaoHiemLoftCare.CauHinhBaoHiemLoftCareId != 0)
                        {
                            var cauHinhBaoHiemLoftCare = context.CauHinhBaoHiemLoftCare
                                .FirstOrDefault(x => x.CauHinhBaoHiemLoftCareId == _cauHinhBaoHiemLoftCare.CauHinhBaoHiemLoftCareId);

                            if (cauHinhBaoHiemLoftCare == null)
                            {
                                return new CreateOrUpdateCauHinhBaoHiemLoftCareResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Cấu hình bảo hiểm không tồn tại trên hệ thống"
                                };
                            }

                            cauHinhBaoHiemLoftCare.NamCauHinh = _cauHinhBaoHiemLoftCare.NamCauHinh.Trim();
                            context.CauHinhBaoHiemLoftCare.Update(cauHinhBaoHiemLoftCare);
                            context.SaveChanges();

                            mess = "Cập nhật Năm cấu hình bảo hiểm thành công";
                        }
                        //Create
                        else
                        {
                            var cauHinhBaoHiemLoftCare = _cauHinhBaoHiemLoftCare.ToEntity();
                            context.CauHinhBaoHiemLoftCare.Add(cauHinhBaoHiemLoftCare);
                            context.SaveChanges();

                            mess = "Thêm mới Năm cấu hình bảo hiểm thành công";
                        }
                    }

                    if (parameter.Type == 2)
                    {
                        //thêm mới/cập nhật Nhóm bảo hiểm LoftCare
                        var _nhomBaoHiemLoftCare = _cauHinhBaoHiemLoftCare.NhomBaoHiemLoftCare;
                        //Update
                        if (_nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId != null &&
                            _nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId != 0)
                        {
                            var nhomBaoHiemLoftCare = context.NhomBaoHiemLoftCare
                                .FirstOrDefault(x => x.NhomBaoHiemLoftCareId == _nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId);

                            if (nhomBaoHiemLoftCare == null)
                            {
                                return new CreateOrUpdateCauHinhBaoHiemLoftCareResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Nhóm bảo hiểm không tồn tại trên hệ thống"
                                };
                            }

                            nhomBaoHiemLoftCare.TenNhom = _nhomBaoHiemLoftCare.TenNhom.Trim();
                            context.NhomBaoHiemLoftCare.Update(nhomBaoHiemLoftCare);
                            context.SaveChanges();

                            #region Chức vụ
                            //Xóa cấu hình chức vụ cũ
                            var _listChucVu = context.ChucVuBaoHiemLoftCare
                                .Where(x => x.NhomBaoHiemLoftCareId == nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId)
                                .ToList();
                            context.ChucVuBaoHiemLoftCare.RemoveRange(_listChucVu);
                            context.SaveChanges();

                            //Thêm cấu hình chức vụ mới
                            var listChucVu = new List<ChucVuBaoHiemLoftCare>();
                            _nhomBaoHiemLoftCare.ListChucVuBaoHiemLoftCare.ForEach(item =>
                            {
                                item.ChucVuBaoHiemLoftCareId = null;
                                item.NhomBaoHiemLoftCareId = nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId;
                                listChucVu.Add(item.ToEntity());
                            });
                            context.ChucVuBaoHiemLoftCare.AddRange(listChucVu);
                            context.SaveChanges();
                            #endregion

                            mess = "Cập nhật Nhóm bảo hiểm thành công";
                        }
                        //Create
                        else
                        {
                            var nhomBaoHiemLoftCare = _cauHinhBaoHiemLoftCare.NhomBaoHiemLoftCare.ToEntity();
                            nhomBaoHiemLoftCare.CreatedDate = DateTime.Now;
                            nhomBaoHiemLoftCare.CreatedById = parameter.UserId;
                            context.NhomBaoHiemLoftCare.Add(nhomBaoHiemLoftCare);
                            context.SaveChanges();

                            //Thêm cấu hình chức vụ mới
                            var listChucVu = new List<ChucVuBaoHiemLoftCare>();
                            _nhomBaoHiemLoftCare.ListChucVuBaoHiemLoftCare.ForEach(item =>
                            {
                                item.NhomBaoHiemLoftCareId = nhomBaoHiemLoftCare.NhomBaoHiemLoftCareId;
                                listChucVu.Add(item.ToEntity());
                            });
                            context.ChucVuBaoHiemLoftCare.AddRange(listChucVu);
                            context.SaveChanges();

                            mess = "Thêm mới Nhóm bảo hiểm thành công";
                        }
                    }

                    if (parameter.Type == 3)
                    {
                        //thêm mới/cập nhật Quyền lợi bảo hiểm LoftCare
                        var _quyenLoiBaoHiemLoftCare = _cauHinhBaoHiemLoftCare.QuyenLoiBaoHiemLoftCare;
                        //Update
                        if (_quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId != null &&
                            _quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId != 0)
                        {
                            var quyenLoiBaoHiemLoftCare = context.QuyenLoiBaoHiemLoftCare
                                .FirstOrDefault(x => x.QuyenLoiBaoHiemLoftCareId == _quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId);

                            if (quyenLoiBaoHiemLoftCare == null)
                            {
                                return new CreateOrUpdateCauHinhBaoHiemLoftCareResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Quyền lợi bảo hiểm không tồn tại trên hệ thống"
                                };
                            }

                            quyenLoiBaoHiemLoftCare.TenQuyenLoi = _quyenLoiBaoHiemLoftCare.TenQuyenLoi.Trim();
                            context.QuyenLoiBaoHiemLoftCare.Update(quyenLoiBaoHiemLoftCare);
                            context.SaveChanges();

                            #region Mức hưởng

                            //Xóa cấu hình mức hưởng cũ
                            var _listMucHuong = context.MucHuongBaoHiemLoftCare
                                .Where(x => x.QuyenLoiBaoHiemLoftCareId == quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId)
                                .ToList();
                            context.MucHuongBaoHiemLoftCare.RemoveRange(_listMucHuong);
                            context.SaveChanges();

                            //Thêm cấu hình mức hưởng mới
                            var listMucHuong = new List<MucHuongBaoHiemLoftCare>();
                            _quyenLoiBaoHiemLoftCare.ListMucHuongBaoHiemLoftCare.ForEach(item =>
                            {
                                item.Id = null;
                                item.QuyenLoiBaoHiemLoftCareId = quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId;
                                listMucHuong.Add(item.ToEntity());
                            });
                            context.MucHuongBaoHiemLoftCare.AddRange(listMucHuong);
                            context.SaveChanges();

                            #endregion

                            mess = "Cập nhật Quyền lợi bảo hiểm thành công";
                        }
                        //Create
                        else
                        {
                            var quyenLoiBaoHiemLoftCare = _cauHinhBaoHiemLoftCare.QuyenLoiBaoHiemLoftCare.ToEntity();
                            quyenLoiBaoHiemLoftCare.CreatedDate = DateTime.Now;
                            quyenLoiBaoHiemLoftCare.CreatedById = parameter.UserId;
                            context.QuyenLoiBaoHiemLoftCare.Add(quyenLoiBaoHiemLoftCare);
                            context.SaveChanges();

                            //Thêm cấu hình mức hưởng mới
                            var listMucHuong = new List<MucHuongBaoHiemLoftCare>();
                            _quyenLoiBaoHiemLoftCare.ListMucHuongBaoHiemLoftCare.ForEach(item =>
                            {
                                item.QuyenLoiBaoHiemLoftCareId = quyenLoiBaoHiemLoftCare.QuyenLoiBaoHiemLoftCareId;
                                listMucHuong.Add(item.ToEntity());
                            });
                            context.MucHuongBaoHiemLoftCare.AddRange(listMucHuong);
                            context.SaveChanges();

                            mess = "Thêm mới Quyền lợi bảo hiểm thành công";
                        }
                    }

                    trans.Commit();

                    return new CreateOrUpdateCauHinhBaoHiemLoftCareResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = mess,
                        //CauHinhBaoHiemLoftCareId = _cauHinhBaoHiemLoftCare.CauHinhBaoHiemLoftCareId.Value
                    };
                }
            }
            catch (Exception e)
            {
                return new CreateOrUpdateCauHinhBaoHiemLoftCareResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteCauHinhBaoHiemLoftCareResult DeleteCauHinhBaoHiemLoftCare(DeleteCauHinhBaoHiemLoftCareParameter parameter)
        {
            try
            {
                using (var trans = context.Database.BeginTransaction())
                {
                    if (parameter.Type == 1)
                    {
                        //Xóa Năm cấu hình bảo hiểm LoftCare
                        var objDelete = context.CauHinhBaoHiemLoftCare.FirstOrDefault(x =>
                                                x.CauHinhBaoHiemLoftCareId == parameter.Id);

                        if (objDelete == null)
                        {
                            return new DeleteCauHinhBaoHiemLoftCareResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Dữ liệu không có trong hệ thống, xóa thất bại.",
                            };
                        }

                        var listNhomBaoHiemLoftCare = context.NhomBaoHiemLoftCare
                            .Where(x => x.CauHinhBaoHiemLoftCareId == objDelete.CauHinhBaoHiemLoftCareId)
                            .ToList();
                        var listNhomBaoHiemLoftCareId = listNhomBaoHiemLoftCare.Select(x => x.NhomBaoHiemLoftCareId).ToList();

                        var listChucVu = context.ChucVuBaoHiemLoftCare
                            .Where(x => listNhomBaoHiemLoftCareId.Contains((int)x.NhomBaoHiemLoftCareId))
                            .ToList();

                        var listQuyenLoiBaoHiemLoftCare = context.QuyenLoiBaoHiemLoftCare
                            .Where(x => listNhomBaoHiemLoftCareId.Contains((int)x.NhomBaoHiemLoftCareId))
                            .ToList();
                        var listQuyenLoiBaoHiemLoftCareId = listQuyenLoiBaoHiemLoftCare.Select(x => x.QuyenLoiBaoHiemLoftCareId).ToList();

                        var listMucHuong = context.MucHuongBaoHiemLoftCare
                            .Where(x => listQuyenLoiBaoHiemLoftCareId.Contains((int)x.QuyenLoiBaoHiemLoftCareId))
                            .ToList();

                        context.CauHinhBaoHiemLoftCare.Remove(objDelete);
                        context.NhomBaoHiemLoftCare.RemoveRange(listNhomBaoHiemLoftCare);
                        context.ChucVuBaoHiemLoftCare.RemoveRange(listChucVu);
                        context.QuyenLoiBaoHiemLoftCare.RemoveRange(listQuyenLoiBaoHiemLoftCare);
                        context.MucHuongBaoHiemLoftCare.RemoveRange(listMucHuong);
                        context.SaveChanges();
                    }

                    if (parameter.Type == 2)
                    {
                        //Xóa Nhóm bảo hiểm LoftCare
                        var objDelete = context.NhomBaoHiemLoftCare.FirstOrDefault(x =>
                                                x.NhomBaoHiemLoftCareId == parameter.Id);

                        if (objDelete == null)
                        {
                            return new DeleteCauHinhBaoHiemLoftCareResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Dữ liệu không có trong hệ thống, xóa thất bại.",
                            };
                        }

                        var listChucVu = context.ChucVuBaoHiemLoftCare
                            .Where(x => x.NhomBaoHiemLoftCareId == objDelete.NhomBaoHiemLoftCareId)
                            .ToList();

                        var listQuyenLoiBaoHiemLoftCare = context.QuyenLoiBaoHiemLoftCare
                            .Where(x => x.NhomBaoHiemLoftCareId == objDelete.NhomBaoHiemLoftCareId)
                            .ToList();
                        var listQuyenLoiBaoHiemLoftCareId = listQuyenLoiBaoHiemLoftCare.Select(x => x.QuyenLoiBaoHiemLoftCareId).ToList();

                        var listMucHuong = context.MucHuongBaoHiemLoftCare
                            .Where(x => listQuyenLoiBaoHiemLoftCareId.Contains((int)x.QuyenLoiBaoHiemLoftCareId))
                            .ToList();

                        context.NhomBaoHiemLoftCare.Remove(objDelete);
                        context.ChucVuBaoHiemLoftCare.RemoveRange(listChucVu);
                        context.QuyenLoiBaoHiemLoftCare.RemoveRange(listQuyenLoiBaoHiemLoftCare);
                        context.MucHuongBaoHiemLoftCare.RemoveRange(listMucHuong);
                        context.SaveChanges();
                    }

                    if (parameter.Type == 3)
                    {
                        //Xóa Quyền lợi bảo hiểm LoftCare
                        var objDelete = context.QuyenLoiBaoHiemLoftCare.FirstOrDefault(x =>
                                                x.QuyenLoiBaoHiemLoftCareId == parameter.Id);

                        if (objDelete == null)
                        {
                            return new DeleteCauHinhBaoHiemLoftCareResult()
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Dữ liệu không có trong hệ thống, xóa thất bại.",
                            };
                        }

                        var listMucHuong = context.MucHuongBaoHiemLoftCare
                            .Where(x => x.QuyenLoiBaoHiemLoftCareId == objDelete.QuyenLoiBaoHiemLoftCareId)
                            .ToList();

                        context.QuyenLoiBaoHiemLoftCare.Remove(objDelete);
                        context.MucHuongBaoHiemLoftCare.RemoveRange(listMucHuong);
                        context.SaveChanges();
                    }

                    trans.Commit();

                    return new DeleteCauHinhBaoHiemLoftCareResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa thành công",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteCauHinhBaoHiemLoftCareResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetCauHinhBaoHiemLoftCareByIdResult GetCauHinhBaoHiemLoftCareById(GetCauHinhBaoHiemLoftCareByIdParameter parameter)
        {
            try
            {
                var listPosition = context.Position
                    .Select(y => new PositionModel
                    {
                        PositionId = y.PositionId,
                        PositionCode = y.PositionCode,
                        PositionName = y.PositionName
                    }).ToList();
                var listDonVi = GeneralList.GetTrangThais("DonViBaoHiemLoft").ToList();
                var listDoiTuong = GeneralList.GetTrangThais("DoiTuongBaoHiemLoft").ToList();

                var cauHinhBaoHiemModel = new CauHinhBaoHiemModel();
                bool isExists = false;
                var cauHinhBaoHiem = context.CauHinhBaoHiem.FirstOrDefault();

                if (cauHinhBaoHiem != null)
                {
                    cauHinhBaoHiemModel = new CauHinhBaoHiemModel(cauHinhBaoHiem);
                    isExists = true;
                }

                var listCauHinhBaoHiemLoftCares = context.CauHinhBaoHiemLoftCare
                    .Select(y => new CauHinhBaoHiemLoftCareModel(y))
                    .OrderByDescending(z => z.NamCauHinh)
                    .ToList();

                var listNhomBaoHiemLoftCare = context.NhomBaoHiemLoftCare.ToList();
                var listQuyenLoiBaoHiemLoftCare = context.QuyenLoiBaoHiemLoftCare.ToList();
                var listChucVuBaoHiemLoftCare = context.ChucVuBaoHiemLoftCare.ToList();
                var listMucHuongBaoHiemLoftCare = context.MucHuongBaoHiemLoftCare.ToList();

                listCauHinhBaoHiemLoftCares.ForEach(item =>
                {
                    var _listNhomBaoHiemLoftCare = listNhomBaoHiemLoftCare
                            .Where(x => x.CauHinhBaoHiemLoftCareId == item.CauHinhBaoHiemLoftCareId)
                            .ToList();
                    var _listNhomBaoHiemLoftCareId = listNhomBaoHiemLoftCare.Select(x => x.NhomBaoHiemLoftCareId).ToList();

                    item.ListNhomBaoHiemLoftCare = _listNhomBaoHiemLoftCare
                    .Select(y => new NhomBaoHiemLoftCareModel(y)).ToList();

                    item.ListNhomBaoHiemLoftCare.ForEach(item2 =>
                    {
                        item2.ListChucVuBaoHiemLoftCare = listChucVuBaoHiemLoftCare
                        .Where(x => x.NhomBaoHiemLoftCareId == item2.NhomBaoHiemLoftCareId)
                        .Select(y => new ChucVuBaoHiemLoftCareModel(y))
                        .OrderBy(z => z.SoNamKinhNghiem).ToList();
                    });

                    var _listQuyenLoiBaoHiemLoftCare = listQuyenLoiBaoHiemLoftCare
                    .Where(x => _listNhomBaoHiemLoftCareId.Contains((int)x.NhomBaoHiemLoftCareId))
                    .ToList();
                    var _listQuyenLoiBaoHiemLoftCareId = listQuyenLoiBaoHiemLoftCare.Select(x => x.QuyenLoiBaoHiemLoftCareId).ToList();

                    item.ListQuyenLoiBaoHiemLoftCare = _listQuyenLoiBaoHiemLoftCare
                    .Select(y => new QuyenLoiBaoHiemLoftCareModel(y)).ToList();

                    item.ListQuyenLoiBaoHiemLoftCare.ForEach(item3 =>
                    {
                        item3.ListMucHuongBaoHiemLoftCare = listMucHuongBaoHiemLoftCare
                        .Where(x => x.QuyenLoiBaoHiemLoftCareId == item3.QuyenLoiBaoHiemLoftCareId)
                        .Select(y => new MucHuongBaoHiemLoftCareModel(y))
                        .OrderBy(z => z.DoiTuongHuong).ToList();
                    });

                });

                return new GetCauHinhBaoHiemLoftCareByIdResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    IsExists = isExists,
                    ListCauHinhBaoHiemLoftCare = listCauHinhBaoHiemLoftCares,
                    ListPosition = listPosition,
                    ListDonVi = listDonVi,
                    ListDoiTuong = listDoiTuong
                };
            }
            catch (Exception e)
            {
                return new GetCauHinhBaoHiemLoftCareByIdResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetCauHinhBaoHiemByIdResult GetCauHinhBaoHiemById(GetCauHinhBaoHiemByIdParameter parameter)
        {
            try
            {
                var cauHinhBaoHiem = new CauHinhBaoHiemModel();

                var _cauHinhBaoHiem = context.CauHinhBaoHiem
                    .FirstOrDefault(x => x.CauHinhBaoHiemId == parameter.Id);
                if (_cauHinhBaoHiem == null)
                {
                    return new GetCauHinhBaoHiemByIdResult()
                    {
                        StatusCode = HttpStatusCode.NotFound,
                        MessageCode = "Cấu hình bảo hiểm không tồn tại trên hệ thống"
                    };
                }

                cauHinhBaoHiem = new CauHinhBaoHiemModel(_cauHinhBaoHiem);

                return new GetCauHinhBaoHiemByIdResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    CauHinhBaoHiem = cauHinhBaoHiem
                };
            }
            catch (Exception e)
            {
                return new GetCauHinhBaoHiemByIdResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteCandidateDetailInforResult DeleteCandidateDetailInfor(DeleteCandidateDetailInforParameter parameter)
        {
            try
            {
                using (var trans = context.Database.BeginTransaction())
                {
                    var overview = context.OverviewCandidate.FirstOrDefault(x =>
                        x.OverviewCandidateId == parameter.OverviewCandidateId);

                    if (overview == null)
                    {
                        return new DeleteCandidateDetailInforResult()
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Dữ liệu không có trong hệ thống, xóa thất bại.",
                        };
                    }

                    context.OverviewCandidate.Remove(overview);
                    context.SaveChanges();

                    trans.Commit();

                    return new DeleteCandidateDetailInforResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteCandidateDetailInforResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteInterviewScheduleResult DeleteInterviewSchedule(DeleteInterviewScheduleParameter parameter)
        {
            try
            {
                var interviewSchedule = context.InterviewSchedule.FirstOrDefault(x =>
                    x.InterviewScheduleId == parameter.InterviewScheduleId);

                if (interviewSchedule == null)
                {
                    return new DeleteInterviewScheduleResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        MessageCode = "Lịch phỏng vấn không tồn tại",
                    };
                }

                // Check xem có đánh giá cho Ứng viên chưa
                var candidateAss = context.CandidateAssessment.FirstOrDefault(x => x.CandidateId == interviewSchedule.CandidateId);
                if (interviewSchedule != null)
                {
                    return new DeleteInterviewScheduleResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        MessageCode = "Đã tồn tại đánh giá của ứng viên. Không thể xóa!",
                    };
                }

                using (var trans = context.Database.BeginTransaction())
                {
                    context.InterviewSchedule.Remove(interviewSchedule);
                    context.SaveChanges();

                    // Xóa mapping
                    var lstMapping = context.InterviewScheduleMapping.Where(x => x.InterviewScheduleId == parameter.InterviewScheduleId);
                    if (lstMapping != null)
                    {
                        context.InterviewScheduleMapping.RemoveRange(lstMapping);
                        context.SaveChanges();
                    }
                    trans.Commit();

                    return new DeleteInterviewScheduleResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteInterviewScheduleResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public DeleteQuizResult DeleteQuiz(DeleteQuizParameter parameter)
        {
            try
            {
                var quiz = context.Quiz.FirstOrDefault(x => x.QuizId == parameter.QuizId);

                if (quiz == null)
                {
                    return new DeleteQuizResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        MessageCode = "Bài test không tồn tại trong hệ thống"
                    };
                }

                using (var trans = context.Database.BeginTransaction())
                {

                    context.Quiz.Remove(quiz);
                    context.SaveChanges();

                    trans.Commit();

                    return new DeleteQuizResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                    };
                }
            }
            catch (Exception e)
            {
                return new DeleteQuizResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterSearchCandidateResult GetMasterSearchCandidate(GetMasterSearchCandidateParameter parameter)
        {
            try
            {
                // ds kenh tuyen dung
                var categoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")
                    ?.CategoryTypeId;
                var listCategoty = context.Category.Where(x => x.CategoryTypeId == categoryTypeId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName,
                    }).ToList();

                // ds chien dich
                var recruitmentCampaign = context.RecruitmentCampaign
                    .Select(x => new RecruitmentCampaignEntityModel()
                    {
                        RecruitmentCampaignId = x.RecruitmentCampaignId,
                        RecruitmentCampaignName = x.RecruitmentCampaignName,
                    }).ToList();

                // ds vi tri
                var listVacancies = context.Vacancies.Select(x => new VacancyEntityModel()
                {
                    RecruitmentCampaignId = x.RecruitmentCampaignId,
                    VacanciesId = x.VacanciesId,
                    VacanciesName = x.VacanciesName,
                }).ToList();



                return new GetMasterSearchCandidateResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListRecruitmentCampaign = recruitmentCampaign,
                    ListRecruitmentChannel = listCategoty,
                    ListVacancies = listVacancies,

                };
            }
            catch (Exception e)
            {
                return new GetMasterSearchCandidateResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public SearchCandidateResult SearchCandidate(SearchCandidateParameter parameter)
        {
            try
            {
                //common
                var listEmp = context.Employee.Where(x => x.IsCustomer != true).ToList();
                var categoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")
                          ?.CategoryTypeId;
                var listCategory = context.Category.Where(x => x.CategoryTypeId == categoryTypeId).ToList();
                var listVacancies = context.Vacancies.ToList();
                var listCandidateVacanciesMapping = context.CandidateVacanciesMapping.ToList();
                var listRecruitmentCampaign = context.RecruitmentCampaign.ToList();
                var lstAllContact = context.Contact.ToList();

                #region Lay ds ung vien

                var listCandidate = context.Candidate.Where(x => x.Status != 7).Select(x => new CandidateEntityModel()
                {
                    CandidateId = x.CandidateId,
                    FullName = x.FullName,
                    StatusId = x.Status,
                    ApplicationDate = x.ApplicationDate,
                    Email = x.Email,
                    Phone = x.Phone,
                    RecruitmentChannel = x.RecruitmentChannelId,
                    DateOfBirth = x.DateOfBirth,
                    Sex = x.Sex,
                    Address = x.Address,
                    CreatedById = x.CreatedById,
                }).ToList();

                listCandidate.ForEach(item =>
                {
                    item.VacanciesId = listCandidateVacanciesMapping
                        .FirstOrDefault(x => x.CandidateId == item.CandidateId)?.VacanciesId;

                    var vacancy = listVacancies.FirstOrDefault(x => x.VacanciesId == item.VacanciesId);

                    if (vacancy != null)
                    {
                        item.VacanciesName = vacancy.VacanciesName;

                        var recruitmentCampaign = listRecruitmentCampaign.FirstOrDefault(x =>
                            x.RecruitmentCampaignId == vacancy.RecruitmentCampaignId);
                        if (recruitmentCampaign != null)
                        {
                            item.RecruitmentCampaignId = recruitmentCampaign.RecruitmentCampaignId;
                            item.RecruitmentCampaignName = recruitmentCampaign.RecruitmentCampaignName;
                        }
                        // Người phụ trách
                        var empDetail = listEmp.FirstOrDefault(x => x.EmployeeId == vacancy.PersonInChargeId);
                        if (empDetail != null)
                        {
                            item.PersonInChargeName = listEmp.FirstOrDefault(x => x.EmployeeId == vacancy.PersonInChargeId).EmployeeName;
                            item.PersonInChargePhone = lstAllContact.FirstOrDefault(x => x.ObjectId == empDetail.EmployeeId && x.ObjectType == "EMP")?.Phone;
                        }
                        // Địa điểm làm việc
                        item.PlaceOfWork = vacancy.PlaceOfWork;
                    }

                    //Kenh tuyen dung
                    item.RecruitmentChannelName = listCategory
                        .FirstOrDefault(x => x.CategoryId == item.RecruitmentChannel)?.CategoryName;

                    //Kenh tuyen dung
                    item.RecruitmentChannelCode = listCategory
                        .FirstOrDefault(x => x.CategoryId == item.RecruitmentChannel)?.CategoryCode;

                    // trang thai
                    switch (item.StatusId)
                    {
                        case 1:
                            item.StatusName = "Mới";
                            item.StatusCode = "UVMOI";
                            break;
                        case 2:
                            item.StatusName = "Hẹn phỏng vấn";
                            item.StatusCode = "UVHPV";
                            break;
                        case 3:
                            item.StatusName = "Đạt phỏng vấn";
                            item.StatusCode = "UVDPV";
                            break;
                        case 4:
                            item.StatusName = "Gửi offer";
                            item.StatusCode = "UVGOF";
                            break;
                        case 5:
                            item.StatusName = "Từ chối offer";
                            item.StatusCode = "UVTC";
                            break;
                        case 6:
                            item.StatusName = "Không đạt";
                            item.StatusCode = "UVKD";
                            break;
                    }
                });

                #endregion

                #region Bo loc

                // ten
                if (parameter.FullName != null)
                {
                    listCandidate = listCandidate.Where(x => x.FullName.Contains(parameter.FullName)).ToList();
                }

                // chien dich
                if (parameter.ListRecruitmentCampaignId != null && parameter.ListRecruitmentCampaignId.Count > 0)
                {
                    listCandidate = listCandidate
                        .Where(x => x.RecruitmentCampaignId != null && parameter.ListRecruitmentCampaignId.Contains((Guid)x.RecruitmentCampaignId))
                        .ToList();
                }

                // Vi tri
                if (parameter.ListVacanciesId != null && parameter.ListVacanciesId.Count > 0)
                {
                    listCandidate = listCandidate
                        .Where(x => parameter.ListVacanciesId.Contains(x.VacanciesId))
                        .ToList();
                }

                // Ngay ung tuyen
                if (parameter.ApplicationDateFrom != null && parameter.ApplicationDateTo == null)
                {
                    listCandidate = listCandidate
                        .Where(x => x.ApplicationDate != null && parameter.ApplicationDateFrom.Value.Date <= x.ApplicationDate.Value.Date)
                        .ToList();
                }

                if (parameter.ApplicationDateFrom != null && parameter.ApplicationDateTo != null)
                {
                    listCandidate = listCandidate
                        .Where(x => x.ApplicationDate != null &&
                                    parameter.ApplicationDateFrom.Value.Date <= x.ApplicationDate.Value.Date &&
                                    x.ApplicationDate.Value.Date <= parameter.ApplicationDateTo.Value.Date).ToList();
                }

                if (parameter.ApplicationDateFrom == null && parameter.ApplicationDateTo != null)
                {
                    listCandidate = listCandidate
                        .Where(x => x.ApplicationDate != null &&
                                    x.ApplicationDate.Value.Date <= parameter.ApplicationDateTo.Value.Date).ToList();
                }

                // email
                if (parameter.Email != null && parameter.Email != "")
                {
                    listCandidate = listCandidate.Where(x => x.Email != null && x.Email.Contains(parameter.Email)).ToList();
                }

                // phone
                if (parameter.Phone != null && parameter.Phone != "")
                {
                    listCandidate = listCandidate.Where(x => x.Phone != null && x.Phone.Contains(parameter.Phone)).ToList();
                }

                // kenh tuyen dung
                if (parameter.ListRecruitmentChannelId != null && parameter.ListRecruitmentChannelId.Count > 0)
                {
                    listCandidate = listCandidate
                        .Where(x => parameter.ListRecruitmentChannelId.Contains(x.RecruitmentChannel))
                        .ToList();
                }

                // trang thai
                if (parameter.ListStatus != null && parameter.ListStatus.Count > 0)
                {
                    listCandidate = listCandidate
                        .Where(x => parameter.ListStatus.Contains(x.StatusId))
                        .ToList();
                }

                #endregion

                listCandidate = listCandidate.OrderBy(x => x.StatusId).ToList();
                var listEmployeeResult = new List<EmployeeEntityModel>();
                listEmployeeResult = listEmp.Where(x => x.IsOverviewer == true).Select(y =>
                     new EmployeeEntityModel
                     {
                         EmployeeId = y.EmployeeId,
                         EmployeeName = y.EmployeeName,
                         EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                         Active = y.Active,
                     }).ToList();

                listEmployeeResult.ForEach(emp =>
                {
                    // lấy email của người PV
                    emp.Email = lstAllContact.FirstOrDefault(c => c.ObjectId == emp.EmployeeId && c.ObjectType == "EMP")?.Email;

                });

                var isManagerOfHR = false;
                var isGD = false;
                var isNguoiPhuTrach = false;

                //Kiểm tra xem người đăng nhập có phải trưởng phòng nhân sự hay không
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new SearchCandidateResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                var loginEmp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (loginEmp == null)
                {
                    return new SearchCandidateResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                    };
                }
                //Kiểm tra xem có thuộc phòng nhân sự hay không và có phải trưởng phòng nhân sự ?
                var Organization = context.Organization.FirstOrDefault(x => x.OrganizationId == loginEmp.OrganizationId);
                var PositionCode = context.Position.FirstOrDefault(x => x.PositionId == loginEmp.PositionId)?.PositionCode;
                if (Organization != null && Organization.IsHr == true && PositionCode != null && PositionCode == "TP")
                {
                    isManagerOfHR = true;
                }
                //Kiểm tra xem có phải giám đốc hay không
                if (PositionCode == "GD")
                {
                    isGD = true;
                }
                //Kiểm tra xem có phải người phụ trách vị trí tuyển dụng
                var listNguoiPhuTrach = context.Vacancies.Select(x => x.PersonInChargeId).ToList();
                if (listNguoiPhuTrach.Contains(loginEmp.EmployeeId))
                {
                    isNguoiPhuTrach = true;
                }

                //Nếu không phải trưởng phòng hành chính nhân sự hoặc nhân viên phụ trách vị trí tuyển dụng
                if (!isNguoiPhuTrach && !isManagerOfHR)
                {
                    var listLichPhongVanMapping = context.InterviewScheduleMapping.Where(x => x.EmployeeId == loginEmp.EmployeeId).Select(y => y.InterviewScheduleId).ToList();
                    //Nếu là người phỏng vấn
                    if (listLichPhongVanMapping.Count > 0 && listLichPhongVanMapping != null)
                    {
                        var listLichPhongVan = context.InterviewSchedule.Where(x => listLichPhongVanMapping.Contains(x.InterviewScheduleId)).Select(o => o.CandidateId).ToList();
                        //Lọc ra những ứng viên theo người phỏng vấn
                        listCandidate = listCandidate.Where(x => listLichPhongVan.Contains(x.CandidateId)).ToList();
                    }
                    else if ((listLichPhongVanMapping.Count == 0 || listLichPhongVanMapping == null) && !isGD)
                    //Nếu không là người phỏng vấn và là GD và trưởng phòng HCNS thì list ứng viên là 0
                    {
                        listCandidate.Clear();
                    }
                }

                return new SearchCandidateResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListCandidate = listCandidate,
                    ListAllEmployee = listEmployeeResult,
                };
            }
            catch (Exception e)
            {
                return new SearchCandidateResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public SendEmailInterviewResult SendEmailInterview(SendEmailInterviewParameter parameter)
        {
            var configEntity = context.SystemParameter.ToList();
            try
            {
                List<string> path = new List<string>();
                var folder = context.Folder.FirstOrDefault(x => x.Active == true && x.FolderType == "CANDIDATE");
                if (folder == null)
                {
                    return new SendEmailInterviewResult()
                    {
                        Status = false,
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = "Chưa có thư mục để lưu. Bạn phải cấu hình thư mục."
                    };
                }

                parameter.EmailInterview.ListCandidate.ForEach(can =>
                {
                    var listInvalidEmail = new List<string>();
                    var listEmailSendTo = new List<string>();
                    var listSendEmail = new List<string>();
                    var content = ReplaceTokenForContent(context, can, parameter.EmailInterview.SendContent, configEntity, parameter.UserId,
                        parameter.EmailInterview.PersonInChagerName, parameter.EmailInterview.PersonInChagerPhone, parameter.EmailInterview.VancaciesName, parameter.EmailInterview.WorkPlace);

                    if (!string.IsNullOrEmpty(can.Email))
                    {
                        if (ValidateEmailAddress(can.Email.Trim()))
                        {
                            listEmailSendTo.Add(can.Email.Trim());
                        }
                        else
                        {
                            listInvalidEmail.Add(can.Email.Trim());
                        }
                    }

                    if (listEmailSendTo.Count > 0)
                    {

                        if (parameter.ListFormFile != null && parameter.ListFormFile.Count > 0)
                        {
                            var folderName = folder.Url + "\\";
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);
                            if (!Directory.Exists(newPath))
                            {
                                Directory.CreateDirectory(newPath);
                            }
                            foreach (IFormFile file in parameter.ListFormFile)
                            {
                                if (file.Length > 0)
                                {
                                    string fileName = file.FileName.Trim();

                                    var fileInFolder = new FileInFolder();
                                    fileInFolder.Active = false;
                                    fileInFolder.CreatedById = parameter.UserId;
                                    fileInFolder.CreatedDate = DateTime.Now;
                                    fileInFolder.FileExtension = fileName.Substring(fileName.LastIndexOf(".") + 1);
                                    fileInFolder.FileInFolderId = Guid.NewGuid();
                                    fileInFolder.FileName =
                                        fileName.Substring(0, fileName.LastIndexOf(".")) + "_" + Guid.NewGuid();
                                    fileInFolder.FolderId = folder.FolderId;
                                    fileInFolder.ObjectId = Guid.NewGuid();
                                    fileInFolder.ObjectType = "CANDIDATE";
                                    fileInFolder.Size = file.Length.ToString();

                                    context.FileInFolder.Add(fileInFolder);
                                    fileName = fileInFolder.FileName + "." + fileInFolder.FileExtension;
                                    string fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        file.CopyTo(stream);
                                        path.Add(fullPath);
                                    }
                                }
                            }
                        }
                        context.SaveChanges();

                        // email Gửi 
                        var fromEmail = context.SystemParameter.FirstOrDefault(x => x.SystemKey == "Email");
                        if (!string.IsNullOrEmpty(fromEmail.SystemValueString))
                        {
                            var emailResult = Emailer.SendEmailWithAttachments(context, fromEmail.SystemValueString, listEmailSendTo,
                        null, null, parameter.EmailInterview.Subject, content, path);
                        }
                    }

                });

                return new SendEmailInterviewResult
                {
                    Message = "Gửi email thành công.",
                    Status = true,
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new SendEmailInterviewResult
                {
                    Message = "Gửi email thất bại.",
                    Status = false,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }

        }

        public GetCandidateImportDetaiResult GetCandidateImportDetai(GetCandidateImportDetaiParameter parameter)
        {
            try
            {
                #region Danh sách ứng viên
                var listChienDich = context.RecruitmentCampaign.ToList();
                var listViTriTuyenDung = context.Vacancies.ToList();
                var listAllCandidateVacanciesMapping = context.CandidateVacanciesMapping.ToList();
                List<CandidateEntityModel> lstCandidate = new List<CandidateEntityModel>();
                var lstCandidateIdOfMapping = listAllCandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                if (lstCandidateIdOfMapping.Count() > 0)
                {
                    lstCandidate = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                    {
                        CandidateId = candi.CandidateId,
                        FullName = candi.FullName,
                        Email = candi.Email,
                        Phone = candi.Phone,
                    }).ToList();

                    if (lstCandidate.Count() > 0)
                    {
                        lstCandidate.ForEach(item =>
                        {
                            var viTriTuyenDungCandidateMapping = listAllCandidateVacanciesMapping.FirstOrDefault(x => x.CandidateId == item.CandidateId);
                            if (viTriTuyenDungCandidateMapping != null)
                            {
                                var viTriTuyenDungCandiDate = context.Vacancies.FirstOrDefault(x => x.VacanciesId == viTriTuyenDungCandidateMapping.VacanciesId);
                                if (viTriTuyenDungCandiDate != null)
                                {
                                    item.RecruitmentCampaignName = listChienDich.FirstOrDefault(x => x.RecruitmentCampaignId == viTriTuyenDungCandiDate.RecruitmentCampaignId)?.RecruitmentCampaignName;
                                }
                            }
                        });
                    }
                }
                lstCandidate = lstCandidate.OrderBy(x => x.Status).ToList();
                #endregion

                var listAllNhanVien = context.Employee.ToList();
                var listAllPhongBan = context.Organization.ToList();
                var listAllContact = context.Contact.ToList();

                #region Danh sách nhân viên
                var listEmp = new List<EmployeeEntityModel>();
                listAllNhanVien.ForEach(item =>
                {
                    if (item.Active == true)
                    {
                        var empEntity = new EmployeeEntityModel();
                        var empContact = listAllContact.FirstOrDefault(x => x.ObjectId == item.EmployeeId);
                        empEntity.EmployeeName = item.EmployeeName;
                        empEntity.Email = empContact.Email;
                        empEntity.Phone = empContact.Phone;
                        empEntity.OrganizationName = listAllPhongBan.FirstOrDefault(x => x.OrganizationId == item.OrganizationId)?.OrganizationName;
                        listEmp.Add(empEntity);
                    }
                });
                #endregion

                #region Danh sách nhân viên nghỉ việc
                var listEmpNghiViec = new List<EmployeeEntityModel>();
                //listAllNhanVien.ForEach(item =>
                //{
                //    if (item.Active == true)
                //    {
                //        var empEntity = new EmployeeEntityModel();
                //        var empContact = listAllContact.FirstOrDefault(x => x.ObjectId == item.EmployeeId);
                //        empEntity.EmployeeName = item.EmployeeName;
                //        empEntity.Email = empContact.Email;
                //        empEntity.Phone = empContact.Phone;
                //        listEmp.Add(empEntity);
                //    }
                //});
                #endregion


                return new GetCandidateImportDetaiResult
                {
                    ListCandidate = lstCandidate,
                    ListEmp = listEmp,
                    ListEmpNghiViec = listEmpNghiViec,
                    Message = "OK",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception e)
            {
                return new GetCandidateImportDetaiResult
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public ImportListCandidateResult ImportListCandidate(ImportListCandidateParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    List<Candidate> lstCandidate = new List<Candidate>();
                    List<CandidateEntityModel> lstCandidateResult = new List<CandidateEntityModel>();
                    List<CandidateVacanciesMapping> lstMapping = new List<CandidateVacanciesMapping>();
                    var listCategory = context.Category.Where(x => x.Active == true).ToList();

                    parameter.ListCandidate.ForEach(candi =>
                    {
                        // Lấy kênh tuyển dụng thông qua mã CategoryCode
                        var chanel = listCategory.FirstOrDefault(x => x.CategoryCode == candi.RecruitmentChannelCode);
                        var chanelId = Guid.NewGuid();
                        if (chanel != null)
                            chanelId = chanel.CategoryId;
                        #region Tạo ung vien
                        var candidate = new Candidate()
                        {
                            CandidateId = Guid.NewGuid(),
                            FullName = candi.FullName,
                            DateOfBirth = candi.DateOfBirth,
                            Phone = candi.Phone,
                            Address = candi.Address,
                            Email = candi.Email,
                            RecruitmentChannelId = chanelId,
                            Sex = candi.Sex,
                            ApplicationDate = candi.ApplicationDate,
                            Status = 1,
                            CreatedDate = DateTime.Now,
                            CreatedById = parameter.UserId,
                        };
                        lstCandidate.Add(candidate);

                        #endregion

                        #region Tạo mapping giữa ứng viên và vị trí

                        var mapping = new CandidateVacanciesMapping()
                        {
                            CandidateVacanciesMappingId = Guid.NewGuid(),
                            CandidateId = candidate.CandidateId,
                            VacanciesId = parameter.VacanciesId,
                            CreatedDate = DateTime.Now,
                            CreatedById = parameter.UserId,
                        };
                        lstMapping.Add(mapping);
                        #endregion
                    });

                    context.Candidate.AddRange(lstCandidate);
                    context.CandidateVacanciesMapping.AddRange(lstMapping);

                    context.SaveChanges();
                    trans.Commit();

                    #region Danh sách ứng viên

                    var listCategoryType = context.CategoryType.Where(x => x.Active == true).ToList();

                    var listLoaiCV = new List<CategoryEntityModel>();
                    var listChanel = new List<CategoryEntityModel>();

                    #region Kênh tuyển dụng
                    var categoryTypeChanelId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                    listChanel = listCategory.Where(x => x.Active == true && x.CategoryTypeId == categoryTypeChanelId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();
                    listChanel = listChanel.OrderBy(x => x.SortOrder).ToList();
                    #endregion

                    var lstCandidateIdOfMapping = context.CandidateVacanciesMapping.Where(x => x.VacanciesId == parameter.VacanciesId).Select(a => a.CandidateId).ToList();
                    if (lstCandidateIdOfMapping.Count() > 0)
                    {
                        lstCandidateResult = context.Candidate.Where(x => lstCandidateIdOfMapping.Contains(x.CandidateId) && x.Status != 0).Select(candi => new CandidateEntityModel
                        {
                            CandidateId = candi.CandidateId,
                            FullName = candi.FullName,
                            ApplicationDate = candi.ApplicationDate,
                            Email = candi.Email,
                            Phone = candi.Phone,
                            RecruitmentChannelId = candi.RecruitmentChannelId,
                            Status = candi.Status,
                            Sex = candi.Sex,
                            Address = candi.Address,
                            DateOfBirth = candi.DateOfBirth
                        }).ToList();

                        var cateTypeStatusCandilId = listCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "TTUV")?.CategoryTypeId;
                        var listStatusCandidate = listCategory.Where(x => x.Active == true && x.CategoryTypeId == cateTypeStatusCandilId)
                            .Select(y => new CategoryEntityModel
                            {
                                CategoryId = y.CategoryId,
                                CategoryName = y.CategoryName
                            }).ToList();

                        lstCandidateResult.ForEach(item =>
                        {
                            item.RecruitmentChannelName = listChanel.FirstOrDefault(x => x.CategoryId == item.RecruitmentChannelId)?.CategoryName;
                            switch (item.Status)
                            {
                                case 1:
                                    item.StatusName = "Mới";
                                    item.StatusCode = "UVMOI";
                                    break;
                                case 2:
                                    item.StatusName = "Hẹn phỏng vấn";
                                    item.StatusCode = "UVHPV";
                                    break;
                                case 3:
                                    item.StatusName = "Đạt phỏng vấn";
                                    item.StatusCode = "UVDPV";
                                    break;
                                case 4:
                                    item.StatusName = "Gửi offer";
                                    item.StatusCode = "UVGOF";
                                    break;
                                case 5:
                                    item.StatusName = "Từ chối offer";
                                    item.StatusCode = "UVTC";
                                    break;
                                case 6:
                                    item.StatusName = "Không đạt";
                                    item.StatusCode = "UVKD";
                                    break;
                            }
                        });
                    }
                    lstCandidateResult = lstCandidateResult.OrderBy(x => x.Status).ToList();
                    #endregion

                    return new ImportListCandidateResult
                    {
                        ListCandidate = lstCandidateResult,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Thêm thông tin ứng viên thành công"
                    };
                }
                catch (Exception e)
                {
                    trans.Commit();
                    return new ImportListCandidateResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GetMasterDataCreateDeXuatTangLuongResult GetMasterDataCreateDeXuatTangLuong(GetMasterDataCreateDeXuatTangLuongParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var listAllUser = context.User.ToList();
                    #region Check permision: manager
                    var user = listAllUser.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new GetMasterDataCreateDeXuatTangLuongResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new GetMasterDataCreateDeXuatTangLuongResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }

                    #endregion

                    var listAllContactEmp = context.Contact.Where(x => x.ObjectType == "EMP").ToList();
                    var listAllOrg = context.Organization.ToList();
                    var listAllPosition = context.Position.ToList();
                    var listEmp = context.Employee.Where(x => x.Active == true).Select(x => new EmployeeEntityModel()
                    {
                        EmployeeId = x.EmployeeId,
                        EmployeeName = x.EmployeeName,
                        EmployeeCodeName = x.EmployeeCode + "-" + x.EmployeeName,
                        OrganizationId = x.OrganizationId,
                        OrganizationName = listAllOrg.FirstOrDefault(y => y.OrganizationId == x.OrganizationId).OrganizationName,
                        EmployeeCode = x.EmployeeCode,
                        PositionId = x.PositionId,
                        PositionName = listAllPosition.FirstOrDefault(y => y.PositionId == x.PositionId).PositionName,
                        DateOfBirth = listAllContactEmp.FirstOrDefault(y => y.ObjectId == x.EmployeeId).DateOfBirth,
                        IsManager = x.IsManager,
                        Active = x.Active
                    }).ToList();
                    listEmp = GetAllEmpHoatDong(listEmp, listAllUser);
                    var employeeId = user.EmployeeId;
                    var employeeLogin = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                    var isManager = employeeLogin.IsManager;

                    if (isManager == true)
                    {
                        //Lấy list phòng ban con của user
                        List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                        if (employeeLogin.OrganizationId != null)
                        {
                            listGetAllChild.Add(employeeLogin.OrganizationId.Value);
                            listGetAllChild = getOrganizationChildrenId(employeeLogin.OrganizationId.Value, listGetAllChild);
                        }
                        //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                        var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                        List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();

                        listEmployeeInChargeByManager.ForEach(item =>
                        {
                            if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                                listEmployeeInChargeByManagerId.Add(item.EmployeeId.Value);
                        });

                        listEmp = listEmp.Where(x => listEmployeeInChargeByManagerId.Contains(x.EmployeeId.Value)).ToList();


                        listEmp.ForEach(item =>
                        {
                            item.MucLuongHienTai = CommonHelper.GetMucLuongHienTaiByEmployeeId(context, item.EmployeeId.Value);
                        });
                    }
                    else
                    {
                        //Nếu không phải quản lý
                        listEmp = listEmp.Where(x => x.EmployeeId == employeeId).ToList();
                        listEmp.ForEach(item =>
                        {
                            item.MucLuongHienTai = CommonHelper.GetMucLuongHienTaiByEmployeeId(context, item.EmployeeId.Value);
                        });
                    }

                    listEmp = GetAllEmpHoatDong(listEmp, context.User.ToList());

                    return new GetMasterDataCreateDeXuatTangLuongResult
                    {
                        ListEmp = listEmp,
                        LoginEmployeeID = employeeId.Value,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Thêm thông tin ứng viên thành công"
                    };
                }
                catch (Exception e)
                {
                    trans.Commit();
                    return new GetMasterDataCreateDeXuatTangLuongResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        private static bool ValidateEmailAddress(string emailAddress)
        {
            if (string.IsNullOrEmpty(emailAddress)) return false;

            if (!Regex.IsMatch(emailAddress, "^[-A-Za-z0-9_@.]+$")) return false;

            // Search for the @ char
            var i = emailAddress.IndexOf("@", StringComparison.Ordinal);

            // There must be at least 3 chars after the @
            if (i <= 0 || i >= emailAddress.Length - 3) return false;

            // Ensure there is only one @
            if (emailAddress.IndexOf("@", i + 1, StringComparison.Ordinal) > 0) return false;


            // Check the domain portion contains at least one dot
            var j = emailAddress.LastIndexOf(".", StringComparison.Ordinal);

            // It can't be before or immediately after the @ character
            //if (j < 0 || j <= i + 1) return false;
            var before = emailAddress.Substring(0, i);
            var after = emailAddress.Substring(i + 1);
            if (before.LastIndexOf(".", StringComparison.Ordinal) == before.Length - 1) return false;
            if (after.IndexOf(".", StringComparison.Ordinal) == 0) return false;

            // EmailAddress is validated
            return true;
        }

        private static string ReplaceTokenForContent(TNTN8Context context, object model,
          string emailContent, List<SystemParameter> configEntity, Guid userId, string personInChagerName, string personInChagerPhone, string _vacanciesName, string _workplace)
        {
            var result = emailContent;

            #region Common Token
            const string logo = "[LOGO]";

            const string employeeName = "[EMPLOYEE_NAME]";
            const string employeePhone = "[EMPLOYEE_PHONE]"; // sdt nhan vien phụ trách

            const string candidateName = "[CANDIDATE_NAME]"; // Tên ứng viên

            const string timeInterview = "[TIME_INTERVIEW]"; // Giờ PV
            const string dateInterview = "[DATE_INTERVIEW]"; // Ngày PV
            const string addressOrLink = "[ADD_LINK_INTERVIEW]"; // địa chỉ or Link
            const string vacanciesName = "[VACANCIES_NAME]"; // Vị trí PV
            const string workPlace = "[WORKPLACE_NAME]"; // Nơi làm việc

            #endregion

            var _model = model as CandidateEmailPVModel;

            #region Replace token

            #region replace logo

            if (result.Contains(logo))
            {
                var _logo = configEntity.FirstOrDefault(w => w.SystemKey == "Logo").SystemValueString;

                if (!String.IsNullOrEmpty(logo))
                {
                    var temp_logo = "<img src=\"" + _logo + "\" class=\"e - rte - image e - imginline\" alt=\"Logo TNM.png\" width=\"auto\" height=\"auto\" style=\"min - width: 0px; max - width: 750px; min - height: 0px; \">";
                    result = result.Replace(logo, temp_logo);
                }
                else
                {
                    result = result.Replace(logo, "");
                }
            }

            #endregion

            #region Thay đổi thông tin người phụ trách

            var employeeId = context.User.FirstOrDefault(x => x.UserId == userId)?.EmployeeId;

            if (result.Contains(employeeName))
            {
                //var _employeeName = context.Employee.FirstOrDefault(x => x.EmployeeId == employeeId)?.EmployeeName;
                //result = result.Replace(employeeName, !string.IsNullOrEmpty(_employeeName) ? _employeeName : "");
                result = result.Replace(employeeName, !string.IsNullOrEmpty(personInChagerName) ? personInChagerName : "");
            }

            if (result.Contains(employeePhone))
            {
                result = result.Replace(employeePhone, !string.IsNullOrEmpty(personInChagerPhone) ? personInChagerPhone : "");
                //var phone = context.Contact.FirstOrDefault(x => x.ObjectId == employeeId && x.ObjectType == "EMP")?.Phone;
                //result = result.Replace(employeePhone, !string.IsNullOrEmpty(phone) ? phone : "");
            }

            #endregion

            #region Thay thế ngày giờ PV

            if (result.Contains(timeInterview))
            {
                result = result.Replace(timeInterview, _model.InterviewTime.Hour.ToString() + "h" + _model.InterviewTime.Minute.ToString());
            }
            if (result.Contains(dateInterview))
            {
                result = result.Replace(dateInterview, _model.InterviewTime.Date.ToString("dd/MM/yyyy"));
            }
            #endregion

            #region Thay thế tên ứng viên
            if (result.Contains(candidateName))
            {
                result = result.Replace(candidateName, _model.FullName);
            }
            #endregion

            #region Thay thế vị trí
            if (result.Contains(vacanciesName))
            {
                result = result.Replace(vacanciesName, _vacanciesName);
            }
            #endregion

            #region Thay thế địa chỉ or Link
            if (result.Contains(addressOrLink))
            {
                var info = string.Empty;
                if (_model.InterviewScheduleType == 1)
                    info = "Địa chỉ phỏng vấn: ";
                else
                    info = "Link google Meet tham gia phỏng vấn: ";

                result = result.Replace(addressOrLink, info + _model.AddressOrLink);
            }
            #endregion

            #region Thay thế địa điểm làm việc
            if (result.Contains(workPlace))
            {
                result = result.Replace(workPlace, _workplace);
            }
            #endregion
            #endregion

            return result;
        }

        private List<FileInFolderEntityModel> GetAllFile(Guid folderId, List<FolderEntityModel> listCommonFolders, List<FileInFolder> listCommonFile)
        {
            var listResult = new List<FileInFolderEntityModel>();

            var listFile = listCommonFile.Where(x => x.FolderId == folderId).ToList();

            listFile.ForEach(item =>
            {
                var fileInFolder = new FileInFolderEntityModel
                {
                    FileInFolderId = item.FileInFolderId,
                    FolderId = item.FolderId,
                    FileName = item.FileName,
                    ObjectId = item.ObjectId,
                    ObjectType = item.ObjectType,
                    FileExtension = item.FileExtension,
                    Size = item.Size,
                    Active = item.Active,
                    CreatedById = item.CreatedById,
                    CreatedDate = item.CreatedDate,
                    UpdatedById = item.UpdatedById,
                    UpdatedDate = item.UpdatedDate
                };

                listResult.Add(fileInFolder);
            });

            var folder = listCommonFolders.FirstOrDefault(x => x.FolderId == folderId);

            if (folder != null && folder.HasChild)
            {
                var listFolderChild = listCommonFolders.Where(x => x.ParentId == folderId).ToList();

                listFolderChild.ForEach(item =>
                {
                    listResult.AddRange(GetAllFile(item.FolderId, listCommonFolders, listCommonFile));
                });
            }

            return listResult;
        }

        private string ConvertFolderUrl(string url)
        {
            var stringResult = url.Split(@"\");
            string result = "";
            for (int i = 0; i < stringResult.Length; i++)
            {
                result = result + stringResult[i] + "\\";
            }

            result = result.Substring(0, result.Length - 1);

            return result;
        }

        private List<Guid?> getOrganizationChildrenId(Guid? id, List<Guid?> list)
        {
            var Organization = context.Organization.Where(o => o.ParentId == id).ToList();
            Organization.ForEach(item =>
            {
                list.Add(item.OrganizationId);
                getOrganizationChildrenId(item.OrganizationId, list);
            });

            return list;
        }

        private List<Guid?> getOrganizationParentId(Guid? id, List<Guid?> list)
        {
            var Organization = context.Organization.FirstOrDefault(o => o.OrganizationId == id);
            if(Organization != null)
            {
                list.Add(Organization.OrganizationId);
                if(Organization.ParentId != null)
                {
                    getOrganizationParentId(Organization.ParentId, list);
                }
            }
            return list;
        }


        public GetMasterDataCreateEmployeeResult GetMasterDataCreateEmployee(GetMasterDataCreateEmployeeParameter request)
        {
            try
            {
                //Ds phòng ban
                var listOrangization = context.Organization.Where(x => x.Active == true).ToList();

                //Ds vị trí
                var listPosition = context.Position.Where(x => x.Active == true).ToList();

                //Ds cấp bậc
                var capBacCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "CVU" && x.Active == true)?.CategoryTypeId;
                var listCapBac = context.Category.Where(x => x.CategoryTypeId == capBacCategoryTypeId && x.Active == true).ToList(); ;

                //Lấy thông tin cấu hình bảo hiểm

                //Ds Nguồn tuyển dụng
                var nguonTuyenDungCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "IVF" && x.Active == true)?.CategoryTypeId;
                var listNguonTuyenDung = context.Category.Where(x => x.CategoryTypeId == nguonTuyenDungCategoryTypeId && x.Active == true).ToList(); ;

                //Ds Phương thức tuyển dụng
                var pttdCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTTD" && x.Active == true)?.CategoryTypeId;
                var listPTTD = context.Category.Where(x => x.CategoryTypeId == pttdCategoryTypeId && x.Active == true).ToList(); ;

                //Ds Bằng cấp cao nhất đạt được
                var bangCapCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BCAP" && x.Active == true)?.CategoryTypeId;
                var listBangCap = context.Category.Where(x => x.CategoryTypeId == pttdCategoryTypeId && x.Active == true).ToList(); ;

                //Ds danh sách các nước
                var listCountry = context.Country.ToList();


                return new GetMasterDataCreateEmployeeResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy thông tin thành công",
                    ListOrangization = listOrangization,
                    ListPosition = listPosition
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateEmployeeResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public TaoDeXuatTangLuongResult TaoDeXuatTangLuong(TaoDeXuatTangLuongParameter request)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == request.FolderType);

            if (folder == null)
            {
                return new TaoDeXuatTangLuongResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {

                    var deXuatTangLuong = new DeXuatTangLuong();

                    deXuatTangLuong.TenDeXuat = request.DeXuatTangLuong.TenDeXuat.Trim();
                    deXuatTangLuong.LoaiDeXuat = request.DeXuatTangLuong.LoaiDeXuat;
                    deXuatTangLuong.NgayDeXuat = request.DeXuatTangLuong.NgayDeXuat;
                    deXuatTangLuong.NguoiDeXuatId = request.DeXuatTangLuong.NguoiDeXuatId;
                    deXuatTangLuong.TrangThai = 1;
                    deXuatTangLuong.CreatedById = request.UserId;
                    deXuatTangLuong.CreatedDate = DateTime.Now;
                    deXuatTangLuong.Active = true;
                    context.DeXuatTangLuong.Add(deXuatTangLuong);
                    context.SaveChanges();

                    List<DeXuatTangLuongNhanVien> listNhanVien = new List<DeXuatTangLuongNhanVien>();
                    request.NhanVienDuocDeXuats.ForEach(item =>
                    {
                        var newNV = new DeXuatTangLuongNhanVien();
                        newNV.DeXuatTangLuongId = deXuatTangLuong.DeXuatTangLuongId;
                        newNV.EmployeeId = item.EmployeeId;
                        newNV.PhongBanId = item.PhongBanId;
                        newNV.ChucVuId = item.ChucVuId;
                        newNV.LuongHienTai = item.LuongHienTai.Value;
                        newNV.LuongDeXuat = item.LuongDeXuat.Value;
                        newNV.LyDoDeXuat = item.LyDoDeXuat;
                        newNV.TrangThai = 1;
                        newNV.Active = true;
                        newNV.CreatedById = request.UserId;
                        newNV.CreatedDate = DateTime.Now;
                        newNV.TrangThai = item.TrangThai;

                        listNhanVien.Add(newNV);
                    });
                    context.DeXuatTangLuongNhanVien.AddRange(listNhanVien);
                    context.SaveChanges();

                    if (request.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        request.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = request.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = request.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = deXuatTangLuong.DeXuatTangLuongId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {

                            return new TaoDeXuatTangLuongResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    transaction.Commit();

                    return new TaoDeXuatTangLuongResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo đề xuất tăng lương thành công",
                        DeXuatId = deXuatTangLuong.DeXuatTangLuongId
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new TaoDeXuatTangLuongResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GetMasterCreateKeHoachOtResult GetMasterCreateKeHoachOt(GetMasterCreateKeHoachOtParameter parameter)
        {
            try
            {
                var cauHinhOtCaNgay = context.CauHinhOtCaNgay.Select(y => new CauHinhOtCaNgayModel(y)).FirstOrDefault();
                var listLoaiCaOt = GeneralList.GetTrangThais("LoaiCaOt");
                var listOrg = context.Organization.Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationCode = y.OrganizationCode,
                    OrganizationName = y.OrganizationName,
                    Level = y.Level,
                    ParentId = y.ParentId
                }).ToList();

                //Lấy dsach tên các loại OT code: LOAIOT
                var otCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LOAIOT")?.CategoryTypeId;
                var listLoaiOt = context.Category
                    .Where(x => x.CategoryTypeId == otCategoryTypeId)
                    .Select(y => new CategoryEntityModel(y)).ToList();

                var userEmpId = context.User.FirstOrDefault(x => x.UserId == parameter.UserId)?.EmployeeId;
                var currentEmp = context.Employee.Where(x => x.EmployeeId == userEmpId).Select(y => new EmployeeEntityModel()
                {
                    EmployeeId = y.EmployeeId,
                    EmployeeName = y.EmployeeName,
                }).ToList();

                return new GetMasterCreateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListOrganization = listOrg,
                    ListLoaiOt = listLoaiOt,
                    CurrentEmp = currentEmp,
                    ListLoaiCaOt = listLoaiCaOt,
                    CauHinhOtCaNgay = cauHinhOtCaNgay
                };
            }
            catch (Exception e)
            {
                return new GetMasterCreateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateKeHoachOtResult CreateOrUpdateKeHoachOt(CreateOrUpdateKeHoachOtParameter parameter)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

            if (folder == null)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.NotFound,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            var cauHinhOtCaNgay = context.CauHinhOtCaNgay.FirstOrDefault();
            if (cauHinhOtCaNgay == null)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.NotFound,
                    MessageCode = "Chưa có cấu hình chấm công OT"
                };
            }

            //Nếu là Ca sáng
            if (parameter.KeHoachOt.LoaiCaId == 1)
            {
                parameter.KeHoachOt.GioBatDau = cauHinhOtCaNgay.GioVaoSang;
                parameter.KeHoachOt.GioKetThuc = cauHinhOtCaNgay.GioRaSang;
            }
            //Nếu là Ca chiều
            else if (parameter.KeHoachOt.LoaiCaId == 2)
            {
                parameter.KeHoachOt.GioBatDau = cauHinhOtCaNgay.GioVaoChieu;
                parameter.KeHoachOt.GioKetThuc = cauHinhOtCaNgay.GioRaChieu;
            }
            //Nếu là Cả ngày
            else if (parameter.KeHoachOt.LoaiCaId == 4)
            {
                parameter.KeHoachOt.GioBatDau = cauHinhOtCaNgay.GioVaoSang;
                parameter.KeHoachOt.GioKetThuc = cauHinhOtCaNgay.GioRaChieu;
            }

            if (parameter.KeHoachOt.GioBatDau > parameter.KeHoachOt.GioKetThuc)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Giờ bắt đầu phải trước Giờ kết thúc"
                };
            }

            //Nếu là ca tối
            if (parameter.KeHoachOt.LoaiCaId == 3 &&
                parameter.KeHoachOt.GioBatDau.Value < cauHinhOtCaNgay.GioRaChieu)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Giờ bắt đầu phải trước Giờ kết thúc trong cấu hình chấm công OT"
                };
            }

            var nowDate = DateTime.Now;
            var tuNgay = parameter.KeHoachOt.NgayBatDau.Value.Date.Add(parameter.KeHoachOt.GioBatDau.Value);

            if (parameter.KeHoachOt.HanPheDuyetKeHoach.Value > tuNgay ||
                parameter.KeHoachOt.HanPheDuyetKeHoach.Value < nowDate)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Hạn phê duyệt kế hoạch phải sau thời điểm hiện tại và trước Thời gian bắt đầu OT"
                };
            }

            if (parameter.KeHoachOt.HanDangKy.Value > tuNgay ||
                parameter.KeHoachOt.HanDangKy.Value < parameter.KeHoachOt.HanPheDuyetKeHoach.Value)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Hạn đăng ký OT phải sau Hạn phê duyệt kế hoạch và trước Thời gian bắt đầu OT"
                };
            }

            if (parameter.KeHoachOt.HanPheDuyetDangKy.Value > tuNgay ||
                parameter.KeHoachOt.HanPheDuyetDangKy.Value < parameter.KeHoachOt.HanDangKy.Value)
            {
                return new CreateOrUpdateKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Hạn phê duyệt đăng ký OT phải sau Hạn đăng ký OT và trước Thời gian bắt đầu OT"
                };
            }

            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    int KeHoachOtId = 0;

                    //Update
                    if (parameter.KeHoachOt.KeHoachOtId != null && parameter.KeHoachOt.KeHoachOtId != 0)
                    {
                        var keHoachOt = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == parameter.KeHoachOt.KeHoachOtId);
                        if (keHoachOt == null)
                        {
                            return new CreateOrUpdateKeHoachOtResult()
                            {
                                StatusCode = HttpStatusCode.NotFound,
                                MessageCode = "Kế hoạch không tồn tại trong hệ thống"
                            };
                        }

                        if (keHoachOt.TrangThai != 1)
                        {
                            return new CreateOrUpdateKeHoachOtResult()
                            {
                                StatusCode = HttpStatusCode.Conflict,
                                MessageCode = "Không thể sửa Kế hoạch ở trạng thái khác Tạo mới"
                            };
                        }

                        keHoachOt.Active = true;
                        keHoachOt.TenKeHoach = parameter.KeHoachOt.TenKeHoach.Trim();
                        keHoachOt.NgayDeXuat = parameter.KeHoachOt.NgayDeXuat.Value.Date;
                        keHoachOt.NguoiDeXuatId = parameter.KeHoachOt.NguoiDeXuatId;
                        keHoachOt.LoaiOtId = parameter.KeHoachOt.LoaiOtId;
                        keHoachOt.NgayBatDau = parameter.KeHoachOt.NgayBatDau.Value.Date;
                        keHoachOt.NgayKetThuc = parameter.KeHoachOt.NgayKetThuc.Value.Date;
                        keHoachOt.LoaiCaId = parameter.KeHoachOt.LoaiCaId;
                        keHoachOt.GioBatDau = parameter.KeHoachOt.GioBatDau;
                        keHoachOt.GioKetThuc = parameter.KeHoachOt.GioKetThuc;
                        keHoachOt.DiaDiem = parameter.KeHoachOt.DiaDiem;
                        keHoachOt.LyDo = parameter.KeHoachOt.LyDo;
                        keHoachOt.HanPheDuyetKeHoach = parameter.KeHoachOt.HanPheDuyetKeHoach;
                        keHoachOt.HanDangKy = parameter.KeHoachOt.HanDangKy;
                        keHoachOt.HanPheDuyetDangKy = parameter.KeHoachOt.HanPheDuyetDangKy;
                        keHoachOt.UpdatedById = parameter.UserId;
                        keHoachOt.UpdatedDate = DateTime.Now;

                        context.KeHoachOt.Update(keHoachOt);
                        context.SaveChanges();

                        // Xóa sạch chi tiết đi để insert lại cho đỡ phải xử lý nhiều                         
                        var listOld = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == parameter.KeHoachOt.KeHoachOtId).ToList();
                        context.KeHoachOtPhongBan.RemoveRange(listOld);
                        context.SaveChanges();

                        List<KeHoachOtPhongBan> listPhongBanAdd = new List<KeHoachOtPhongBan>();
                        // insert các phòng ban của kế hoạch OT
                        for (int i = 0; i < parameter.ListKeHoachOtPhongBan.Count(); i++)
                        {
                            var listNew = new KeHoachOtPhongBan();
                            listNew.KeHoachOtId = parameter.KeHoachOt.KeHoachOtId.Value;
                            listNew.OrganizationId = parameter.ListKeHoachOtPhongBan[i].OrganizationId.Value;
                            listNew.TrangThai = 1;
                            listPhongBanAdd.Add(listNew);
                        }

                        context.KeHoachOtPhongBan.AddRange(listPhongBanAdd);
                        context.SaveChanges();

                        #region Lưu file

                        if (parameter.ListFile?.Count > 0)
                        {
                            var isSave = true;
                            parameter.ListFile?.ForEach(item =>
                            {
                                if (folder == null)
                                {
                                    isSave = false;
                                }

                                var folderName = ConvertFolderUrl(folder.Url);
                                var webRootPath = hostingEnvironment.WebRootPath;
                                var newPath = Path.Combine(webRootPath, folderName);

                                if (!Directory.Exists(newPath))
                                {
                                    isSave = false;
                                }

                                if (isSave)
                                {
                                    var file = new FileInFolder()
                                    {
                                        Active = true,
                                        CreatedById = parameter.UserId,
                                        CreatedDate = DateTime.Now,
                                        UpdatedById = parameter.UserId,
                                        UpdatedDate = DateTime.Now,
                                        FileInFolderId = Guid.NewGuid(),
                                        FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                        FolderId = folder.FolderId,
                                        ObjectNumber = keHoachOt.KeHoachOtId,
                                        ObjectType = item.FileInFolder.ObjectType,
                                        Size = item.FileInFolder.Size,
                                        FileExtension = item.FileSave.FileName.Substring(
                                            item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                    };

                                    context.FileInFolder.Add(file);
                                    var fileName = $"{file.FileName}.{file.FileExtension}";
                                    var fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                    }
                                }
                            });

                            if (!isSave)
                            {
                                return new CreateOrUpdateKeHoachOtResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Bạn phải cấu hình thư mục để lưu"
                                };
                            }

                            context.SaveChanges();
                        }

                        #endregion

                        KeHoachOtId = keHoachOt.KeHoachOtId;
                    }
                    //Create
                    else
                    {
                        var keHoachOt = new KeHoachOt();
                        keHoachOt.Active = true;
                        keHoachOt.TenKeHoach = parameter.KeHoachOt.TenKeHoach.Trim();
                        keHoachOt.NgayDeXuat = parameter.KeHoachOt.NgayDeXuat.Value.Date;
                        keHoachOt.NguoiDeXuatId = parameter.KeHoachOt.NguoiDeXuatId;
                        keHoachOt.LoaiOtId = parameter.KeHoachOt.LoaiOtId;
                        keHoachOt.NgayBatDau = parameter.KeHoachOt.NgayBatDau.Value.Date;
                        keHoachOt.NgayKetThuc = parameter.KeHoachOt.NgayKetThuc.Value.Date;
                        keHoachOt.LoaiCaId = parameter.KeHoachOt.LoaiCaId;
                        keHoachOt.GioBatDau = parameter.KeHoachOt.GioBatDau;
                        keHoachOt.GioKetThuc = parameter.KeHoachOt.GioKetThuc;
                        keHoachOt.DiaDiem = parameter.KeHoachOt.DiaDiem;
                        keHoachOt.LyDo = parameter.KeHoachOt.LyDo;
                        keHoachOt.HanPheDuyetKeHoach = parameter.KeHoachOt.HanPheDuyetKeHoach;
                        keHoachOt.HanDangKy = parameter.KeHoachOt.HanDangKy;
                        keHoachOt.HanPheDuyetDangKy = parameter.KeHoachOt.HanPheDuyetDangKy;
                        keHoachOt.TrangThai = 1;
                        keHoachOt.CreatedById = parameter.UserId;
                        keHoachOt.CreatedDate = DateTime.Now;

                        context.KeHoachOt.Add(keHoachOt);
                        context.SaveChanges();

                        List<KeHoachOtPhongBan> listPhongBanAdd = new List<KeHoachOtPhongBan>();
                        // insert các phòng ban của kế hoạch OT
                        for (int i = 0; i < parameter.ListKeHoachOtPhongBan.Count(); i++)
                        {
                            var newPhongBan = new KeHoachOtPhongBan();
                            newPhongBan.KeHoachOtId = keHoachOt.KeHoachOtId;
                            newPhongBan.OrganizationId = parameter.ListKeHoachOtPhongBan[i].OrganizationId.Value;
                            newPhongBan.TrangThai = 1;
                            listPhongBanAdd.Add(newPhongBan);
                        }

                        context.KeHoachOtPhongBan.AddRange(listPhongBanAdd);
                        context.SaveChanges();

                        #region Lưu file

                        if (parameter.ListFile?.Count > 0)
                        {
                            var isSave = true;
                            parameter.ListFile?.ForEach(item =>
                            {
                                if (folder == null)
                                {
                                    isSave = false;
                                }

                                var folderName = ConvertFolderUrl(folder.Url);
                                var webRootPath = hostingEnvironment.WebRootPath;
                                var newPath = Path.Combine(webRootPath, folderName);

                                if (!Directory.Exists(newPath))
                                {
                                    isSave = false;
                                }

                                if (isSave)
                                {
                                    var file = new FileInFolder()
                                    {
                                        Active = true,
                                        CreatedById = parameter.UserId,
                                        CreatedDate = DateTime.Now,
                                        UpdatedById = parameter.UserId,
                                        UpdatedDate = DateTime.Now,
                                        FileInFolderId = Guid.NewGuid(),
                                        FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                        FolderId = folder.FolderId,
                                        ObjectNumber = keHoachOt.KeHoachOtId,
                                        ObjectType = item.FileInFolder.ObjectType,
                                        Size = item.FileInFolder.Size,
                                        FileExtension = item.FileSave.FileName.Substring(
                                        item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                    };

                                    context.FileInFolder.Add(file);

                                    var fileName = $"{file.FileName}.{file.FileExtension}";
                                    var fullPath = Path.Combine(newPath, fileName);
                                    using (var stream = new FileStream(fullPath, FileMode.Create))
                                    {
                                        item.FileSave.CopyTo(stream);
                                    }
                                }
                            });

                            if (!isSave)
                            {
                                return new CreateOrUpdateKeHoachOtResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Bạn phải cấu hình thư mục để lưu"
                                };
                            }

                            context.SaveChanges();
                        }

                        #endregion

                        KeHoachOtId = keHoachOt.KeHoachOtId;
                    }

                    trans.Commit();

                    return new CreateOrUpdateKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Success",
                        KeHoachOtId = KeHoachOtId,
                    };
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    return new CreateOrUpdateKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = e.Message
                    };
                }
            }
        }

        public GetMasterSearchKeHoachOtResult GetMasterSearchKeHoachOt(GetMasterSearchKeHoachOtParameter parameter)
        {
            try
            {
                #region Check permision: manager

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new GetMasterSearchKeHoachOtResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new GetMasterSearchKeHoachOtResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Lỗi dữ liệu"
                    };
                }

                #endregion

                //Lấy quy trình phê duyệt của đề xuất kê hoạch OT
                var quyTrinhDangKyOT = context.QuyTrinh.FirstOrDefault(x => x.HoatDong && x.DoiTuongApDung == 12);
                if (quyTrinhDangKyOT == null)
                {
                    return new GetMasterSearchKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Chưa có quy trình phê duyệt kê hoạch OT"
                    };
                }
                //Chọn cấu hình quy trình
                var cauHinhQuyTrinhDangKyOT = context.CauHinhQuyTrinh.Where(x => x.QuyTrinhId == quyTrinhDangKyOT.Id).OrderByDescending(z => z.SoTienTu).First();

                if (cauHinhQuyTrinhDangKyOT == null)
                {
                    return new GetMasterSearchKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Quy trình chưa có cấu hình quy trình phê duyệt"
                    };
                }
                var buoc1 = context.CacBuocQuyTrinh.FirstOrDefault(x =>
                            x.CauHinhQuyTrinhId == cauHinhQuyTrinhDangKyOT.Id && x.Stt == 1);
                if (buoc1 == null)
                {
                    return new GetMasterSearchKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Quy trình không tồn tại bước 1"
                    };
                }

                var listKeHoachOT = context.KeHoachOt.Where(x => x.Active == true).ToList();
                var _listKeHoachOtId = listKeHoachOT.Select(y => y.KeHoachOtId).ToList();
                var listKeHoachOtPhongBan = context.KeHoachOtPhongBan
                    .Where(x => _listKeHoachOtId.Contains(x.KeHoachOtId)).ToList();
                var listCacBuocApDung = context.CacBuocApDung.Where(x => x.DoiTuongApDung == 13).ToList();
                var listNewCacBuocApDung = new List<CacBuocApDung>();
                var listNewNote = new List<Note>();

                using (var trans = context.Database.BeginTransaction())
                {
                    for (int i = 0; i < listKeHoachOT.Count; i++)
                    {
                        var keHoachOtCheck = listKeHoachOT[i];
                        bool isContinue = false;
                        var _listNewCacBuocApDung = new List<CacBuocApDung>();
                        var _listNewNote = new List<Note>();

                        UpdateTrangThaiKeHoachOt(keHoachOtCheck, listKeHoachOtPhongBan, listCacBuocApDung,
                            quyTrinhDangKyOT, cauHinhQuyTrinhDangKyOT, buoc1, parameter.UserId,
                            out isContinue, out _listNewCacBuocApDung, out _listNewNote);

                        listCacBuocApDung.AddRange(_listNewCacBuocApDung);
                        listNewNote.AddRange(_listNewNote);
                        if (isContinue) continue;
                    }

                    context.CacBuocApDung.AddRange(listNewCacBuocApDung);
                    context.Note.AddRange(listNewNote);
                    context.SaveChanges();

                    trans.Commit();
                }

                //Lấy dsach tên các loại OT code: LOAIOT
                var otCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LOAIOT")
                    ?.CategoryTypeId;
                var listLoaiOt = context.Category.Where(x => x.CategoryTypeId == otCategoryTypeId)
                    .Select(y => new CategoryEntityModel
                    {
                        CategoryId = y.CategoryId,
                        CategoryName = y.CategoryName
                    }).ToList();

                var listEmp = context.Employee.Where(x => x.Active == true).ToList();
                var employeeId = user.EmployeeId;
                var employeeLogin = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);

                //Nếu phong ban có quyền xem dữ liệu các phòng khác
                var isAccess = context.Organization.FirstOrDefault(x => x.OrganizationId == employeeLogin.OrganizationId)?.IsAccess;

                // ds kế hoạch Ot
                var ListKeHoachOt = context.KeHoachOt
                    .Where(x =>
                        (parameter.ListTrangThai == null || parameter.ListTrangThai.Contains(x.TrangThai.Value)) 
                        && x.Active == true)
                    .Select(x => new KeHoachOtEntityModel()
                    {
                        KeHoachOtId = x.KeHoachOtId,
                        LoaiOtId = x.LoaiOtId,
                        TenKeHoach = x.TenKeHoach,
                        NgayDeXuat = x.NgayDeXuat,
                        NguoiDeXuatId = x.NguoiDeXuatId,
                        NgayBatDau = x.NgayBatDau,
                        NgayKetThuc = x.NgayKetThuc,
                        DiaDiem = x.DiaDiem,
                        GioBatDau = x.GioBatDau,
                        GioKetThuc = x.GioKetThuc,
                        LyDo = x.LyDo,
                        HanDangKy = x.HanDangKy,
                        HanPheDuyetDangKy = x.HanPheDuyetDangKy,
                        HanPheDuyetKeHoach = x.HanPheDuyetKeHoach,
                        GhiChu = x.GhiChu,
                        TrangThai = x.TrangThai,
                        CreatedById = x.CreatedById,
                        CreatedDate = x.CreatedDate,
                        LoaiOTName = listLoaiOt.FirstOrDefault(y => y.CategoryId == x.LoaiOtId).CategoryName,
                    }).OrderByDescending(x => x.CreatedDate).ToList();

                if (isAccess != true)
                {
                    var thanhVienPhongBan = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    //Nếu là trưởng bộ phận (IsManager = 1)
                 
                    //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt
                    var listId = context.PhongBanPheDuyetDoiTuong
                        .Where(x => (x.DoiTuongApDung == 12 || x.DoiTuongApDung == 13) &&
                                    x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                        .ToList();
                    

                    //Nếu là quản lý
                    if (thanhVienPhongBan.IsManager == 1)
                    {
                        //list thành viên cùng phòng ban 
                        var listEmpIdOrg = listEmp.Where(x => x.OrganizationId == employeeLogin.OrganizationId).Select(x => x.EmployeeId).ToList();

                        //Các kế hoạch OT mà phòng ban của người đăng nhập được tham gia
                        var listKehoachtOtIdPhongBanThamGia = context.KeHoachOtPhongBan.Where(x => x.OrganizationId == employeeLogin.OrganizationId.Value)
                                .Select(x => x.KeHoachOtId).Distinct().ToList();

                        ListKeHoachOt = ListKeHoachOt.Where(x => 

                            x.NguoiDeXuatId == user.EmployeeId  || //Người đăng nhập tạo

                            (listEmpIdOrg.Contains(x.NguoiDeXuatId.Value) && x.TrangThai != 1) || // cùng phòng ban và trạng thái khác 1: mới  

                            listId.Contains(x.KeHoachOtId) ||  //Các kế hoạch cần phê duyệt

                            (listKehoachtOtIdPhongBanThamGia.Contains(x.KeHoachOtId.Value) && x.TrangThai != 1)
                            //Các kế hoạch OT mà phòng ban của người đăng nhập được tham gia và có trạng thái khác Mới
                            ).ToList();
                    }
                    else
                    //Nếu là nhân viên
                    {
                        //Các kế hoạch OT mà phòng ban của người đăng nhập được tham gia và có trạng thái khác Mới
                        var listKehoachtOtIdPhongBanThamGia = context.KeHoachOtPhongBan.Where(x => x.OrganizationId == employeeLogin.OrganizationId.Value)
                                .Select(x => x.KeHoachOtId).Distinct().ToList();
                        ListKeHoachOt = ListKeHoachOt.Where(x =>
                                x.NguoiDeXuatId == employeeLogin.EmployeeId  ||
                                (listKehoachtOtIdPhongBanThamGia.Contains(x.KeHoachOtId.Value) && x.TrangThai != 1)
                        ).ToList();
                    }
                }
                else
                {
                    //Lấy các kế hoạch người đăng nhập tạo và các đề xuất có trạng thái kahsc mới
                    ListKeHoachOt = ListKeHoachOt.Where(x =>
                                x.NguoiDeXuatId == employeeLogin.EmployeeId || //Người đăng nhập tạo
                                (x.NguoiDeXuatId != employeeLogin.EmployeeId && x.TrangThai != 1)
                        //không phải người đăng nhập tạo và có thái khác  Mới
                        ).ToList();
                }

                var listTrangThaiKeHoachOt = GeneralList.GetTrangThais("TrangThaiKeHoachOt").ToList();

                var companyConfigEntity = context.CompanyConfiguration.FirstOrDefault();
                var companyConfig = new CompanyConfigEntityModel();
                companyConfig.CompanyId = companyConfigEntity.CompanyId;
                companyConfig.CompanyName = companyConfigEntity.CompanyName;
                companyConfig.Email = companyConfigEntity.Email;
                companyConfig.Phone = companyConfigEntity.Phone;
                companyConfig.TaxCode = companyConfigEntity.TaxCode;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;

                return new GetMasterSearchKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    listKeHoachOt = ListKeHoachOt,
                    listTrangThaiKeHoach = listTrangThaiKeHoachOt,
                    CompanyConfig = companyConfig,
                };
            }
            catch (Exception e)
            {
                return new GetMasterSearchKeHoachOtResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterDataKeHoachOtDetailResult GetMasterDataKeHoachOtDetail(GetMasterDataKeHoachOtDetailParameter parameter)
        {
            try
            {
                var listOrg = context.Organization.Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationCode = y.OrganizationCode,
                    OrganizationName = y.OrganizationName,
                    Level = y.Level,
                    ParentId = y.ParentId
                }).ToList();
                var listLoaiOt = context.CauHinhOt.Where(x => x.Active == true).ToList();
                var kehoachOt = context.KeHoachOt.Where(x => x.KeHoachOtId == parameter.KeHoachOtId)
                   .Select(y => new KeHoachOt
                   {
                       KeHoachOtId = y.KeHoachOtId,
                       LoaiOtId = y.LoaiOtId,
                       TenKeHoach = y.TenKeHoach,
                       NgayDeXuat = y.NgayDeXuat,
                       NguoiDeXuatId = y.NguoiDeXuatId,
                       DonViId = y.DonViId,
                       ChucVuId = y.ChucVuId,
                       NgayBatDau = y.NgayBatDau,
                       NgayKetThuc = y.NgayKetThuc,
                       GioBatDau = y.GioBatDau,
                       GioKetThuc = y.GioKetThuc,
                       LyDo = y.LyDo,
                       HanDangKy = y.HanDangKy,
                       GhiChu = y.GhiChu,
                       TrangThai = y.TrangThai,
                       Active = y.Active
                   }).FirstOrDefault();

                var listKeHoachOtThanhVien = context.KeHoachOtThanhVien
                    .Where(x => x.KeHoachOtId == parameter.KeHoachOtId).ToList();
                var listKeHoachOtPhongBan = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == parameter.KeHoachOtId)
                    .ToList();

                return new GetMasterDataKeHoachOtDetailResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    KeHoachOt = kehoachOt,
                    ListKeHoachOtPhongBan = listKeHoachOtPhongBan,
                    ListOrganization = listOrg,
                    ListLoaiOt = listLoaiOt
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataKeHoachOtDetailResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public GetMasterDataKeHoachOtPheDuyetResult GetMasterDataKeHoachOtPheDuyet(GetMasterDataKeHoachOtPheDuyetParameter parameter)
        {
            try
            {
                var listOrg = context.Organization.Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationCode = y.OrganizationCode,
                    OrganizationName = y.OrganizationName,
                    Level = y.Level,
                    ParentId = y.ParentId
                }).ToList();
                var listLoaiOt = context.CauHinhOt.Where(x => x.Active == true).ToList();
                var kehoachOt = context.KeHoachOt.Where(x => x.KeHoachOtId == parameter.KeHoachOtId)
                   .Select(y => new KeHoachOt
                   {
                       KeHoachOtId = y.KeHoachOtId,
                       LoaiOtId = y.LoaiOtId,
                       TenKeHoach = y.TenKeHoach,
                       NgayDeXuat = y.NgayDeXuat,
                       NguoiDeXuatId = y.NguoiDeXuatId,
                       DonViId = y.DonViId,
                       ChucVuId = y.ChucVuId,
                       NgayBatDau = y.NgayBatDau,
                       NgayKetThuc = y.NgayKetThuc,
                       GioBatDau = y.GioBatDau,
                       GioKetThuc = y.GioKetThuc,
                       LyDo = y.LyDo,
                       HanDangKy = y.HanDangKy,
                       GhiChu = y.GhiChu,
                       TrangThai = y.TrangThai,
                       Active = y.Active
                   }).FirstOrDefault();
                var listKeHoachOtThanhVien = context.KeHoachOtThanhVien.Where(x => x.KeHoachOtId == parameter.KeHoachOtId).ToList();
                var listKeHoachOtPhongBan = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == parameter.KeHoachOtId).ToList();

                return new GetMasterDataKeHoachOtPheDuyetResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    KeHoachOt = kehoachOt,
                    ListKeHoachOtPhongBan = listKeHoachOtPhongBan,
                    ListOrganization = listOrg,
                    ListLoaiOt = listLoaiOt
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataKeHoachOtPheDuyetResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        private string GenCodeEmployee()
        {
            var code = "";
            var prefix = "RM";

            var listEmpCode = context.Employee.Where(x => x.EmployeeCode.Contains(prefix)).Select(y => new
            {
                EmployeeCode = Int32.Parse(y.EmployeeCode.Substring(2))
            }).OrderByDescending(z => z.EmployeeCode).ToList();

            if (listEmpCode.Count == 0)
            {
                code = prefix + 1.ToString("D3");
            }

            if (listEmpCode.Count < 999)
            {
                code = prefix + (listEmpCode.Count + 1).ToString("D3");
            }
            else
            {
                code = prefix + (listEmpCode.Count + 1).ToString();
            }

            return code;
        }

        public DeXuatTangLuongDetailResult DeXuatTangLuongDetail(DeXuatTangLuongDetailParameter request)
        {
            try
            {
                Decimal quyLuongConLai = 0;
                var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.DeXuatTangLuongId == request.DeXuatTLId && x.Active == true);
                var listAllOrg = context.Organization.ToList();
                var listAllPosition = context.Position.ToList();

                if (deXuatTangLuong == null)
                {
                    return new DeXuatTangLuongDetailResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Đề xuất tăng lương không tồn tại trong hệ thống",
                    };
                }

                var thongTinDeXuatTL = new DeXuatTangLuongEntityModel();
                thongTinDeXuatTL.DeXuatTangLuongId = deXuatTangLuong.DeXuatTangLuongId;
                thongTinDeXuatTL.TenDeXuat = deXuatTangLuong.TenDeXuat;
                thongTinDeXuatTL.LoaiDeXuat = deXuatTangLuong.LoaiDeXuat;
                thongTinDeXuatTL.NgayDeXuat = deXuatTangLuong.NgayDeXuat;
                thongTinDeXuatTL.NguoiDeXuatId = deXuatTangLuong.NguoiDeXuatId;
                thongTinDeXuatTL.PhongBanId = deXuatTangLuong.PhongBanId;
                thongTinDeXuatTL.ChucVuId = deXuatTangLuong.ChucVuId;
                thongTinDeXuatTL.NgayApDung = deXuatTangLuong.NgayApDung;
                thongTinDeXuatTL.GhiChu = deXuatTangLuong.GhiChu;
                thongTinDeXuatTL.TrangThai = deXuatTangLuong.TrangThai;
                thongTinDeXuatTL.CreatedById = deXuatTangLuong.CreatedById;
                thongTinDeXuatTL.CreatedDate = deXuatTangLuong.CreatedDate;

                var nhanVienDuocDeXuat = context.DeXuatTangLuongNhanVien.Where(x => x.Active == true && x.DeXuatTangLuongId == request.DeXuatTLId).Select(
                        NvTL => new DeXuatTangLuongNhanVienEntityModel
                        {
                            DeXuatTangLuongNhanVienId = NvTL.DeXuatTangLuongNhanVienId,
                            DeXuatTangLuongId = NvTL.DeXuatTangLuongId,
                            EmployeeId = NvTL.EmployeeId,
                            PhongBanId = NvTL.PhongBanId,
                            ChucVuId = NvTL.ChucVuId,
                            LuongHienTai = NvTL.LuongHienTai,
                            LuongDeXuat = NvTL.LuongDeXuat,
                            LyDoDeXuat = NvTL.LyDoDeXuat,
                            LyDo = NvTL.LyDo,
                            TrangThai = NvTL.TrangThai,
                            MucChechLech = NvTL.LuongDeXuat - NvTL.LuongHienTai,
                            CreatedById = NvTL.CreatedById,
                            CreatedDate = NvTL.CreatedDate
                        }).ToList();

                var listAllEmp = context.Employee.Where(x => x.Active == true).ToList();
                var listEmpDeXuatId = nhanVienDuocDeXuat.Select(x => x.EmployeeId).ToList();
                var listEmpInfor = listAllEmp.Where(x => listEmpDeXuatId.Contains(x.EmployeeId)).ToList();
                nhanVienDuocDeXuat.ForEach(item =>
                {
                    var empInfor = listEmpInfor.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                    if (empInfor != null)
                    {
                        item.EmployeeCode = empInfor.EmployeeCode;
                        item.EmployeeName = empInfor.EmployeeName;
                        item.EmployeeCodeName = empInfor.EmployeeCode + " - " + empInfor.EmployeeName;
                        item.OrganizationName = listAllOrg.FirstOrDefault(x => x.OrganizationId == empInfor.OrganizationId)?.OrganizationName;
                        item.PositionName = listAllPosition.FirstOrDefault(x => x.PositionId == empInfor.PositionId)?.PositionName;
                    }
                });


                if (thongTinDeXuatTL.LoaiDeXuat == 2)
                {

                    //Lấy list thang điểm 
                    var listDangCauTL = GeneralList.GetTrangThais("DangCauTraLoi").ToList();
                    //List mucDanhgia (A,B,C,D...)
                    var mucDanhGiaCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "MUCDANHGIA").CategoryTypeId;
                    var listMucDanhGiaName = context.Category.Where(x => x.CategoryTypeId == mucDanhGiaCategoryTypeId).ToList();

                    var listEmp = nhanVienDuocDeXuat.Select(x => x.EmployeeId).ToList();
                    var nhanVienKyDanhGia = context.NhanVienKyDanhGia.Where(x => listEmp.Contains(x.NguoiDuocDanhGiaId) && x.KyDanhGiaId == deXuatTangLuong.KyDanhGiaId).ToList();

                    //Quỹ lương của phòng ban đó
                    quyLuongConLai = context.NhanVienKyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == nhanVienKyDanhGia.First().KyDanhGiaId && x.NguoiDuocDanhGiaId == Guid.Empty && x.RootOrgId == nhanVienKyDanhGia.First().RootOrgId).QuyLuong;


                    var listNhanVienKyDanhGiaId = nhanVienKyDanhGia.Select(x => x.NhanVienKyDanhGiaId).ToList();

                    var listDanhGiaNhanVien = context.DanhGiaNhanVien.Where(x => listNhanVienKyDanhGiaId.Contains(x.NhanVienKyDanhGiaId)).ToList();


                    //Phiếu đnáh giá có hiệu lực
                    var trangThaiHieuLucPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                    var listPhieuDanhGia = context.PhieuDanhGia.Where(x => x.TrangThaiPhieuDanhGia == trangThaiHieuLucPhieuDanhGia).ToList();

                    //Lấy thang điểm đánh giá
                    var listPhieuDanhGiaId = listPhieuDanhGia.Select(x => x.ThangDiemDanhGiaId).ToList();
                    var listThangDiemDanhGia = context.MucDanhGia.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();
                    var listMucDanhGia = context.MucDanhGiaDanhGiaMapping.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();


                    var listMucDanhGiaApDung = listMucDanhGia
                        .Select(x => new MucDanhGiaDanhGiaMappingEntityModel
                        {
                            MucDanhGiaMasterDataName = listMucDanhGiaName.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName,
                            mucDanhGiaMasterDataNameCustom = listMucDanhGiaName
                                .FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName + "( " + x.DiemTu + " - " + x.DiemDen + " )",
                            DiemTu = x.DiemTu,
                            DiemDen = x.DiemDen,
                            MucDanhGiaId = x.MucDanhGiaId,
                            MucDanhGiaDanhGiaMappingId = x.MucDanhGiaDanhGiaMappingId,
                            MucDanhGiaMasterDataId = x.MucDanhGiaMasterDataId,
                        }).ToList();

                    var listCauHinhPhieuDanhGia = context.NoiDungKyDanhGia.Where(x => x.KyDanhGiaId == deXuatTangLuong.KyDanhGiaId)
                   .Select(x => new NoiDungKyDanhGiaEntityModel()
                   {
                       NoiDungKyDanhGiaId = x.NoiDungKyDanhGiaId,
                       KyDanhGiaId = x.KyDanhGiaId,
                       PhieuDanhGiaId = x.PhieuDanhGiaId,
                       PositionId = x.PositionId
                   }).ToList();

                    nhanVienDuocDeXuat.ForEach(item =>
                    {
                        var nhanVienDanhGia = nhanVienKyDanhGia.FirstOrDefault(x => x.NguoiDuocDanhGiaId == item.EmployeeId);
                        var danhGiaNhanVien = listDanhGiaNhanVien.FirstOrDefault(x => x.NhanVienKyDanhGiaId == nhanVienDanhGia.NhanVienKyDanhGiaId);
                        item.PhieuTuDanhGiaId = danhGiaNhanVien?.DanhGiaNhanVienId;

                        //lấy thang điểm của nhân viên được áp dụng
                        var phieuDanhGiaId = listCauHinhPhieuDanhGia.FirstOrDefault(x => x.PositionId == item.ChucVuId)?.PhieuDanhGiaId;
                        var mucDanhGiaId = listPhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == phieuDanhGiaId)?.ThangDiemDanhGiaId;
                        var listMucDanhGiaApDungChoNV = listMucDanhGiaApDung.Where(x => x.MucDanhGiaId == mucDanhGiaId).ToList();

                        //Đánh giá trưởng phòng
                        item.DiemDanhGia = listMucDanhGiaName.FirstOrDefault(x => x.CategoryId == danhGiaNhanVien.MucDanhGiaMasterDataId.Value)?.CategoryName;
                        //Tự đánh giá
                        item.TongDiemTuDanhGia = danhGiaNhanVien.TongDiemTuDanhGia;
                        var diemTuDanhGiaName = listMucDanhGiaApDungChoNV.FirstOrDefault(x => x.DiemTu <= item.TongDiemTuDanhGia && item.TongDiemTuDanhGia <= x.DiemDen);
                        item.TongDiemTuDanhGiaName = diemTuDanhGiaName?.MucDanhGiaMasterDataName + "(" + item.TongDiemTuDanhGia.ToString() + ")";
                        //Quản lý đán giá
                        item.TongDiemDanhGia = danhGiaNhanVien.TongDiemDanhGia;
                        if(danhGiaNhanVien.TongDiemDanhGia != null)
                        {
                            if(danhGiaNhanVien.TongDiemDanhGia != 0)
                            {
                                var diemDanhGiaName = listMucDanhGiaApDungChoNV.FirstOrDefault(x => x.DiemTu <= item.TongDiemDanhGia && item.TongDiemDanhGia <= x.DiemDen);
                                item.TongDiemDanhGiaName = diemDanhGiaName?.MucDanhGiaMasterDataName + "(" + item.TongDiemDanhGia.ToString() + ")";
                            }
                        }

                        item.MucLuongDeXuatQuanLy = danhGiaNhanVien.MucLuongDeXuatQuanLy;
                        var NguoiDanhGia = listAllEmp.FirstOrDefault(y => y.EmployeeId == nhanVienDanhGia.NguoiDanhGiaId);
                        item.NguoiDanhGiaName = NguoiDanhGia?.EmployeeCode + " - " + NguoiDanhGia?.EmployeeName;
                        item.TongKetQua = danhGiaNhanVien.TongKetQua;
                        item.MucLuongCu = danhGiaNhanVien.MucLuongCu;
                    });
                }


                var listPhongBan = context.Organization.Where(x => x.Active == true).Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationName = y.OrganizationName,
                    OrganizationCode = y.OrganizationCode
                }).ToList();

                var listChucVu = context.Position.Where(x => x.Active == true).Select(y => new PositionModel
                {
                    PositionId = y.PositionId,
                    PositionCode = y.PositionCode,
                    PositionName = y.PositionName
                }).ToList();

                var companyConfigEntity = context.CompanyConfiguration.FirstOrDefault();
                var companyConfig = new CompanyConfigEntityModel();
                companyConfig.CompanyId = companyConfigEntity.CompanyId;
                companyConfig.CompanyName = companyConfigEntity.CompanyName;
                companyConfig.Email = companyConfigEntity.Email;
                companyConfig.Phone = companyConfigEntity.Phone;
                companyConfig.TaxCode = companyConfigEntity.TaxCode;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;

                //Kiểm tra xem bước phê duyệt hiện tại có phải bước cuối hay không
                bool isShowNgayApDung = false;
                var buocHienTaiQuyTrinh = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatTangLuong.DeXuatTangLuongId && x.TrangThai == 1 && x.DoiTuongApDung == 10).Count();
                var quyTrinhApDung = context.QuyTrinh.FirstOrDefault(x => x.HoatDong && x.DoiTuongApDung == 10);
                var cauHinhQuyTrinhApDung = context.CauHinhQuyTrinh.FirstOrDefault(x => x.QuyTrinhId == quyTrinhApDung.Id);
                var soBuocCauHinhApDung = context.CacBuocQuyTrinh.Where(x => x.CauHinhQuyTrinhId == cauHinhQuyTrinhApDung.Id).Count();
                if (buocHienTaiQuyTrinh == soBuocCauHinhApDung - 1)
                {
                    if (thongTinDeXuatTL.TrangThai == 2)
                    {
                        isShowNgayApDung = true;
                    }
                }

                //lấy kỳ lương mới nhất, trạng thái == 5
                var kyLuongMoiNhat = context.KyLuong.Where(x => x.TrangThai == 5).OrderByDescending(x => x.TuNgay).ToList();
                DateTime? ngayCuoiCungKyLuong = null;
                if (kyLuongMoiNhat != null)
                {
                    if (kyLuongMoiNhat.Count() > 0)
                    {
                        ngayCuoiCungKyLuong = kyLuongMoiNhat.First().DenNgay;
                    }
                }

                var user = context.User.FirstOrDefault(x => x.UserId == request.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                //Điều kiện hiển thị button
                bool isShowGuiXacNhan = false;
                bool isShowXacNhan = false;
                bool isShowTuChoi = false;
                bool isShowHuyYeuCauXacNhan = false;
                bool isShowLuu = false;
                bool isShowXoa = false;
                bool isShowHuy = false;
                bool isShowHoanThanh = false;
                bool isShowDatVeMoi = false;

                //Lấy quy trình
                //Đối tượng áp dụng: 10: Đề xuất tăng lương
                var quyTrinh = context.QuyTrinh.FirstOrDefault(x => x.DoiTuongApDung == 10 && x.HoatDong);
                if (quyTrinh == null)
                {
                    return new DeXuatTangLuongDetailResult()
                    {
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        Message = "Chưa có quy trình phê duyệt"
                    };
                }

                var cauHinhQuyTrinh = context.CauHinhQuyTrinh.FirstOrDefault(x => x.QuyTrinhId == quyTrinh.Id);
                var listIdCacBuocQuyTrinh = context.CacBuocQuyTrinh
                    .Where(x => x.CauHinhQuyTrinhId == cauHinhQuyTrinh.Id).Select(y => y.Id).ToList();
                var listIdPhongBanTrongCacBuocQuyTrinh = context.PhongBanTrongCacBuocQuyTrinh
                    .Where(x => listIdCacBuocQuyTrinh.Contains(x.CacBuocQuyTrinhId)).Select(y => y.OrganizationId)
                    .ToList();

                //Trạng thái đề xuất
                if (deXuatTangLuong.TrangThai == 1) // mới
                {
                    if (deXuatTangLuong.CreatedById == user.UserId)
                    {
                        isShowGuiXacNhan = true;
                        isShowXoa = true;
                        isShowLuu = true;
                    }
                    else if (deXuatTangLuong.NguoiDeXuatId == employee.EmployeeId)
                    {
                        isShowGuiXacNhan = true;
                        isShowXoa = true;
                        isShowLuu = true;
                    }
                    else
                    {
                        var phongBanNguoiDangNhap =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatTangLuong.NguoiDeXuatId);

                        var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatTangLuong.CreatedById);

                        var phongBanNguoiTao =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                        var phongBanNhanVienBanHang =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatTangLuong.NguoiDeXuatId);

                        //Trưởng bộ phận
                        if (phongBanNguoiDangNhap?.IsManager == 1)
                        {
                            if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                                phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                            {
                                isShowGuiXacNhan = true;
                                isShowXoa = true;
                                isShowLuu = true;
                            }
                        }
                    }
                }

                if (deXuatTangLuong.TrangThai == 2) // chờ phê duyệt
                {
                    var buocHienTai = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatTangLuong.DeXuatTangLuongId &&
                                                                           x.DoiTuongApDung == 10 &&
                                                                           x.TrangThai == 0)
                            .OrderByDescending(z => z.Stt)
                            .FirstOrDefault();

                    //Nếu là phê duyệt trưởng bộ phận
                    if (buocHienTai?.LoaiPheDuyet == 1)
                    {
                        var listDonViId_NguoiPhuTrach = context.ThanhVienPhongBan
                            .Where(x => x.EmployeeId == deXuatTangLuong.NguoiDeXuatId)
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId_NguoiPhuTrach.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowXacNhan = true;
                            isShowTuChoi = true;
                        }
                    }
                    //Nếu là phòng ban phê duyệt
                    else if (buocHienTai?.LoaiPheDuyet == 2)
                    {
                        //Lấy list Phòng ban đã phê duyệt ở bước hiện tại
                        var listDonViIdDaPheDuyet = context.PhongBanApDung
                            .Where(x => x.CacBuocApDungId == buocHienTai.Id &&
                                        x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId)
                            .Select(y => y.OrganizationId).ToList();

                        //Lấy list Phòng ban chưa phê duyệt ở bước hiện tại
                        var listDonViId = context.PhongBanTrongCacBuocQuyTrinh
                            .Where(x => x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId &&
                                        !listDonViIdDaPheDuyet.Contains(x.OrganizationId))
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowXacNhan = true;
                            isShowTuChoi = true;
                        }
                    }
                }

                // trang thai cho phe duyet
                if (deXuatTangLuong.TrangThai == 2 && user.EmployeeId == deXuatTangLuong.NguoiDeXuatId)
                {
                    var count =
                        context.CacBuocApDung.Count(x => x.ObjectNumber == deXuatTangLuong.DeXuatTangLuongId &&
                                                         x.DoiTuongApDung == 10 && x.TrangThai == 1);

                    if (count == 0)
                    {
                        isShowHuyYeuCauXacNhan = true;
                    }
                }

                if (deXuatTangLuong.TrangThai == 3) //Đã Phê duyệt 
                {
                    var phongBanNguoiDangNhap =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                    var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatTangLuong.CreatedById);
                    var phongBanNguoiTao =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                    var phongBanNhanVienBanHang =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatTangLuong.NguoiDeXuatId);

                    //Trưởng bộ phận
                    if (phongBanNguoiDangNhap?.IsManager == 1)
                    {
                        if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                            phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                        {
                            isShowHuy = true;
                        }

                        if (listIdPhongBanTrongCacBuocQuyTrinh.Contains(phongBanNguoiDangNhap.OrganizationId))
                        {
                            isShowHuy = true;
                        }
                    }
                }

                if (deXuatTangLuong.TrangThai == 3)
                {
                    var phongBanNguoiDangNhap =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                    var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatTangLuong.CreatedById);
                    var phongBanNguoiTao =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId.Value);

                    var phongBanNhanVienBanHang =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatTangLuong.NguoiDeXuatId);

                    //Trưởng bộ phận phòng ban người tạo hoặc Trưởng bộ phận phòng ban của nhân viên bán hàng
                    if (phongBanNguoiDangNhap?.IsManager == 1)
                    {
                        if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                            phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                        {
                            isShowHoanThanh = true;
                        }
                    }
                }
                
                if (deXuatTangLuong.TrangThai == 4 && deXuatTangLuong.CreatedById == request.UserId ) // Từ chối
                {
                    isShowDatVeMoi = true;
                }

                #region Lấy dách file đinh kèm 
                var objectType = "DXTL";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                                .Where(x => x.ObjectNumber == deXuatTangLuong.DeXuatTangLuongId && x.FolderId == folder.FolderId).Select(y =>
                                    new FileInFolderEntityModel
                                    {
                                        Size = y.Size,
                                        ObjectId = y.ObjectId,
                                        Active = y.Active,
                                        FileExtension = y.FileExtension,
                                        FileInFolderId = y.FileInFolderId,
                                        FileName = y.FileName,
                                        FolderId = y.FolderId,
                                        ObjectType = y.ObjectType,
                                        ObjectNumber = y.ObjectNumber,
                                        CreatedById = y.CreatedById,
                                        CreatedDate = y.CreatedDate,
                                        UpdatedById = y.UpdatedById,
                                        UpdatedDate = y.UpdatedDate
                                    }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                });
                #endregion

                return new DeXuatTangLuongDetailResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy thông tin đề xuất thành công",
                    DeXuatTangLuong = thongTinDeXuatTL,
                    NhanVienDuocDeXuats = nhanVienDuocDeXuat,
                    ListPosition = listChucVu,
                    ListOrganization = listPhongBan,
                    CompanyConfig = companyConfig,
                    IsShowGuiXacNhan = isShowGuiXacNhan,
                    IsShowXacNhan = isShowXacNhan,
                    IsShowTuChoi = isShowTuChoi,
                    IsShowLuu = isShowLuu,
                    IsShowXoa = isShowXoa,
                    IsShowHuy = isShowHuy,
                    IsShowHuyYeuCauXacNhan = isShowHuyYeuCauXacNhan,
                    IsShowHoanThanh = isShowHoanThanh,
                    IsShowDatVeMoi = isShowDatVeMoi,
                    IsShowNgayApDung = isShowNgayApDung,
                    NgayCuoiCungKyLuong = ngayCuoiCungKyLuong,
                    ListFileInFolder = listFileResult,
                    QuyLuongConLai = quyLuongConLai,
                };
            }
            catch (Exception e)
            {
                return new DeXuatTangLuongDetailResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public ListDeXuatTangLuongResult ListDeXuatTangLuong(ListDeXuatTangLuongParameter request)
        {
            try
            {

                #region Check permision: manager
                var user = context.User.FirstOrDefault(x => x.UserId == request.UserId && x.Active == true);
                if (user == null)
                {
                    return new ListDeXuatTangLuongResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new ListDeXuatTangLuongResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }

                #endregion
                var lstAllDeXuatNhanVien = context.DeXuatTangLuongNhanVien.ToList();
                var lstAllEmp = context.Employee.Where(x => x.Active == true).ToList();

                var employeeId = user.EmployeeId;
                var employeeLogin = lstAllEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                var isManager = employeeLogin.IsManager;

                #region Phân quyền dữ liệu theo quy trình phê duyệt

                var thanhVienPhongBan =
                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employeeLogin.EmployeeId);

                var thongTinDeXuatTL = new List<DeXuatTangLuongEntityModel>();

                var isAccess = context.Organization.FirstOrDefault(x => x.OrganizationId == employeeLogin.OrganizationId).IsAccess;

                if (isAccess != true)
                {
                    //Nếu là trưởng bộ phận (IsManager = 1)
                    if (thanhVienPhongBan.IsManager == 1)
                    {
                        //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt
                        var listId = context.PhongBanPheDuyetDoiTuong
                            .Where(x => x.DoiTuongApDung == 10 &&
                                        x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                            .ToList();

                        var listEmpIdPhongBan = lstAllEmp.Where(x => x.OrganizationId == employeeLogin.OrganizationId).Select(x => x.EmployeeId).ToList();
                        thongTinDeXuatTL = context.DeXuatTangLuong
                         .Where(x =>
                            (request.NguoiDeXuatId == null || x.NguoiDeXuatId == request.NguoiDeXuatId) &&
                            (request.ThoiGianDeXuat == null || x.NgayDeXuat.ToShortDateString() == request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                            (request.TrangThai == null || x.TrangThai == request.TrangThai) &&
                            (listId.Contains(x.DeXuatTangLuongId) // cần phê duyệt
                            || x.NguoiDeXuatId == employeeLogin.EmployeeId // người đề xuất
                            || listEmpIdPhongBan.Contains(x.NguoiDeXuatId) && x.TrangThai != 1) // cùng phòng ban khác trạng thái mới

                            && x.Active == true)
                         .Select(y => new DeXuatTangLuongEntityModel()
                         {
                             DeXuatTangLuongId = y.DeXuatTangLuongId,
                             TenDeXuat = y.TenDeXuat,
                             LoaiDeXuat = y.LoaiDeXuat,
                             NgayDeXuat = y.NgayDeXuat,
                             NguoiDeXuatId = y.NguoiDeXuatId,
                             PhongBanId = y.PhongBanId,
                             ChucVuId = y.ChucVuId,
                             GhiChu = y.GhiChu,
                             TrangThai = y.TrangThai,
                             TongMucDeXuat = lstAllDeXuatNhanVien.Where(x => x.DeXuatTangLuongId == y.DeXuatTangLuongId).Sum(x => x.LuongDeXuat - x.LuongHienTai),
                             NguoiDeXuatName = lstAllEmp.FirstOrDefault(x => x.EmployeeId == y.NguoiDeXuatId).EmployeeName,
                             CreatedById = y.CreatedById,
                             CreatedDate = y.CreatedDate
                         }).OrderByDescending(x => x.CreatedDate).ToList();

                    }
                    //Nếu là nhân viên thường (IsManager = 0)
                    else
                    {
                        thongTinDeXuatTL = context.DeXuatTangLuong
                           .Where(x =>
                              (request.NguoiDeXuatId == null || x.NguoiDeXuatId == request.NguoiDeXuatId) &&
                              (request.ThoiGianDeXuat == null || x.NgayDeXuat.ToShortDateString() == request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                              (request.TrangThai == null || x.TrangThai == request.TrangThai) && x.NguoiDeXuatId == employeeLogin.EmployeeId &&
                              x.Active == true)
                           .Select(y => new DeXuatTangLuongEntityModel()
                           {
                               DeXuatTangLuongId = y.DeXuatTangLuongId,
                               TenDeXuat = y.TenDeXuat,
                               LoaiDeXuat = y.LoaiDeXuat,
                               NgayDeXuat = y.NgayDeXuat,
                               NguoiDeXuatId = y.NguoiDeXuatId,
                               PhongBanId = y.PhongBanId,
                               ChucVuId = y.ChucVuId,
                               GhiChu = y.GhiChu,
                               TrangThai = y.TrangThai,
                               TongMucDeXuat = lstAllDeXuatNhanVien.Where(x => x.DeXuatTangLuongId == y.DeXuatTangLuongId).Sum(x => x.LuongDeXuat - x.LuongHienTai),
                               NguoiDeXuatName = lstAllEmp.FirstOrDefault(x => x.EmployeeId == y.NguoiDeXuatId).EmployeeName,
                               CreatedById = y.CreatedById,
                               CreatedDate = y.CreatedDate
                           }).OrderByDescending(x => x.CreatedDate).ToList();
                    }
                }
                else
                {
                    thongTinDeXuatTL = context.DeXuatTangLuong
                     .Where(x =>
                        (request.NguoiDeXuatId == null || x.NguoiDeXuatId == request.NguoiDeXuatId) &&
                        (request.ThoiGianDeXuat == null || x.NgayDeXuat.ToShortDateString() == request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                        (request.TrangThai == null || x.TrangThai == request.TrangThai) &&
                        (x.CreatedById == user.UserId || // Theo người tạo
                        (x.CreatedById != user.UserId && x.TrangThai != 1)) // cùng phòng ban khác trạng thái mới
                        && x.Active == true)
                     .Select(y => new DeXuatTangLuongEntityModel()
                     {
                         DeXuatTangLuongId = y.DeXuatTangLuongId,
                         TenDeXuat = y.TenDeXuat,
                         LoaiDeXuat = y.LoaiDeXuat,
                         NgayDeXuat = y.NgayDeXuat,
                         NguoiDeXuatId = y.NguoiDeXuatId,
                         PhongBanId = y.PhongBanId,
                         ChucVuId = y.ChucVuId,
                         GhiChu = y.GhiChu,
                         TrangThai = y.TrangThai,
                         TongMucDeXuat = lstAllDeXuatNhanVien.Where(x => x.DeXuatTangLuongId == y.DeXuatTangLuongId).Sum(x => x.LuongDeXuat - x.LuongHienTai),
                         NguoiDeXuatName = lstAllEmp.FirstOrDefault(x => x.EmployeeId == y.NguoiDeXuatId).EmployeeName,
                         CreatedById = y.CreatedById,
                         CreatedDate = y.CreatedDate
                     }).OrderByDescending(x => x.CreatedDate).ToList();
                }
               

                #endregion

                return new ListDeXuatTangLuongResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy danh sách thành công",
                    ListDeXuatTangLuong = thongTinDeXuatTL,
                };
            }
            catch (Exception e)
            {
                return new ListDeXuatTangLuongResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }

        }

        public DeleteDeXuatTangLuongResult DeleteDeXuatTangLuong(DeleteDeXuatTangLuongParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {

                    var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.DeXuatTangLuongId == request.DeXuatId && x.Active == true);
                    if (deXuatTangLuong == null)
                    {
                        return new DeleteDeXuatTangLuongResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất tăng lương không tồn tại trên hệ thống",
                        };
                    }
                    if (deXuatTangLuong.TrangThai == 2 || deXuatTangLuong.TrangThai == 3)
                    {
                        return new DeleteDeXuatTangLuongResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Không thực hiện xóa đối với đề xuất có trạng thái Chờ phê duyệt và Đã Duyệt!",
                        };
                    }
                    var deXuatTangLuongNhanVien = context.DeXuatTangLuongNhanVien.Where(x => x.DeXuatTangLuongId == request.DeXuatId && x.Active == true).ToList();
                    deXuatTangLuong.Active = false;
                    deXuatTangLuongNhanVien.ForEach(item =>
                    {
                        item.Active = false;
                    });
                    context.DeXuatTangLuong.Update(deXuatTangLuong);
                    context.DeXuatTangLuongNhanVien.UpdateRange(deXuatTangLuongNhanVien);
                    context.SaveChanges();
                    transaction.Commit();

                    return new DeleteDeXuatTangLuongResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Xóa đề xuất tăng lương thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteDeXuatTangLuongResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public UpdateDeXuatTangLuongResult UpdateDeXuatTangLuong(UpdateDeXuatTangLuongParameter request)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == request.FolderType);

            if (folder == null)
            {
                return new UpdateDeXuatTangLuongResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.DeXuatTangLuongId == request.DeXuatTangLuong.DeXuatTangLuongId);
                    if (deXuatTangLuong == null)
                    {
                        return new UpdateDeXuatTangLuongResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất tăng lương không tồn tại trong hệ thống",
                        };
                    }
                    deXuatTangLuong.TenDeXuat = request.DeXuatTangLuong.TenDeXuat.Trim();
                    deXuatTangLuong.LoaiDeXuat = request.DeXuatTangLuong.LoaiDeXuat;
                    deXuatTangLuong.NgayDeXuat = request.DeXuatTangLuong.NgayDeXuat;
                    deXuatTangLuong.NguoiDeXuatId = request.DeXuatTangLuong.NguoiDeXuatId;
                    deXuatTangLuong.NgayApDung = request.DeXuatTangLuong.NgayApDung ?? null;
                    deXuatTangLuong.TrangThai = request.DeXuatTangLuong.TrangThai;
                    deXuatTangLuong.Active = true;
                    deXuatTangLuong.UpdatedById = request.UserId;
                    deXuatTangLuong.UpdatedDate = DateTime.Now;
                    context.DeXuatTangLuong.Update(deXuatTangLuong);
                    context.SaveChanges();

                    var listNvDeXuat = context.DeXuatTangLuongNhanVien.Where(x => x.DeXuatTangLuongId == deXuatTangLuong.DeXuatTangLuongId && x.Active == true).ToList();
                    context.DeXuatTangLuongNhanVien.RemoveRange(listNvDeXuat);
                    context.SaveChanges();

                    List<DeXuatTangLuongNhanVien> listNhanVien = new List<DeXuatTangLuongNhanVien>();
                    request.NhanVienDuocDeXuats.ForEach(item =>
                    {
                        var newNV = new DeXuatTangLuongNhanVien();
                        newNV.DeXuatTangLuongId = deXuatTangLuong.DeXuatTangLuongId;
                        newNV.EmployeeId = item.EmployeeId;
                        newNV.PhongBanId = item.PhongBanId;
                        newNV.ChucVuId = item.ChucVuId;
                        newNV.LuongHienTai = item.LuongHienTai.Value;
                        newNV.LuongDeXuat = item.LuongDeXuat.Value;
                        newNV.LyDoDeXuat = item.LyDoDeXuat;
                        newNV.TrangThai = item.TrangThai;
                        newNV.Active = true;
                        newNV.UpdatedById = request.UserId;
                        newNV.UpdatedDate = DateTime.Now;
                        newNV.TrangThai = item.TrangThai;
                        listNhanVien.Add(newNV);
                    });
                    context.DeXuatTangLuongNhanVien.AddRange(listNhanVien);


                    if (request.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        request.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);


                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = request.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = request.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = deXuatTangLuong.DeXuatTangLuongId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                        item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);
                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {
                            return new UpdateDeXuatTangLuongResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }
                    context.SaveChanges();
                    transaction.Commit();
                    return new UpdateDeXuatTangLuongResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật đề xuất thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new UpdateDeXuatTangLuongResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DatVeMoiDeXuatTangLuongResult DatVeMoiDeXuatTangLuong(DatVeMoiDeXuatTangLuongParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.DeXuatTangLuongId == request.DeXuatTangLuongId && x.Active == true);
                    if (deXuatTangLuong == null)
                    {
                        return new DatVeMoiDeXuatTangLuongResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất tăng lương không tồn tại trong hệ thống",
                        };
                    }
                    deXuatTangLuong.TrangThai = 1; // tt mới
                    deXuatTangLuong.Active = true;
                    context.DeXuatTangLuong.Update(deXuatTangLuong);
                    context.SaveChanges();

                    var listNvDeXuat = context.DeXuatTangLuongNhanVien.Where(x => x.DeXuatTangLuongId == deXuatTangLuong.DeXuatTangLuongId && x.Active == true).ToList();

                    listNvDeXuat.ForEach(item =>
                    {
                        item.TrangThai = 1; // tt mới
                        item.Active = true;
                        item.LyDo = null;
                    });
                    context.DeXuatTangLuongNhanVien.UpdateRange(listNvDeXuat);
                    context.SaveChanges();


                    //Xóa các bước áp dụng của phê duyệt để làm mới
                    var listBuocPheDuyet = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatTangLuong.DeXuatTangLuongId).ToList();
                    context.CacBuocApDung.RemoveRange(listBuocPheDuyet);
                    context.SaveChanges();
                    transaction.Commit();
                    return new DatVeMoiDeXuatTangLuongResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Đặt về mới đề xuất tăng lương thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DatVeMoiDeXuatTangLuongResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TuChoiOrPheDuyetNhanVienDeXuatTLResult TuChoiOrPheDuyetNhanVienDeXuatTL(TuChoiOrPheDuyetNhanVienDeXuatTLParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var listEmployeeTangLuong = request.ListNV.Select(x => x.EmployeeId).ToList();
                    var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.DeXuatTangLuongId == request.DeXuatTangLuongId && x.Active == true);
                    if (deXuatTangLuong == null)
                    {
                        return new TuChoiOrPheDuyetNhanVienDeXuatTLResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất tăng lương không tồn tại trong hệ thống",
                        };
                    }
                    var listEmpInfor = context.Employee.Where(x => listEmployeeTangLuong.Contains(x.EmployeeId)).ToList();
                    var listNvDeXuat = context.DeXuatTangLuongNhanVien.Where(x => x.DeXuatTangLuongId == deXuatTangLuong.DeXuatTangLuongId && listEmployeeTangLuong.Contains(x.EmployeeId) && x.Active == true).ToList();

                    var listTrangThai = GeneralList.GetTrangThais("DXTangLuong");

                    listNvDeXuat.ForEach(item =>
                    {
                        if (request.IsXacNhan)
                        {
                            item.TrangThai = (byte)listTrangThai.FirstOrDefault(x => x.Value == 3).Value;
                        }
                        else
                        {
                            item.TrangThai = (byte)listTrangThai.FirstOrDefault(x => x.Value == 4).Value;

                        }
                        item.LyDo = request.ListNV.FirstOrDefault(x => x.EmployeeId == item.EmployeeId)?.LyDo;
                    });

                    //Nếu từ chối thì lưu note lý do từ chối
                    //Thêm ghi chú
                    if (request.IsXacNhan != true)
                    {
                        Note note = new Note();
                        note.NoteId = Guid.NewGuid();
                        note.ObjectId = Guid.Empty;
                        note.ObjectType = NoteObjectType.DXTL;
                        note.Type = "ADD";
                        note.Active = true;
                        note.CreatedById = request.UserId;
                        note.CreatedDate = DateTime.Now;
                        note.NoteTitle = "Đã thêm ghi chú";
                        note.ObjectNumber = request.DeXuatTangLuongId;
                        note.Description = "<p>Đã từ chối phê duyệt các nhân viên: ";
                        listNvDeXuat.ForEach(item =>
                        {
                            var emp = listEmpInfor.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                            if(emp != null)
                            {
                                note.Description = note.Description + emp.EmployeeCode + " ,";
                            }
                        });
                        note.Description = note.Description.Substring(0, note.Description.Count() - 1);
                        note.Description = note.Description + "</p><p>lý do: " +  request.LyDoTuChoi + "</p>";
                        context.Note.Add(note);
                    }

                    context.DeXuatTangLuongNhanVien.UpdateRange(listNvDeXuat);
                    context.SaveChanges();
                    transaction.Commit();
                    return new TuChoiOrPheDuyetNhanVienDeXuatTLResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật trạng thái nhân viên đề xuất tăng lương thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new TuChoiOrPheDuyetNhanVienDeXuatTLResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DownloadTemplateImportDXTLResult DownloadTemplateImportDXTL(DownloadTemplateImportDXTLParameter parameter)
        {
            try
            {
                string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
                string fileName = @"Template_Import_DeXuatTangLuong.xlsx";

                string newFilePath = Path.Combine(rootFolder, fileName);
                byte[] data = File.ReadAllBytes(newFilePath);

                return new DownloadTemplateImportDXTLResult
                {
                    TemplateExcel = data,
                    Message = string.Format("Đã dowload file Template_Import_DeXuatTangLuong"),
                    FileName = "Template_Import_DeXuatTangLuong",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DownloadTemplateImportDXTLResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetMasterDataCreateDeXuatChucVuResult GetMasterDataCreateDeXuatChucVu(GetMasterDataCreateDeXuatChucVuParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var listAllUser = context.User.ToList();
                    #region Check permision: manager
                    var user = listAllUser.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new GetMasterDataCreateDeXuatChucVuResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new GetMasterDataCreateDeXuatChucVuResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }
                    #endregion

                    var listPosition = context.Position.Where(x => x.Active == true).Select(y => new PositionModel
                    {
                        PositionId = y.PositionId,
                        PositionCode = y.PositionCode,
                        PositionName = y.PositionName,
                    }).ToList();

                    var listAllContactEmp = context.Contact.Where(x => x.ObjectType == "EMP").ToList();
                    var listAllOrg = context.Organization.ToList();
                    var listEmp = context.Employee.Where(x => x.Active == true).Select(x => new EmployeeEntityModel()
                    {
                        EmployeeId = x.EmployeeId,
                        EmployeeName = x.EmployeeName,
                        EmployeeCodeName = x.EmployeeCode + "-" + x.EmployeeName,
                        OrganizationId = x.OrganizationId,
                        OrganizationName = listAllOrg.FirstOrDefault(y => y.OrganizationId == x.OrganizationId).OrganizationName,
                        EmployeeCode = x.EmployeeCode,
                        PositionId = x.PositionId,
                        PositionName = listPosition.FirstOrDefault(y => y.PositionId == x.PositionId).PositionName,
                        DateOfBirth = listAllContactEmp.FirstOrDefault(y => y.ObjectId == x.EmployeeId).DateOfBirth,
                        IsManager = x.IsManager,
                        Active = x.Active
                    }).ToList();
                    listEmp = GetAllEmpHoatDong(listEmp, listAllUser);


                    var employeeId = user.EmployeeId;
                    var employeeLogin = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                    var isManager = employeeLogin.IsManager;

                    if (isManager == true)
                    {
                        //Lấy list phòng ban con của user
                        List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                        if (employeeLogin.OrganizationId != null)
                        {
                            listGetAllChild.Add(employeeLogin.OrganizationId.Value);
                            listGetAllChild = getOrganizationChildrenId(employeeLogin.OrganizationId.Value, listGetAllChild);
                        }
                        //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                        var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                        List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();

                        listEmployeeInChargeByManager.ForEach(item =>
                        {
                            if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                                listEmployeeInChargeByManagerId.Add(item.EmployeeId.Value);
                        });

                        listEmp = listEmp.Where(x => listEmployeeInChargeByManagerId.Contains(x.EmployeeId.Value)).ToList();

                        listEmp.ForEach(item =>
                        {
                            item.PositionName = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId)?.PositionName;
                        });

                    }
                    else
                    {
                        //Nếu không phải quản lý
                        listEmp = listEmp.Where(x => x.EmployeeId == employeeId).ToList();
                        listEmp.ForEach(item =>
                        {
                            item.PositionName = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId)?.PositionName;
                        });
                    }

                    listEmp = GetAllEmpHoatDong(listEmp, context.User.ToList());
                    return new GetMasterDataCreateDeXuatChucVuResult
                    {
                        ListEmp = listEmp,
                        ListPosition = listPosition,
                        LoginEmployeeID = employeeId.Value,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Thêm thông tin ứng viên thành công"
                    };
                }
                catch (Exception e)
                {
                    trans.Commit();
                    return new GetMasterDataCreateDeXuatChucVuResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TaoDeXuatChucVuResult TaoDeXuatChucVu(TaoDeXuatChucVuParameter request)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == request.FolderType);

            if (folder == null)
            {
                return new TaoDeXuatChucVuResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {

                    var deXuatChucVu = new DeXuatThayDoiChucVu();

                    deXuatChucVu.TenDeXuat = request.DeXuatChucVu.TenDeXuat.Trim();
                    deXuatChucVu.NgayDeXuat = request.DeXuatChucVu.NgayDeXuat;
                    deXuatChucVu.NguoiDeXuatId = request.DeXuatChucVu.NguoiDeXuatId;
                    deXuatChucVu.TrangThai = 1;
                    deXuatChucVu.Active = true;
                    deXuatChucVu.CreatedById = request.UserId;
                    deXuatChucVu.CreatedDate = DateTime.Now;
                    context.DeXuatThayDoiChucVu.Add(deXuatChucVu);
                    context.SaveChanges();

                    List<NhanVienDeXuatThayDoiChucVu> listNhanVien = new List<NhanVienDeXuatThayDoiChucVu>();
                    request.NhanVienDuocDeXuats.ForEach(item =>
                    {
                        var newNV = new NhanVienDeXuatThayDoiChucVu();
                        newNV.DeXuatThayDoiChucVuId = deXuatChucVu.DeXuatThayDoiChucVuId;
                        newNV.EmployeeId = item.EmployeeId;
                        newNV.ChucVuDeXuatId = item.ChucVuDeXuatId.Value;
                        newNV.ChucVuHienTaiId = item.ChucVuHienTaiId;
                        newNV.LyDoDeXuat = item.LyDoDeXuat;
                        newNV.Active = true;
                        newNV.TrangThai = 1;
                        newNV.CreatedById = request.UserId;
                        newNV.CreatedDate = DateTime.Now;
                        newNV.TrangThai = item.TrangThai;
                        listNhanVien.Add(newNV);
                    });
                    context.NhanVienDeXuatThayDoiChucVu.AddRange(listNhanVien);
                    context.SaveChanges();

                    if (request.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        request.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = request.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = request.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = deXuatChucVu.DeXuatThayDoiChucVuId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {

                            return new TaoDeXuatChucVuResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }


                    transaction.Commit();

                    return new TaoDeXuatChucVuResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo đề xuất tăng lương thành công",
                        DeXuatId = deXuatChucVu.DeXuatThayDoiChucVuId
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new TaoDeXuatChucVuResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DownloadTemplateImportDXCVResult DownloadTemplateImportDXCV(DownloadTemplateImportDXCVParameter parameter)
        {
            try
            {
                string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
                string fileName = @"Template_Import_DeXuatChucVu.xlsx";

                string newFilePath = Path.Combine(rootFolder, fileName);
                byte[] data = File.ReadAllBytes(newFilePath);

                return new DownloadTemplateImportDXCVResult
                {
                    TemplateExcel = data,
                    Message = string.Format("Đã dowload file Template_Import_DeXuatChucVu"),
                    FileName = "Template_Import_DeXuatChucVu",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DownloadTemplateImportDXCVResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public ListDeXuatChucVuResult ListDeXuatChucVu(ListDeXuatChucVuParameter request)
        {
            try
            {
                #region Check permision: manager

                var user = context.User.FirstOrDefault(x => x.UserId == request.UserId && x.Active == true);
                if (user == null)
                {
                    return new ListDeXuatChucVuResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new ListDeXuatChucVuResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }

                #endregion

                var lstAllNhanVienDeXuatChucVu = context.NhanVienDeXuatThayDoiChucVu.ToList();

                var employeeLogin = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                #region Phân quyền dữ liệu (code cũ): Giang comment

                //var isManager = employeeLogin.IsManager;

                //if (isManager == true)
                //{
                //    //Lấy list phòng ban con của user
                //    List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                //    if (employeeLogin.OrganizationId != null)
                //    {
                //        listGetAllChild.Add(employeeLogin.OrganizationId.Value);
                //        listGetAllChild = getOrganizationChildrenId(employeeLogin.OrganizationId.Value, listGetAllChild);
                //    }
                //    //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                //    var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                //    List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();

                //    listEmployeeInChargeByManager.ForEach(item =>
                //    {
                //        if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                //            listEmployeeInChargeByManagerId.Add(item.EmployeeId);
                //    });

                //    listEmp = listEmp.Where(x => listEmployeeInChargeByManagerId.Contains(x.EmployeeId)).ToList();
                //}
                //else
                //{
                //    //Nếu không phải quản lý
                //    listEmp = listEmp.Where(x => x.EmployeeId == employeeId).ToList();
                //}

                #endregion

                #region Phân quyền dữ liệu theo quy trình phê duyệt

                var thanhVienPhongBan =
                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employeeLogin.EmployeeId);

                var thongTinDeXuatTL = new List<DeXuatChucVuEntityModel>();

                var isAccess = context.Organization.FirstOrDefault(x => x.OrganizationId == employeeLogin.OrganizationId).IsAccess;

                if(isAccess != true)
                {
                    //Nếu là trưởng bộ phận (IsManager = 1)
                    if (thanhVienPhongBan.IsManager == 1)
                    {
                        //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt
                        var listId = context.PhongBanPheDuyetDoiTuong
                            .Where(x => x.DoiTuongApDung == 11 &&
                                        x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                            .ToList();
                        var listEmpIdCungPhongBan = context.Employee.Where(x => x.OrganizationId == employeeLogin.OrganizationId).Select(x => x.EmployeeId).ToList();
                        thongTinDeXuatTL = (from DeXuatThayDoiChucVu in context.DeXuatThayDoiChucVu
                                            join Emp in context.Employee on DeXuatThayDoiChucVu.NguoiDeXuatId equals Emp.EmployeeId
                                            where
                                                (request.NguoiDeXuatId == null ||
                                                 DeXuatThayDoiChucVu.NguoiDeXuatId == request.NguoiDeXuatId) &&
                                                (request.ThoiGianDeXuat == null || DeXuatThayDoiChucVu.NgayDeXuat.ToShortDateString() ==
                                                 request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                                                (request.TrangThai == null || DeXuatThayDoiChucVu.TrangThai == request.TrangThai) &&
                                                DeXuatThayDoiChucVu.Active == true &&
                                                (DeXuatThayDoiChucVu.NguoiDeXuatId == employeeLogin.EmployeeId || //Người tạo
                                                 (listId.Contains(DeXuatThayDoiChucVu.DeXuatThayDoiChucVuId)  // cần phê duyệt
                                                 || (listEmpIdCungPhongBan.Contains(DeXuatThayDoiChucVu.NguoiDeXuatId.Value)) && DeXuatThayDoiChucVu.TrangThai != 1)) // cùng phòng ban tt khác 1
                                            select new DeXuatChucVuEntityModel
                                            {
                                                DeXuatThayDoiChucVuId = DeXuatThayDoiChucVu.DeXuatThayDoiChucVuId,
                                                TenDeXuat = DeXuatThayDoiChucVu.TenDeXuat,
                                                NgayDeXuat = DeXuatThayDoiChucVu.NgayDeXuat,
                                                NguoiDeXuatId = DeXuatThayDoiChucVu.NguoiDeXuatId,
                                                TrangThai = DeXuatThayDoiChucVu.TrangThai,
                                                NguoiDeXuatName = Emp.EmployeeName,
                                                CreatedById = DeXuatThayDoiChucVu.CreatedById,
                                                CreatedDate = DeXuatThayDoiChucVu.CreatedDate
                                            }).OrderByDescending(x => x.CreatedDate).ToList();
                    }
                    //Nếu là nhân viên thường (IsManager = 0)
                    else
                    {
                        thongTinDeXuatTL = (from DeXuatThayDoiChucVu in context.DeXuatThayDoiChucVu
                                            join Emp in context.Employee on DeXuatThayDoiChucVu.NguoiDeXuatId equals Emp.EmployeeId
                                            where
                                                (request.NguoiDeXuatId == null ||
                                                 DeXuatThayDoiChucVu.NguoiDeXuatId == request.NguoiDeXuatId) &&
                                                (request.ThoiGianDeXuat == null || DeXuatThayDoiChucVu.NgayDeXuat.ToShortDateString() ==
                                                 request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                                                (request.TrangThai == null || DeXuatThayDoiChucVu.TrangThai == request.TrangThai) &&
                                                DeXuatThayDoiChucVu.Active == true &&
                                                DeXuatThayDoiChucVu.NguoiDeXuatId == employeeLogin.EmployeeId
                                            select new DeXuatChucVuEntityModel
                                            {
                                                DeXuatThayDoiChucVuId = DeXuatThayDoiChucVu.DeXuatThayDoiChucVuId,
                                                TenDeXuat = DeXuatThayDoiChucVu.TenDeXuat,
                                                NgayDeXuat = DeXuatThayDoiChucVu.NgayDeXuat,
                                                NguoiDeXuatId = DeXuatThayDoiChucVu.NguoiDeXuatId,
                                                TrangThai = DeXuatThayDoiChucVu.TrangThai,
                                                NguoiDeXuatName = Emp.EmployeeName,
                                                CreatedById = DeXuatThayDoiChucVu.CreatedById,
                                                CreatedDate = DeXuatThayDoiChucVu.CreatedDate
                                            }).OrderByDescending(x => x.CreatedDate).ToList();
                    }
                }
                else
                {
                    thongTinDeXuatTL = (from DeXuatThayDoiChucVu in context.DeXuatThayDoiChucVu
                                        join Emp in context.Employee on DeXuatThayDoiChucVu.NguoiDeXuatId equals Emp.EmployeeId
                                        where
                                            (request.NguoiDeXuatId == null ||
                                             DeXuatThayDoiChucVu.NguoiDeXuatId == request.NguoiDeXuatId) &&
                                            (request.ThoiGianDeXuat == null || DeXuatThayDoiChucVu.NgayDeXuat.ToShortDateString() ==
                                             request.ThoiGianDeXuat.Value.ToShortDateString()) &&
                                            (request.TrangThai == null || DeXuatThayDoiChucVu.TrangThai == request.TrangThai) &&
                                            DeXuatThayDoiChucVu.Active == true &&
                                            (DeXuatThayDoiChucVu.NguoiDeXuatId == employeeLogin.EmployeeId || // Người đăng nhập là người tạo
                                            (DeXuatThayDoiChucVu.NguoiDeXuatId != employeeLogin.EmployeeId && DeXuatThayDoiChucVu.TrangThai != 1)) // của ngời khác và khác mới
                                        select new DeXuatChucVuEntityModel
                                        {
                                            DeXuatThayDoiChucVuId = DeXuatThayDoiChucVu.DeXuatThayDoiChucVuId,
                                            TenDeXuat = DeXuatThayDoiChucVu.TenDeXuat,
                                            NgayDeXuat = DeXuatThayDoiChucVu.NgayDeXuat,
                                            NguoiDeXuatId = DeXuatThayDoiChucVu.NguoiDeXuatId,
                                            TrangThai = DeXuatThayDoiChucVu.TrangThai,
                                            NguoiDeXuatName = Emp.EmployeeName,
                                            CreatedById = DeXuatThayDoiChucVu.CreatedById,
                                            CreatedDate = DeXuatThayDoiChucVu.CreatedDate
                                        }).OrderByDescending(x => x.CreatedDate).ToList();
                }
                #endregion

                thongTinDeXuatTL.ForEach(item =>
                {
                    item.SoNhanSuDuocDeXuat = lstAllNhanVienDeXuatChucVu
                        .Where(x => x.DeXuatThayDoiChucVuId == item.DeXuatThayDoiChucVuId).Count();
                });

                return new ListDeXuatChucVuResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy danh sách thành công",
                    ListDeXuatChucVu = thongTinDeXuatTL,
                };
            }
            catch (Exception e)
            {
                return new ListDeXuatChucVuResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public DeleteDeXuatChucVuResult DeleteDeXuatChucVu(DeleteDeXuatChucVuParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatChucVu = context.DeXuatThayDoiChucVu.FirstOrDefault(x => x.DeXuatThayDoiChucVuId == request.DeXuatThayDoiChucVuId && x.Active == true);
                    if (deXuatChucVu == null)
                    {
                        return new DeleteDeXuatChucVuResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất chức vụ không tồn tại trên hệ thống",
                        };
                    }
                    if (deXuatChucVu.TrangThai == 2 || deXuatChucVu.TrangThai == 3)
                    {
                        return new DeleteDeXuatChucVuResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Không thực hiện xóa đối với đề xuất có trạng thái Chờ phê duyệt và Đã Duyệt!",
                        };
                    }
                    var deXuatChucVuNhanVien = context.NhanVienDeXuatThayDoiChucVu.Where(x => x.DeXuatThayDoiChucVuId == request.DeXuatThayDoiChucVuId && x.Active == true).ToList();
                    deXuatChucVu.Active = false;
                    deXuatChucVuNhanVien.ForEach(item =>
                    {
                        item.Active = false;
                    });
                    context.DeXuatThayDoiChucVu.Update(deXuatChucVu);
                    context.NhanVienDeXuatThayDoiChucVu.UpdateRange(deXuatChucVuNhanVien);
                    context.SaveChanges();
                    transaction.Commit();

                    return new DeleteDeXuatChucVuResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Xóa đề xuất tăng lương thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteDeXuatChucVuResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DeXuatChucVuDetailResult DeXuatChucVuDetail(DeXuatChucVuDetailParameter request)
        {
            try
            {
                var deXuatChucVu = context.DeXuatThayDoiChucVu.FirstOrDefault(x => x.DeXuatThayDoiChucVuId == request.DeXuatTLId && x.Active == true);


                var listPhongBan = context.Organization.Where(x => x.Active == true).Select(y => new OrganizationEntityModel
                {
                    OrganizationId = y.OrganizationId,
                    OrganizationName = y.OrganizationName,
                    OrganizationCode = y.OrganizationCode
                }).ToList();

                var listChucVu = context.Position.Where(x => x.Active == true).Select(y => new PositionModel
                {
                    PositionId = y.PositionId,
                    PositionCode = y.PositionCode,
                    PositionName = y.PositionName
                }).ToList();

                if (deXuatChucVu == null)
                {
                    return new DeXuatChucVuDetailResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Đề xuất thay đổi chức vụ không tồn tại trong hệ thống",
                    };
                }

                var DeXuatChucVu = new DeXuatChucVuEntityModel();
                DeXuatChucVu.DeXuatThayDoiChucVuId = deXuatChucVu.DeXuatThayDoiChucVuId;
                DeXuatChucVu.TenDeXuat = deXuatChucVu.TenDeXuat;
                DeXuatChucVu.NgayDeXuat = deXuatChucVu.NgayDeXuat;
                DeXuatChucVu.NguoiDeXuatId = deXuatChucVu.NguoiDeXuatId;
                DeXuatChucVu.NgayApDung = deXuatChucVu.NgayApDung;
                DeXuatChucVu.TrangThai = deXuatChucVu.TrangThai;
                DeXuatChucVu.CreatedById = deXuatChucVu.CreatedById;
                DeXuatChucVu.CreatedDate = deXuatChucVu.CreatedDate;

                var nhanVienDuocDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => x.DeXuatThayDoiChucVuId == request.DeXuatTLId && x.Active == true)
                    .Select(NvCV => new DeXuatChucVuNhanVienEntityModel
                    {
                        DeXuatThayDoiChucVuId = NvCV.DeXuatThayDoiChucVuId,
                        NhanVienDeXuatThayDoiChucVuId = NvCV.NhanVienDeXuatThayDoiChucVuId,
                        EmployeeId = NvCV.EmployeeId,
                        ChucVuHienTaiId = NvCV.ChucVuHienTaiId,
                        ChucVuDeXuatId = NvCV.ChucVuDeXuatId,
                        LyDoDeXuat = NvCV.LyDoDeXuat,
                        TrangThai = NvCV.TrangThai,
                        LyDo = NvCV.LyDo,
                        NghiaVu = NvCV.NghiaVu,
                        CreatedById = NvCV.CreatedById,
                        CreatedDate = NvCV.CreatedDate,
                    }).ToList();
                var listEmpDoiChucVuId = nhanVienDuocDeXuat.Select(x => x.EmployeeId).ToList();
                var listConTact = context.Contact.Where(x => listEmpDoiChucVuId.Contains(x.ObjectId)).ToList();
                var listEmpInfor = context.Employee.Where(x => listEmpDoiChucVuId.Contains(x.EmployeeId)).ToList();
                nhanVienDuocDeXuat.ForEach(NvCV =>
                {
                    var empInFor = listEmpInfor.FirstOrDefault(x => x.EmployeeId == NvCV.EmployeeId);
                    if (empInFor != null)
                    {
                        NvCV.PhongBanId = empInFor != null ? empInFor.OrganizationId : null;
                        NvCV.OrganizationName = listPhongBan.FirstOrDefault(x => x.OrganizationId == empInFor.OrganizationId)?.OrganizationName;
                        NvCV.PositionName = listChucVu.FirstOrDefault(x => x.PositionId == NvCV.ChucVuHienTaiId)?.PositionName;
                        NvCV.PositionNameDx = listChucVu.FirstOrDefault(x => x.PositionId == NvCV.ChucVuDeXuatId)?.PositionName;
                        NvCV.EmployeeCode = empInFor != null ? empInFor.EmployeeCode : "";
                        NvCV.EmployeeName = empInFor != null ? empInFor.EmployeeName : "";
                    }

                    var contactInfor = listConTact.FirstOrDefault(x => x.ObjectId == NvCV.EmployeeId);
                    NvCV.IdentityId = contactInfor?.IdentityId;
                    NvCV.IdentityIddateOfIssue = contactInfor?.IdentityIddateOfIssue;
                    NvCV.IdentityIdplaceOfIssue = contactInfor?.IdentityIdplaceOfIssue;
                    NvCV.NoiCapCmndtiengAnh = contactInfor?.NoiCapCmndtiengAnh;
                    NvCV.HoKhauThuongTruTv = contactInfor?.HoKhauThuongTruTv;
                    NvCV.HoKhauThuongTruTa = contactInfor?.HoKhauThuongTruTa;
                    NvCV.Address = contactInfor?.Address;
                    NvCV.AddressTiengAnh = contactInfor?.AddressTiengAnh;
                });

                //Thông tin cty
                var companyConfigEntity = context.CompanyConfiguration.FirstOrDefault();
                var companyConfig = new CompanyConfigEntityModel();
                companyConfig.CompanyId = companyConfigEntity.CompanyId;
                companyConfig.CompanyName = companyConfigEntity.CompanyName;
                companyConfig.Email = companyConfigEntity.Email;
                companyConfig.Phone = companyConfigEntity.Phone;
                companyConfig.TaxCode = companyConfigEntity.TaxCode;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;
                companyConfig.CompanyAddress = companyConfigEntity.CompanyAddress;

                //Kiểm tra xem bước phê duyệt hiện tại có phải bước cuối hay không
                bool isShowNgayApDung = false;
                var buocHienTaiQuyTrinh = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatChucVu.DeXuatThayDoiChucVuId && x.TrangThai == 1 && x.DoiTuongApDung == 11).Count();
                var quyTrinhApDung = context.QuyTrinh.FirstOrDefault(x => x.HoatDong && x.DoiTuongApDung == 11);
                var cauHinhQuyTrinhApDung = context.CauHinhQuyTrinh.FirstOrDefault(x => x.QuyTrinhId == quyTrinhApDung.Id);
                var soBuocCauHinhApDung = context.CacBuocQuyTrinh.Where(x => x.CauHinhQuyTrinhId == cauHinhQuyTrinhApDung.Id).Count();
                if (buocHienTaiQuyTrinh == soBuocCauHinhApDung - 1)
                {
                    if (DeXuatChucVu.TrangThai == 2)
                    {
                        isShowNgayApDung = true;
                    }
                }

                var user = context.User.FirstOrDefault(x => x.UserId == request.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                //Điều kiện hiển thị button
                bool isShowGuiXacNhan = false;
                bool isShowXacNhan = false;
                bool isShowTuChoi = false;
                bool isShowHuyYeuCauXacNhan = false;
                bool isShowLuu = false;
                bool isShowXoa = false;
                bool isShowHuy = false;
                bool isShowHoanThanh = false;
                bool isShowDatVeMoi = false;

                //Đối tượng áp dụng: 11: Đề xuất chức vụ
                //Lấy quy trình
                var quyTrinh = context.QuyTrinh.FirstOrDefault(x => x.DoiTuongApDung == 11 && x.HoatDong);
                if (quyTrinh == null)
                {
                    return new DeXuatChucVuDetailResult()
                    {
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        MessageCode = "Chưa có quy trình phê duyệt"
                    };
                }

                var cauHinhQuyTrinh = context.CauHinhQuyTrinh.FirstOrDefault(x => x.QuyTrinhId == quyTrinh.Id);
                var listIdCacBuocQuyTrinh = context.CacBuocQuyTrinh
                    .Where(x => x.CauHinhQuyTrinhId == cauHinhQuyTrinh.Id).Select(y => y.Id).ToList();
                var listIdPhongBanTrongCacBuocQuyTrinh = context.PhongBanTrongCacBuocQuyTrinh
                    .Where(x => listIdCacBuocQuyTrinh.Contains(x.CacBuocQuyTrinhId)).Select(y => y.OrganizationId)
                    .ToList();

                //Trạng thái đề xuất
                if (deXuatChucVu.TrangThai == 1) // mới
                {
                    if (deXuatChucVu.CreatedById == user.UserId)
                    {
                        isShowGuiXacNhan = true;
                        isShowXoa = true;
                        isShowLuu = true;
                    }
                    else if (deXuatChucVu.NguoiDeXuatId == employee.EmployeeId)
                    {
                        isShowGuiXacNhan = true;
                        isShowXoa = true;
                        isShowLuu = true;
                    }
                    else
                    {
                        var phongBanNguoiDangNhap =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatChucVu.NguoiDeXuatId);

                        var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatChucVu.CreatedById);
                        var phongBanNguoiTao =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                        var phongBanNhanVienBanHang =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatChucVu.NguoiDeXuatId);

                        //Trưởng bộ phận
                        if (phongBanNguoiDangNhap?.IsManager == 1)
                        {
                            if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                                phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                            {
                                isShowGuiXacNhan = true;
                                isShowXoa = true;
                                isShowLuu = true;
                            }
                        }
                    }
                }

                if (deXuatChucVu.TrangThai == 2) // chờ phê duyệt
                {
                    var buocHienTai = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatChucVu.DeXuatThayDoiChucVuId &&
                                                                           x.DoiTuongApDung == 11 &&
                                                                           x.TrangThai == 0)
                            .OrderByDescending(z => z.Stt)
                            .FirstOrDefault();

                    //Nếu là phê duyệt trưởng bộ phận
                    if (buocHienTai?.LoaiPheDuyet == 1)
                    {
                        var listDonViId_NguoiPhuTrach = context.ThanhVienPhongBan
                            .Where(x => x.EmployeeId == deXuatChucVu.NguoiDeXuatId)
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId_NguoiPhuTrach.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowXacNhan = true;
                            isShowTuChoi = true;
                        }
                    }
                    //Nếu là phòng ban phê duyệt
                    else if (buocHienTai?.LoaiPheDuyet == 2)
                    {
                        //Lấy list Phòng ban đã phê duyệt ở bước hiện tại
                        var listDonViIdDaPheDuyet = context.PhongBanApDung
                            .Where(x => x.CacBuocApDungId == buocHienTai.Id &&
                                        x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId)
                            .Select(y => y.OrganizationId).ToList();

                        //Lấy list Phòng ban chưa phê duyệt ở bước hiện tại
                        var listDonViId = context.PhongBanTrongCacBuocQuyTrinh
                            .Where(x => x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId &&
                                        !listDonViIdDaPheDuyet.Contains(x.OrganizationId))
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowXacNhan = true;
                            isShowTuChoi = true;
                        }
                    }
                }

                // trang thai cho phe duyet
                if (deXuatChucVu.TrangThai == 2 && user.EmployeeId == deXuatChucVu.NguoiDeXuatId)
                {
                    var count =
                        context.CacBuocApDung.Count(x => x.ObjectNumber == deXuatChucVu.DeXuatThayDoiChucVuId &&
                                                         x.DoiTuongApDung == 11 && x.TrangThai == 1);

                    if (count == 0)
                    {
                        isShowHuyYeuCauXacNhan = true;
                    }
                }

                if (deXuatChucVu.TrangThai == 3) //Đã Phê duyệt 
                {
                    var phongBanNguoiDangNhap =
                            context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                    var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatChucVu.CreatedById);
                    var phongBanNguoiTao =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                    var phongBanNhanVienBanHang =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatChucVu.NguoiDeXuatId);

                    //Trưởng bộ phận
                    if (phongBanNguoiDangNhap?.IsManager == 1)
                    {
                        if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                            phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                        {
                            isShowHuy = true;
                        }

                        if (listIdPhongBanTrongCacBuocQuyTrinh.Contains(phongBanNguoiDangNhap.OrganizationId))
                        {
                            isShowHuy = true;
                        }
                    }
                }

                if (deXuatChucVu.TrangThai == 3)
                {
                    var phongBanNguoiDangNhap =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                    var empCreate = context.User.FirstOrDefault(x => x.UserId == deXuatChucVu.CreatedById);
                    var phongBanNguoiTao =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId.Value);

                    var phongBanNhanVienBanHang =
                        context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == deXuatChucVu.NguoiDeXuatId);

                    //Trưởng bộ phận phòng ban người tạo hoặc Trưởng bộ phận phòng ban của nhân viên bán hàng
                    if (phongBanNguoiDangNhap?.IsManager == 1)
                    {
                        if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                            phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                        {
                            isShowHoanThanh = true;
                        }
                    }
                }

                if (deXuatChucVu.TrangThai == 4 && deXuatChucVu.CreatedById == request.UserId) // Từ chối
                {
                    isShowDatVeMoi = true;
                }

                #region Lấy dách file đinh kèm 
                var objectType = "DXCV";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                                .Where(x => x.ObjectNumber == deXuatChucVu.DeXuatThayDoiChucVuId && x.FolderId == folder.FolderId).Select(y =>
                                    new FileInFolderEntityModel
                                    {
                                        Size = y.Size,
                                        ObjectId = y.ObjectId,
                                        Active = y.Active,
                                        FileExtension = y.FileExtension,
                                        FileInFolderId = y.FileInFolderId,
                                        FileName = y.FileName,
                                        FolderId = y.FolderId,
                                        ObjectType = y.ObjectType,
                                        ObjectNumber = y.ObjectNumber,
                                        CreatedById = y.CreatedById,
                                        CreatedDate = y.CreatedDate,
                                        UpdatedById = y.UpdatedById,
                                        UpdatedDate = y.UpdatedDate
                                    }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                });
                #endregion

                return new DeXuatChucVuDetailResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy thông tin đề xuất thành công",
                    DeXuatChucVu = DeXuatChucVu,
                    NhanVienDuocDeXuats = nhanVienDuocDeXuat,
                    ListPosition = listChucVu,
                    ListOrganization = listPhongBan,
                    CompanyConfig = companyConfig,
                    IsShowGuiXacNhan = isShowGuiXacNhan,
                    IsShowXacNhan = isShowXacNhan,
                    IsShowTuChoi = isShowTuChoi,
                    IsShowLuu = isShowLuu,
                    IsShowXoa = isShowXoa,
                    IsShowHuy = isShowHuy,
                    IsShowHuyYeuCauXacNhan = isShowHuyYeuCauXacNhan,
                    IsShowHoanThanh = isShowHoanThanh,
                    IsShowDatVeMoi = isShowDatVeMoi,
                    ListFileInFolder = listFileResult,
                    IsShowNgayApDung = isShowNgayApDung,
                };
            }
            catch (Exception e)
            {
                return new DeXuatChucVuDetailResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public DatVeMoiDeXuatChucVuResult DatVeMoiDeXuatChucVu(DatVeMoiDeXuatChucVuParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatChucVu = context.DeXuatThayDoiChucVu.FirstOrDefault(x => x.DeXuatThayDoiChucVuId == request.DeXuatChucVuId && x.Active == true);
                    if (deXuatChucVu == null)
                    {
                        return new DatVeMoiDeXuatChucVuResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất chức vụ không tồn tại trong hệ thống",
                        };
                    }
                    deXuatChucVu.TrangThai = 1; // tt mới
                    deXuatChucVu.Active = true;
                    context.DeXuatThayDoiChucVu.Update(deXuatChucVu);
                    context.SaveChanges();

                    var listNvDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => x.NhanVienDeXuatThayDoiChucVuId == deXuatChucVu.DeXuatThayDoiChucVuId && x.Active == true).ToList();

                    listNvDeXuat.ForEach(item =>
                    {
                        item.TrangThai = 1; // tt mới
                        item.Active = true;
                        item.LyDo = null;
                    });
                    context.NhanVienDeXuatThayDoiChucVu.UpdateRange(listNvDeXuat);
                    context.SaveChanges();


                    //Xóa các bước áp dụng của phê duyệt để làm mới
                    var listBuocPheDuyet = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatChucVu.DeXuatThayDoiChucVuId).ToList();
                    context.CacBuocApDung.RemoveRange(listBuocPheDuyet);
                    context.SaveChanges();
                    transaction.Commit();
                    return new DatVeMoiDeXuatChucVuResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Đặt về mới đề xuất chức vụ thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DatVeMoiDeXuatChucVuResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TuChoiOrPheDuyetNhanVienDeXuatCVResult TuChoiOrPheDuyetNhanVienDeXuatCV(TuChoiOrPheDuyetNhanVienDeXuatCVParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var listEmployeeTangLuong = request.ListNV.Select(x => x.EmployeeId).ToList();
                    var deXuatTangLuong = context.DeXuatThayDoiChucVu.FirstOrDefault(x => x.DeXuatThayDoiChucVuId == request.DeXuatChucVuId && x.Active == true);
                    if (deXuatTangLuong == null)
                    {
                        return new TuChoiOrPheDuyetNhanVienDeXuatCVResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất thay đổi chức vụ không tồn tại trong hệ thống",
                        };
                    }
                    var listEmpInfor = context.Employee.Where(x => listEmployeeTangLuong.Contains(x.EmployeeId)).ToList();

                    var listNvDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => x.DeXuatThayDoiChucVuId == deXuatTangLuong.DeXuatThayDoiChucVuId && listEmployeeTangLuong.Contains(x.EmployeeId) && x.Active == true).ToList();

                    var listTrangThai = GeneralList.GetTrangThais("DXThayDoiChucVuNhanVien");

                    listNvDeXuat.ForEach(item =>
                    {
                        if (request.IsXacNhan)
                        {
                            item.TrangThai = (byte)listTrangThai.FirstOrDefault(x => x.Value == 3).Value;
                        }
                        else
                        {
                            item.TrangThai = (byte)listTrangThai.FirstOrDefault(x => x.Value == 4).Value;
                        }
                        item.LyDo = request.ListNV.FirstOrDefault(x => x.EmployeeId == item.EmployeeId)?.LyDo;
                    });
                    //Nếu từ chối thì lưu note lý do từ chối
                    //Thêm ghi chú
                    if (request.IsXacNhan != true)
                    {
                        Note note = new Note();
                        note.NoteId = Guid.NewGuid();
                        note.ObjectId = Guid.Empty;
                        note.ObjectType = NoteObjectType.DXCV;
                        note.Type = "ADD";
                        note.Active = true;
                        note.CreatedById = request.UserId;
                        note.CreatedDate = DateTime.Now;
                        note.NoteTitle = "Đã thêm ghi chú";
                        note.ObjectNumber = request.DeXuatChucVuId;
                        note.Description = "<p>Đã từ chối phê duyệt các nhân viên: ";
                        listNvDeXuat.ForEach(item =>
                        {
                            var emp = listEmpInfor.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                            if (emp != null)
                            {
                                note.Description = note.Description + emp.EmployeeCode + " ,";
                            }
                        });
                        note.Description = note.Description.Substring(0, note.Description.Count() - 1);
                        note.Description = note.Description + "</p><p>lý do: " + request.LyDoTuChoi + "</p>";
                        context.Note.Add(note);
                    }

                    context.NhanVienDeXuatThayDoiChucVu.UpdateRange(listNvDeXuat);
                    context.SaveChanges();
                    transaction.Commit();
                    return new TuChoiOrPheDuyetNhanVienDeXuatCVResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật trạng thái nhân viên đề xuất đề xuất thay đổi chức vụ thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new TuChoiOrPheDuyetNhanVienDeXuatCVResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public UpdateDeXuatChucVuResult UpdateDeXuatChucVu(UpdateDeXuatChucVuParameter request)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == request.FolderType);

            if (folder == null)
            {
                return new UpdateDeXuatChucVuResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatChucVu = context.DeXuatThayDoiChucVu.FirstOrDefault(x => x.DeXuatThayDoiChucVuId == request.DeXuatChucVu.DeXuatThayDoiChucVuId);
                    if (deXuatChucVu == null)
                    {
                        return new UpdateDeXuatChucVuResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất thay đổi chức vụ không tồn tại trong hệ thống",
                        };
                    }
                    deXuatChucVu.TenDeXuat = request.DeXuatChucVu.TenDeXuat.Trim();
                    deXuatChucVu.NgayDeXuat = request.DeXuatChucVu.NgayDeXuat;
                    deXuatChucVu.NguoiDeXuatId = request.DeXuatChucVu.NguoiDeXuatId;
                    deXuatChucVu.TrangThai = request.DeXuatChucVu.TrangThai;
                    deXuatChucVu.NgayApDung = request.DeXuatChucVu.NgayApDung ?? null;
                    deXuatChucVu.Active = true;
                    deXuatChucVu.UpdatedById = request.UserId;
                    deXuatChucVu.UpdatedDate = DateTime.Now;
                    context.DeXuatThayDoiChucVu.Update(deXuatChucVu);
                    context.SaveChanges();

                    var listNvDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => x.DeXuatThayDoiChucVuId == deXuatChucVu.DeXuatThayDoiChucVuId && x.Active == true).ToList();
                    context.NhanVienDeXuatThayDoiChucVu.RemoveRange(listNvDeXuat);
                    context.SaveChanges();

                    List<NhanVienDeXuatThayDoiChucVu> listNhanVien = new List<NhanVienDeXuatThayDoiChucVu>();
                    request.NhanVienDuocDeXuats.ForEach(item =>
                    {
                        var newNV = new NhanVienDeXuatThayDoiChucVu();
                        newNV.DeXuatThayDoiChucVuId = deXuatChucVu.DeXuatThayDoiChucVuId;
                        newNV.EmployeeId = item.EmployeeId;
                        newNV.ChucVuDeXuatId = item.ChucVuDeXuatId.Value;
                        newNV.ChucVuHienTaiId = item.ChucVuHienTaiId;
                        newNV.LyDoDeXuat = item.LyDoDeXuat;
                        newNV.Active = true;
                        newNV.TrangThai = 1;
                        newNV.CreatedById = request.UserId;
                        newNV.CreatedDate = DateTime.Now;
                        newNV.TrangThai = item.TrangThai;
                        listNhanVien.Add(newNV);
                    });
                    context.NhanVienDeXuatThayDoiChucVu.AddRange(listNhanVien);
                    context.SaveChanges();

                    if (request.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        request.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);


                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = request.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = request.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = deXuatChucVu.DeXuatThayDoiChucVuId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                        item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);
                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {
                            return new UpdateDeXuatChucVuResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                MessageCode = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    transaction.Commit();
                    return new UpdateDeXuatChucVuResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật đề xuất thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new UpdateDeXuatChucVuResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GetMasterKeHoachOTDetailResult GetMasterKeHoachOTDetail(GetMasterKeHoachOTDetailParameter parameter)
        {

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                    var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                    var cauHinhOtCaNgay = context.CauHinhOtCaNgay.Select(y => new CauHinhOtCaNgayModel(y)).FirstOrDefault();
                    var listLoaiCaOt = GeneralList.GetTrangThais("LoaiCaOt");

                    var keHoachOtCheck = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == parameter.DeXuatOTId && x.Active == true);
                    if (keHoachOtCheck == null)
                    {
                        return new GetMasterKeHoachOTDetailResult()
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Không tìm thấy kế hoạch OT trong hệ thống",
                        };
                    }

                    //Lấy quy trình
                    var quyTrinhKH = context.QuyTrinh.FirstOrDefault(x => x.HoatDong &&
                                                                        x.DoiTuongApDung == 12);
                    if (quyTrinhKH == null)
                    {
                        return new GetMasterKeHoachOTDetailResult()
                        {
                            StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            MessageCode = "Chưa có quy trình phê duyệt kế hoạch"
                        };
                    }

                    //Lấy quy trình
                    var quyTrinhDK = context.QuyTrinh.FirstOrDefault(x => x.HoatDong &&
                                                                        x.DoiTuongApDung == 13);
                    if (quyTrinhDK == null)
                    {
                        return new GetMasterKeHoachOTDetailResult()
                        {
                            StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                            MessageCode = "Chưa có quy trình phê duyệt đăng ký OT"
                        };
                    }
                    var listALlKeHoachOThanhVien = context.KeHoachOtThanhVien.Where(x => x.KeHoachOtId == keHoachOtCheck.KeHoachOtId).ToList();
                    var listALlKeHoachOTPhongBan = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == keHoachOtCheck.KeHoachOtId).ToList();

                    //Chọn cấu hình quy trình
                    var cauHinhQuyTrinhDangKyOT = context.CauHinhQuyTrinh
                        .Where(x => x.QuyTrinhId == quyTrinhDK.Id).FirstOrDefault();

                    var buoc1 = context.CacBuocQuyTrinh.FirstOrDefault(x =>
                        x.CauHinhQuyTrinhId == cauHinhQuyTrinhDangKyOT.Id && x.Stt == 1);

                    var listKeHoachOT = context.KeHoachOt.Where(x => x.Active == true).ToList();
                    var _listKeHoachOtId = listKeHoachOT.Select(y => y.KeHoachOtId).ToList();
                    var listKeHoachOtPhongBan = listALlKeHoachOTPhongBan
                        .Where(x => _listKeHoachOtId.Contains(x.KeHoachOtId)).ToList();
                    var listCacBuocApDung = context.CacBuocApDung.Where(x => x.DoiTuongApDung == 13).ToList();

                    bool isContinue = false;
                    var listNewCacBuocApDung = new List<CacBuocApDung>();
                    var listNewNote = new List<Note>();
                    UpdateTrangThaiKeHoachOt(keHoachOtCheck, listKeHoachOtPhongBan, listCacBuocApDung,
                        quyTrinhDK, cauHinhQuyTrinhDangKyOT, buoc1, parameter.UserId,
                        out isContinue, out listNewCacBuocApDung, out listNewNote);

                    context.CacBuocApDung.AddRange(listNewCacBuocApDung);
                    context.Note.AddRange(listNewNote);
                    context.SaveChanges();

                    var _keHoachOt = context.KeHoachOt.FirstOrDefault(x =>
                        x.KeHoachOtId == parameter.DeXuatOTId && x.Active == true);

                    var keHoachOt = new KeHoachOtEntityModel();
                    keHoachOt.KeHoachOtId = keHoachOtCheck.KeHoachOtId;
                    keHoachOt.TenKeHoach = keHoachOtCheck.TenKeHoach;
                    keHoachOt.NgayDeXuat = keHoachOtCheck.NgayDeXuat;
                    keHoachOt.NguoiDeXuatId = keHoachOtCheck.NguoiDeXuatId;
                    keHoachOt.LoaiOtId = keHoachOtCheck.LoaiOtId;
                    keHoachOt.NgayBatDau = keHoachOtCheck.NgayBatDau;
                    keHoachOt.NgayKetThuc = keHoachOtCheck.NgayKetThuc;
                    keHoachOt.LoaiCaId = keHoachOtCheck.LoaiCaId;
                    keHoachOt.GioBatDau = keHoachOtCheck.GioBatDau;
                    keHoachOt.GioKetThuc = keHoachOtCheck.GioKetThuc;
                    keHoachOt.DiaDiem = keHoachOtCheck.DiaDiem;
                    keHoachOt.LyDo = keHoachOtCheck.LyDo;
                    keHoachOt.HanPheDuyetKeHoach = keHoachOtCheck.HanPheDuyetKeHoach;
                    keHoachOt.HanDangKy = keHoachOtCheck.HanDangKy;
                    keHoachOt.HanPheDuyetDangKy = keHoachOtCheck.HanPheDuyetDangKy;
                    keHoachOt.TrangThai = _keHoachOt.TrangThai;
                    keHoachOt.CreatedById = keHoachOtCheck.CreatedById;

                    bool IsNguoiTao = false;

                    if (keHoachOt.CreatedById == parameter.UserId)
                    {
                        IsNguoiTao = true;
                    }

                    var listOrg = context.Organization.Select(y => new OrganizationEntityModel
                    {
                        OrganizationId = y.OrganizationId,
                        OrganizationCode = y.OrganizationCode,
                        OrganizationName = y.OrganizationName,
                        Level = y.Level,
                        ParentId = y.ParentId
                    }).ToList();

                    //ListPhongBan OT
                    var listPhongBanOT = listALlKeHoachOTPhongBan.Where(x => x.KeHoachOtId == keHoachOt.KeHoachOtId)
                        .Select(x => new Models.Employee.KeHoachOtPhongBanEntityModel()
                        {
                            Id = x.Id,
                            OrganizationId = x.OrganizationId,
                            KeHoachOtId = x.KeHoachOtId,
                            TrangThai = x.TrangThai
                        }).ToList();

                    var listIdPhongBan = listPhongBanOT.Select(x => x.OrganizationId).ToList();

                    bool isPheDuyetTemLead = false;

                    var checkPhongBanPheDuyet = listPhongBanOT.FirstOrDefault(x => x.TrangThai == 1 || x.TrangThai == 2);
                    //Nếu không có phòng nào ở trạng thái đăng ký OT hoặc chờ phê duyệt => Tiếp đến phê duyệt tổng
                    if (checkPhongBanPheDuyet != null && keHoachOt.TrangThai == 4) // trạng thái phê duyệt tổng
                    {
                        isPheDuyetTemLead = true;
                        //Kiểm tra xem phòng ban có người đăng ký OT hay không. Nếu không có người đăng ký OT thì chuyển trạng thái phòng ban sang đã duyệt (3)
                        var listOrgId = listPhongBanOT.Where(x => x.TrangThai == 1 || x.TrangThai == 2).Select(x => x.OrganizationId).Distinct().ToList();
                        listOrgId.ForEach(item =>
                        {
                            var listNVOT = listALlKeHoachOThanhVien.Where(x => x.KeHoachOtId == keHoachOt.KeHoachOtId && x.OrganizationId == item).ToList();
                            if (listNVOT.Count() == 0)
                            {
                                var kehoachOtPhongBan = listALlKeHoachOTPhongBan.FirstOrDefault(x => x.KeHoachOtId == keHoachOt.KeHoachOtId && x.OrganizationId == item);
                                kehoachOtPhongBan.TrangThai = 3;
                                context.KeHoachOtPhongBan.Update(kehoachOtPhongBan);
                            }
                        });
                        context.SaveChanges();
                    }
                    else if (checkPhongBanPheDuyet == null && keHoachOt.TrangThai == 4)// trạng thái phê duyệt tổng
                    {
                        //Nếu không phải phê duyệt teamlead => phê duyệt tổng. => Chuyển trạng thái của NV đăng ký OT từ 
                        //Đã duyệt sang chờ phê duyệt để bước tiếp phê duyệt. Từ chối giữ nguyên.
                        var listNVOT = listALlKeHoachOThanhVien.Where(x => x.KeHoachOtId == keHoachOt.KeHoachOtId && x.TrangThai == 3).ToList();
                        listNVOT.ForEach(item =>
                        {
                            item.TrangThai = 2;
                        });
                        context.KeHoachOtThanhVien.UpdateRange(listNVOT);
                        context.SaveChanges();
                    }

                    var listOTThanhVien = (from otThanhVien in context.KeHoachOtThanhVien
                                           join emp in context.Employee on otThanhVien.EmployeeId equals emp.EmployeeId
                                               into cu0
                                           from x0 in cu0.DefaultIfEmpty()
                                           join phongBan in context.Organization on otThanhVien.OrganizationId equals phongBan
                                                   .OrganizationId
                                               into cu
                                           from x in cu.DefaultIfEmpty()
                                           join chucVu in context.Position on otThanhVien.PositionId equals chucVu.PositionId
                                               into cu1
                                           from x1 in cu1.DefaultIfEmpty()
                                           where otThanhVien.KeHoachOtId == keHoachOt.KeHoachOtId &&
                                                 listIdPhongBan.Contains(x.OrganizationId)
                                           select new KeHoachOtThanhVienEntityModel()
                                           {
                                               EmployeeId = otThanhVien.EmployeeId,
                                               ThanVienOtId = otThanhVien.ThanVienOtId,
                                               KeHoachOtId = otThanhVien.KeHoachOtId,
                                               EmployeeName = x0.EmployeeName,
                                               EmployeeCode = x0.EmployeeCode,
                                               OrganizationId = x.OrganizationId,
                                               OrganizationName = x.OrganizationName,
                                               PositionId = x1.PositionId,
                                               PositionName = x1.PositionName,
                                               TrangThai = otThanhVien.TrangThai,
                                               GhiChu = otThanhVien.GhiChu,
                                           }).ToList();

                   

                    //Lấy dsach tên các loại OT code: LOAIOT
                    var otCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LOAIOT")?.CategoryTypeId;
                    var listLoaiOt = context.Category.Where(x => x.CategoryTypeId == otCategoryTypeId)
                        .Select(y => new CategoryEntityModel(y)).ToList();

                    var currentEmp = context.Employee.Where(x => x.EmployeeId == keHoachOtCheck.NguoiDeXuatId).Select(y => new EmployeeEntityModel()
                    {
                        EmployeeId = y.EmployeeId,
                        EmployeeName = y.EmployeeName,
                    }).ToList();

                    //Lấy id phòng ban mà user đang đăng nhập là trưởng bộ phận, nếu ko phải trưởng bộ phận thì trả về null
                    Guid? userTbpOrganizationId = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId && x.IsManager == 1)?.OrganizationId;

                    //Hiển thị nút đăng ký OT và hủy đăng ký OT
                    bool isShowDangKyOT = false;
                    bool isShowHuyDangKyOT = false;
                    bool isShowOtKeHoachKhac = false; // NV đã đăg ký OT ở kế hoạch khác

                    //Nếu kê hoạch đang ở trạng thái đăng ký OT: 3 => kiểm tra điuè kiện đăng ký OT của người đang đăng nhập
                    if (keHoachOt.TrangThai == 3)
                    {
                        //Kiểm tra xem kế hoạch OT hiện tại có trùng thời gian với kế hoạch khác hay k
                        var listDangKyKeHoangOT = context.KeHoachOt.Where(x =>
                                                ((x.NgayBatDau >= keHoachOt.NgayBatDau && x.NgayBatDau <= keHoachOt.NgayKetThuc) ||
                                                (x.NgayKetThuc >= keHoachOt.NgayBatDau && x.NgayKetThuc <= keHoachOt.NgayKetThuc) ||
                                                (x.NgayBatDau >= keHoachOt.NgayBatDau && x.NgayKetThuc <= keHoachOt.NgayKetThuc)) &&
                                                x.KeHoachOtId != keHoachOt.KeHoachOtId && x.Active == true
                                                ).Select(x => x.KeHoachOtId).ToList();

                        if (listDangKyKeHoangOT != null)
                        {
                            var loginEmp = context.User.FirstOrDefault(x => x.UserId == parameter.UserId)?.EmployeeId;
                            //kiểm tra list NV OT của các kế hoạch đó xem có nv đang đăng nhập hay k
                            var listNV = context.KeHoachOtThanhVien.FirstOrDefault(x => listDangKyKeHoangOT.Contains(x.KeHoachOtId.Value) && x.EmployeeId == loginEmp);
                            if (listNV != null)
                            {
                                isShowOtKeHoachKhac = true;
                            }
                        }

                        // kiểm tra xem emp có trang bảng kehoachOTthanhvien
                        var checkEmpExist = listOTThanhVien.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                        //Kiểm tra xem emp có trong list phòng ban được OT 
                        var checkEmpOrgExist = listIdPhongBan.FirstOrDefault(x => x == employee.OrganizationId);

                        //Nếu là thành viên trong phòng ban được OT
                        if (checkEmpOrgExist != null)
                        {
                            //Nếu đã không tồn tại trong list đăng ký OT và không OT ở kế hoạch khác => hiển thị nút đăg ký và ngược lại
                            if (checkEmpExist == null && !isShowOtKeHoachKhac)
                            {
                                isShowDangKyOT = true;
                            }
                            else if (checkEmpExist != null && !isShowOtKeHoachKhac)
                            {
                                isShowHuyDangKyOT = true;
                            }
                        }
                    }

                    //Điều kiện hiển thị button
                    bool isShowGuiXacNhan = false;
                    bool isShowXacNhan = false;
                    bool isShowTuChoi = false;
                    bool isShowHuyYeuCauXacNhan = false;
                    bool isShowLuu = false;
                    bool isShowXoa = false;
                    bool isShowHuy = false;
                    bool isShowHoanThanh = false;
                    bool isShowDatVeMoi = false;
                    //Nếu ở trạng thái là đang thực hiện (6) hoặc hoàn thành (7) thì k cần set
                    if (keHoachOt.TrangThai != 6 && keHoachOt.TrangThai != 7)
                    {
                        //Đối tượng áp dụng: 12: Đề xuất kế hoạch OT
                        //Đối tượng áp dụng: 13: Đăng ký OT
                        var DoiTuongApDung = 0;
                        if (keHoachOt.TrangThai == 1 || keHoachOt.TrangThai == 2 || keHoachOt.TrangThai == 8 || keHoachOt.TrangThai == 10)//đối tượng áp dụng là 12: đề xuất kế hoạch OT
                        {
                            DoiTuongApDung = 12;
                        }
                        else if (keHoachOt.TrangThai == 3 || keHoachOt.TrangThai == 4 || keHoachOt.TrangThai == 5 || keHoachOt.TrangThai == 9 || keHoachOt.TrangThai == 11)// đối tượng áp dụng là 13: đăng ký OT
                        {
                            DoiTuongApDung = 13;
                        }

                        var quyTrinh = context.QuyTrinh.FirstOrDefault(x => x.DoiTuongApDung == DoiTuongApDung && x.HoatDong);
                        var cauHinhQuyTrinh = context.CauHinhQuyTrinh.FirstOrDefault(x => x.QuyTrinhId == quyTrinh.Id);
                        var listIdCacBuocQuyTrinh = context.CacBuocQuyTrinh
                            .Where(x => x.CauHinhQuyTrinhId == cauHinhQuyTrinh.Id).Select(y => y.Id).ToList();
                        var listIdPhongBanTrongCacBuocQuyTrinh = context.PhongBanTrongCacBuocQuyTrinh
                            .Where(x => listIdCacBuocQuyTrinh.Contains(x.CacBuocQuyTrinhId)).Select(y => y.OrganizationId)
                            .ToList();

                        //Trạng thái đề xuất
                        if (keHoachOt.TrangThai == 1 || keHoachOt.TrangThai == 3) // mới
                        {
                            if (keHoachOt.CreatedById == user.UserId)
                            {
                                isShowGuiXacNhan = true;
                                isShowXoa = true;
                                isShowLuu = true;
                            }
                            else if (keHoachOt.NguoiDeXuatId == employee.EmployeeId)
                            {
                                isShowGuiXacNhan = true;
                                isShowXoa = true;
                                isShowLuu = true;
                            }
                            else
                            {
                                var phongBanNguoiDangNhap =
                                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == keHoachOt.NguoiDeXuatId);

                                var empCreate = context.User.FirstOrDefault(x => x.UserId == keHoachOt.CreatedById);
                                var phongBanNguoiTao =
                                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                                var phongBanNhanVienBanHang =
                                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == keHoachOt.NguoiDeXuatId);

                                //Trưởng bộ phận
                                if (phongBanNguoiDangNhap?.IsManager == 1)
                                {
                                    if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                                        phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                                    {
                                        isShowGuiXacNhan = true;
                                        isShowXoa = true;
                                        isShowLuu = true;
                                    }
                                }
                            }
                        }

                        if (keHoachOt.TrangThai == 2 || keHoachOt.TrangThai == 4) // chờ phê duyệt
                        {
                            var buocHienTai = context.CacBuocApDung.Where(x => x.ObjectNumber == keHoachOt.KeHoachOtId &&
                                                                                   x.DoiTuongApDung == DoiTuongApDung &&
                                                                                   x.TrangThai == 0)
                                    .OrderByDescending(z => z.Stt)
                                    .FirstOrDefault();

                            //Nếu là phê duyệt trưởng bộ phận
                            if (buocHienTai?.LoaiPheDuyet == 1)
                            {
                                var listDonViId_NguoiPhuTrach = context.ThanhVienPhongBan
                                    .Where(x => x.EmployeeId == keHoachOt.NguoiDeXuatId)
                                    .Select(y => y.OrganizationId).ToList();

                                var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                                    x.EmployeeId == employee.EmployeeId &&
                                    x.IsManager == 1 &&
                                    listDonViId_NguoiPhuTrach.Contains(
                                        x.OrganizationId));

                                if (countPheDuyet > 0)
                                {
                                    isShowXacNhan = true;
                                    isShowTuChoi = true;
                                }
                            }
                            //Nếu là phòng ban phê duyệt
                            else if (buocHienTai?.LoaiPheDuyet == 2)
                            {
                                //Lấy list Phòng ban đã phê duyệt ở bước hiện tại
                                var listDonViIdDaPheDuyet = context.PhongBanApDung
                                    .Where(x => x.CacBuocApDungId == buocHienTai.Id &&
                                                x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId)
                                    .Select(y => y.OrganizationId).ToList();

                                //Lấy list Phòng ban chưa phê duyệt ở bước hiện tại
                                var listDonViId = context.PhongBanTrongCacBuocQuyTrinh
                                    .Where(x => x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId &&
                                                !listDonViIdDaPheDuyet.Contains(x.OrganizationId))
                                    .Select(y => y.OrganizationId).ToList();

                                var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                                    x.EmployeeId == employee.EmployeeId &&
                                    x.IsManager == 1 &&
                                    listDonViId.Contains(
                                        x.OrganizationId));

                                if (countPheDuyet > 0)
                                {
                                    isShowXacNhan = true;
                                    isShowTuChoi = true;
                                }
                            }
                        }

                        // trang thai cho phe duyet
                        if (keHoachOt.TrangThai == 2 && user.EmployeeId == keHoachOt.NguoiDeXuatId)
                        {
                            var count =
                                context.CacBuocApDung.Count(x => x.ObjectNumber == keHoachOt.KeHoachOtId &&
                                                                 x.DoiTuongApDung == DoiTuongApDung && x.TrangThai == 1);

                            if (count == 0)
                            {
                                isShowHuyYeuCauXacNhan = true;
                            }
                        }

                        if (keHoachOt.TrangThai == 3 || keHoachOt.TrangThai == 1) //Đã Phê duyệt 
                        {
                            var phongBanNguoiDangNhap =
                                    context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                            var empCreate = context.User.FirstOrDefault(x => x.UserId == keHoachOt.CreatedById);
                            var phongBanNguoiTao =
                                context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId);

                            var phongBanNhanVienBanHang =
                                context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == keHoachOt.NguoiDeXuatId);

                            //Trưởng bộ phận
                            if (phongBanNguoiDangNhap?.IsManager == 1)
                            {
                                if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                                    phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                                {
                                    isShowHuy = true;
                                }

                                if (listIdPhongBanTrongCacBuocQuyTrinh.Contains(phongBanNguoiDangNhap.OrganizationId))
                                {
                                    isShowHuy = true;
                                }
                            }
                        }

                        if (keHoachOt.TrangThai == 3 || keHoachOt.TrangThai == 1)
                        {
                            var phongBanNguoiDangNhap =
                                context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

                            var empCreate = context.User.FirstOrDefault(x => x.UserId == keHoachOt.CreatedById);
                            var phongBanNguoiTao =
                                context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == empCreate.EmployeeId.Value);

                            var phongBanNhanVienBanHang =
                                context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == keHoachOt.NguoiDeXuatId);

                            //Trưởng bộ phận phòng ban người tạo hoặc Trưởng bộ phận phòng ban của nhân viên bán hàng
                            if (phongBanNguoiDangNhap?.IsManager == 1)
                            {
                                if (phongBanNguoiDangNhap?.OrganizationId == phongBanNguoiTao?.OrganizationId ||
                                    phongBanNguoiDangNhap?.OrganizationId == phongBanNhanVienBanHang?.OrganizationId)
                                {
                                    isShowHoanThanh = true;
                                }
                            }
                        }

                        if (keHoachOt.TrangThai == 8 || keHoachOt.TrangThai == 9
                            || keHoachOt.TrangThai == 10 || keHoachOt.TrangThai == 11)
                        {
                            isShowDatVeMoi = true;
                        }
                        //Nếu trọng thái là đăng ký OT thì ấn hết nút phê duyệt xác nhận, hủy bỏ để tự động so sánh ngày hết hạn đăng ký OT rồi chuyển sang tt 4

                        if (keHoachOt.TrangThai == 3)
                        {
                            isShowGuiXacNhan = false;
                            isShowTuChoi = false;
                            isShowGuiXacNhan = false;
                        }

                        if (keHoachOt.TrangThai != 1) // trạng thái khác tạo mới sẽ ẩn nút lưu
                        {
                            isShowLuu = false;
                        }
                    }

                    #region Lấy danh sách file đinh kèm 

                    var webRootPath = hostingEnvironment.WebRootPath + "\\";

                    var objectType = "KEHOACHOT";
                    var folderCommon = context.Folder.ToList();
                    var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                    var listFileResult = context.FileInFolder
                                    .Where(x => x.ObjectNumber == parameter.DeXuatOTId && x.FolderId == folder.FolderId).Select(y =>
                                        new FileInFolderEntityModel
                                        {
                                            Size = y.Size,
                                            ObjectId = y.ObjectId,
                                            Active = y.Active,
                                            FileExtension = y.FileExtension,
                                            FileInFolderId = y.FileInFolderId,
                                            FileName = y.FileName,
                                            FolderId = y.FolderId,
                                            ObjectType = y.ObjectType,
                                            ObjectNumber = y.ObjectNumber,
                                            CreatedById = y.CreatedById,
                                            CreatedDate = y.CreatedDate,
                                            UpdatedById = y.UpdatedById,
                                            UpdatedDate = y.UpdatedDate
                                        }).OrderBy(z => z.CreatedDate).ToList();

                    listFileResult.ForEach(x =>
                    {
                        x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                        x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                        var folderUrlTL = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                        x.FileUrl = Path.Combine(webRootPath, folderUrlTL, x.FileFullName);
                    });

                    #endregion

                    transaction.Commit();

                    return new GetMasterKeHoachOTDetailResult()
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Success",
                        ListOrganization = listOrg,
                        ListLoaiOt = listLoaiOt,
                        CurrentEmp = currentEmp,
                        KeHoachOt = keHoachOt,
                        ListPhongBanOT = listPhongBanOT,
                        IsShowGuiXacNhan = isShowGuiXacNhan,
                        IsShowXacNhan = isShowXacNhan,
                        IsShowTuChoi = isShowTuChoi,
                        IsShowLuu = isShowLuu,
                        IsShowXoa = isShowXoa,
                        IsShowHuy = isShowHuy,
                        IsShowHuyYeuCauXacNhan = isShowHuyYeuCauXacNhan,
                        IsShowHoanThanh = isShowHoanThanh,
                        IsShowDatVeMoi = isShowDatVeMoi,
                        ListOTThanhVien = listOTThanhVien,
                        IsShowDangKyOT = isShowDangKyOT,
                        IsShowHuyDangKyOT = isShowHuyDangKyOT,
                        IsShowOtKeHoachKhac = isShowOtKeHoachKhac,
                        IsPheDuyetTemLead = isPheDuyetTemLead,
                        ListFileInFolder = listFileResult,
                        ListLoaiCaOt = listLoaiCaOt,
                        CauHinhOtCaNgay = cauHinhOtCaNgay,
                        UserTbpOrganizationId = userTbpOrganizationId,
                        IsNguoiTao = IsNguoiTao,
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new GetMasterKeHoachOTDetailResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = e.Message
                    };
                }
            }
        }

        public DatVeMoiKeHoachOtResult DatVeMoiKeHoachOt(DatVeMoiKeHoachOtParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new DatVeMoiKeHoachOtResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }
                    var listPhongBanKeHoach = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();
                    listPhongBanKeHoach.ForEach(item => item.TrangThai = 1);
                    var listThanhVienKeHoach = context.KeHoachOtThanhVien.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();

                    deXuatOT.TrangThai = 1;
                    context.KeHoachOtThanhVien.RemoveRange(listThanhVienKeHoach);
                    context.KeHoachOtPhongBan.UpdateRange(listPhongBanKeHoach);
                    context.KeHoachOt.Update(deXuatOT);

                    //Xóa hết các bước áp dụng
                    var listCacBuocApDung = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatOT.KeHoachOtId &&
                                                                             x.DoiTuongApDung == 12 || x.DoiTuongApDung == 13).ToList();
                    context.CacBuocApDung.RemoveRange(listCacBuocApDung);

                    //Xóa hết các phòng ban áp dụng
                    var listCacBuocApDungId = listCacBuocApDung.Select(y => y.Id).ToList();
                    var listPhongBanApDung = context.PhongBanApDung
                        .Where(x => listCacBuocApDungId.Contains(x.CacBuocApDungId)).ToList();
                    context.PhongBanApDung.RemoveRange(listPhongBanApDung);

                    context.SaveChanges();
                    transaction.Commit();
                    return new DatVeMoiKeHoachOtResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Đặt kế hoạch OT về trạng thái mới thành công!",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DatVeMoiKeHoachOtResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DangKyOTOrHuyDangKyOTResult DangKyOTOrHuyDangKyOT(DangKyOTOrHuyDangKyOTParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(x => x.UserId == request.UserId);
                    if (user == null)
                    {
                        return new DangKyOTOrHuyDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Người dùng không tồn tại trong hệ thống",
                        };
                    }
                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    if (user == null)
                    {
                        return new DangKyOTOrHuyDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Nhân viên không tồn tại trong hệ thống",
                        };
                    }

                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new DangKyOTOrHuyDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }
                    var message = "";
                    if (request.Type)
                    {
                        message = "Đăng ký OT thành công";
                        var thanhVienOT = new KeHoachOtThanhVien();
                        thanhVienOT.KeHoachOtId = request.KeHoachOtId;
                        thanhVienOT.EmployeeId = emp.EmployeeId;
                        thanhVienOT.OrganizationId = emp.OrganizationId.Value;
                        thanhVienOT.TrangThai = 2; // chờ phê duyệt
                        thanhVienOT.PositionId = emp.PositionId.Value;
                        thanhVienOT.CreatedById = request.UserId;
                        thanhVienOT.CreatedDate = DateTime.Now;
                        context.KeHoachOtThanhVien.Add(thanhVienOT);
                    }
                    else
                    {
                        message = "Hủy đăng ký OT thành công";
                        var nhanVien = context.KeHoachOtThanhVien.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);
                        if (nhanVien == null)
                        {
                            return new DangKyOTOrHuyDangKyOTResult
                            {
                                StatusCode = HttpStatusCode.BadRequest,
                                Message = "Nhân viên không nằm trong kế hoạch đăng ký OT",
                            };
                        }
                        context.KeHoachOtThanhVien.Remove(nhanVien);
                    }
                    context.SaveChanges();
                    transaction.Commit();

                    return new DangKyOTOrHuyDangKyOTResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = message,
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DangKyOTOrHuyDangKyOTResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DeleteDeXuatCongTacResult DatVeMoiDeXuatCongTac(DeleteDeXuatCongTacParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatCongTac = context.DeXuatCongTac.FirstOrDefault(x => x.DeXuatCongTacId == parameter.DeXuatCongTacId);
                    if (deXuatCongTac == null)
                    {
                        return new DeleteDeXuatCongTacResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề xuất công tác không tồn tại trong hệ thống",
                        };
                    }

                    //Nếu trạng thái khác Từ chối
                    if (deXuatCongTac.TrangThai != 4)
                    {
                        return new DeleteDeXuatCongTacResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Không thể Đặt về mới Đề xuất công tác có trạng thái khác Từ chối",
                        };
                    }

                    deXuatCongTac.TrangThai = 1; // tt mới
                    context.DeXuatCongTac.Update(deXuatCongTac);
                    context.SaveChanges();

                    //Xóa các bước áp dụng của phê duyệt để làm mới
                    var listCacBuocApDung = context.CacBuocApDung
                        .Where(x => x.ObjectNumber == deXuatCongTac.DeXuatCongTacId &&
                                    x.DoiTuongApDung == 30).ToList();
                    var listCacBuocApDungId = listCacBuocApDung.Select(y => y.Id).ToList();
                    var listPhongBanApDung = context.PhongBanApDung
                        .Where(x => listCacBuocApDungId.Contains(x.CacBuocApDungId)).ToList();

                    context.CacBuocApDung.RemoveRange(listCacBuocApDung);
                    context.PhongBanApDung.RemoveRange(listPhongBanApDung);
                    context.SaveChanges();

                    transaction.Commit();

                    return new DeleteDeXuatCongTacResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Đặt về mới đề xuất công tác thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteDeXuatCongTacResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public string GenUserName(string userName)
        {
            string newUserName = userName;
            var uslstUser = context.User.Where(x => x.UserName.ToLower().Contains(userName.ToLower())).ToList();
            if (uslstUser.Count() > 0)
            {
                newUserName = userName + uslstUser.Count();
            }

            return newUserName;
        }

        public GetMasterDataHoSoCTFormResult GetMasterDataHoSoCTForm(GetMasterDataHoSoCTFormParameter parameter)
        {
            try
            {
                var listQuyetDinhCT = new List<DeXuatCongTacEntityModel>();
                var listNhanVienCT = new List<EmployeeEntityModel>();

                #region Lấy danh sách đề xuất công tác
                var lstHoSoCTId = context.HoSoCongTac.Where(x => x.Active == true).Select(x => x.DeXuatCongTacId).ToList();
                listQuyetDinhCT = context.DeXuatCongTac.Where(a => a.TrangThai == 3).Select(x => new DeXuatCongTacEntityModel
                {
                    TenDeXuat = x.DeXuatCongTacId + " - " + x.TenDeXuat,
                    DeXuatCongTacId = x.DeXuatCongTacId,
                    DonVi = x.DonVi,
                    DiaDiem = x.DiaDiem,
                    PhuongTien = x.PhuongTien,
                    NhiemVu = x.NhiemVu,
                    ThoiGianBatDau = x.ThoiGianBatDau,
                    ThoiGianKetThuc = x.ThoiGianKetThuc,
                }).Where(x => !lstHoSoCTId.Contains(x.DeXuatCongTacId.Value)).ToList();

                var lstDeXuatId = listQuyetDinhCT.Select(a => a.DeXuatCongTacId).ToList();
                var lstEmpChiTiet = context.ChiTietDeXuatCongTac.Where(x => lstDeXuatId.Count() > 0 && lstDeXuatId.Contains(x.DeXuatCongTacId)).ToList();
                var lstEmpChiTietId = context.ChiTietDeXuatCongTac.Where(x => lstDeXuatId.Count() > 0 && lstDeXuatId.Contains(x.DeXuatCongTacId)).Select(x => x.EmployeeId).ToList();

                var lstEmp = context.Employee.Where(x => lstEmpChiTietId.Count() > 0 && lstEmpChiTietId.Contains(x.EmployeeId)).ToList();
                #endregion

                #region Lấy danh sách nhân viên trong đề xuất công tác
                listNhanVienCT = (from empChiTiet in lstEmpChiTiet
                                  join emp in lstEmp on empChiTiet.EmployeeId equals emp.EmployeeId
                                  select new EmployeeEntityModel
                                  {
                                      EmployeeId = emp.EmployeeId,
                                      EmployeeCode = emp.EmployeeCode,
                                      EmployeeName = emp.EmployeeName,
                                      EmployeeCodeName = emp.EmployeeCode + " - " + emp.EmployeeName,
                                      OrganizationId = emp.OrganizationId,
                                      PositionId = emp.PositionId,
                                      DeXuatCongTacId = empChiTiet.DeXuatCongTacId
                                  }).OrderBy(x => x.EmployeeName).ToList();

                var listPosition = context.Position.ToList();
                var listOrganization = context.Organization.ToList();

                listNhanVienCT?.ForEach(item =>
                {
                    var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                    item.OrganizationName = phongBan?.OrganizationName;

                    var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                    item.PositionName = chucVu?.PositionName;

                    var contact = context.Contact.FirstOrDefault(x => x.ObjectType == "EMP" && x.ObjectId == item.EmployeeId);
                    if (contact != null)
                    {
                        item.DateOfBirth = contact.DateOfBirth;
                        item.Identity = contact.IdentityId;
                    }
                });
                #endregion
                return new GetMasterDataHoSoCTFormResult()
                {
                    Status = true,
                    StatusCode = HttpStatusCode.OK,
                    ListNhanVienCT = listNhanVienCT,
                    ListQuyetDinhCT = listQuyetDinhCT,
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataHoSoCTFormResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden,
                    Status = false
                };
            }
        }

        public CreateOrUpdateHoSoCTResult CreateOrUpdateHoSoCT(CreateOrUpdateHoSoCTParameter parameter)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

            if (folder == null)
            {
                return new CreateOrUpdateHoSoCTResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                    if (user == null)
                    {
                        return new CreateOrUpdateHoSoCTResult
                        {
                            MessageCode = "Nhân viên không tồn tại trong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
                    if (employee == null)
                    {
                        return new CreateOrUpdateHoSoCTResult
                        {
                            MessageCode = "Nhân viên không tồn tại tong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed
                        };
                    }

                    // Tạo mới
                    if (parameter.HoSoCongTac.HoSoCongTacId == 0)
                    {
                        var hoSoCT = new HoSoCongTac
                        {
                            DeXuatCongTacId = parameter.HoSoCongTac.DeXuatCongTacId,
                            MaHoSoCongTac = TaoMaHoSoCongTac(),
                            TrangThai = 0, // 0 là Mới --- 1 là Hoàn thành
                            Active = true,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            UpdatedById = parameter.UserId,
                            UpdatedDate = DateTime.Now,
                        };
                        context.HoSoCongTac.Add(hoSoCT);
                        context.SaveChanges();

                        if (parameter.ListFile?.Count > 0)
                        {
                            var isSave = true;
                            parameter.ListFile?.ForEach(item =>
                            {
                                if (folder == null)
                                {
                                    isSave = false;
                                }

                                var folderName = ConvertFolderUrl(folder.Url);
                                var webRootPath = hostingEnvironment.WebRootPath;
                                var newPath = Path.Combine(webRootPath, folderName);

                                if (!Directory.Exists(newPath))
                                {
                                    isSave = false;
                                }

                                if (isSave)
                                {
                                    var file = new FileInFolder()
                                    {
                                        Active = true,
                                        CreatedById = parameter.UserId,
                                        CreatedDate = DateTime.Now,
                                        UpdatedById = parameter.UserId,
                                        UpdatedDate = DateTime.Now,
                                        FileInFolderId = Guid.NewGuid(),
                                        FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                        FolderId = folder.FolderId,
                                        ObjectNumber = hoSoCT.HoSoCongTacId,
                                        ObjectType = item.FileInFolder.ObjectType,
                                        Size = item.FileInFolder.Size,
                                        FileExtension = item.FileSave.FileName.Substring(
                                            item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                    };

                                    context.FileInFolder.Add(file);
                                }
                            });

                            if (!isSave)
                            {

                                return new CreateOrUpdateHoSoCTResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Bạn phải cấu hình thư mục để lưu"
                                };
                            }
                        }
                        context.SaveChanges();
                        transaction.Commit();
                        return new CreateOrUpdateHoSoCTResult
                        {
                            MessageCode = "Success",
                            StatusCode = HttpStatusCode.OK,
                            HoSoCongTacId = hoSoCT.HoSoCongTacId
                        };
                    }
                    else
                    {
                        var hoSo = context.HoSoCongTac.FirstOrDefault(x => x.HoSoCongTacId == parameter.HoSoCongTac.HoSoCongTacId);
                        if (hoSo == null)
                        {
                            return new CreateOrUpdateHoSoCTResult
                            {
                                StatusCode = HttpStatusCode.Forbidden,
                                Message = "Không tồn tại hồ sơ công tác trong hệ thống."
                            };
                        }
                        hoSo.KetQua = parameter.HoSoCongTac.KetQua;
                        hoSo.UpdatedById = parameter.UserId;
                        hoSo.UpdatedDate = DateTime.Now;
                        context.HoSoCongTac.Update(hoSo);
                        context.SaveChanges();
                        transaction.Commit();
                    }
                    return new CreateOrUpdateHoSoCTResult
                    {
                        MessageCode = "Success",
                        StatusCode = HttpStatusCode.OK
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateHoSoCTResult
                    {
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public GetAllHoSoCongTacListResult GetAllHoSoCongTacList(GetAllHoSoCongTacListParameter parameter)
        {
            var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
            if (user == null)
            {
                return new GetAllHoSoCongTacListResult
                {
                    Message = "Nhân viên không tồn tại trong hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed
                };
            }
            var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
            if (employee == null)
            {
                return new GetAllHoSoCongTacListResult
                {
                    Message = "Nhân viên không tồn tại trong hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed
                };
            }

            var listEmployee = new List<EmployeeEntityModel>();
            #region Lấy danh sách nhân viên
            listEmployee = context.Employee.Where(x => x.Active == true).Select(y =>
                       new EmployeeEntityModel
                       {
                           EmployeeId = y.EmployeeId,
                           EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                       }).ToList();
            #endregion

            var listHoSoCT = new List<HoSoCongTacEntityModel>();
            var listAllHoSoCT = context.HoSoCongTac.Where(x => x.Active == true).Select(y => new HoSoCongTacEntityModel
            {
                HoSoCongTacId = y.HoSoCongTacId,
                MaHoSoCongTac = y.MaHoSoCongTac,
                DeXuatCongTacId = y.DeXuatCongTacId,
                CreatedDate = y.CreatedDate,
                CreatedById = y.CreatedById,
                TrangThai = y.TrangThai,
                Active = y.Active,
            }).OrderByDescending(z => z.CreatedDate).ToList();

            listHoSoCT = listAllHoSoCT.ToList();

            #region Phân quyền dữ liệu theo quy trình phê duyệt
            var isAsset = context.Organization.FirstOrDefault(x => x.OrganizationId == employee.OrganizationId)?.IsAccess;
            //Nếu được xem dự liệu phòng ban khác
            if (isAsset == false)
            {
                var thanhVienPhongBan = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                //Nếu là trưởng bộ phận (IsManager = 1)
                if (thanhVienPhongBan.IsManager == 1)
                {
                    //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt (đề xuất công tác)
                    var listId = context.PhongBanPheDuyetDoiTuong
                        .Where(x => x.DoiTuongApDung == 30 &&
                                    x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                        .ToList();

                    var listEmpCungOrgNguoiDangNhap = listEmployee.Where(x => x.OrganizationId == employee.OrganizationId).Select(x => x.EmployeeId).ToList();
                    var listUserId = context.User.Where(x => listEmpCungOrgNguoiDangNhap.Contains(x.EmployeeId)).Select(x => x.UserId).ToList();
                    listHoSoCT = listAllHoSoCT.Where(x =>
                    (parameter.MaHoSo == null || parameter.MaHoSo == "" || x.MaHoSoCongTac.Contains(parameter.MaHoSo)) &&
                    (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 || parameter.ListEmployee.Contains(x.CreatedById)) &&
                    (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                    ((listId.Contains(x.DeXuatCongTacId))  // Phê duyệt
                    || x.CreatedById == parameter.UserId // người tạo
                    || (listUserId.Contains(x.CreatedById) &&  x.TrangThai != 0) //cùng phòng ban và trạng thái khác mới
                    )).ToList();
                }
                //Nếu là nhân viên thường (IsManager = 0)
                else
                {
                    listHoSoCT = listAllHoSoCT.Where(x =>
                    (parameter.MaHoSo == null || parameter.MaHoSo == "" || x.MaHoSoCongTac.Contains(parameter.MaHoSo)) &&
                    (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 || parameter.ListEmployee.Contains(x.CreatedById)) &&
                    (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai)
                    && x.CreatedById == parameter.UserId).ToList();
                }
            }

            #endregion


            if (listHoSoCT.Count() > 0)
            {
                var lstDeXuatCTId = listHoSoCT.Select(x => x.DeXuatCongTacId).ToList();
                var lstPhongBan = context.Organization.Where(x => x.Active == true).ToList();

                var lstAllDeXuat = context.DeXuatCongTac.Where(x => lstDeXuatCTId.Contains(x.DeXuatCongTacId));

                listHoSoCT.ForEach(p =>
                {
                    switch (p.TrangThai)
                    {
                        case 0:
                            p.TrangThaiString = "Mới";
                            p.BackgroundColorForStatus = "#8ec3f4";
                            break;
                        case 1:
                            p.TrangThaiString = "Hoàn thành";
                            p.BackgroundColorForStatus = "#50f296";
                            break;
                    }

                    var deXuat = lstAllDeXuat.FirstOrDefault(x => x.DeXuatCongTacId == p.DeXuatCongTacId);
                    if (deXuat != null)
                    {
                        p.NoiCongTac = deXuat?.DiaDiem;
                        p.ThoiGian = deXuat?.ThoiGianBatDau.Value.ToString("dd/MM/yyyy") + " - " +
                        (deXuat.ThoiGianKetThuc == null ? "" : deXuat?.ThoiGianKetThuc.Value.ToString("dd/MM/yyyy"));
                    }
                });
            }

            return new GetAllHoSoCongTacListResult()
            {
                StatusCode = HttpStatusCode.OK,
                Status = true,
                ListHoSoCongTac = listHoSoCT,
                ListEmployee = listEmployee
            };
        }

        public XoaHoSoCongTacResult XoaHoSoCongTac(XoaHoSoCongTacParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var hoSo = context.HoSoCongTac.FirstOrDefault(x => x.HoSoCongTacId == parameter.HoSoCongTacId);

                    if (hoSo != null)
                    {
                        // Kiểm tra đã gắn với đề nghị hoàn hay tạm ứng
                        var deNghi = context.DeNghiTamHoanUng.FirstOrDefault(x => x.HoSoCongTacId == hoSo.HoSoCongTacId);
                        if (deNghi != null)
                        {
                            return new XoaHoSoCongTacResult
                            {
                                StatusCode = HttpStatusCode.FailedDependency,
                                MessageCode = "Hồ sơ đã có đề nghị hoàn - tạm ứng. Không thể xóa!"
                            };
                        }

                        hoSo.Active = false;
                        context.HoSoCongTac.Update(hoSo);
                        context.SaveChanges();
                        transaction.Commit();
                    }
                    else
                    {
                        return new XoaHoSoCongTacResult
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Không tồn tại hồ sơ công tác!"
                        };
                    }

                    return new XoaHoSoCongTacResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa hồ sơ công tác thành công"
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new XoaHoSoCongTacResult
                    {
                        MessageCode = e.Message,
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
            }
        }

        private string TaoMaHoSoCongTac()
        {
            var code = "";
            var prefix = "HSCT";

            var listMaHoSo = context.HoSoCongTac.Where(x => x.MaHoSoCongTac.Contains(prefix)).Select(y => new
            {
                MaHoSo = Int32.Parse(y.MaHoSoCongTac.Substring(4))
            }).OrderByDescending(z => z.MaHoSo).ToList();

            if (listMaHoSo.Count == 0)
            {
                code = prefix + 1.ToString("D5");
            }

            if (listMaHoSo.Count < 999999)
            {
                code = prefix + (listMaHoSo.Count + 1).ToString("D5");
            }
            else
            {
                code = prefix + (listMaHoSo.Count + 1).ToString();
            }

            return code;
        }

        private string TaoMaDeNghiTamHoanUng()
        {
            var code = "";
            var prefix = "THU";

            var listMaDeNghi = context.DeNghiTamHoanUng.Where(x => x.MaDeNghi.Contains(prefix)).Select(y => new
            {
                MaDeNghi = Int32.Parse(y.MaDeNghi.Substring(4))
            }).OrderByDescending(z => z.MaDeNghi).ToList();

            if (listMaDeNghi.Count == 0)
            {
                code = prefix + 1.ToString("D5");
            }

            if (listMaDeNghi.Count < 999999)
            {
                code = prefix + (listMaDeNghi.Count + 1).ToString("D5");
            }
            else
            {
                code = prefix + (listMaDeNghi.Count + 1).ToString();
            }

            return code;
        }

        public GetDataHoSoCTDetailResult GetDataHoSoCTDetail(GetDataDetailParameter parameter)
        {
            try
            {
                var hoSoCongTac = new HoSoCongTacEntityModel();
                var hsCT = context.HoSoCongTac.FirstOrDefault(x => x.HoSoCongTacId == parameter.Id);
                if (hsCT == null)
                {
                    return new GetDataHoSoCTDetailResult()
                    {
                        Message = "Không tồn tại hồ sơ công tác trên hệ thống.",
                        StatusCode = HttpStatusCode.Forbidden,
                        Status = false
                    };
                }

                var deXuatCT = context.DeXuatCongTac.FirstOrDefault(x => x.DeXuatCongTacId == hsCT.DeXuatCongTacId);

                var listTrangThai = GeneralList.GetTrangThais("TrangThaiHoSoCongTac");
                var trangThai = listTrangThai.FirstOrDefault(x => x.Value == hsCT.TrangThai);

                #region Lấy danh sách nhân viên trong đề xuất công tác

                hoSoCongTac.TenDeXuat = deXuatCT.TenDeXuat;
                hoSoCongTac.DeXuatCongTacId = deXuatCT.DeXuatCongTacId;
                hoSoCongTac.DonVi = deXuatCT.DonVi;
                hoSoCongTac.DiaDiem = deXuatCT.DiaDiem;
                hoSoCongTac.PhuongTien = deXuatCT.PhuongTien;
                hoSoCongTac.NhiemVu = deXuatCT.NhiemVu;
                hoSoCongTac.ThoiGianBatDau = deXuatCT.ThoiGianBatDau;
                hoSoCongTac.ThoiGianKetThuc = deXuatCT.ThoiGianKetThuc;
                //hoSoCongTac.LyDo = deXuatCT.LyDo;
                hoSoCongTac.KetQua = hsCT.KetQua;
                hoSoCongTac.TrangThai = hsCT.TrangThai;
                hoSoCongTac.MaHoSoCongTac = hsCT.MaHoSoCongTac;
                hoSoCongTac.TrangThaiText = trangThai?.Name;

                var listPosition = context.Position.ToList();
                var listOrganization = context.Organization.ToList();

                var lstEmpId = context.ChiTietDeXuatCongTac.Where(x => x.DeXuatCongTacId == hoSoCongTac.DeXuatCongTacId).Select(x => x.EmployeeId).ToList();
                var listNhanVienCT = new List<EmployeeEntityModel>();
                if (lstEmpId.Count() > 0)
                {
                    listNhanVienCT = context.Employee.Where(x => lstEmpId.Contains(x.EmployeeId)).Select(emp => new EmployeeEntityModel
                    {
                        EmployeeId = emp.EmployeeId,
                        EmployeeCode = emp.EmployeeCode,
                        EmployeeName = emp.EmployeeName,
                        EmployeeCodeName = emp.EmployeeCode + " - " + emp.EmployeeName,
                        OrganizationId = emp.OrganizationId,
                        PositionId = emp.PositionId,

                    }).ToList();

                    listNhanVienCT?.ForEach(item =>
                    {
                        var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                        item.OrganizationName = phongBan?.OrganizationName;

                        var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                        item.PositionName = chucVu?.PositionName;

                        var contact = context.Contact.FirstOrDefault(x => x.ObjectType == "EMP" && x.ObjectId == item.EmployeeId);
                        if (contact != null)
                        {
                            item.DateOfBirth = contact.DateOfBirth;
                            item.Identity = contact.IdentityId;
                        }
                    });
                    hoSoCongTac.ListNhanVienCT = new List<EmployeeEntityModel>();
                    hoSoCongTac.ListNhanVienCT = listNhanVienCT;
                }

                #endregion

                #region Lấy dách file đinh kèm 

                var webRootPath = hostingEnvironment.WebRootPath + "\\";
                var objectType = "HOSOCT";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                                .Where(x => x.ObjectNumber == parameter.Id && x.FolderId == folder.FolderId).Select(y =>
                                    new FileInFolderEntityModel
                                    {
                                        Size = y.Size,
                                        ObjectId = y.ObjectId,
                                        Active = y.Active,
                                        FileExtension = y.FileExtension,
                                        FileInFolderId = y.FileInFolderId,
                                        FileName = y.FileName,
                                        FolderId = y.FolderId,
                                        ObjectType = y.ObjectType,
                                        ObjectNumber = y.ObjectNumber,
                                        CreatedById = y.CreatedById,
                                        CreatedDate = y.CreatedDate,
                                        UpdatedById = y.UpdatedById,
                                        UpdatedDate = y.UpdatedDate
                                    }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrlF = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPath, folderUrlF, x.FileFullName);
                });

                #endregion

                #region Thông tin tạm ứng & hoàn ứng

                var lstTamHoanUng = context.DeNghiTamHoanUng.Where(x => x.HoSoCongTacId == parameter.Id && x.Active == true).Select(x => new DeNghiTamHoanUngEntityModel
                {
                    DeNghiTamHoanUngId = x.DeNghiTamHoanUngId,
                    MaDeNghi = x.MaDeNghi,
                    NguoiThuHuongId = x.NguoiThuHuongId,
                    TrangThai = x.TrangThai.Value,
                    TongTienThanhToan = x.TongTienThanhToan,
                    LoaiDeNghi = x.LoaiDeNghi.Value
                }).ToList();

                lstTamHoanUng.ForEach(p =>
                {
                    switch (p.TrangThai)
                    {
                        case 1:
                            p.TrangThaiString = "Mới";
                            p.BackgroundColorForStatus = "#8ec3f4";
                            break;
                        case 2:
                            p.TrangThaiString = "Chờ phê duyệt";
                            p.BackgroundColorForStatus = "#f29505";
                            break;
                        case 3:
                            p.TrangThaiString = "Đã duyệt";
                            p.BackgroundColorForStatus = "#05f235";
                            break;
                        case 4:
                            p.TrangThaiString = "Từ chối";
                            p.BackgroundColorForStatus = "#797979";
                            break;
                    }

                    p.NguoiThuHuong = listNhanVienCT.FirstOrDefault(x => x.EmployeeId == p.NguoiThuHuongId)?.EmployeeName;
                });

                #endregion

                return new GetDataHoSoCTDetailResult()
                {
                    Status = true,
                    StatusCode = HttpStatusCode.OK,
                    HoSoCongTac = hoSoCongTac,
                    ListFileInFolder = listFileResult,
                    ListDeNghiTamHoanUng = lstTamHoanUng
                };
            }
            catch (Exception e)
            {
                return new GetDataHoSoCTDetailResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden,
                    Status = false
                };
            }
        }

        public GetMasterDataDeXuatCongTacResult GetMasterDataDeXuatCongTac(GetMasterDataHoSoCTFormParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new GetMasterDataDeXuatCongTacResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Người dùng không tồn tại trong hệ thống",
                    };
                }

                var empUser = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (empUser == null)
                {
                    return new GetMasterDataDeXuatCongTacResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Người dùng không tồn tại trong hệ thống",
                    };
                }

                var listNhanVienCT = new List<EmployeeEntityModel>();

                #region Lấy danh sách nhân viên trong đề xuất công tác
                var listAllUser = context.User.ToList();
                var listAllNhanVienCT = context.Employee.Select(emp => new EmployeeEntityModel
                    {
                        EmployeeId = emp.EmployeeId,
                        EmployeeCode = emp.EmployeeCode,
                        EmployeeName = emp.EmployeeName,
                        EmployeeCodeName = emp.EmployeeCode + " - " + emp.EmployeeName,
                        OrganizationId = emp.OrganizationId,
                        PositionId = emp.PositionId,
                        Active = emp.Active,
                    }).OrderBy(x => x.EmployeeName).ToList();

                var listPosition = context.Position.ToList();
                var listOrganization = context.Organization.ToList();
                var listContact = context.Contact.ToList();

                listAllNhanVienCT.ForEach(item =>
                {
                    var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                    item.OrganizationName = phongBan?.OrganizationName;

                    var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                    item.PositionName = chucVu?.PositionName;

                    var contact = listContact.FirstOrDefault(x => x.ObjectType == "EMP" && x.ObjectId == item.EmployeeId);
                    if (contact != null)
                    {
                        item.DateOfBirth = contact.DateOfBirth;
                        item.Identity = contact.IdentityId;
                    }

                    var trangThaiId = 0;
                    var userInfor = listAllUser.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);

                    if (item.Active == true && userInfor.Active == true)
                    {
                        trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                        listNhanVienCT.Add(item);
                    }
                    else if (item.Active == true && userInfor.Active == false)
                    {
                        trangThaiId = 2; //Đang hoạt động - Không được truy cập
                        listNhanVienCT.Add(item);
                    }
                    else
                    {
                        trangThaiId = 3; //Ngừng hoạt động
                        item.SoNamLamViec = 0;
                    }
                    item.TrangThaiId = trangThaiId;
                });

                #endregion
                //Phân quyền dữ liệu
                var isTruongPhong = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == user.EmployeeId)?.IsManager;
                if(isTruongPhong.Value == 1)
                {
                    // Danh sách Id nhân viên thuộc phòng ban và phòng ban con của người đề xuất
                    //var lstEmpId = CommonHelper.GetListEmployeeOfCurrentOrgAndChildOrg(context, user.EmployeeId.Value);

                    //Lấy list phòng ban con của user
                    List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                    if (empUser.OrganizationId != null)
                    {
                        listGetAllChild.Add(empUser.OrganizationId.Value);
                        listGetAllChild = getOrganizationChildrenId(empUser.OrganizationId.Value, listGetAllChild);
                    }
                    //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                    listNhanVienCT = listAllNhanVienCT.Where(x => ((listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))) && x.TrangThaiId != 3).ToList();

                }
                else
                {
                    listNhanVienCT = listNhanVienCT.Where(x => x.EmployeeId == user.EmployeeId && x.TrangThaiId != 3).ToList();
                }


                return new GetMasterDataDeXuatCongTacResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    ListEmp = listNhanVienCT,
                    EmployeeId = empUser.EmployeeId
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataDeXuatCongTacResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden,
                };
            }
        }

        private string GenerateMaDeXuatCongTacCode()
        {
            var strCode = string.Empty;
            var date = DateTime.Now.ToString("yyyy");
            var count = context.DeXuatCongTac.Count() == 0 ? 0 : context.DeXuatCongTac.Max(x => x.DeXuatCongTacId);
            strCode = $"DXCT" + date + "-" + (count + 1);
            return strCode;
        }

        public CreateOrUpdateDeXuatCTResult CreateOrUpdateDeXuatCT(CreateOrUpdateDeXuatCTParameter parameter)
        {

            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

            if (folder == null)
            {
                return new CreateOrUpdateDeXuatCTResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                    if (user == null)
                    {
                        return new CreateOrUpdateDeXuatCTResult
                        {
                            MessageCode = "Nhân viên không tồn tại trong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
                    if (employee == null)
                    {
                        return new CreateOrUpdateDeXuatCTResult
                        {
                            MessageCode = "Nhân viên không tồn tại tong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed
                        };
                    }

                    // Tạo mới
                    if (parameter.DeXuatCongTac.DeXuatCongTacId == 0)
                    {
                        var deXuatCongTac = new DeXuatCongTac
                        {
                            MaDeXuat = GenerateMaDeXuatCongTacCode(),
                            TenDeXuat = parameter.DeXuatCongTac.TenDeXuat,
                            NgayDeXuat = parameter.DeXuatCongTac.NgayDeXuat,
                            NguoiDeXuatId = parameter.DeXuatCongTac.NguoiDeXuatId,

                            DiaDiem = parameter.DeXuatCongTac.DiaDiem,
                            DonVi = parameter.DeXuatCongTac.DonVi,
                            PhuongTien = parameter.DeXuatCongTac.PhuongTien,
                            NhiemVu = parameter.DeXuatCongTac.NhiemVu,
                            ThoiGianBatDau = parameter.DeXuatCongTac.ThoiGianBatDau,
                            ThoiGianKetThuc = parameter.DeXuatCongTac.ThoiGianKetThuc,
                            NguoiPheDuyetId = Guid.Empty,
                            TrangThai = 1,// 1 tạo mới
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            UpdatedById = parameter.UserId,
                            UpdatedDate = DateTime.Now,
                            Active = true
                        };
                        context.DeXuatCongTac.Add(deXuatCongTac);
                        context.SaveChanges();

                        if (parameter.ListFile?.Count > 0)
                        {
                            var isSave = true;
                            parameter.ListFile?.ForEach(item =>
                            {
                                if (folder == null)
                                {
                                    isSave = false;
                                }

                                var folderName = ConvertFolderUrl(folder.Url);
                                var webRootPath = hostingEnvironment.WebRootPath;
                                var newPath = Path.Combine(webRootPath, folderName);

                                if (!Directory.Exists(newPath))
                                {
                                    isSave = false;
                                }

                                if (isSave)
                                {
                                    var file = new FileInFolder()
                                    {
                                        Active = true,
                                        CreatedById = parameter.UserId,
                                        CreatedDate = DateTime.Now,
                                        UpdatedById = parameter.UserId,
                                        UpdatedDate = DateTime.Now,
                                        FileInFolderId = Guid.NewGuid(),
                                        FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                        FolderId = folder.FolderId,
                                        ObjectNumber = deXuatCongTac.DeXuatCongTacId,
                                        ObjectType = item.FileInFolder.ObjectType,
                                        Size = item.FileInFolder.Size,
                                        FileExtension = item.FileSave.FileName.Substring(
                                            item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                    };

                                    context.FileInFolder.Add(file);
                                }
                            });

                            if (!isSave)
                            {

                                return new CreateOrUpdateDeXuatCTResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    MessageCode = "Bạn phải cấu hình thư mục để lưu"
                                };
                            }
                            context.SaveChanges();
                        }

                        #region Chi tiết tài sản yêu cầu
                        var lstAllEmp = context.Employee.Where(x => x.Active == true).ToList();
                        var lstAllPostion = context.Position.ToList();
                        var lstAllOrg = context.Organization.ToList();

                        if (parameter.ListChiTietDeXuatCongTac?.Count != 0)
                        {
                            var listDeXuatChiTiet = new List<ChiTietDeXuatCongTac>();
                            parameter.ListChiTietDeXuatCongTac?.ForEach(item =>
                            {
                                var nhanvien = lstAllEmp.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                                var deXuatChiTiet = new ChiTietDeXuatCongTac
                                {
                                    DeXuatCongTacId = deXuatCongTac.DeXuatCongTacId,
                                    EmployeeId = item.EmployeeId,
                                    LyDo = item.LyDo == null ? "" : item.LyDo,
                                    PositionId = nhanvien?.PositionId != null ? nhanvien?.PositionId : null,
                                    OrganizationId = nhanvien?.OrganizationId != null ? nhanvien?.OrganizationId : null,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = parameter.UserId,
                                    UpdatedDate = DateTime.Now
                                };
                                listDeXuatChiTiet.Add(deXuatChiTiet);
                            });

                            context.ChiTietDeXuatCongTac.AddRange(listDeXuatChiTiet);
                            context.SaveChanges();
                        };
                        #endregion

                        transaction.Commit();
                        return new CreateOrUpdateDeXuatCTResult
                        {
                            MessageCode = "Success",
                            StatusCode = HttpStatusCode.OK,
                            DeXuatCongTacId = deXuatCongTac.DeXuatCongTacId
                        };
                    }
                    // Cập nhật
                    else
                    {
                        var oldDeXuat = context.DeXuatCongTac.FirstOrDefault(c => c.DeXuatCongTacId == parameter.DeXuatCongTac.DeXuatCongTacId);
                        if (oldDeXuat == null)
                        {
                            return new CreateOrUpdateDeXuatCTResult
                            {
                                MessageCode = "Đề xuất công tác không tồn tại trong hệ thống",
                                StatusCode = HttpStatusCode.ExpectationFailed,
                            };
                        }

                        oldDeXuat.NgayDeXuat = parameter.DeXuatCongTac.NgayDeXuat;
                        oldDeXuat.TenDeXuat = parameter.DeXuatCongTac.TenDeXuat;
                        oldDeXuat.NguoiDeXuatId = parameter.DeXuatCongTac.NguoiDeXuatId;

                        oldDeXuat.DonVi = parameter.DeXuatCongTac.DonVi;
                        oldDeXuat.DiaDiem = parameter.DeXuatCongTac.DiaDiem;
                        oldDeXuat.PhuongTien = parameter.DeXuatCongTac.PhuongTien;
                        oldDeXuat.NhiemVu = parameter.DeXuatCongTac.NhiemVu;
                        oldDeXuat.ThoiGianBatDau = parameter.DeXuatCongTac.ThoiGianBatDau;
                        oldDeXuat.ThoiGianKetThuc = parameter.DeXuatCongTac.ThoiGianKetThuc;

                        oldDeXuat.UpdatedById = parameter.UserId;
                        oldDeXuat.UpdatedDate = DateTime.Now;

                        context.DeXuatCongTac.Update(oldDeXuat);
                        context.SaveChanges();
                    }
                    transaction.Commit();

                    return new CreateOrUpdateDeXuatCTResult
                    {
                        MessageCode = "Success",
                        StatusCode = HttpStatusCode.OK
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateDeXuatCTResult
                    {
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public XoaYeuCauCapPhatResult XoaDeXuatCongTac(XoaDeXuatCongTacParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuat = context.DeXuatCongTac.FirstOrDefault(x => x.DeXuatCongTacId == parameter.DeXuatCongTacId);

                    if (deXuat != null)
                    {
                        // Xóa chi tiết
                        var lstChiTiet = context.ChiTietDeXuatCongTac.Where(x => x.DeXuatCongTacId == parameter.DeXuatCongTacId).ToList();
                        if (lstChiTiet != null)
                        {
                            lstChiTiet.ForEach(chitiet =>
                            {
                                chitiet.Active = false;
                            });
                            context.ChiTietDeXuatCongTac.UpdateRange(lstChiTiet);
                        }

                        deXuat.Active = false;
                        context.DeXuatCongTac.Update(deXuat);
                        context.SaveChanges();
                        transaction.Commit();
                    }
                    else
                    {
                        return new XoaYeuCauCapPhatResult
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Không tồn tại đề xuất công tác!"
                        };
                    }

                    return new XoaYeuCauCapPhatResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa đề xuất công tác thành công"
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new XoaYeuCauCapPhatResult
                    {
                        MessageCode = e.Message,
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
            }
        }

        public GetAllDeXuatCongTacResult GetAllDeXuatCongTac(GetAllDeXuatCongTacParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                if (user == null)
                {
                    return new GetAllDeXuatCongTacResult
                    {
                        Message = "Nhân viên không tồn tại trong hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed
                    };
                }
                var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
                if (employee == null)
                {
                    return new GetAllDeXuatCongTacResult
                    {
                        Message = "Nhân viên không tồn tại trong hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed
                    };
                }

                var listEmployee = new List<EmployeeEntityModel>();
                #region Lấy danh sách nhân viên
                listEmployee = context.Employee.Where(x => x.Active == true).Select(y =>
                           new EmployeeEntityModel
                           {
                               EmployeeId = y.EmployeeId,
                               EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                           }).ToList();
                #endregion

                var listDeXuatCongTac = new List<DeXuatCongTacEntityModel>();
                var listAllDeXuatCT = context.DeXuatCongTac.Where(x => x.Active == true).Select(y => new DeXuatCongTacEntityModel
                {
                    DeXuatCongTacId = y.DeXuatCongTacId,
                    MaDeXuat = y.MaDeXuat,
                    NgayDeXuat = y.NgayDeXuat,
                    TrangThai = y.TrangThai,
                    NguoiDeXuatId = y.NguoiDeXuatId,
                    TenDeXuat = y.TenDeXuat,
                    DonVi = y.DonVi,
                    DiaDiem = y.DiaDiem,
                    ThoiGianBatDau = y.ThoiGianBatDau,
                    ThoiGianKetThuc = y.ThoiGianKetThuc,
                    CreatedDate = y.CreatedDate
                }).OrderByDescending(z => z.CreatedDate).ToList();


                #region Phân quyền dữ liệu theo quy trình phê duyệt
                var isAsset = context.Organization.FirstOrDefault(x => x.OrganizationId == employee.OrganizationId)?.IsAccess;
                //Nếu được xem dự liệu phòng ban khác
                if (isAsset == false)
                {
                    var thanhVienPhongBan = context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);
                    //Nếu là trưởng bộ phận (IsManager = 1)
                    if (thanhVienPhongBan.IsManager == 1)
                    {
                        //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt
                        var listId = context.PhongBanPheDuyetDoiTuong
                            .Where(x => x.DoiTuongApDung == 30 &&
                                        x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                            .ToList();
                        //lấy list nhân viên thuộc phòng ban người đăng nhập 
                        var listEmpCungOrgNguoiDangNhapId = listEmployee.Where(x => x.OrganizationId == employee.OrganizationId).Select(x => x.EmployeeId).ToList();

                        listDeXuatCongTac = listAllDeXuatCT.Where(x =>
                          (parameter.MaDeXuat == null || parameter.MaDeXuat == "" || x.MaDeXuat.ToLower().Contains(parameter.MaDeXuat.ToLower())) &&
                          (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 || parameter.ListEmployee.Contains(x.NguoiDeXuatId)) &&
                          (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                          (  listId.Contains(x.DeXuatCongTacId) //Đề xuất người đăng nhập cần phê duyệt
                          || x.NguoiDeXuatId == employee.EmployeeId) //Người đăng nhập là người tạo
                          || ((listEmpCungOrgNguoiDangNhapId.Contains(x.NguoiDeXuatId) && x.TrangThai != 1)// nhân viên cùng Org người đăng nhập và trang thái khác Mới
                          )).ToList();
                    }
                    //Nếu là nhân viên thường (IsManager = 0)
                    else
                    {
                        listDeXuatCongTac = listAllDeXuatCT.Where(x =>
                             (parameter.MaDeXuat == null || parameter.MaDeXuat == "" || x.MaDeXuat.ToLower().Contains(parameter.MaDeXuat.ToLower())) &&
                             (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 || parameter.ListEmployee.Contains(x.NguoiDeXuatId)) &&
                             (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                             x.NguoiDeXuatId == employee.EmployeeId).ToList();
                    }
                //Nếu được xem dữ liệu phòng ban khác
                }else if(isAsset == true)
                {
                    listDeXuatCongTac = listAllDeXuatCT.Where(x =>
                        (parameter.MaDeXuat == null || parameter.MaDeXuat == "" || x.MaDeXuat.ToLower().Contains(parameter.MaDeXuat.ToLower())) &&
                        (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 || parameter.ListEmployee.Contains(x.NguoiDeXuatId)) &&
                        (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                        ( x.NguoiDeXuatId == employee.EmployeeId) //Người đăng nhập là người tạo
                        || (x.NguoiDeXuatId != employee.EmployeeId && x.TrangThai != 1)// đề xuất của người khác và trạng thái khác mới
                        ).ToList();
                }
             
                #endregion

                if (listDeXuatCongTac.Count() > 0)
                {
                    var lstDeXuatId = listDeXuatCongTac.Select(x => x.DeXuatCongTacId).ToList();
                    var lstPhongBan = context.Organization.Where(x => x.Active == true).ToList();

                    var lstDeXuatCTChiTiet = context.ChiTietDeXuatCongTac.Where(x => lstDeXuatId.Contains(x.DeXuatCongTacId)).ToList();
                    listDeXuatCongTac.ForEach(p =>
                    {
                        switch (p.TrangThai)
                        {
                            case 1:
                                p.TrangThaiString = "Mới";
                                p.BackgroundColorForStatus = "#8ec3f4";
                                break;
                            case 2:
                                p.TrangThaiString = "Chờ phê duyệt";
                                p.BackgroundColorForStatus = "#f29505";
                                break;
                            case 3:
                                p.TrangThaiString = "Đã duyệt";
                                p.BackgroundColorForStatus = "#05f235";
                                break;
                            case 4:
                                p.TrangThaiString = "Từ chối";
                                p.BackgroundColorForStatus = "#797979";
                                break;
                            case 5:
                                p.TrangThaiString = "Hoàn thành";
                                p.BackgroundColorForStatus = "#50f296";
                                break;
                        }
                        var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == p.NguoiDeXuatId);
                        p.NguoiDeXuat = emp.EmployeeName;
                    });
                }


                return new GetAllDeXuatCongTacResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    Status = true,
                    ListEmployee = listEmployee,
                    ListDeXuatCongTac = listDeXuatCongTac
                };
            }
            catch (Exception ex)
            {
                return new GetAllDeXuatCongTacResult
                {
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetMasterDeXuatCongTacDetailResult GetMasterDeXuatCongTacDetail(GetMasterDeXuatCongTacDetailParameter parameter)
        {
            try
            {
                var listTrangThai = GeneralList.GetTrangThais("DEXUATCT");

                var deXuatCongTac = context.DeXuatCongTac.Where(x => x.DeXuatCongTacId == parameter.DeXuatCongTacId)
                     .Select(y => new DeXuatCongTacEntityModel
                     {
                         DeXuatCongTacId = y.DeXuatCongTacId,
                         MaDeXuat = y.MaDeXuat,
                         DiaDiem = y.DiaDiem,
                         DonVi = y.DonVi,
                         NgayDeXuat = y.NgayDeXuat,
                         NhiemVu = y.NhiemVu,
                         NguoiDeXuatId = y.NguoiDeXuatId,
                         OrganizationId = y.OrganizationId,
                         PhuongTien = y.PhuongTien,
                         PositionId = y.PositionId,
                         TenDeXuat = y.TenDeXuat,
                         ThoiGianBatDau = y.ThoiGianBatDau,
                         ThoiGianKetThuc = y.ThoiGianKetThuc,
                         TrangThai = y.TrangThai,
                         TrangThaiString = listTrangThai.FirstOrDefault(x => x.Value == y.TrangThai).Name,
                         CreatedById = y.CreatedById,
                     }).FirstOrDefault();
                if (deXuatCongTac == null)
                {
                    return new GetMasterDeXuatCongTacDetailResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Đề xuất công tác không tồn tại trong hệ thống",
                    };
                }

                #region Lấy danh sách nhân viên
                var listAllUser = context.User.ToList();
                var listNhanVienCT = new List<EmployeeEntityModel>();

                var lstEmpId = CommonHelper.GetListEmployeeOfCurrentOrgAndChildOrg(context, deXuatCongTac.NguoiDeXuatId);
                var listAllNhanVienCT = context.Employee.Where(x => lstEmpId.Contains(x.EmployeeId))
                    .Select(emp => new EmployeeEntityModel
                    {
                        EmployeeId = emp.EmployeeId,
                        EmployeeCode = emp.EmployeeCode,
                        EmployeeName = emp.EmployeeName,
                        EmployeeCodeName = emp.EmployeeCode + " - " + emp.EmployeeName,
                        OrganizationId = emp.OrganizationId,
                        PositionId = emp.PositionId,
                        ViTriLamViec = emp.ViTriLamViec,
                        Active = emp.Active
                    }).OrderBy(x => x.EmployeeName).ToList();

                var listPosition = context.Position.ToList();
                var listOrganization = context.Organization.ToList();
                var lstContact = context.Contact.Where(x => x.ObjectType == "EMP").ToList();

                listAllNhanVienCT.ForEach(item =>
                {
                    var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                    item.OrganizationName = phongBan?.OrganizationName;

                    var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                    item.PositionName = chucVu?.PositionName;

                    var contact = lstContact.FirstOrDefault(x => x.ObjectType == "EMP" && x.ObjectId == item.EmployeeId);
                    if (contact != null)
                    {
                        item.DateOfBirth = contact.DateOfBirth;
                        item.Identity = contact.IdentityId;
                        item.IdentityIddateOfIssue = contact.IdentityIddateOfIssue;
                        item.IdentityIdplaceOfIssue = contact.IdentityIdplaceOfIssue;
                        item.NoiCapCmndtiengAnh = contact.NoiCapCmndtiengAnh;
                    }


                    var trangThaiId = 0;
                    var userInfor = listAllUser.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);

                    if (item.Active == true && userInfor.Active == true)
                    {
                        trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                        listNhanVienCT.Add(item);
                    }
                    else if (item.Active == true && userInfor.Active == false)
                    {
                        trangThaiId = 2; //Đang hoạt động - Không được truy cập
                        listNhanVienCT.Add(item);
                    }
                    else
                    {
                        trangThaiId = 3; //Ngừng hoạt động
                        item.SoNamLamViec = 0;
                    }
                    item.TrangThaiId = trangThaiId;


                });

                #endregion

                deXuatCongTac.ListDeXuatCongTacChiTiet = context.ChiTietDeXuatCongTac
                    .Where(x => x.DeXuatCongTacId == parameter.DeXuatCongTacId)
                    .Select(y => new DeXuatCongTacChiTietEntityModel
                    {
                        ChiTietDeXuatCongTacId = y.ChiTietDeXuatCongTacId,
                        DeXuatCongTacId = y.DeXuatCongTacId,
                        EmployeeId = y.EmployeeId,
                        LyDo = y.LyDo,
                        OrganizationId = y.OrganizationId,
                        PositionId = y.PositionId
                    }).ToList();

                var listAllEmp = context.Employee.ToList();

                deXuatCongTac.ListDeXuatCongTacChiTiet.ForEach(emp =>
                {
                    var nhanVien = listNhanVienCT.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                    //Nếu nhân viên vẫn thuộc phòng ban (hoặc phòng ban cấp dưới) của người đề xuất
                    if (nhanVien != null)
                    {
                        emp.MaNV = nhanVien.EmployeeCode;
                        emp.TenNhanVien = nhanVien.EmployeeName;
                        emp.PhongBan = nhanVien.OrganizationName;
                        emp.PositionName = nhanVien.PositionName;
                        emp.ViTriLamViec = nhanVien.ViTriLamViec;
                        emp.DateOfBirth = nhanVien.DateOfBirth;
                        emp.Identity = nhanVien.Identity;
                        emp.IdentityIddateOfIssue = nhanVien.IdentityIddateOfIssue;
                        emp.IdentityIdplaceOfIssue = nhanVien.IdentityIdplaceOfIssue;
                        emp.NoiCapCmndtiengAnh = nhanVien.NoiCapCmndtiengAnh;
                    }
                    //Nếu nhân viên không còn thuộc phòng ban (hoặc phòng ban cấp dưới) của người đề xuất
                    else
                    {
                        var _nhanVien = listAllEmp.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                        var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == _nhanVien.OrganizationId);
                        var chucVu = listPosition.FirstOrDefault(x => x.PositionId == _nhanVien.PositionId);
                        var contact = lstContact.FirstOrDefault(x => x.ObjectType == "EMP" && x.ObjectId == emp.EmployeeId);

                        emp.MaNV = _nhanVien?.EmployeeCode;
                        emp.TenNhanVien = _nhanVien?.EmployeeName;
                        emp.PhongBan = phongBan?.OrganizationName;
                        emp.PositionName = chucVu?.PositionName;
                        emp.ViTriLamViec = _nhanVien?.ViTriLamViec;
                        emp.DateOfBirth = contact?.DateOfBirth;
                        emp.Identity = contact?.IdentityId;
                        emp.IdentityIddateOfIssue = contact?.IdentityIddateOfIssue;
                        emp.IdentityIdplaceOfIssue = contact?.IdentityIdplaceOfIssue;
                        emp.NoiCapCmndtiengAnh = contact?.NoiCapCmndtiengAnh;
                    }
                });

                #region Lấy dách file đinh kèm 

                var webRootPath = hostingEnvironment.WebRootPath + "\\";

                var objectType = "DEXUATCT";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                    .Where(x => x.ObjectNumber == parameter.DeXuatCongTacId && x.FolderId == folder.FolderId).Select(
                        y =>
                            new FileInFolderEntityModel
                            {
                                Size = y.Size,
                                ObjectId = y.ObjectId,
                                Active = y.Active,
                                FileExtension = y.FileExtension,
                                FileInFolderId = y.FileInFolderId,
                                FileName = y.FileName,
                                FolderId = y.FolderId,
                                ObjectType = y.ObjectType,
                                ObjectNumber = y.ObjectNumber,
                                CreatedById = y.CreatedById,
                                CreatedDate = y.CreatedDate,
                                UpdatedById = y.UpdatedById,
                                UpdatedDate = y.UpdatedDate
                            }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrlTL = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPath, folderUrlTL, x.FileFullName);
                });

                #endregion

                #region Điều kiện hiển thị các button

                bool isShowGuiPheDuyet = false;
                bool isShowPheDuyet = false;
                bool isShowTuChoi = false;
                bool isShowLuu = false;
                bool isShowXoa = false;
                bool isShowDatVeMoi = false;

                var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                if (deXuatCongTac.DeXuatCongTacId != 0)
                {
                    //Trạng thái Mới
                    if (deXuatCongTac.TrangThai == 1)
                    {
                        if (deXuatCongTac.NguoiDeXuatId == employee.EmployeeId)
                        {
                            isShowLuu = true;
                            isShowGuiPheDuyet = true;
                            isShowXoa = true;
                        }
                    }

                    //Trạng thái Chờ phê duyệt
                    if (deXuatCongTac.TrangThai == 2)
                    {
                        var buocHienTai = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatCongTac.DeXuatCongTacId &&
                                                                           x.DoiTuongApDung == 30 &&
                                                                           x.TrangThai == 0)
                            .OrderByDescending(z => z.Stt)
                            .FirstOrDefault();

                        //Nếu là phê duyệt trưởng bộ phận
                        if (buocHienTai?.LoaiPheDuyet == 1)
                        {
                            var listDonViId_NguoiPhuTrach = context.ThanhVienPhongBan
                                .Where(x => x.EmployeeId == deXuatCongTac.NguoiDeXuatId)
                                .Select(y => y.OrganizationId).ToList();

                            var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                                x.EmployeeId == employee.EmployeeId &&
                                x.IsManager == 1 &&
                                listDonViId_NguoiPhuTrach.Contains(x.OrganizationId));

                            if (countPheDuyet > 0)
                            {
                                isShowPheDuyet = true;
                                isShowTuChoi = true;
                            }
                        }
                        //Nếu là phòng ban phê duyệt
                        else if (buocHienTai?.LoaiPheDuyet == 2)
                        {
                            //Lấy list Phòng ban đã phê duyệt ở bước hiện tại
                            var listDonViIdDaPheDuyet = context.PhongBanApDung
                                .Where(x => x.CacBuocApDungId == buocHienTai.Id &&
                                            x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId)
                                .Select(y => y.OrganizationId).ToList();

                            //Lấy list Phòng ban chưa phê duyệt ở bước hiện tại
                            var listDonViId = context.PhongBanTrongCacBuocQuyTrinh
                                .Where(x => x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId &&
                                            !listDonViIdDaPheDuyet.Contains(x.OrganizationId))
                                .Select(y => y.OrganizationId).ToList();

                            var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                                x.EmployeeId == employee.EmployeeId &&
                                x.IsManager == 1 &&
                                listDonViId.Contains(x.OrganizationId));

                            if (countPheDuyet > 0)
                            {
                                isShowPheDuyet = true;
                                isShowTuChoi = true;
                            }
                        }
                    }

                    //Trạng thái Từ chối
                    if (deXuatCongTac.TrangThai == 4 && deXuatCongTac.NguoiDeXuatId == employee.EmployeeId)
                    {
                        isShowDatVeMoi = true;
                    }
                }

                #endregion

                return new GetMasterDeXuatCongTacDetailResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    MessageCode = "Success",
                    ListEmployee = listNhanVienCT,
                    DeXuatCongTac = deXuatCongTac,
                    ListFileInFolder = listFileResult,
                    IsShowGuiPheDuyet = isShowGuiPheDuyet,
                    IsShowPheDuyet = isShowPheDuyet,
                    IsShowTuChoi = isShowTuChoi,
                    IsShowLuu = isShowLuu,
                    IsShowXoa = isShowXoa,
                    IsShowDatVeMoi = isShowDatVeMoi,
                };
            }
            catch (Exception e)
            {
                return new GetMasterDeXuatCongTacDetailResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = e.Message
                };
            }
        }

        public CreateOrUpdateChiTietDeXuatCongTacResult CreateOrUpdateChiTietDeXuatCongTac(CreateOrUpdateChiTietDeXuatCongTacParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    // Lấy thông tin nhân viên
                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == parameter.DeXuatCongTacChiTiet.EmployeeId);

                    // Tạo mới
                    if (parameter.DeXuatCongTacChiTiet.ChiTietDeXuatCongTacId == 0)
                    {
                        var chiTiet = new ChiTietDeXuatCongTac
                        {
                            DeXuatCongTacId = parameter.DeXuatCongTacChiTiet.DeXuatCongTacId,
                            EmployeeId = parameter.DeXuatCongTacChiTiet.EmployeeId,
                            LyDo = parameter.DeXuatCongTacChiTiet.LyDo,
                            PositionId = emp?.PositionId,
                            OrganizationId = emp?.OrganizationId,
                            UpdatedById = parameter.UserId,
                            UpdatedDate = DateTime.Now,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            Active = true
                        };
                        context.ChiTietDeXuatCongTac.Add(chiTiet);
                        context.SaveChanges();
                    }
                    else
                    {
                        var chiTiet = context.ChiTietDeXuatCongTac.FirstOrDefault(x => x.ChiTietDeXuatCongTacId == parameter.DeXuatCongTacChiTiet.ChiTietDeXuatCongTacId);

                        if (chiTiet == null)
                        {
                            return new CreateOrUpdateChiTietDeXuatCongTacResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                MessageCode = "Không tồn tại dữ liệu"
                            };
                        }

                        chiTiet.EmployeeId = parameter.DeXuatCongTacChiTiet.EmployeeId;
                        chiTiet.LyDo = parameter.DeXuatCongTacChiTiet.LyDo;
                        chiTiet.PositionId = emp?.PositionId;
                        chiTiet.OrganizationId = emp?.OrganizationId;
                        chiTiet.LyDo = parameter.DeXuatCongTacChiTiet.LyDo;
                        chiTiet.UpdatedById = parameter.UserId;
                        chiTiet.UpdatedDate = DateTime.Now;

                        context.ChiTietDeXuatCongTac.Update(chiTiet);
                        context.SaveChanges();
                    }
                    transaction.Commit();

                    #region Common data
                    var listAllCategoryType = context.CategoryType.ToList();
                    var listAllCategory = context.Category.ToList();
                    #endregion

                    var listEmployee = new List<EmployeeEntityModel>();
                    #region Lấy danh sách nhân viên
                    listEmployee = context.Employee.Select(y =>
                               new EmployeeEntityModel
                               {
                                   EmployeeId = y.EmployeeId,
                                   OrganizationId = y.OrganizationId,
                                   PositionId = y.PositionId,
                                   EmployeeCode = y.EmployeeCode,
                                   EmployeeName = y.EmployeeName,
                                   EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                               }).ToList();

                    var listPosition = context.Position.ToList();
                    var listOrganization = context.Organization.ToList();

                    listEmployee?.ForEach(item =>
                    {
                        var phongBan = listOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                        item.OrganizationName = phongBan?.OrganizationName;

                        var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                        item.PositionName = chucVu?.PositionName;
                    });
                    #endregion

                    #region Chi tiết Yêu cầu cấp phát
                    var lstChiTiet = context.ChiTietDeXuatCongTac.Where(x => x.DeXuatCongTacId == parameter.DeXuatCongTacChiTiet.DeXuatCongTacId)
                        .Select(chitiet => new DeXuatCongTacChiTietEntityModel
                        {
                            ChiTietDeXuatCongTacId = chitiet.ChiTietDeXuatCongTacId,
                            DeXuatCongTacId = chitiet.DeXuatCongTacId,
                            EmployeeId = chitiet.EmployeeId,
                            PositionId = chitiet.PositionId,
                            OrganizationId = chitiet.OrganizationId,
                            LyDo = chitiet.LyDo,
                            CreatedDate = chitiet.CreatedDate,
                            CreatedById = chitiet.CreatedById
                        }).ToList();

                    var lstEmpId = lstChiTiet.Select(x => x.EmployeeId).ToList();
                    var lstContact = context.Contact.Where(x => lstEmpId.Contains(x.ObjectId) && x.ObjectType == "EMP");
                    lstChiTiet.ForEach(ct =>
                    {
                        var nhanvien = listEmployee.FirstOrDefault(x => x.EmployeeId == ct.EmployeeId);
                        if (nhanvien != null)
                        {
                            var contact = lstContact.FirstOrDefault(x => x.ObjectId == nhanvien.EmployeeId);
                            ct.MaNV = nhanvien.EmployeeCode;
                            ct.TenNhanVien = nhanvien.EmployeeName;
                            ct.PhongBan = nhanvien?.OrganizationName;
                            ct.ViTriLamViec = nhanvien?.PositionName;
                            ct.DateOfBirth = contact?.DateOfBirth;
                            ct.Identity = contact?.IdentityId;
                        }
                    });
                    #endregion
                    return new CreateOrUpdateChiTietDeXuatCongTacResult
                    {
                        MessageCode = "Success",
                        StatusCode = HttpStatusCode.OK,
                        ListDeXuatCongTacChiTietTemp = lstChiTiet
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateChiTietDeXuatCongTacResult
                    {
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public XoaYeuCauCapPhatResult XoaDeXuatCongTacChiTiet(XoaDeXuatCongTacChiTietParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    // Xóa chi tiết
                    var chiTiet = context.ChiTietDeXuatCongTac.FirstOrDefault(x => x.ChiTietDeXuatCongTacId == parameter.ChiTietDeXuatCongTacId);
                    if (chiTiet != null)
                    {
                        context.ChiTietDeXuatCongTac.Remove(chiTiet);
                        context.SaveChanges();
                    }

                    transaction.Commit();

                    return new XoaYeuCauCapPhatResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa chi tiết đề xuất cong tác thành công"
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new XoaYeuCauCapPhatResult
                    {
                        MessageCode = e.Message,
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
            }
        }

        public GetMasterDataDeNghiFormResult GetMasterDataDeNghiForm()
        {
            try
            {
                var listHoSoCongTac = new List<HoSoCongTacEntityModel>();
                var listHoSoCongTacFull = new List<HoSoCongTacEntityModel>();

                #region Lấy danh sách hồ sơ công tác có trạng thái mới: 0

                listHoSoCongTacFull = context.HoSoCongTac.Where(x => x.Active == true).Select(x => new HoSoCongTacEntityModel
                {
                    MaHoSoCongTac = x.MaHoSoCongTac,
                    MaCTTenDX = x.MaHoSoCongTac + " - " + context.DeXuatCongTac.FirstOrDefault(y => y.DeXuatCongTacId == x.DeXuatCongTacId).TenDeXuat,
                    CreatedById = x.CreatedById,
                    HoSoCongTacId = x.HoSoCongTacId,
                    DeXuatCongTacId = x.DeXuatCongTacId
                }).OrderByDescending(x => x.CreatedDate).ToList();

                listHoSoCongTac = context.HoSoCongTac.Where(x => x.Active == true && x.TrangThai == 0 ).Select(x => new HoSoCongTacEntityModel
                {
                    MaHoSoCongTac = x.MaHoSoCongTac,
                    MaCTTenDX = x.MaHoSoCongTac + " - " + context.DeXuatCongTac.FirstOrDefault(y => y.DeXuatCongTacId == x.DeXuatCongTacId).TenDeXuat,
                    CreatedById = x.CreatedById,
                    HoSoCongTacId = x.HoSoCongTacId,
                    DeXuatCongTacId = x.DeXuatCongTacId
                }).OrderByDescending(x => x.CreatedDate).ToList();

              


                var listDeXuatCongTacId = listHoSoCongTac.Select(y => y.DeXuatCongTacId).Distinct().ToList();
                var listChiTietDeXuatCongTac = context.ChiTietDeXuatCongTac
                    .Where(x => listDeXuatCongTacId.Contains(x.DeXuatCongTacId)).ToList();

                var listAllEmp = context.Employee.ToList();
                var listAllOrganization = context.Organization.ToList();
                var listAllContact = context.Contact.ToList();

                var listAllSubCode1 = GeneralList.GetSubCode1().ToList();

                listHoSoCongTac.ForEach(hoSo =>
                {
                    // Danh sách nhân viên tham gia công tác
                    var listEmpId = listChiTietDeXuatCongTac.Where(x => x.DeXuatCongTacId == hoSo.DeXuatCongTacId)
                        .Select(y => y.EmployeeId).ToList();
                    var listEmp = listAllEmp.Where(x => listEmpId.Contains(x.EmployeeId))
                        .Select(y => new EmployeeEntityModel
                        {
                            EmployeeId = y.EmployeeId,
                            EmployeeCode = y.EmployeeCode,
                            EmployeeName = y.EmployeeName,
                            EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                            OrganizationId = y.OrganizationId,
                            SubCode1 = y.SubCode1Value,
                            PositionId = y.PositionId
                        }).ToList();
                    var listEmpContact = listAllContact
                        .Where(x => listEmpId.Contains(x.ObjectId) && x.ObjectType == ContactObjectType.EMP).ToList();

                    listEmp?.ForEach(empDetail =>
                    {
                        //Sủa phòng ban thành subcode1
                        empDetail.OrganizationName = listAllSubCode1.FirstOrDefault(x => x.Value == empDetail.SubCode1)?.Name;

                        var contact = listEmpContact.FirstOrDefault(x => x.ObjectId == empDetail.EmployeeId);

                        //Tên TK
                        empDetail.BankOwnerName = contact?.BankOwnerName;

                        // Số TK
                        empDetail.BankAccount = contact?.BankAccount;

                        // Ngân hàng
                        empDetail.BankName = contact?.BankName;

                        // Mã Ngân hàng
                        empDetail.BankCode = contact?.BankCode;

                        // Địa chỉ ngân hàng
                        empDetail.BankAddress = contact?.BankAddress;
                    });

                    hoSo.ListNhanVienCT = listEmp;
                });

                var listDeXuatCongTacIdFull = listHoSoCongTacFull.Select(y => y.DeXuatCongTacId).Distinct().ToList();
                var listChiTietDeXuatCongTacFull = context.ChiTietDeXuatCongTac
                    .Where(x => listDeXuatCongTacIdFull.Contains(x.DeXuatCongTacId)).ToList();

                listHoSoCongTacFull.ForEach(hoSo =>
                {
                    // Danh sách nhân viên tham gia công tác
                    var listEmpId = listChiTietDeXuatCongTacFull.Where(x => x.DeXuatCongTacId == hoSo.DeXuatCongTacId)
                        .Select(y => y.EmployeeId).ToList();
                    var listEmp = listAllEmp.Where(x => listEmpId.Contains(x.EmployeeId))
                        .Select(y => new EmployeeEntityModel
                        {
                            EmployeeId = y.EmployeeId,
                            EmployeeCode = y.EmployeeCode,
                            EmployeeName = y.EmployeeName,
                            EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                            OrganizationId = y.OrganizationId,
                            SubCode1 = y.SubCode1Value,
                            PositionId = y.PositionId
                        }).ToList();
                    var listEmpContact = listAllContact
                        .Where(x => listEmpId.Contains(x.ObjectId) && x.ObjectType == ContactObjectType.EMP).ToList();

                    listEmp?.ForEach(empDetail =>
                    {
                        //Sủa phòng ban thành subcode1
                        empDetail.OrganizationName = listAllSubCode1.FirstOrDefault(x => x.Value == empDetail.SubCode1)?.Name;

                        var contact = listEmpContact.FirstOrDefault(x => x.ObjectId == empDetail.EmployeeId);

                        //Tên TK
                        empDetail.BankOwnerName = contact?.BankOwnerName;

                        // Số TK
                        empDetail.BankAccount = contact?.BankAccount;

                        // Ngân hàng
                        empDetail.BankName = contact?.BankName;

                        // Mã Ngân hàng
                        empDetail.BankCode = contact?.BankCode;

                        // Địa chỉ ngân hàng
                        empDetail.BankAddress = contact?.BankAddress;
                    });

                    hoSo.ListNhanVienCT = listEmp;
                });

                #endregion

                #region Lấy danh sách hình thức thanh toán

                var listPhuongThuc = new List<CategoryEntityModel>();
                var phuongThucId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTO")?.CategoryTypeId;
                listPhuongThuc = context.Category
                    .Where(x => x.Active == true && x.CategoryTypeId == phuongThucId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                #endregion

                return new GetMasterDataDeNghiFormResult()
                {
                    Status = true,
                    StatusCode = HttpStatusCode.OK,
                    ListHoSoCongTac = listHoSoCongTac,
                    ListHoSoCongTacFull = listHoSoCongTacFull,
                    ListHinhThucTT = listPhuongThuc
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataDeNghiFormResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden,
                    Status = false
                };
            }
        }

        public CreateOrUpdateDeNghiTamHoanUngResult CreateOrUpdateDeNghiTamHoanUng(CreateOrUpdateDeNghiTamHoanUngParameter parameter)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

            if (folder == null)
            {
                return new CreateOrUpdateDeNghiTamHoanUngResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }

            var folderName = ConvertFolderUrl(folder.Url);
            var webRootPath = hostingEnvironment.WebRootPath;
            var newPath = Path.Combine(webRootPath, folderName);

            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                    if (user == null)
                    {
                        return new CreateOrUpdateDeNghiTamHoanUngResult
                        {
                            MessageCode = "Nhân viên không tồn tại trong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
                    if (employee == null)
                    {
                        return new CreateOrUpdateDeNghiTamHoanUngResult
                        {
                            MessageCode = "Nhân viên không tồn tại tong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed
                        };
                    }
                    var empId = context.User.FirstOrDefault(x => x.UserId == parameter.UserId).EmployeeId;

                    int deNghiTamHoanUngId = 0;

                    // Tạo mới
                    if (parameter.DeNghiTamHoanUng.DeNghiTamHoanUngId == 0)
                    {
                        var deNghi = new DeNghiTamHoanUng
                        {
                            MaDeNghi = TaoMaDeNghiTamHoanUng(),
                            HoSoCongTacId = parameter.DeNghiTamHoanUng.HoSoCongTacId,
                            NgayDeNghi = parameter.DeNghiTamHoanUng.NgayDeNghi,
                            LyDo = parameter.DeNghiTamHoanUng.LyDo,
                            TienTamUng = parameter.DeNghiTamHoanUng.TienTamUng,
                            TongTienThanhToan = parameter.DeNghiTamHoanUng.TongTienThanhToan,
                            NguoiThuHuongId = parameter.DeNghiTamHoanUng.NguoiThuHuongId,
                            LoaiDeNghi = parameter.DeNghiTamHoanUng.LoaiDeNghi,
                            NguoiDeXuatId = empId.Value,
                            NguoiPheDuyetId = Guid.Empty,
                            TrangThai = 1, // 1 là Mới
                            Active = true,
                            CreatedById = parameter.UserId,
                            CreatedDate = DateTime.Now,
                            UpdatedById = parameter.UserId,
                            UpdatedDate = DateTime.Now,
                        };

                        context.DeNghiTamHoanUng.Add(deNghi);
                        context.SaveChanges();

                        deNghiTamHoanUngId = deNghi.DeNghiTamHoanUngId;

                        if (parameter.ListFile?.Count > 0)
                        {
                            var isSave = true;
                            parameter.ListFile?.ForEach(item =>
                            {
                                if (!Directory.Exists(newPath))
                                {
                                    isSave = false;
                                }

                                if (isSave)
                                {
                                    var file = new FileInFolder()
                                    {
                                        Active = true,
                                        CreatedById = parameter.UserId,
                                        CreatedDate = DateTime.Now,
                                        UpdatedById = parameter.UserId,
                                        UpdatedDate = DateTime.Now,
                                        FileInFolderId = Guid.NewGuid(),
                                        FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                        FolderId = folder.FolderId,
                                        ObjectNumber = deNghi.DeNghiTamHoanUngId,
                                        ObjectType = item.FileInFolder.ObjectType,
                                        Size = item.FileInFolder.Size,
                                        FileExtension = item.FileSave.FileName.Substring(
                                            item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                    };

                                    context.FileInFolder.Add(file);
                                }
                            });

                            if (!isSave)
                            {
                                return new CreateOrUpdateDeNghiTamHoanUngResult()
                                {
                                    StatusCode = HttpStatusCode.ExpectationFailed,
                                    Message = "Bạn phải cấu hình thư mục để lưu"
                                };
                            }
                        }

                        context.SaveChanges();
                    }
                    //Update
                    else
                    {
                        var deNghi = context.DeNghiTamHoanUng.FirstOrDefault(x =>
                            x.Active == true && x.DeNghiTamHoanUngId == parameter.DeNghiTamHoanUng.DeNghiTamHoanUngId);

                        if (deNghi == null)
                        {
                            return new CreateOrUpdateDeNghiTamHoanUngResult
                            {
                                StatusCode = HttpStatusCode.Forbidden,
                                Message = "Không tồn tại đề nghị trong hệ thống."
                            };
                        }

                        deNghi.HoSoCongTacId = parameter.DeNghiTamHoanUng.HoSoCongTacId;
                        deNghi.NguoiThuHuongId = parameter.DeNghiTamHoanUng.NguoiThuHuongId;
                        deNghi.LyDo = parameter.DeNghiTamHoanUng.LyDo;
                        deNghi.TienTamUng = parameter.DeNghiTamHoanUng.TienTamUng;
                        deNghi.TongTienThanhToan = parameter.DeNghiTamHoanUng.TongTienThanhToan;
                        deNghi.UpdatedById = parameter.UserId;
                        deNghi.UpdatedDate = DateTime.Now;

                        context.DeNghiTamHoanUng.Update(deNghi);
                        context.SaveChanges();

                        deNghiTamHoanUngId = deNghi.DeNghiTamHoanUngId;

                        //Xóa list cũ
                        var listOld = context.DeNghiTamHoanUngChiTiet
                            .Where(x => x.DeNghiTamHoanUngId == deNghi.DeNghiTamHoanUngId).ToList();
                        context.DeNghiTamHoanUngChiTiet.RemoveRange(listOld);
                        context.SaveChanges();
                    }

                    //Tạm ứng
                    if (parameter.DeNghiTamHoanUng.LoaiDeNghi == 0)
                    {
                        if (parameter.ListNoiDungTT.Count > 0)
                        {
                            var listRoot = parameter.ListNoiDungTT.Where(x => x.Level == 0).ToList();

                            for (int i = 0; i < listRoot.Count; i++)
                            {
                                var item = listRoot[i];
                                var listChild = listRoot
                                    .Where(x => x.ParentId == item.DeNghiTamHoanUngChiTietId).ToList();

                                DeNghiTamHoanUngChiTiet chiTiet = new DeNghiTamHoanUngChiTiet();
                                chiTiet.DeNghiTamHoanUngId = deNghiTamHoanUngId;
                                chiTiet.NoiDung = item.NoiDung;
                                chiTiet.TongTienTruocVat = item.TongTienTruocVat;
                                chiTiet.Vat = item.Vat;
                                chiTiet.TienSauVat = item.TienSauVat;
                                chiTiet.ParentId = null;
                                chiTiet.Level = 0;
                                chiTiet.CreatedById = parameter.UserId;
                                chiTiet.CreatedDate = DateTime.Now;
                                chiTiet.UpdatedById = parameter.UserId;
                                chiTiet.UpdatedDate = DateTime.Now;

                                context.DeNghiTamHoanUngChiTiet.Add(chiTiet);
                                context.SaveChanges();

                                var _listChild = parameter.ListNoiDungTT.Where(x => x.ParentId == item.DeNghiTamHoanUngChiTietId).ToList();

                                SaveListTree_DeNghiTamHoanUngChiTiet(deNghiTamHoanUngId,
                                    parameter.UserId, chiTiet.DeNghiTamHoanUngChiTietId,
                                    parameter.ListNoiDungTT, _listChild);
                            }
                        }
                    }
                    //Hoàn ứng
                    else if (parameter.DeNghiTamHoanUng.LoaiDeNghi == 1)
                    {
                        List<DeNghiTamHoanUngChiTiet> lstChiTiet = new List<DeNghiTamHoanUngChiTiet>();

                        parameter.ListNoiDungTT.ForEach(tamUng =>
                        {
                            DeNghiTamHoanUngChiTiet chiTiet = new DeNghiTamHoanUngChiTiet();
                            chiTiet.DeNghiTamHoanUngId = deNghiTamHoanUngId;
                            chiTiet.NgayThang = tamUng.NgayThang;
                            chiTiet.SoHoaDon = tamUng.SoHoaDon;
                            chiTiet.NoiDung = tamUng.NoiDung;
                            chiTiet.HinhThucThanhToan = tamUng.HinhThucThanhToan;
                            chiTiet.VanChuyenXm = tamUng.VanChuyenXm;
                            chiTiet.TienDonHnnb = tamUng.TienDonHnnb;
                            chiTiet.TienDonDn = tamUng.TienDonDn;
                            chiTiet.KhachSan = tamUng.KhachSan;
                            chiTiet.ChiPhiKhac = tamUng.ChiPhiKhac;
                            chiTiet.Vat = tamUng.Vat;
                            chiTiet.DinhKemCt = tamUng.DinhKemCt;
                            chiTiet.GhiChu = tamUng.GhiChu;
                            chiTiet.CreatedById = parameter.UserId;
                            chiTiet.CreatedDate = DateTime.Now;
                            chiTiet.UpdatedById = parameter.UserId;
                            chiTiet.UpdatedDate = DateTime.Now;

                            lstChiTiet.Add(chiTiet);
                        });

                        context.DeNghiTamHoanUngChiTiet.AddRange(lstChiTiet);
                        context.SaveChanges();
                    }

                    transaction.Commit();

                    return new CreateOrUpdateDeNghiTamHoanUngResult
                    {
                        MessageCode = "Success",
                        StatusCode = HttpStatusCode.OK,
                        DeNghiTamHoanUngId = deNghiTamHoanUngId
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new CreateOrUpdateDeNghiTamHoanUngResult
                    {
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public GetDataDeNghiDetailFormResult GetDataDeNghiDetailForm(GetDataDetailParameter parameter)
        {
            try
            {
                var deNghi = new DeNghiTamHoanUngEntityModel();
                deNghi = context.DeNghiTamHoanUng.Where(x => x.DeNghiTamHoanUngId == parameter.Id && x.Active == true).Select(y => new DeNghiTamHoanUngEntityModel
                {
                    MaDeNghi = y.MaDeNghi,
                    DeNghiTamHoanUngId = y.DeNghiTamHoanUngId,
                    NgayDeNghi = y.NgayDeNghi,
                    HoSoCongTacId = y.HoSoCongTacId,
                    LyDo = y.LyDo,
                    NguoiThuHuongId = y.NguoiThuHuongId,
                    LoaiDeNghi = y.LoaiDeNghi.Value,
                    TienTamUng = y.TienTamUng,
                    TrangThai = y.TrangThai,
                    NguoiDeXuatId = y.NguoiDeXuatId,
                    CreatedById = y.CreatedById,
                }).FirstOrDefault();

                if (deNghi == null)
                {
                    return new GetDataDeNghiDetailFormResult()
                    {
                        MessageCode = "Không tồn tại đề nghị tạm hoàn ứng trong hệ thống.",
                        StatusCode = HttpStatusCode.Forbidden,
                        Status = false
                    };
                }

                var nguoiDeXuat = context.Employee.FirstOrDefault(x => x.EmployeeId == deNghi.NguoiDeXuatId);
                deNghi.NguoiDeXuat = nguoiDeXuat?.EmployeeCode + " - " + nguoiDeXuat?.EmployeeName;

                var listHoSoCongTac = new List<HoSoCongTacEntityModel>();
                var listHoSoCongTacFull = new List<HoSoCongTacEntityModel>();

                #region Lấy danh sách hồ sơ công tác có trạng thái mới: 0

                listHoSoCongTac = context.HoSoCongTac.Where(x => x.Active == true && x.TrangThai == 0).Select(x => new HoSoCongTacEntityModel
                {
                    MaHoSoCongTac = x.MaHoSoCongTac,
                    MaCTTenDX = x.MaHoSoCongTac + " - " + context.DeXuatCongTac.FirstOrDefault(y => y.DeXuatCongTacId == x.DeXuatCongTacId).TenDeXuat,
                    CreatedById = x.CreatedById,
                    HoSoCongTacId = x.HoSoCongTacId
                }).OrderByDescending(x => x.CreatedDate).ToList();

                var listDeXuatCongTacId = listHoSoCongTac.Select(y => y.DeXuatCongTacId).Distinct().ToList();
                var listChiTietDeXuatCongTac = context.ChiTietDeXuatCongTac
                    .Where(x => listDeXuatCongTacId.Contains(x.DeXuatCongTacId)).ToList();

                var listAllEmp = context.Employee.ToList();
                var listAllOrganization = context.Organization.ToList();
                var listAllContact = context.Contact.ToList();

                var listAllSubCode1 = GeneralList.GetSubCode1().ToList();
                listHoSoCongTac.ForEach(hoSo =>
                {
                    // Danh sách nhân viên tham gia công tác
                    var listEmpId = listChiTietDeXuatCongTac.Where(x => x.DeXuatCongTacId == hoSo.DeXuatCongTacId)
                        .Select(y => y.EmployeeId).ToList();
                    var listEmp = listAllEmp.Where(x => listEmpId.Contains(x.EmployeeId))
                        .Select(y => new EmployeeEntityModel
                        {
                            EmployeeId = y.EmployeeId,
                            EmployeeCode = y.EmployeeCode,
                            EmployeeName = y.EmployeeName,
                            EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                            OrganizationId = y.OrganizationId,
                            PositionId = y.PositionId,
                            SubCode1 = y.SubCode1Value
                        }).ToList();
                    var listEmpContact = listAllContact
                        .Where(x => listEmpId.Contains(x.ObjectId) && x.ObjectType == ContactObjectType.EMP).ToList();

                    listEmp?.ForEach(empDetail =>
                    {
                        //Sủa phòng ban thành subcode1

                        empDetail.OrganizationName = listAllSubCode1.FirstOrDefault(x => x.Value == empDetail.SubCode1).Name;

                        var contact = listEmpContact.FirstOrDefault(x => x.ObjectId == empDetail.EmployeeId);

                        //Tên TK
                        empDetail.BankOwnerName = contact?.BankOwnerName;

                        // Số TK
                        empDetail.BankAccount = contact?.BankAccount;

                        // Ngân hàng
                        empDetail.BankName = contact?.BankName;

                        // Mã Ngân hàng
                        empDetail.BankCode = contact?.BankCode;

                        // Địa chỉ Ngân hàng
                        empDetail.BankAddress = contact?.BankAddress;
                    });

                    hoSo.ListNhanVienCT = listEmp;
                });

                #endregion

                #region Lấy danh sách hình thức thanh toán

                var listPhuongThuc = new List<CategoryEntityModel>();
                var phuongThucId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTO")?.CategoryTypeId;
                listPhuongThuc = context.Category
                    .Where(x => x.Active == true && x.CategoryTypeId == phuongThucId)
                    .Select(y => new CategoryEntityModel()
                    {
                        CategoryId = y.CategoryId,
                        CategoryCode = y.CategoryCode,
                        CategoryName = y.CategoryName
                    }).ToList();

                #endregion

                #region Lấy dách file đinh kèm 

                var webRootPath = hostingEnvironment.WebRootPath + "\\";
                var objectType = "DENGHITHU";
                var folderCommon = context.Folder.ToList();
                var folder = folderCommon.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                                .Where(x => x.ObjectNumber == parameter.Id && x.FolderId == folder.FolderId).Select(y =>
                                    new FileInFolderEntityModel
                                    {
                                        Size = y.Size,
                                        ObjectId = y.ObjectId,
                                        Active = y.Active,
                                        FileExtension = y.FileExtension,
                                        FileInFolderId = y.FileInFolderId,
                                        FileName = y.FileName,
                                        FolderId = y.FolderId,
                                        ObjectType = y.ObjectType,
                                        ObjectNumber = y.ObjectNumber,
                                        CreatedById = y.CreatedById,
                                        CreatedDate = y.CreatedDate,
                                        UpdatedById = y.UpdatedById,
                                        UpdatedDate = y.UpdatedDate
                                    }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    x.FileFullName = $"{x.FileName}.{x.FileExtension}";
                    var folderUrlF = context.Folder.FirstOrDefault(item => item.FolderId == x.FolderId)?.Url;
                    x.FileUrl = Path.Combine(webRootPath, folderUrlF, x.FileFullName);
                });

                #endregion

                #region Danh sách thông tin thanh toán

                var listNoiDungTT = new List<DeNghiTamHoanUngChiTiet>();
                listNoiDungTT = context.DeNghiTamHoanUngChiTiet.Where(x => x.DeNghiTamHoanUngId == deNghi.DeNghiTamHoanUngId).ToList();

                #endregion

                #region Điều kiện hiển thị các button

                var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                var employee = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);

                bool isShowGuiPheDuyet = false;
                bool isShowPheDuyet = false;
                bool isShowTuChoi = false;
                bool isShowLuu = false;
                bool isShowXoa = false;
                bool isShowDatVeMoi = false;

                //Trạng thái Mới
                if (deNghi.TrangThai == 1)
                {
                    if (deNghi.NguoiDeXuatId == employee.EmployeeId)
                    {
                        isShowGuiPheDuyet = true;
                        isShowXoa = true;
                        isShowLuu = true;
                    }
                }

                //Trạng thái Chờ phê duyệt
                if (deNghi.TrangThai == 2)
                {
                    var buocHienTai = context.CacBuocApDung.Where(x => x.ObjectNumber == deNghi.DeNghiTamHoanUngId &&
                                                                       x.DoiTuongApDung == (deNghi.LoaiDeNghi == 0 ? 21 : 22) &&
                                                                       x.TrangThai == 0)
                        .OrderByDescending(z => z.Stt)
                        .FirstOrDefault();

                    //Nếu là phê duyệt trưởng bộ phận
                    if (buocHienTai?.LoaiPheDuyet == 1)
                    {
                        var listDonViId_NguoiPhuTrach = context.ThanhVienPhongBan
                            .Where(x => x.EmployeeId == deNghi.NguoiDeXuatId)
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId_NguoiPhuTrach.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowPheDuyet = true;
                            isShowTuChoi = true;
                        }
                    }
                    //Nếu là phòng ban phê duyệt
                    else if (buocHienTai?.LoaiPheDuyet == 2)
                    {
                        //Lấy list Phòng ban đã phê duyệt ở bước hiện tại
                        var listDonViIdDaPheDuyet = context.PhongBanApDung
                            .Where(x => x.CacBuocApDungId == buocHienTai.Id &&
                                        x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId)
                            .Select(y => y.OrganizationId).ToList();

                        //Lấy list Phòng ban chưa phê duyệt ở bước hiện tại
                        var listDonViId = context.PhongBanTrongCacBuocQuyTrinh
                            .Where(x => x.CacBuocQuyTrinhId == buocHienTai.CacBuocQuyTrinhId &&
                                        !listDonViIdDaPheDuyet.Contains(x.OrganizationId))
                            .Select(y => y.OrganizationId).ToList();

                        var countPheDuyet = context.ThanhVienPhongBan.Count(x =>
                            x.EmployeeId == employee.EmployeeId &&
                            x.IsManager == 1 &&
                            listDonViId.Contains(
                                x.OrganizationId));

                        if (countPheDuyet > 0)
                        {
                            isShowPheDuyet = true;
                            isShowTuChoi = true;
                        }
                    }
                }

                //Trạng thái Từ chối
                if (deNghi.TrangThai == 4)
                {
                    if (deNghi.NguoiDeXuatId == employee.EmployeeId)
                    {
                        isShowDatVeMoi = true;
                    }
                }

                #endregion

                return new GetDataDeNghiDetailFormResult()
                {
                    Status = true,
                    StatusCode = HttpStatusCode.OK,
                    ListHoSoCongTac = listHoSoCongTac,
                    ListHinhThucTT = listPhuongThuc,
                    DeNghiTamHoanUng = deNghi,
                    ListFileInFolder = listFileResult,
                    ListNoiDungTT = listNoiDungTT,
                    IsShowGuiPheDuyet = isShowGuiPheDuyet,
                    IsShowPheDuyet = isShowPheDuyet,
                    IsShowTuChoi = isShowTuChoi,
                    IsShowLuu = isShowLuu,
                    IsShowXoa = isShowXoa,
                    IsShowDatVeMoi = isShowDatVeMoi,
                };
            }
            catch (Exception e)
            {
                return new GetDataDeNghiDetailFormResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.Forbidden,
                    Status = false
                };
            }
        }

        public UpdateDeNghiTamHoanUngChiTietResult UpdateDeNghiTamHoanUngChiTiet(UpdateDeNghiTamHoanUngChiTietParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
                    if (user == null)
                    {
                        return new UpdateDeNghiTamHoanUngChiTietResult
                        {
                            MessageCode = "Nhân viên không tồn tại trong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
                    if (employee == null)
                    {
                        return new UpdateDeNghiTamHoanUngChiTietResult
                        {
                            MessageCode = "Nhân viên không tồn tại tong hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed
                        };
                    }

                    var denghiCT = context.DeNghiTamHoanUngChiTiet.FirstOrDefault(x => x.DeNghiTamHoanUngChiTietId == parameter.DeNghiTamHoanUngChiTiet.DeNghiTamHoanUngChiTietId);
                    if (denghiCT == null && parameter.DeNghiTamHoanUngChiTiet.IsNewLine == false)
                    {
                        return new UpdateDeNghiTamHoanUngChiTietResult
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Không tồn tại yêu cầu chi tiết trong hệ thống."
                        };
                    }
                    // Update
                    if (parameter.DeNghiTamHoanUngChiTiet.IsNewLine == false)
                    {
                        denghiCT.NgayThang = parameter.DeNghiTamHoanUngChiTiet.NgayThang;
                        denghiCT.SoHoaDon = parameter.DeNghiTamHoanUngChiTiet.SoHoaDon;
                        denghiCT.NoiDung = parameter.DeNghiTamHoanUngChiTiet.NoiDung;
                        denghiCT.HinhThucThanhToan = parameter.DeNghiTamHoanUngChiTiet.HinhThucThanhToan;
                        denghiCT.VanChuyenXm = parameter.DeNghiTamHoanUngChiTiet.VanChuyenXM;
                        denghiCT.TienDonHnnb = parameter.DeNghiTamHoanUngChiTiet.TienDonHNNB;
                        denghiCT.TienDonDn = parameter.DeNghiTamHoanUngChiTiet.TienDonDN;
                        denghiCT.KhachSan = parameter.DeNghiTamHoanUngChiTiet.KhachSan;
                        denghiCT.ChiPhiKhac = parameter.DeNghiTamHoanUngChiTiet.ChiPhiKhac;
                        denghiCT.Vat = parameter.DeNghiTamHoanUngChiTiet.VAT;
                        denghiCT.DinhKemCt = parameter.DeNghiTamHoanUngChiTiet.DinhKemCT;
                        denghiCT.GhiChu = parameter.DeNghiTamHoanUngChiTiet.GhiChu;

                        denghiCT.UpdatedById = parameter.UserId;
                        denghiCT.UpdatedDate = DateTime.Now;
                        context.DeNghiTamHoanUngChiTiet.Update(denghiCT);
                    }
                    else
                    {
                        // Tạo mới
                        DeNghiTamHoanUngChiTiet chiTiet = new DeNghiTamHoanUngChiTiet();
                        chiTiet.DeNghiTamHoanUngId = parameter.DeNghiTamHoanUngChiTiet.DeNghiTamHoanUngId;
                        chiTiet.NgayThang = parameter.DeNghiTamHoanUngChiTiet.NgayThang;
                        chiTiet.SoHoaDon = parameter.DeNghiTamHoanUngChiTiet.SoHoaDon;
                        chiTiet.NoiDung = parameter.DeNghiTamHoanUngChiTiet.NoiDung;
                        chiTiet.HinhThucThanhToan = parameter.DeNghiTamHoanUngChiTiet.HinhThucThanhToan;
                        chiTiet.VanChuyenXm = parameter.DeNghiTamHoanUngChiTiet.VanChuyenXM;
                        chiTiet.TienDonHnnb = parameter.DeNghiTamHoanUngChiTiet.TienDonHNNB;
                        chiTiet.TienDonDn = parameter.DeNghiTamHoanUngChiTiet.TienDonDN;
                        chiTiet.KhachSan = parameter.DeNghiTamHoanUngChiTiet.KhachSan;
                        chiTiet.ChiPhiKhac = parameter.DeNghiTamHoanUngChiTiet.ChiPhiKhac;
                        chiTiet.Vat = parameter.DeNghiTamHoanUngChiTiet.VAT;
                        chiTiet.DinhKemCt = parameter.DeNghiTamHoanUngChiTiet.DinhKemCT;
                        chiTiet.GhiChu = parameter.DeNghiTamHoanUngChiTiet.GhiChu;

                        chiTiet.CreatedById = parameter.UserId;
                        chiTiet.CreatedDate = DateTime.Now;
                        chiTiet.UpdatedById = parameter.UserId;
                        chiTiet.UpdatedDate = DateTime.Now;

                        context.DeNghiTamHoanUngChiTiet.Add(chiTiet);
                    }

                    context.SaveChanges();
                    transaction.Commit();

                    #region Danh sách thông tin thanh toán
                    var listNoiDungTT = new List<DeNghiTamHoanUngChiTiet>();
                    listNoiDungTT = context.DeNghiTamHoanUngChiTiet.Where(x => x.DeNghiTamHoanUngId == parameter.DeNghiTamHoanUngChiTiet.DeNghiTamHoanUngId).ToList();
                    #endregion

                    return new UpdateDeNghiTamHoanUngChiTietResult
                    {
                        MessageCode = "Success",
                        StatusCode = HttpStatusCode.OK,
                        ListNoiDungTT = listNoiDungTT
                    };
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new UpdateDeNghiTamHoanUngChiTietResult
                    {
                        StatusCode = HttpStatusCode.Forbidden
                    };
                }
            }
        }

        public DeleteDeNghiTamHoanUngChiTietResult DeleteDeNghiTamHoanUngChiTiet(DeleteDeNghiTamHoanUngChiTietParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deNghiCT = context.DeNghiTamHoanUngChiTiet.FirstOrDefault(x => x.DeNghiTamHoanUngChiTietId == parameter.DeNghiTamHoanUngChiTietId);
                    if (deNghiCT != null)
                    {
                        context.DeNghiTamHoanUngChiTiet.Remove(deNghiCT);
                        context.SaveChanges();
                        transaction.Commit();
                    }
                    else
                    {
                        return new DeleteDeNghiTamHoanUngChiTietResult
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Không tồn tại đề nghị chi tiết trong hệ thống!"
                        };
                    }

                    return new DeleteDeNghiTamHoanUngChiTietResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa chi tiết thành công"
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteDeNghiTamHoanUngChiTietResult
                    {
                        MessageCode = e.Message,
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }
            }
        }

        public DatVeMoiDeNghiTamHoanUngResult DatVeMoiDeNghiTamHoanUng(DatVeMoiDeNghiTamHoanUngParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deNghi = context.DeNghiTamHoanUng.FirstOrDefault(x =>
                        x.DeNghiTamHoanUngId == parameter.DeNghiTamHoanUngId && x.Active == true);
                    if (deNghi == null)
                    {
                        return new DatVeMoiDeNghiTamHoanUngResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Đề nghị không tồn tại trong hệ thống",
                        };
                    }

                    //Nếu trạng thái khác Từ chối
                    if (deNghi.TrangThai != 4)
                    {
                        return new DatVeMoiDeNghiTamHoanUngResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Trạng thái đề xuất không phải Từ chối, không thể đặt về mới!",
                        };
                    }

                    deNghi.TrangThai = 1; // tt mới
                    context.DeNghiTamHoanUng.Update(deNghi);
                    context.SaveChanges();

                    //Xóa các bước áp dụng và phòng ban áp dụng để làm mới quy trình
                    var listCacBuocApDung = context.CacBuocApDung.Where(x => x.ObjectNumber == deNghi.DeNghiTamHoanUngId &&
                                                                             x.DoiTuongApDung == parameter.DoiTuongApDung)
                        .ToList();
                    var listCacBuocApDungId = listCacBuocApDung.Select(y => y.Id).ToList();
                    var listPhongBanApDung = context.PhongBanApDung
                        .Where(x => listCacBuocApDungId.Contains(x.CacBuocApDungId)).ToList();

                    context.CacBuocApDung.RemoveRange(listCacBuocApDung);
                    context.PhongBanApDung.RemoveRange(listPhongBanApDung);

                    context.SaveChanges();
                    transaction.Commit();

                    return new DatVeMoiDeNghiTamHoanUngResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Đặt về mới đề nghị thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DatVeMoiDeNghiTamHoanUngResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public XoaDeNghiTamHoanUngResult XoaDeNghiTamHoanUng(XoaDeNghiTamHoanUngParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deNghi = context.DeNghiTamHoanUng.FirstOrDefault(x => x.DeNghiTamHoanUngId == parameter.DeNghiTamHoanUngId);
                    if (deNghi == null)
                    {
                        return new XoaDeNghiTamHoanUngResult
                        {
                            StatusCode = HttpStatusCode.FailedDependency,
                            MessageCode = "Không tồn tại đề nghị trong hệ thống!"
                        };
                    }

                    if (deNghi.TrangThai != 1)
                    {
                        return new XoaDeNghiTamHoanUngResult()
                        {
                            StatusCode = HttpStatusCode.Conflict,
                            MessageCode = "Không thể xóa đề nghị không ở trạng thái Nháp"
                        };
                    }

                    var listChiTiet = context.DeNghiTamHoanUngChiTiet
                        .Where(x => x.DeNghiTamHoanUngId == deNghi.DeNghiTamHoanUngId).ToList();

                    var listNote = context.Note.Where(x => x.ObjectNumber == deNghi.DeNghiTamHoanUngId &&
                                                           x.ObjectType == "DENGHITHU").ToList();

                    context.DeNghiTamHoanUng.Remove(deNghi);
                    context.DeNghiTamHoanUngChiTiet.RemoveRange(listChiTiet);
                    context.Note.RemoveRange(listNote);
                    context.SaveChanges();

                    transaction.Commit();

                    return new XoaDeNghiTamHoanUngResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        MessageCode = "Xóa thành công"
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new XoaDeNghiTamHoanUngResult
                    {
                        MessageCode = e.Message,
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
            }
        }

        public GetAllDenghiTamUngListResult GetAllDenghiTamUngList(GetAllDenghiTamUngListParameter parameter)
        {
            var user = context.User.FirstOrDefault(c => c.UserId == parameter.UserId);
            if (user == null)
            {
                return new GetAllDenghiTamUngListResult
                {
                    Message = "Nhân viên không tồn tại trong hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed
                };
            }
            var employee = context.Employee.FirstOrDefault(c => c.EmployeeId == user.EmployeeId);
            if (employee == null)
            {
                return new GetAllDenghiTamUngListResult
                {
                    Message = "Nhân viên không tồn tại trong hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed
                };
            }

            var listEmployee = new List<EmployeeEntityModel>();

            #region Lấy danh sách nhân viên

            var listAllEmployee = context.Employee.ToList();

            listEmployee = context.Employee.Where(x => x.Active == true).Select(y =>
                       new EmployeeEntityModel
                       {
                           EmployeeId = y.EmployeeId,
                           EmployeeName = y.EmployeeName,
                           EmployeeCodeName = y.EmployeeCode + " - " + y.EmployeeName,
                           PositionId = y.PositionId
                       }).ToList();

            #endregion

            var lstAllPosition = context.Position.ToList();
            var listDeNghi = new List<DeNghiTamHoanUngEntityModel>();
            var listAllDeNghiCT = context.DeNghiTamHoanUng
                .Where(x => x.Active == true && x.LoaiDeNghi == parameter.LoaiDeNghi).Select(y =>
                    new DeNghiTamHoanUngEntityModel
                    {
                        DeNghiTamHoanUngId = y.DeNghiTamHoanUngId,
                        MaDeNghi = y.MaDeNghi,
                        NguoiThuHuongId = y.NguoiThuHuongId,
                        NguoiDeXuatId = y.NguoiDeXuatId,
                        TienTamUng = y.TienTamUng,
                        NgayDeNghi = y.NgayDeNghi,
                        CreatedDate = y.CreatedDate,
                        CreatedById = y.CreatedById,
                        TrangThai = y.TrangThai,
                        TongTienThanhToan = y.TongTienThanhToan,
                    }).OrderByDescending(z => z.CreatedDate).ToList();

            #region Phân quyền dữ liệu theo quy trình phê duyệt

            var thanhVienPhongBan =
                  context.ThanhVienPhongBan.FirstOrDefault(x => x.EmployeeId == employee.EmployeeId);

            var isAccess = context.Organization.FirstOrDefault(x => x.OrganizationId == employee.OrganizationId)?.IsAccess;
            //Nếu k được xem dữ liệu phòng ban khác
            if(isAccess != true)
            {
                //Nếu là trưởng bộ phận (IsManager = 1)
                if (thanhVienPhongBan.IsManager == 1)
                {
                    var doiTuongApDung = parameter.LoaiDeNghi == 1 ? 22 : 21;
                    //Lấy ra list đối tượng id mà người dùng phụ trách phê duyệt
                    var listId = context.PhongBanPheDuyetDoiTuong
                        .Where(x => x.DoiTuongApDung == doiTuongApDung &&
                                    x.OrganizationId == thanhVienPhongBan.OrganizationId).Select(y => y.ObjectNumber)
                        .ToList();

                    var listEmpIdCungOrg = listEmployee.Where(x => x.OrganizationId == employee.OrganizationId).Select(x => x.EmployeeId).ToList();

                    listDeNghi = listAllDeNghiCT.Where(x =>
                     (parameter.MaDenghi == null || parameter.MaDenghi == "" ||
                      x.MaDeNghi.ToLower().Contains(parameter.MaDenghi.ToLower().Trim())) &&
                     (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 ||
                      parameter.ListEmployee.Contains(x.NguoiDeXuatId.Value)) &&
                     (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                     (listId.Contains(x.DeNghiTamHoanUngId)  // cần phê duyệt
                     || x.NguoiDeXuatId == employee.EmployeeId // người đăng nhập tạo
                     || (listEmpIdCungOrg.Contains(x.NguoiDeXuatId) && x.TrangThai != 1) // cùng emp cùng phòng ban
                     )).ToList();
                }
                //Nếu là nhân viên thường (IsManager = 0)
                else
                {
                    listDeNghi = listAllDeNghiCT.Where(x =>
                     (parameter.MaDenghi == null || parameter.MaDenghi == "" ||
                      x.MaDeNghi.ToLower().Contains(parameter.MaDenghi.ToLower().Trim())) &&
                     (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 ||
                      parameter.ListEmployee.Contains(x.NguoiDeXuatId.Value)) &&
                     (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                     x.NguoiDeXuatId == employee.EmployeeId).ToList();
                }
            }
            else
            {
                listDeNghi = listAllDeNghiCT.Where(x =>
                     (parameter.MaDenghi == null || parameter.MaDenghi == "" ||
                      x.MaDeNghi.ToLower().Contains(parameter.MaDenghi.ToLower().Trim())) &&
                     (parameter.ListEmployee == null || parameter.ListEmployee.Count() == 0 ||
                      parameter.ListEmployee.Contains(x.NguoiDeXuatId.Value)) &&
                     (parameter.TrangThai == null || x.TrangThai == parameter.TrangThai) &&
                     (x.CreatedById == user.UserId || // Theo người tạo
                     (x.CreatedById != user.UserId && x.TrangThai != 1)) // cùng phòng ban khác trạng thái mới
                     ).ToList();
            }
           
            #endregion

            if (listDeNghi.Count() > 0)
            {
                listDeNghi.ForEach(p =>
                {
                    switch (p.TrangThai)
                    {
                        case 1:
                            p.TrangThaiString = "Mới";
                            p.BackgroundColorForStatus = "#8ec3f4";
                            break;
                        case 2:
                            p.TrangThaiString = "Chờ phê duyệt";
                            p.BackgroundColorForStatus = "#f29505";
                            break;
                        case 3:
                            p.TrangThaiString = "Đã duyệt";
                            p.BackgroundColorForStatus = "#05f235";
                            break;
                        case 4:
                            p.TrangThaiString = "Từ chối";
                            p.BackgroundColorForStatus = "#797979";
                            break;
                    }

                    var empThuHuong = listAllEmployee.FirstOrDefault(x => x.EmployeeId == p.NguoiThuHuongId);
                    p.NguoiThuHuong = empThuHuong?.EmployeeCode + " - " + empThuHuong?.EmployeeName;

                    var posiId = listAllEmployee.FirstOrDefault(x => x.EmployeeId == p.NguoiThuHuongId)?.PositionId;
                    p.PhongBan = lstAllPosition.FirstOrDefault(x => x.PositionId == posiId)?.PositionName;

                    var empDeXuat = listAllEmployee.FirstOrDefault(x => x.EmployeeId == p.NguoiDeXuatId);
                    p.NguoiDeXuat = empDeXuat?.EmployeeCode + " - " + empDeXuat?.EmployeeName;
                });
            }

            return new GetAllDenghiTamUngListResult()
            {
                StatusCode = HttpStatusCode.OK,
                Status = true,
                ListDeNghiTamHoanUng = listDeNghi,
                ListEmployee = listEmployee
            };
        }

        public PheDuyetNhanSuDangKyOTResult PheDuyetNhanSuDangKyOT(PheDuyetNhanSuDangKyOTParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(x => x.UserId == request.UserId);
                    if (user == null)
                    {
                        return new PheDuyetNhanSuDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Người dùng không tồn tại trong hệ thống",
                        };
                    }
                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    if (user == null)
                    {
                        return new PheDuyetNhanSuDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Nhân viên không tồn tại trong hệ thống",
                        };
                    }

                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new PheDuyetNhanSuDangKyOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }

                    //Trạng thái phòng ban và nhân viên
                    //1: đăng ký OT
                    //2: chờ phê duyệt
                    //3: đã duyệt
                    //4: từ chối

                    var listNVPheDuyetOT = context.KeHoachOtThanhVien.Where(x =>
                       x.KeHoachOtId == request.KeHoachOtId && x.OrganizationId == request.OrganizationId).ToList();
                    listNVPheDuyetOT.ForEach(item =>
                    {
                        if (request.ListNvPheDuyetID.Contains(item.EmployeeId.Value))//Nếu tồn tại trong list phê duyệt thì chuyển trạng thái thành 2: đã duyêt và người lại
                        {
                            item.TrangThai = 3;
                        }
                        else
                        {
                            item.TrangThai = 4;
                        }
                        item.GhiChu = request.ListNv.FirstOrDefault(x => x.EmployeeId == item.EmployeeId)?.GhiChu;
                    });

                    var phongBanOT = context.KeHoachOtPhongBan.FirstOrDefault(x =>
                                    x.KeHoachOtId == request.KeHoachOtId &&
                                    x.OrganizationId == request.OrganizationId);

                    phongBanOT.TrangThai = 3;
                    context.KeHoachOtThanhVien.UpdateRange(listNVPheDuyetOT);
                    context.KeHoachOtPhongBan.Update(phongBanOT);
                    context.SaveChanges();
                    transaction.Commit();

                    return new PheDuyetNhanSuDangKyOTResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Phê duyệt nhân viên thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new PheDuyetNhanSuDangKyOTResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TuChoiNhanVienOTTongPheDuyetResult TuChoiNhanVienOTTongPheDuyet(TuChoiNhanVienOTTongPheDuyetParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var user = context.User.FirstOrDefault(x => x.UserId == request.UserId);
                    if (user == null)
                    {
                        return new TuChoiNhanVienOTTongPheDuyetResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Người dùng không tồn tại trong hệ thống",
                        };
                    }
                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    if (user == null)
                    {
                        return new TuChoiNhanVienOTTongPheDuyetResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Nhân viên không tồn tại trong hệ thống",
                        };
                    }

                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new TuChoiNhanVienOTTongPheDuyetResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }

                    //Trạng thái phòng ban và nhân viên
                    //1: đăng ký OT
                    //2: chờ phê duyệt
                    //3: đã duyệt
                    //4: từ chối

                    var listNVPheDuyetOT = context.KeHoachOtThanhVien.Where(x =>
                       x.KeHoachOtId == request.KeHoachOtId && x.TrangThai != 4).ToList(); // lấy ra list nhân viên. Chỉ có trạng thái là chờ phê duyệt: 2 
                    listNVPheDuyetOT.ForEach(item =>
                    {
                        if (request.ListIdTuChoi.Contains(item.EmployeeId.Value))//Nếu tồn tại trong list từ chối thì chuyển trạng thái thành 4: Từ chối
                        {
                            item.TrangThai = 4;
                        }
                        else
                        //Nếu tồn tại trong list từ chối thì chuyển trạng thái thành 3: Đã duyệt
                        {
                            item.TrangThai = 3;
                        }
                        item.GhiChu = request.ListNv.FirstOrDefault(x => x.EmployeeId == item.EmployeeId)?.GhiChu;
                    });
                    context.KeHoachOtThanhVien.UpdateRange(listNVPheDuyetOT);
                    context.SaveChanges();
                    transaction.Commit();

                    return new TuChoiNhanVienOTTongPheDuyetResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Phê duyệt nhân viên thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new TuChoiNhanVienOTTongPheDuyetResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GiaHanThemKeHoachOTResult GiaHanThemKeHoachOT(GiaHanThemKeHoachOTParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new GiaHanThemKeHoachOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }
                    var message = "";


                    //Xác định xem gia hạn thêm của đối tượng nào
                    var DoiTuongApDung = 13;
                    if (request.GiaHanThemType == "DangKyThem")
                    {
                        //Chuyển tt  phòng ban Ot thành đăng ký OT :1 
                        //Chuyển trạng tt nv OT thành CHờ phê duyêt: 2
                        var listPhongBanOT = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();
                        listPhongBanOT.ForEach(item =>
                        {
                            item.TrangThai = 1;
                        });
                        var listNhanVienOT = context.KeHoachOtThanhVien.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();
                        listNhanVienOT.ForEach(item =>
                        {
                            item.TrangThai = 2;
                        });
                        context.KeHoachOtPhongBan.UpdateRange(listPhongBanOT);
                        context.KeHoachOtThanhVien.UpdateRange(listNhanVienOT);
                    }
                    if (request.GiaHanThemType == "DangKyLai")
                    {
                        //Chuyển tt  phòng ban Ot thành đăng ký OT :1 
                        //Xóa hết NV OT
                        var listPhongBanOT = context.KeHoachOtPhongBan.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();
                        listPhongBanOT.ForEach(item =>
                        {
                            item.TrangThai = 1;
                        });
                        var listNhanVienOT = context.KeHoachOtThanhVien.Where(x => x.KeHoachOtId == request.KeHoachOtId).ToList();
                        context.KeHoachOtPhongBan.UpdateRange(listPhongBanOT);
                        context.KeHoachOtThanhVien.RemoveRange(listNhanVienOT);
                    }
                    if (request.Type == 0)
                    {

                        var nowDate = DateTime.Now;
                        var tuNgay = deXuatOT.NgayBatDau.Value.Date.Add(deXuatOT.GioBatDau.Value);

                        if (request.GiaHanDangKyOT.Value > tuNgay ||
                            request.GiaHanDangKyOT < deXuatOT.HanPheDuyetKeHoach.Value)
                        {
                            return new GiaHanThemKeHoachOTResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Hạn đăng ký OT phải sau Hạn phê duyệt kế hoạch và trước Thời gian bắt đầu OT"
                            };
                        }

                        if (request.GiaHanPheDuyetDangKyOT.Value > tuNgay ||
                            request.GiaHanPheDuyetDangKyOT.Value < request.GiaHanDangKyOT.Value)
                        {
                            return new GiaHanThemKeHoachOTResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Hạn phê duyệt đăng ký OT phải sau Hạn đăng ký OT và trước Thời gian bắt đầu OT"
                            };
                        }

                        //Cập nhật lại thời hạn đăng ký OT và thờis hạn phê duyệt thời gian đăng ký OT và chuyển trạng thái kế hoạch OT về 3: Đăng ký OT
                        deXuatOT.HanPheDuyetDangKy = request.GiaHanPheDuyetDangKyOT;
                        deXuatOT.HanDangKy = request.GiaHanDangKyOT;

                    }

                    deXuatOT.TrangThai = 3;
                    context.KeHoachOt.Update(deXuatOT);


                    //Xóa hết các bước áp dụng
                    var listCacBuocApDung = context.CacBuocApDung.Where(x => x.ObjectNumber == deXuatOT.KeHoachOtId &&
                                                                             x.DoiTuongApDung == DoiTuongApDung).ToList();
                    context.CacBuocApDung.RemoveRange(listCacBuocApDung);

                    //Xóa hết các phòng ban áp dụng
                    var listCacBuocApDungId = listCacBuocApDung.Select(y => y.Id).ToList();
                    var listPhongBanApDung = context.PhongBanApDung
                        .Where(x => listCacBuocApDungId.Contains(x.CacBuocApDungId)).ToList();
                    context.PhongBanApDung.RemoveRange(listPhongBanApDung);

                    context.SaveChanges();
                    transaction.Commit();
                    return new GiaHanThemKeHoachOTResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Chuyển trạng thái đăng ký thành công",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new GiaHanThemKeHoachOTResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DeleteKehoachOTResult DeleteKehoachOT(DeleteKehoachOTParameter request)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    var deXuatOT = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == request.KeHoachOtId && x.Active == true);
                    if (deXuatOT == null)
                    {
                        return new DeleteKehoachOTResult
                        {
                            StatusCode = HttpStatusCode.BadRequest,
                            Message = "Kế hoạch OT không tồn tại trong hệ thống",
                        };
                    }
                    deXuatOT.Active = false;
                    context.KeHoachOt.Update(deXuatOT);
                    context.SaveChanges();
                    transaction.Commit();
                    return new DeleteKehoachOTResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Xóa đề xuất kế hoạch OT thành công thành công!",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new DeleteKehoachOTResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GetMasterDataCreateCauHinhDanhGiaResult GetMasterDataCreateCauHinhDanhGia(GetMasterDataCreateCauHinhDanhGiaParameter request)
        {
            try
            {
                var categoryTypeIdMucDanhGia = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "MUCDANHGIA").CategoryTypeId;
                var listMucDanhGia = context.Category.Where(x => x.CategoryTypeId == categoryTypeIdMucDanhGia).Select(y => new CategoryEntityModel()
                {
                    CategoryId = y.CategoryId,
                    CategoryCode = y.CategoryCode,
                    CategoryName = y.CategoryName,
                    Active = y.Active,
                }).ToList();

                var listThangDiemDanhGia = context.MucDanhGia.ToList();

                var listCauHinhDanhGia = context.MucDanhGiaDanhGiaMapping
                    .Select(x => new MucDanhGiaDanhGiaMappingEntityModel()
                    {
                        MucDanhGiaDanhGiaMappingId = x.MucDanhGiaDanhGiaMappingId,
                        TenMucDanhGia = listThangDiemDanhGia.FirstOrDefault(y => y.MucDanhGiaId == x.MucDanhGiaId).TenMucDanhGia,
                        MucDanhGiaId = listThangDiemDanhGia.FirstOrDefault(y => y.MucDanhGiaId == x.MucDanhGiaId).MucDanhGiaId,
                        DiemTu = x.DiemTu,
                        DiemDen = x.DiemDen,
                        MucDanhGiaMasterDataName = listMucDanhGia.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName,
                        MucDanhGiaMasterDataId = x.MucDanhGiaMasterDataId, // đánh giá của mapping lấy từ master data
                        DiemDanhGia = listThangDiemDanhGia.FirstOrDefault(y => y.MucDanhGiaId == x.MucDanhGiaId).DiemDanhGia,
                    }).OrderByDescending(x => x.DiemDanhGia).ToList();

                var listQuyLuong = context.QuyLuong.Where(x => x.Active == true).Select(x => new QuyLuongEntityModel()
                {
                    QuyLuongId = x.QuyLuongId,
                    QuyLuong = x.QuyLuong1,
                    Nam = x.Nam,
                    Active = x.Active,
                }).OrderByDescending(x => x.Nam).ToList();

                return new GetMasterDataCreateCauHinhDanhGiaResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "",
                    ListQuyLuong = listQuyLuong,
                    ListMucDanhGia = listMucDanhGia,
                    ListThangDiemDanhGia = listCauHinhDanhGia,

                };
            }
            catch (Exception e)
            {
                return new GetMasterDataCreateCauHinhDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public UpdateCauHinhDanhGiaResult UpdateCauHinhDanhGia(UpdateCauHinhDanhGiaParameter request)
        {
            try
            {
                var mucDanhGia = context.MucDanhGia.FirstOrDefault(x => x.MucDanhGiaId == request.MucDanhGiaId);
                if (mucDanhGia == null)
                {
                    return new UpdateCauHinhDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Mức đánh giá không tồn tại trên hệ thống!",
                    };
                }
                //Kiểm tra xem đã có phiếu ở trạng thái hoàn thành nào sử dụng thang điểm đánh giá này chưa, nếu có thì k cho cập nhật.
                var trangThaiHtPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                var isUsed = context.PhieuDanhGia.FirstOrDefault(x => x.ThangDiemDanhGiaId == mucDanhGia.MucDanhGiaId && x.TrangThaiPhieuDanhGia == trangThaiHtPhieuDanhGia);
                if (isUsed != null)
                {
                    return new UpdateCauHinhDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Thang điểm đánh giá đã được sử dụng, không thể cập nhật!",
                    };
                }

                //Xóa hết các mức điểm cũ
                var listMucDiemCu = context.MucDanhGiaDanhGiaMapping.Where(x => x.MucDanhGiaId == mucDanhGia.MucDanhGiaId).ToList();
                context.MucDanhGiaDanhGiaMapping.RemoveRange(listMucDiemCu);

                var listMucDanhGiaMappingAdd = new List<MucDanhGiaDanhGiaMapping>();
                request.ListThangDiemDanhGia.ForEach(item =>
                {
                    var newObj = new MucDanhGiaDanhGiaMapping();
                    newObj.MucDanhGiaMasterDataId = item.MucDanhGiaMasterDataId; // lấy từ master data
                    newObj.DiemTu = item.DiemTu;
                    newObj.MucDanhGiaId = mucDanhGia.MucDanhGiaId;
                    newObj.DiemDen = item.DiemDen;
                    newObj.UpdatedById = request.UserId;
                    newObj.UpdatedDate = DateTime.Now;
                    listMucDanhGiaMappingAdd.Add(newObj);
                    mucDanhGia.DiemDanhGia = item.DiemDanhGia;
                    mucDanhGia.TenMucDanhGia = item.TenMucDanhGia;
                });

                context.MucDanhGia.UpdateRange(mucDanhGia);
                context.MucDanhGiaDanhGiaMapping.AddRange(listMucDanhGiaMappingAdd);
                context.SaveChanges();

                return new UpdateCauHinhDanhGiaResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Cập nhật cấu hình đánh giá thành công!",
                };
            }
            catch (Exception e)
            {
                return new UpdateCauHinhDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public DeleteCauHinhDanhGiaResult DeleteCauHinhDanhGia(DeleteCauHinhDanhGiaParameter request)
        {
            try
            {
                var mucDanhGia = context.MucDanhGia.FirstOrDefault(x => x.MucDanhGiaId == request.MucDanhGiaId);
                if (mucDanhGia == null)
                {
                    return new DeleteCauHinhDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Mức đánh giá không tồn tại trên hệ thống!",
                    };
                }

                //Kiểm tra xem đã có phiếu ở trạng thái hoàn thành nào sử dụng thang điểm đánh giá này chưa, nếu có thì k cho cập nhật.
                var isUsed = context.PhieuDanhGia.FirstOrDefault(x => x.ThangDiemDanhGiaId == mucDanhGia.MucDanhGiaId);
                if (isUsed != null)
                {
                    return new DeleteCauHinhDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Thang điểm đánh giá đã được sử dụng, không thể xóa!",
                    };
                }
                var listMucDanhGiaMapping = context.MucDanhGiaDanhGiaMapping.Where(x => x.MucDanhGiaId == mucDanhGia.MucDanhGiaId).ToList();
                context.MucDanhGiaDanhGiaMapping.RemoveRange(listMucDanhGiaMapping);
                context.MucDanhGia.Remove(mucDanhGia);
                context.SaveChanges();

                return new DeleteCauHinhDanhGiaResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Xóa mức đánh giá thành công!",
                };
            }
            catch (Exception e)
            {
                return new DeleteCauHinhDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public CreateCauHinhDanhGiaResult CreateCauHinhDanhGia(CreateCauHinhDanhGiaParameter request)
        {

            using (var transaction = context.Database.BeginTransaction())
            {

                try
                {
                    var mucDanhGia = new MucDanhGia();
                    mucDanhGia.CreatedById = request.UserId;
                    mucDanhGia.NgayApDung = DateTime.Now;
                    mucDanhGia.CreatedDate = DateTime.Now;
                    mucDanhGia.DiemDanhGia = request.ListThangDiemDanhGia[0].DiemDanhGia;
                    mucDanhGia.TenMucDanhGia = request.ListThangDiemDanhGia[0].TenMucDanhGia;
                    context.MucDanhGia.Add(mucDanhGia);
                    context.SaveChanges();

                    var listMucDanhGiaMapping = new List<MucDanhGiaDanhGiaMapping>();
                    request.ListThangDiemDanhGia.ForEach(item =>
                    {
                        var newObj = new MucDanhGiaDanhGiaMapping();
                        newObj.MucDanhGiaMasterDataId = item.MucDanhGiaMasterDataId; // lấy từ master data
                        newObj.MucDanhGiaId = mucDanhGia.MucDanhGiaId;
                        newObj.DiemTu = item.DiemTu;
                        newObj.DiemDen = item.DiemDen;
                        newObj.CreatedById = request.UserId;
                        newObj.CreatedDate = DateTime.Now;
                        listMucDanhGiaMapping.Add(newObj);
                    });
                    context.MucDanhGiaDanhGiaMapping.AddRange(listMucDanhGiaMapping);
                    context.SaveChanges();
                    transaction.Commit();

                    return new CreateCauHinhDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo mới mức đánh giá thành công!",
                    };
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new CreateCauHinhDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TaoQuyLuongResult TaoQuyLuong(TaoQuyLuongParameter request)
        {
            try
            {
                //Check tồn tại theo năm
                var checkExist = context.QuyLuong.FirstOrDefault(x => x.Nam == request.Nam && x.Active == true);
                if (checkExist != null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Quỹ lương đã tồn tại!",
                    };
                }
                var quyLuong = new QuyLuong();
                quyLuong.Nam = request.Nam;
                quyLuong.QuyLuong1 = request.QuyLuong;

                context.QuyLuong.Add(quyLuong);
                context.SaveChanges();

                return new TaoQuyLuongResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Tạo mới quỹ lương thành công!",
                };
            }
            catch (Exception e)
            {
                return new TaoQuyLuongResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public TaoQuyLuongResult UpdateQuyLuong(TaoQuyLuongParameter request)
        {
            try
            {
                if (request.QuyLuongId == null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Không tìm thấy quỹ lương trên hệ thống!",
                    };
                }
                //Check tồn tại theo năm
                var checkExist = context.QuyLuong.FirstOrDefault(x => x.QuyLuongId != request.QuyLuongId && x.Nam == request.Nam && x.Active == true);
                if (checkExist != null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Đã tồn tại quỹ lương trên hệ thống!",
                    };
                }
                var quyLuong = context.QuyLuong.FirstOrDefault(x => x.QuyLuongId == request.QuyLuongId && x.Active == true);
                quyLuong.Nam = request.Nam;
                quyLuong.QuyLuong1 = request.QuyLuong;
                context.QuyLuong.Update(quyLuong);
                context.SaveChanges();

                return new TaoQuyLuongResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Cập nhật mới quỹ lương thành công!",
                };
            }
            catch (Exception e)
            {
                return new TaoQuyLuongResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public TaoQuyLuongResult DeleteQuyLuong(TaoQuyLuongParameter request)
        {
            try
            {
                if (request.QuyLuongId == null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Không tìm thấy quỹ lương trên hệ thống!",
                    };
                }
                //Check tồn tại theo năm
                var checkExist = context.QuyLuong.FirstOrDefault(x => x.QuyLuongId == request.QuyLuongId && x.Active == true);
                if (checkExist == null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Không tìm thấy quỹ lương trên hệ thống!",
                    };
                }
                //Lấy quỹ lương còn lại của năm.
                var quyLuong = context.KyDanhGia.FirstOrDefault(x => checkExist.Nam == x.ThoiGianKetThuc.Value.Year);
                if (quyLuong != null)
                {
                    return new TaoQuyLuongResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Quỹ lương đã được áp dụng trong kỳ đánh giá!",
                    };
                }

                checkExist.Active = false;
                context.QuyLuong.Update(checkExist);
                context.SaveChanges();

                return new TaoQuyLuongResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Xóa quỹ lương thành công!",
                };
            }
            catch (Exception e)
            {
                return new TaoQuyLuongResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataCreatePhieuDanhGiaResult GetMasterDataCreatePhieuDanhGia(GetMasterDataCreatePhieuDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    #region Check permision: manager
                    var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new GetMasterDataCreatePhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new GetMasterDataCreatePhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }

                    #endregion


                    var listEmp = (from employee in context.Employee
                                   join contact in context.Contact on employee.EmployeeId equals contact.ObjectId
                                   join oranganization in context.Organization on employee.OrganizationId equals oranganization.OrganizationId
                                   into cu0
                                   from x0 in cu0.DefaultIfEmpty()
                                   join position in context.Position on employee.PositionId equals position.PositionId
                                   into cu
                                   from x in cu.DefaultIfEmpty()
                                   where employee.Active == true
                                   select new EmployeeEntityModel
                                   {
                                       EmployeeId = employee.EmployeeId,
                                       EmployeeName = employee.EmployeeName,
                                       OrganizationId = employee.OrganizationId,
                                       OrganizationName = x0.OrganizationName,
                                       EmployeeCode = employee.EmployeeCode,
                                       PositionId = employee.PositionId,
                                       PositionName = x.PositionName,
                                       DateOfBirth = contact.DateOfBirth,
                                       IsManager = employee.IsManager
                                   }).OrderBy(x => x.LastName).ToList();


                    var employeeId = user.EmployeeId;
                    var employeeLogin = listEmp.FirstOrDefault(x => x.EmployeeId == employeeId);
                    var isManager = employeeLogin.IsManager;

                    if (isManager == true)
                    {
                        //Lấy list phòng ban con của user
                        List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                        if (employeeLogin.OrganizationId != null)
                        {
                            listGetAllChild.Add(employeeLogin.OrganizationId.Value);
                            listGetAllChild = getOrganizationChildrenId(employeeLogin.OrganizationId.Value, listGetAllChild);
                        }
                        //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                        var listEmployeeInChargeByManager = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId))).ToList();
                        List<Guid> listEmployeeInChargeByManagerId = new List<Guid>();

                        listEmployeeInChargeByManager.ForEach(item =>
                        {
                            if (item.EmployeeId != null && item.EmployeeId != Guid.Empty)
                                listEmployeeInChargeByManagerId.Add(item.EmployeeId.Value);
                        });

                        listEmp = listEmp.Where(x => listEmployeeInChargeByManagerId.Contains(x.EmployeeId.Value)).ToList();
                    }
                    else
                    {
                        //Nếu không phải quản lý
                        listEmp = listEmp.Where(x => x.EmployeeId == employeeId).ToList();
                    }

                    //Lấy dsach các dạng câu trả lời
                    var listDangCauTl = GeneralList.GetTrangThais("DangCauTraLoi").ToList();

                    var dsachItemCtlId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "ITEMCAUTL")?.CategoryTypeId;
                    var listItemCauTl = context.Category.Where(x => x.CategoryTypeId == dsachItemCtlId)
                       .Select(x => new CategoryEntityModel()
                       {
                           CategoryId = x.CategoryId,
                           CategoryName = x.CategoryName,
                           CategoryCode = x.CategoryCode
                       }).ToList();

                    var listThangDiemDanhGia = context.MucDanhGia.ToList();

                    return new GetMasterDataCreatePhieuDanhGiaResult
                    {
                        ListEmp = listEmp,
                        ListDangCauTraLoi = listDangCauTl,
                        ListItemCauTraLoi = listItemCauTl,
                        LoginEmployeeID = employeeId.Value,
                        ListThangDiemDanhGia = listThangDiemDanhGia,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Thêm thông tin ứng viên thành công"
                    };
                }
                catch (Exception e)
                {
                    trans.Commit();
                    return new GetMasterDataCreatePhieuDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TaoPhieuDanhGiaResult TaoPhieuDanhGia(TaoPhieuDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                    if (folder == null)
                    {
                        return new TaoPhieuDanhGiaResult()
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            MessageCode = "Thư mục upload không tồn tại"
                        };
                    }

                    #region Check permision: manager
                    var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new TaoPhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new TaoPhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }
                    #endregion

                    var strCode = string.Empty;
                    var date = DateTime.Now.ToString("yyyy");
                    var countPhieuDanhGia = context.PhieuDanhGia.Count() == 0 ? 0 : context.PhieuDanhGia.Max(x => x.PhieuDanhGiaId);
                    strCode = $"PDG" + date + "-" + (countPhieuDanhGia + 1);

                    var phieuDanhGia = new PhieuDanhGia();
                    phieuDanhGia.MaPhieuDanhGia = strCode;
                    phieuDanhGia.TenPhieuDanhGia = parameter.PhieuDanhGia.TenPhieuDanhGia;
                    phieuDanhGia.ThangDiemDanhGiaId = parameter.PhieuDanhGia.ThangDiemDanhGiaId;
                    phieuDanhGia.CachTinhTong = parameter.PhieuDanhGia.CachTinhTong;
                    phieuDanhGia.TrangThaiPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 0).Value;
                    phieuDanhGia.CreatedById = parameter.UserId;
                    phieuDanhGia.CreatedDate = DateTime.Now;
                    context.PhieuDanhGia.Add(phieuDanhGia);
                    context.SaveChanges();

                    #region Add câu hỏi NV tự đánh giá

                    var listDanhGiaParentNV = parameter.CauHoiNV.Where(x => x.ParentId == 0).ToList();
                    listDanhGiaParentNV.ForEach(parent =>
                    {
                        var oldIndexParent = parent.CauHoiPhieuDanhGiaMappingId;

                        var newCauHoiNV = new CauHoiPhieuDanhGiaMapping();
                        newCauHoiNV.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                        newCauHoiNV.NoiDungCauHoi = parent.NoiDungCauHoi;
                        newCauHoiNV.TiLe = parent.TiLe;
                        newCauHoiNV.Stt = parent.Stt;
                        newCauHoiNV.NguoiDanhGia = 1; //Nhân viên tự đánh giá
                        newCauHoiNV.CreatedById = parameter.UserId;
                        newCauHoiNV.CreatedDate = DateTime.Now;
                        context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiNV);
                        context.SaveChanges();

                        var listDanhGiaConNV = parameter.CauHoiNV.Where(x => x.ParentId == oldIndexParent).ToList();
                        listDanhGiaConNV.ForEach(child =>
                        {
                            var newCauHoiConNV = new CauHoiPhieuDanhGiaMapping();
                            newCauHoiConNV.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                            newCauHoiConNV.NoiDungCauHoi = child.NoiDungCauHoi;
                            newCauHoiConNV.TiLe = null;
                            newCauHoiConNV.Stt = child.Stt;
                            newCauHoiConNV.NguoiDanhGia = 1; //Nhân viên tự đánh giá
                            newCauHoiConNV.ParentId = newCauHoiNV.CauHoiPhieuDanhGiaMappingId;
                            newCauHoiConNV.LoaiCauTraLoiId = child.CauTraLoi.Value;
                            newCauHoiConNV.CreatedById = parameter.UserId;
                            newCauHoiConNV.CreatedDate = DateTime.Now;
                            context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiConNV);
                            context.SaveChanges();
                            if (child.CauTraLoi.Value == 2) //Text + chọn đáp án
                            {
                                child.DanhSachItem.ForEach(item =>
                                {
                                    var danhSachItemCauHoiMapping = new CauHoiPhieuDanhGiaMappingDanhMucItem();
                                    danhSachItemCauHoiMapping.DanhMucId = item.CategoryId.Value;
                                    danhSachItemCauHoiMapping.CauHoiPhieuDanhGiaMappingId = newCauHoiConNV.CauHoiPhieuDanhGiaMappingId;
                                    context.CauHoiPhieuDanhGiaMappingDanhMucItem.Add(danhSachItemCauHoiMapping);
                                    context.SaveChanges();
                                });
                            }
                        });
                    });
                    #endregion

                    #region Add câu hỏi quản lý đánh giá

                    if (parameter.CauHoiQL != null)
                    {
                        var listDanhGiaParentQL = parameter.CauHoiQL.Where(x => x.ParentId == 0).ToList();

                        listDanhGiaParentQL.ForEach(parent =>
                        {
                            var oldIndexParent = parent.CauHoiPhieuDanhGiaMappingId;

                            var newCauHoiQL = new CauHoiPhieuDanhGiaMapping();
                            newCauHoiQL.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                            newCauHoiQL.NoiDungCauHoi = parent.NoiDungCauHoi;
                            newCauHoiQL.TiLe = parent.TiLe;
                            newCauHoiQL.NguoiDanhGia = 2; //Quản lý đánh giá
                            newCauHoiQL.CreatedById = parameter.UserId;
                            newCauHoiQL.CreatedDate = DateTime.Now;
                            context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiQL);
                            context.SaveChanges();

                            var listDanhGiaConQL = parameter.CauHoiQL.Where(x => x.ParentId == oldIndexParent).ToList();
                            listDanhGiaConQL.ForEach(child =>
                            {
                                var newCauHoiConQL = new CauHoiPhieuDanhGiaMapping();
                                newCauHoiConQL.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                                newCauHoiConQL.NoiDungCauHoi = child.NoiDungCauHoi;
                                newCauHoiConQL.TiLe = null;
                                newCauHoiConQL.Stt = child.Stt;
                                newCauHoiConQL.NguoiDanhGia = 2; //Quản lý đánh giá
                                newCauHoiConQL.ParentId = newCauHoiQL.CauHoiPhieuDanhGiaMappingId;
                                newCauHoiConQL.LoaiCauTraLoiId = child.CauTraLoi.Value;
                                newCauHoiConQL.CreatedById = parameter.UserId;
                                newCauHoiConQL.CreatedDate = DateTime.Now;
                                context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiConQL);
                                context.SaveChanges();
                                if (child.CauTraLoi.Value == 2) //Text + Chọn đáp án
                                {
                                    child.DanhSachItem.ForEach(item =>
                                    {
                                        var danhSachItemCauHoiMapping = new CauHoiPhieuDanhGiaMappingDanhMucItem();
                                        danhSachItemCauHoiMapping.DanhMucId = item.CategoryId.Value;
                                        danhSachItemCauHoiMapping.CauHoiPhieuDanhGiaMappingId = newCauHoiConQL.CauHoiPhieuDanhGiaMappingId;
                                        context.CauHoiPhieuDanhGiaMappingDanhMucItem.Add(danhSachItemCauHoiMapping);
                                        context.SaveChanges();
                                    });
                                }
                            });
                        });
                    }
                    #endregion

                    #region Thêm file

                    if (parameter.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        parameter.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = parameter.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = phieuDanhGia.PhieuDanhGiaId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {

                            return new TaoPhieuDanhGiaResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    #endregion

                    trans.Commit();

                    return new TaoPhieuDanhGiaResult
                    {
                        PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo phiếu đánh giá thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new TaoPhieuDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public GetListCauHinhChecklistResult GetListCauHinhChecklist(GetListCauHinhChecklistParameter parameter)
        {
            try
            {
                bool isShowButton = false;
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user != null)
                {
                    var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    isShowButton = emp_user?.IsManager ?? false;
                }

                var listCauHinhChecklist = new List<CauHinhChecklistEntityModel>();

                listCauHinhChecklist = context.CauHinhChecklist
                    .Select(y => new CauHinhChecklistEntityModel(y)).OrderByDescending(z => z.CreatedDate).ToList();


                return new GetListCauHinhChecklistResult()
                {
                    MessageCode = "Success",
                    StatusCode = HttpStatusCode.OK,
                    ListCauHinhChecklist = listCauHinhChecklist,
                    IsShowButton = isShowButton
                };
            }
            catch (Exception e)
            {
                return new GetListCauHinhChecklistResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CreateOrUpdateCauHinhChecklistResult CreateOrUpdateCauHinhChecklist(CreateOrUpdateCauHinhChecklistParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new CreateOrUpdateCauHinhChecklistResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new CreateOrUpdateCauHinhChecklistResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                if (emp_user.IsManager != true)
                {
                    return new CreateOrUpdateCauHinhChecklistResult()
                    {
                        MessageCode = "Không thể Thêm mới/Cập nhật cấu hình checklist vì bạn không phải quản lý",
                        StatusCode = HttpStatusCode.Conflict,
                    };
                }

                var checklist = context.CauHinhChecklist.FirstOrDefault(x => x.CauHinhChecklistId == parameter.CauHinhChecklist.CauHinhChecklistId);

                //Thêm mới cấu hình checklist
                if (checklist == null)
                {
                    checklist = parameter.CauHinhChecklist.ToEntity();
                    checklist.CreatedById = parameter.UserId;
                    checklist.CreatedDate = DateTime.Now;
                    context.CauHinhChecklist.Add(checklist);
                }
                else
                //Cập nhật cấu hình checklist
                {
                    checklist.TenTaiLieu = parameter.CauHinhChecklist.TenTaiLieu;
                    checklist.Active = parameter.CauHinhChecklist.Active;
                    checklist.UpdatedDate = DateTime.Now;
                    context.CauHinhChecklist.Update(checklist);
                }

                context.SaveChanges();

                return new CreateOrUpdateCauHinhChecklistResult()
                {
                    MessageCode = "Thêm mới/Cập nhật thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new CreateOrUpdateCauHinhChecklistResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DeleteCauHinhChecklistByIdResult DeleteCauHinhChecklistById(DeleteCauHinhChecklistByIdParameter parameter)
        {
            try
            {
                var checklist = context.CauHinhChecklist.FirstOrDefault(x => x.CauHinhChecklistId == parameter.Id);
                if (checklist == null)
                {
                    return new DeleteCauHinhChecklistByIdResult()
                    {
                        MessageCode = "Cấu hình checklist không tồn tại trên hệ thống, vui lòng tải lại trang",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new DeleteCauHinhChecklistByIdResult()
                    {
                        MessageCode = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user.IsManager != true)
                {
                    return new DeleteCauHinhChecklistByIdResult()
                    {
                        MessageCode = "Chỉ quản lý mới có quyền xóa cấu hình checklist",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                context.CauHinhChecklist.Remove(checklist);
                context.SaveChanges();

                return new DeleteCauHinhChecklistByIdResult()
                {
                    MessageCode = "Xóa thành công",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeleteCauHinhChecklistByIdResult()
                {
                    MessageCode = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DanhSachPhieuDanhGiaResult DanhSachPhieuDanhGia(DanhSachPhieuDanhGiaParameter parameter)
        {
            try
            {
                var listPhieuDanhGia = context.PhieuDanhGia.Select(x => new PhieuDanhGiaEntityModel()
                {
                    PhieuDanhGiaId = x.PhieuDanhGiaId,
                    MaPhieuDanhGia = x.MaPhieuDanhGia,
                    TenPhieuDanhGia = x.TenPhieuDanhGia,
                    CreatedDate = x.CreatedDate,
                    TrangThaiPhieuDanhGia = x.TrangThaiPhieuDanhGia,
                }).ToList();

                return new DanhSachPhieuDanhGiaResult()
                {
                    ListPhieuDanhGia = listPhieuDanhGia,
                    Message = "Lấy thông tin thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DanhSachPhieuDanhGiaResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DeletePhieuDanhGiaResult DeletePhieuDanhGia(DeletePhieuDanhGiaParameter parameter)
        {
            try
            {
                var checkPhieuExsit = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == parameter.PhieuDanhGiaId);
                if (checkPhieuExsit == null)
                {
                    return new DeletePhieuDanhGiaResult()
                    {
                        Message = "Phiếu đánh giá không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                var trangThaiMoi = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 0).Value;
                if (checkPhieuExsit.TrangThaiPhieuDanhGia != trangThaiMoi)
                {
                    return new DeletePhieuDanhGiaResult()
                    {
                        Message = "Phiếu đánh giá đang ở trạng thái khác mới, không thể xóa!",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                context.PhieuDanhGia.Remove(checkPhieuExsit);
                context.SaveChanges();

                return new DeletePhieuDanhGiaResult()
                {
                    Message = "Xóa phiếu đánh giá thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeletePhieuDanhGiaResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public DanhSachKyDanhGiaResult DanhSachKyDanhGia(DanhSachKyDanhGiaParameter parameter)
        {
            try
            {
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new DanhSachKyDanhGiaResult()
                    {
                        Message = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }

                var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                if (emp_user == null)
                {
                    return new DanhSachKyDanhGiaResult()
                    {
                        Message = "Người dùng không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.NotFound,
                    };
                }
                var isAccess = context.Organization.FirstOrDefault(x => x.OrganizationId == emp_user.OrganizationId)?.IsAccess;

                var now = DateTime.Now;
                var trangThaiHt = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 3).Value;
                var listKyDanhGiaUpdate = context.KyDanhGia.ToList();
                listKyDanhGiaUpdate.ForEach(item =>
                {
                    if (item.ThoiGianKetThuc.Value.Date < now.Date)
                    {
                        item.TrangThaiDanhGia = trangThaiHt;
                    }
                });
                context.KyDanhGia.UpdateRange(listKyDanhGiaUpdate);
                context.SaveChanges();

                var listKyDanhGia = context.KyDanhGia.Select(x => new KyDanhGiaEntityModel()
                {
                    KyDanhGiaId = x.KyDanhGiaId,
                    MaKyDanhGia = x.MaKyDanhGia,
                    TenKyDanhGia = x.TenKyDanhGia,
                    ThoiGianBatDau = x.ThoiGianBatDau,
                    ThoiGianKetThuc = x.ThoiGianKetThuc,
                    LyDo = x.LyDo,
                    TrangThaiDanhGia = x.TrangThaiDanhGia,
                    CreatedDate = x.CreatedDate,
                    CreatedById = x.CreatedById,
                }).OrderByDescending(x => x.CreatedDate).ToList();

                if(isAccess == false)
                {
                    //Kỳ đánh giá có phòng ban của người đăng nhập tham gia và người tạo
                    var listKyDanhGiaNguoiDangNhapThamGiaDanhGiaId = context.NhanVienKyDanhGia.Where(x => x.OrganizationId == emp_user.OrganizationId).Select(x => x.KyDanhGiaId).Distinct().ToList();
                    listKyDanhGia = listKyDanhGia.Where(x => listKyDanhGiaNguoiDangNhapThamGiaDanhGiaId.Contains(x.KyDanhGiaId.Value) || x.CreatedById == user.UserId
                    ).ToList();
                }
                else
                {
                    //Xem kỳ đánh giá của mình tạo và người khác tạo với trạng thái khác 0: Mới
                    var listKyDanhGiaNguoiDangNhapThamGiaDanhGiaId = context.NhanVienKyDanhGia.Where(x => x.OrganizationId == emp_user.OrganizationId).Select(x => x.KyDanhGiaId).Distinct().ToList();
                    listKyDanhGia = listKyDanhGia.Where(x => x.CreatedById == user.UserId || (x.TrangThaiDanhGia != 0 && x.CreatedById != user.UserId) 
                    ).ToList();
                }
                return new DanhSachKyDanhGiaResult()
                {
                    ListKyDanhGia = listKyDanhGia,
                    Message = "Lấy thông tin thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DanhSachKyDanhGiaResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public PhieuDanhGiaDetailResult PhieuDanhGiaDetail(PhieuDanhGiaDetailParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    #region Check permision: manager
                    var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new PhieuDanhGiaDetailResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new PhieuDanhGiaDetailResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }

                    #endregion

                    var phieuDanhGia = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == parameter.PhieuDanhGiaId);
                    if (phieuDanhGia == null)
                    {
                        return new PhieuDanhGiaDetailResult()
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Phiếu đánh giá không tồn tại trên hệ thống!"
                        };
                    }
                    #region Lấy thông tin phiếu đánh giá

                    //Lấy list thang điểm 
                    var listDangCauTL = GeneralList.GetTrangThais("DangCauTraLoi").ToList();

                    var danhMucTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "ITEMCAUTL")?.CategoryTypeId;
                    var listDanhMucItemId = context.Category.Where(x => x.CategoryTypeId == danhMucTypeId).Select(x => new CategoryEntityModel()
                    {
                        CategoryCode = x.CategoryCode,
                        CategoryName = x.CategoryName,
                        CategoryId = x.CategoryId,
                        CategoryTypeId = x.CategoryTypeId
                    }).ToList();

                    //Lấy các câu hỏi của phiếu
                    var listCauHoi = context.CauHoiPhieuDanhGiaMapping.Where(x => x.PhieuDanhGiaId == phieuDanhGia.PhieuDanhGiaId)
                        .Select(x => new CauHoiPhieuDanhGiaMappingEntityModel()
                        {
                            CauHoiPhieuDanhGiaMappingId = x.CauHoiPhieuDanhGiaMappingId,
                            PhieuDanhGiaId = x.PhieuDanhGiaId,
                            CauHoiDanhGiaId = x.CauHoiDanhGiaId,
                            NguoiDanhGia = x.NguoiDanhGia,
                            NoiDungCauHoi = x.NoiDungCauHoi,
                            TiLe = x.TiLe,
                            Stt = x.Stt,
                            LoaiCauTraLoiId = x.LoaiCauTraLoiId,
                            ParentId = x.ParentId,
                        }).OrderBy(x => x.Stt).ToList();

                    //Lấy danh mục item mapp với đáp án câu hỏi
                    var listCauHoiId = listCauHoi.Select(x => x.CauHoiPhieuDanhGiaMappingId).ToList();
                    var listDanhMucItem = context.CauHoiPhieuDanhGiaMappingDanhMucItem.Where(x => listCauHoiId.Contains(x.CauHoiPhieuDanhGiaMappingId)).ToList();

                    //Mapp câu hỏi với danh mục
                    listCauHoi.ForEach(item =>
                    {
                        var listDanhMucId = listDanhMucItem.Where(x => x.CauHoiPhieuDanhGiaMappingId == item.CauHoiPhieuDanhGiaMappingId).Select(x => x.DanhMucId).ToList();
                        item.DanhMucItem = listDanhMucItemId.Where(x => listDanhMucId.Contains(x.CategoryId.Value)).ToList();
                    });


                    var listThangDiemDanhGia = context.MucDanhGia.ToList();

                    var empCreateId = context.User.FirstOrDefault(x => x.UserId == phieuDanhGia.CreatedById);
                    var nguoiTao = context.Employee.FirstOrDefault(x => x.EmployeeId == empCreateId.EmployeeId);
                    var nguoiTaoModel = new EmployeeEntityModel();
                    nguoiTaoModel.EmployeeId = nguoiTao.EmployeeId;
                    nguoiTaoModel.EmployeeName = nguoiTao.EmployeeName;
                    nguoiTaoModel.EmployeeCode = nguoiTao.EmployeeCode;
                    nguoiTaoModel.PositionId = nguoiTao.PositionId;
                    nguoiTaoModel.OrganizationId = nguoiTao.OrganizationId;
                    #endregion

                    #region Lấy dách file đinh kèm 
                    var objectType = "PHIEUDANHGIA";
                    var folder = context.Folder.FirstOrDefault(x => x.FolderType == objectType);

                    var listFileResult = context.FileInFolder
                                    .Where(x => x.ObjectNumber == parameter.PhieuDanhGiaId && x.FolderId == folder.FolderId).Select(y =>
                                        new FileInFolderEntityModel
                                        {
                                            Size = y.Size,
                                            ObjectId = y.ObjectId,
                                            Active = y.Active,
                                            FileExtension = y.FileExtension,
                                            FileInFolderId = y.FileInFolderId,
                                            FileName = y.FileName,
                                            FolderId = y.FolderId,
                                            ObjectType = y.ObjectType,
                                            ObjectNumber = y.ObjectNumber,
                                            CreatedById = y.CreatedById,
                                            CreatedDate = y.CreatedDate,
                                            UpdatedById = y.UpdatedById,
                                            UpdatedDate = y.UpdatedDate
                                        }).OrderBy(z => z.CreatedDate).ToList();

                    listFileResult.ForEach(x =>
                    {
                        x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                    });
                    #endregion

                    return new PhieuDanhGiaDetailResult
                    {
                        ListCauHoiMapping = listCauHoi,

                        ListDangCauTraLoi = listDangCauTL,

                        ListItemCauTraLoi = listDanhMucItemId,
                        ListFileInFolder = listFileResult,
                        ListThangDiemDanhGia = listThangDiemDanhGia,
                        NguoiTao = nguoiTaoModel,
                        PhieuDanhGia = phieuDanhGia,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Lấy thông tin thành công"
                    };
                }
                catch (Exception e)
                {
                    trans.Commit();
                    return new PhieuDanhGiaDetailResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public CapNhatPhieuDanhGiaResult CapNhatPhieuDanhGia(CapNhatPhieuDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                    if (folder == null)
                    {
                        return new CapNhatPhieuDanhGiaResult()
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            MessageCode = "Thư mục upload không tồn tại"
                        };
                    }

                    #region Check permision: manager
                    var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                    if (user == null)
                    {
                        return new CapNhatPhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                        };
                    }
                    if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                    {
                        return new CapNhatPhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "Lỗi dữ liệu"
                        };
                    }
                    #endregion

                    var phieuDanhGia = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == parameter.PhieuDanhGia.PhieuDanhGiaId);
                    if (phieuDanhGia == null)
                    {
                        return new CapNhatPhieuDanhGiaResult
                        {
                            Status = false,
                            Message = "Không tìm thấy phiếu đánh giá trên hệ thống!"
                        };
                    }

                    phieuDanhGia.TenPhieuDanhGia = parameter.PhieuDanhGia.TenPhieuDanhGia;
                    phieuDanhGia.ThangDiemDanhGiaId = parameter.PhieuDanhGia.ThangDiemDanhGiaId;
                    phieuDanhGia.CachTinhTong = parameter.PhieuDanhGia.CachTinhTong;
                    phieuDanhGia.TrangThaiPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 0).Value;
                    phieuDanhGia.UpdatedById = parameter.UserId;
                    phieuDanhGia.UpdatedDate = DateTime.Now;
                    context.PhieuDanhGia.Update(phieuDanhGia);
                    context.SaveChanges();

                    #region xóa các câu hỏi và danh mục mapping;

                    //Lấy các câu hỏi của phiếu
                    var listCauHoi = context.CauHoiPhieuDanhGiaMapping.Where(x => x.PhieuDanhGiaId == phieuDanhGia.PhieuDanhGiaId).ToList();
                    //Lấy danh mục item mapp với đáp án câu hỏi
                    var listCauHoiId = listCauHoi.Select(x => x.CauHoiPhieuDanhGiaMappingId).ToList();
                    var listDanhMucItem = context.CauHoiPhieuDanhGiaMappingDanhMucItem.Where(x => listCauHoiId.Contains(x.CauHoiPhieuDanhGiaMappingId.Value)).ToList();
                    context.CauHoiPhieuDanhGiaMapping.RemoveRange(listCauHoi);
                    context.CauHoiPhieuDanhGiaMappingDanhMucItem.RemoveRange(listDanhMucItem);
                    #endregion



                    #region Add câu hỏi NV tự đánh giá

                    var listDanhGiaParentNV = parameter.CauHoiNV.Where(x => x.ParentId == 0).ToList();
                    listDanhGiaParentNV.ForEach(parent =>
                    {
                        var oldIndexParent = parent.CauHoiPhieuDanhGiaMappingId;

                        var newCauHoiNV = new CauHoiPhieuDanhGiaMapping();
                        newCauHoiNV.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                        newCauHoiNV.NoiDungCauHoi = parent.NoiDungCauHoi;
                        newCauHoiNV.TiLe = parent.TiLe;
                        newCauHoiNV.Stt = parent.Stt;
                        newCauHoiNV.NguoiDanhGia = 1; //Nhân viên tự đánh giá
                        newCauHoiNV.CreatedById = parameter.UserId;
                        newCauHoiNV.CreatedDate = DateTime.Now;
                        context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiNV);
                        context.SaveChanges();

                        var listDanhGiaConNV = parameter.CauHoiNV.Where(x => x.ParentId == oldIndexParent).ToList();
                        listDanhGiaConNV.ForEach(child =>
                        {
                            var newCauHoiConNV = new CauHoiPhieuDanhGiaMapping();
                            newCauHoiConNV.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                            newCauHoiConNV.NoiDungCauHoi = child.NoiDungCauHoi;
                            newCauHoiConNV.TiLe = null;
                            newCauHoiConNV.Stt = child.Stt;
                            newCauHoiConNV.NguoiDanhGia = 1; //Nhân viên tự đánh giá
                            newCauHoiConNV.ParentId = newCauHoiNV.CauHoiPhieuDanhGiaMappingId;
                            newCauHoiConNV.LoaiCauTraLoiId = child.CauTraLoi.Value;
                            newCauHoiConNV.CreatedById = parameter.UserId;
                            newCauHoiConNV.CreatedDate = DateTime.Now;
                            context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiConNV);
                            context.SaveChanges();
                            if (child.CauTraLoi.Value == 2)//Text + chọn đáp án
                            {
                                child.DanhSachItem.ForEach(item =>
                                {
                                    var danhSachItemCauHoiMapping = new CauHoiPhieuDanhGiaMappingDanhMucItem();
                                    danhSachItemCauHoiMapping.DanhMucId = item.CategoryId.Value;
                                    danhSachItemCauHoiMapping.CauHoiPhieuDanhGiaMappingId = newCauHoiConNV.CauHoiPhieuDanhGiaMappingId;
                                    context.CauHoiPhieuDanhGiaMappingDanhMucItem.Add(danhSachItemCauHoiMapping);
                                    context.SaveChanges();
                                });
                            }

                        });
                    });
                    #endregion

                    #region Add câu hỏi quản lý đánh giá
                    if (parameter.CauHoiQL != null)
                    {

                        var listDanhGiaParentQL = parameter.CauHoiQL.Where(x => x.ParentId == 0).ToList();
                        listDanhGiaParentQL.ForEach(parent =>
                        {
                            var oldIndexParent = parent.CauHoiPhieuDanhGiaMappingId;
                            var newCauHoiQL = new CauHoiPhieuDanhGiaMapping();
                            newCauHoiQL.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                            newCauHoiQL.NoiDungCauHoi = parent.NoiDungCauHoi;
                            newCauHoiQL.TiLe = parent.TiLe;
                            newCauHoiQL.Stt = parent.Stt;
                            newCauHoiQL.NguoiDanhGia = 2; //Quản lý đánh giá
                            newCauHoiQL.CreatedById = parameter.UserId;
                            newCauHoiQL.CreatedDate = DateTime.Now;
                            context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiQL);
                            context.SaveChanges();
                            var listDanhGiaConQL = parameter.CauHoiQL.Where(x => x.ParentId == oldIndexParent).ToList();
                            listDanhGiaConQL.ForEach(child =>
                            {
                                var newCauHoiConQL = new CauHoiPhieuDanhGiaMapping();
                                newCauHoiConQL.PhieuDanhGiaId = phieuDanhGia.PhieuDanhGiaId;
                                newCauHoiConQL.NoiDungCauHoi = child.NoiDungCauHoi;
                                newCauHoiConQL.TiLe = null;
                                newCauHoiConQL.Stt = child.Stt;
                                newCauHoiConQL.NguoiDanhGia = 2; //Quản lý đánh giá
                                newCauHoiConQL.ParentId = newCauHoiQL.CauHoiPhieuDanhGiaMappingId;
                                newCauHoiConQL.LoaiCauTraLoiId = child.CauTraLoi.Value;
                                newCauHoiConQL.CreatedById = parameter.UserId;
                                newCauHoiConQL.CreatedDate = DateTime.Now;
                                context.CauHoiPhieuDanhGiaMapping.Add(newCauHoiConQL);
                                context.SaveChanges();
                                if (child.CauTraLoi.Value == 2)//Text + chọn đáp án
                                {
                                    child.DanhSachItem.ForEach(item =>
                                    {
                                        var danhSachItemCauHoiMapping = new CauHoiPhieuDanhGiaMappingDanhMucItem();
                                        danhSachItemCauHoiMapping.DanhMucId = item.CategoryId.Value;
                                        danhSachItemCauHoiMapping.CauHoiPhieuDanhGiaMappingId = newCauHoiConQL.CauHoiPhieuDanhGiaMappingId;
                                        context.CauHoiPhieuDanhGiaMappingDanhMucItem.Add(danhSachItemCauHoiMapping);
                                        context.SaveChanges();
                                    });
                                }
                            });
                        });
                    }
                    #endregion

                    #region Thêm file

                    if (parameter.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        parameter.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = parameter.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = phieuDanhGia.PhieuDanhGiaId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {

                            return new CapNhatPhieuDanhGiaResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    #endregion

                    trans.Commit();

                    return new CapNhatPhieuDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật phiếu đánh giá thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new CapNhatPhieuDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public HoanThanhOrUpdateStatusPhieuDanhGiaResult HoanThanhOrUpdateStatusPhieuDanhGia(HoanThanhOrUpdateStatusPhieuDanhGiaParameter parameter)
        {
            try
            {
                #region Check permision: manager
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new HoanThanhOrUpdateStatusPhieuDanhGiaResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new HoanThanhOrUpdateStatusPhieuDanhGiaResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }
                #endregion
                var phieuDanhGia = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == parameter.PhieuDanhGiaId);
                if (phieuDanhGia == null)
                {
                    return new HoanThanhOrUpdateStatusPhieuDanhGiaResult
                    {
                        Status = false,
                        Message = "Không tìm thấy phiếu đánh giá trên hệ thống!"
                    };
                }
                if (parameter.Type == 0) // Hoàn thành: trạng thái = 0 => trạng thái = 1 
                {
                    phieuDanhGia.TrangThaiPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                }
                if (parameter.Type == 1) // có hiệu lực sang hết hiệu lực và ngc lại: 
                {
                    phieuDanhGia.TrangThaiPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == parameter.TrangThaiPhieuDanhGia).Value;
                }
                phieuDanhGia.UpdatedById = parameter.UserId;
                phieuDanhGia.UpdatedDate = DateTime.Now;
                context.PhieuDanhGia.Update(phieuDanhGia);
                context.SaveChanges();
                return new HoanThanhOrUpdateStatusPhieuDanhGiaResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Cập nhật phiếu đánh giá thành công!"
                };
            }
            catch (Exception e)
            {
                return new HoanThanhOrUpdateStatusPhieuDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public GetMasterDataTaoKyDanhGiaResult GetMasterDataTaoKyDanhGia(GetMasterDataTaoKyDanhGiaParameter parameter)
        {

            try
            {
                #region Check permision: manager
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId && x.Active == true);
                if (user == null)
                {
                    return new GetMasterDataTaoKyDanhGiaResult
                    {
                        Status = false,
                        Message = "User không có quyền truy xuất dữ liệu trong hệ thống"
                    };
                }
                if (user.EmployeeId == null || user.EmployeeId == Guid.Empty)
                {
                    return new GetMasterDataTaoKyDanhGiaResult
                    {
                        Status = false,
                        Message = "Lỗi dữ liệu"
                    };
                }
                #endregion

                //Phiếu đnáh giá có hiệu lực
                var trangThaiHieuLucPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                var listPhieuDanhGia = context.PhieuDanhGia.Where(x => x.TrangThaiPhieuDanhGia == trangThaiHieuLucPhieuDanhGia).ToList();
                var listChucVu = context.Position.Where(x => x.Active == true).Select(x => new PositionModel()
                {
                    PositionId = x.PositionId,
                    PositionCode = x.PositionCode,
                    PositionName = x.PositionName
                }).ToList();

                //Lấy danh sách phòng ban 
                var listPhongBan = context.Organization.Where(x => x.Active == true ).Select(x => new OrganizationEntityModel()
                {
                    OrganizationId = x.OrganizationId,
                    OrganizationName = x.OrganizationName,
                    OrganizationCode = x.OrganizationCode,
                }).ToList();

                //Lấy list trưởng bộ phận của phòng ban 
                var listPhongBanId = listPhongBan.Select(x => x.OrganizationId).ToList();
                var listTruongBoPhan = context.ThanhVienPhongBan.Where(x => x.IsManager == 1 && listPhongBanId.Contains(x.OrganizationId)).ToList();

                //Lấy thông tin trưởng bộ phận 
                var listTruongBoPhanId = listTruongBoPhan.Select(x => x.EmployeeId).ToList();
                var listEmpInfor = context.Employee.Where(x => listTruongBoPhanId.Contains(x.EmployeeId)).ToList();

                listPhongBan.ForEach(item =>
                {
                    var obj = listTruongBoPhan.FirstOrDefault(y => y.OrganizationId == item.OrganizationId);
                    if (obj != null)
                    {
                        item.NguoiPhuTrachId = obj.EmployeeId;
                        item.NguoiPhuTrachName = listEmpInfor.FirstOrDefault(x => x.EmployeeId == obj.EmployeeId).EmployeeName;
                    }
                });

                var now = DateTime.Now;
                //Lấy quỹ lương còn lại của năm
                var quyLuongInfor = context.QuyLuong.FirstOrDefault(x => x.Nam == now.Year && x.Active == true);
                if (quyLuongInfor == null)
                {
                    return new GetMasterDataTaoKyDanhGiaResult()
                    {
                        Message = "Chưa có cấu hình cho quỹ lương năm " + now.Year + ".",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                var quyLuong = quyLuongInfor.QuyLuong1;
                var listKyNamHienTai = context.KyDanhGia.Where(x => x.ThoiGianKetThuc.Value.Year == DateTime.Now.Year && x.TrangThaiDanhGia == 3).Select(x => x.KyDanhGiaId).ToList(); //3: hoàn thành
                var deXuatTangLuongDaDuyetId = context.DeXuatTangLuong.Where(x => listKyNamHienTai.Contains(x.KyDanhGiaId.Value)).Select(x => x.DeXuatTangLuongId).ToList();
                var tongSoLuongDaDuocPheDuyet = context.DeXuatTangLuongNhanVien.Where(x => deXuatTangLuongDaDuyetId.Contains(x.DeXuatTangLuongId) && x.TrangThai == 3).Sum(x => x.LuongDeXuat);
                var soTienQuyLuongConLai = quyLuong - tongSoLuongDaDuocPheDuyet;

                return new GetMasterDataTaoKyDanhGiaResult
                {
                    ListPhieuDanhGia = listPhieuDanhGia,
                    ListChucVu = listChucVu,
                    ListPhongBan = listPhongBan,
                    SoTienQuyLuongConLai = soTienQuyLuongConLai,
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy thông tin thành công!"
                };
            }
            catch (Exception e)
            {
                return new GetMasterDataTaoKyDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }
        public GetListCapPhatTaiSanResult GetListCapPhatTaiSan(GetListCapPhatTaiSanParameter parameter)
        {
            try
            {
                bool isShowButton = false;
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user != null)
                {
                    var emp_user = context.Employee.FirstOrDefault(x => x.EmployeeId == user.EmployeeId);
                    isShowButton = emp_user?.IsManager ?? false;
                }

                var listCapPhatTaiSan = new List<CapPhatTaiSanEntityModel>();

                var lstCapPhatTaiSan = context.CapPhatTaiSan.Where(x => x.NguoiSuDungId == parameter.EmployeeId && x.LoaiCapPhat == 1).ToList();

                var lstTaiSanId = lstCapPhatTaiSan.Select(x => x.TaiSanId).ToList();
                var lstAllTaiSan = context.TaiSan.Where(x => lstTaiSanId.Contains(x.TaiSanId)).ToList();

                var lstMucDichSuDung = context.Category.ToList();

                listCapPhatTaiSan = (from capphat in lstCapPhatTaiSan
                                     join taisan in lstAllTaiSan on capphat.TaiSanId equals taisan.TaiSanId
                                     select new CapPhatTaiSanEntityModel
                                     {
                                         CapPhatTaiSanId = capphat.CapPhatTaiSanId,
                                         NgayBatDau = capphat.NgayBatDau,
                                         NgayKetThuc = capphat.NgayKetThuc,
                                         MaTaiSan = taisan.MaTaiSan,
                                         TenTaiSan = taisan.TenTaiSan,
                                         MucDichSuDung = lstMucDichSuDung.FirstOrDefault(x => x.CategoryId == capphat.MucDichSuDungId)?.CategoryName,
                                         MoTa = taisan.MoTa,
                                         CreatedDate = capphat.CreatedDate
                                     }).OrderByDescending(x => x.CreatedDate).ToList();


                return new GetListCapPhatTaiSanResult()
                {
                    MessageCode = "Success",
                    StatusCode = HttpStatusCode.OK,
                    ListCapPhatTaiSan = listCapPhatTaiSan,
                    IsShowButton = isShowButton
                };
            }
            catch (Exception e)
            {
                return new GetListCapPhatTaiSanResult()
                {
                    MessageCode = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CapNhatLyDoPheDuyetOrTuChoiDeXuatNVResult CapNhatLyDoPheDuyetOrTuChoiDeXuatNV(CapNhatLyDoPheDuyetOrTuChoiDeXuatNVParameter parameter)
        {

            try
            {
                //Đề xuất tăng lương
                if (parameter.LoaiDeXuat == 1)
                {
                    var nvienTangLuong = context.DeXuatTangLuongNhanVien
                        .FirstOrDefault(x => x.DeXuatTangLuongNhanVienId == parameter.DeXuatNhanVienId);
                    if (nvienTangLuong == null)
                    {
                        return new CapNhatLyDoPheDuyetOrTuChoiDeXuatNVResult()
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Không tìm thấy nhân viên trong đề xuất"
                        };
                    }

                    nvienTangLuong.LyDo = parameter.GhiChu;
                    context.DeXuatTangLuongNhanVien.Update(nvienTangLuong);
                    context.SaveChanges();
                }
                //Đề xuất chức vụ
                if (parameter.LoaiDeXuat == 2)
                {
                    var nvienDoiChucVu = context.NhanVienDeXuatThayDoiChucVu
                        .FirstOrDefault(x => x.NhanVienDeXuatThayDoiChucVuId == parameter.DeXuatNhanVienId);
                    if (nvienDoiChucVu == null)
                    {
                        return new CapNhatLyDoPheDuyetOrTuChoiDeXuatNVResult()
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Không tìm thấy nhân viên trong đề xuất"
                        };
                    }

                    nvienDoiChucVu.LyDo = parameter.GhiChu;
                    nvienDoiChucVu.NghiaVu = parameter.NghiaVu;
                    context.NhanVienDeXuatThayDoiChucVu.Update(nvienDoiChucVu);
                    context.SaveChanges();
                }

                return new CapNhatLyDoPheDuyetOrTuChoiDeXuatNVResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Cập nhật thông tin thành công!"
                };
            }
            catch (Exception e)
            {
                return new CapNhatLyDoPheDuyetOrTuChoiDeXuatNVResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public CapNhatNgayApDungDeXuatResult CapNhatNgayApDungDeXuat(CapNhatNgayApDungDeXuatParameter parameter)
        {

            try
            {
                //Đề xuất tăng lương
                if (parameter.LoaiDeXuat == 1)
                {
                    var deXuatTangLuong = context.DeXuatTangLuong
                        .FirstOrDefault(x => x.DeXuatTangLuongId == parameter.DeXuatId);
                    if (deXuatTangLuong == null)
                    {
                        return new CapNhatNgayApDungDeXuatResult()
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Không tìm thấy nhân viên trong đề xuất"
                        };
                    }
                    deXuatTangLuong.NgayApDung = parameter.NgayApDung;
                    context.DeXuatTangLuong.Update(deXuatTangLuong);
                    context.SaveChanges();
                }
                //Đề xuất chức vụ
                if (parameter.LoaiDeXuat == 2)
                {
                    var deXuatChucVu = context.DeXuatThayDoiChucVu
                         .FirstOrDefault(x => x.DeXuatThayDoiChucVuId == parameter.DeXuatId);
                    if (deXuatChucVu == null)
                    {
                        return new CapNhatNgayApDungDeXuatResult()
                        {
                            StatusCode = HttpStatusCode.Forbidden,
                            Message = "Không tìm thấy nhân viên trong đề xuất"
                        };
                    }
                    deXuatChucVu.NgayApDung = parameter.NgayApDung;
                    context.DeXuatThayDoiChucVu.Update(deXuatChucVu);
                    context.SaveChanges();
                }

                return new CapNhatNgayApDungDeXuatResult
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Cập nhật thông tin thành công!"
                };
            }
            catch (Exception e)
            {
                return new CapNhatNgayApDungDeXuatResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }

        public TaoKyDanhGiaResult TaoKyDanhGia(TaoKyDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);

                if (folder == null)
                {
                    return new TaoKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        MessageCode = "Thư mục upload không tồn tại"
                    };
                }

                try
                {   
                    var strCode = string.Empty;
                    var date = DateTime.Now.ToString("yyyy");
                    var countKyDanhGiaDanhGia = context.KyDanhGia.Count() == 0 ? 0 : context.KyDanhGia.Max(x => x.KyDanhGiaId);
                    strCode = $"KDG" + date + "-" + (countKyDanhGiaDanhGia + 1);

                    var trangThaiMoiKyDanhGia = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 0).Value;

                    var trangThaiGanNguoiDanhGiaPB = GeneralList.GetTrangThais("PhongBanKyDanhGia").FirstOrDefault(x => x.Value == 1).Value;

                    var kyDanhGia = new KyDanhGia();
                    kyDanhGia.MaKyDanhGia = strCode;
                    kyDanhGia.TenKyDanhGia = parameter.KyDanhGia.TenKyDanhGia;
                    kyDanhGia.ThoiGianBatDau = parameter.KyDanhGia.ThoiGianBatDau;
                    kyDanhGia.ThoiGianKetThuc = parameter.KyDanhGia.ThoiGianKetThuc;
                    kyDanhGia.LyDo = parameter.KyDanhGia.LyDo;
                    kyDanhGia.TrangThaiDanhGia = trangThaiMoiKyDanhGia;
                    kyDanhGia.CreatedById = parameter.UserId;
                    kyDanhGia.CreatedDate = DateTime.Now;
                    context.KyDanhGia.Add(kyDanhGia);
                    context.SaveChanges();

                    //Phiếu + vị trí
                    var ListNoiDung = new List<NoiDungKyDanhGia>();
                    parameter.NoiDungKyDanhGia.ForEach(obj =>
                    {
                        var noiDungKyDanhGia = new NoiDungKyDanhGia();
                        noiDungKyDanhGia.KyDanhGiaId = kyDanhGia.KyDanhGiaId;
                        noiDungKyDanhGia.PhieuDanhGiaId = obj.PhieuDanhGiaId.Value;
                        noiDungKyDanhGia.PositionId = obj.PositionId;
                        noiDungKyDanhGia.CreatedById = parameter.UserId;
                        noiDungKyDanhGia.CreatedDate = DateTime.Now;
                        ListNoiDung.Add(noiDungKyDanhGia);
                    });
                    context.NoiDungKyDanhGia.AddRange(ListNoiDung);

                    var check = false;
                    var listAllPhongBan = context.Organization.ToList();
                    var listNhanVienKyDanhGia = new List<NhanVienKyDanhGia>();

                    var listPhongBanAddedId = parameter.NhanVienKyDanhGia.Select(x => x.OrganizationId).ToList();
                    //Thêm phòng ban tham gia kỳ đánh giá: NguoiDanhGiaId = NguoiDuocDanhGiaId = PositionId = Guid.Empty
                    parameter.NhanVienKyDanhGia.ForEach(obj =>
                    {
                        //Kiểm tra xem các phòng ban có bị lồng chưa nhau không (Phòng ban cấp trên chưa các phòng ban cấp dưới)

                        var phongBanInfor = listAllPhongBan.FirstOrDefault(x => x.OrganizationId == obj.OrganizationId);

                        //Lấy list phòng ban con của phòng
                        List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                        listGetAllChild = getOrganizationChildrenId(phongBanInfor.OrganizationId, listGetAllChild);

                        //Lấy listPhong ban cấp trên của phòng
                        List<Guid?> listGetAllParent = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp trên của nó
                        listGetAllParent = getOrganizationParentId(phongBanInfor.ParentId, listGetAllParent);

                        listPhongBanAddedId.ForEach(item =>
                        {
                            if (listGetAllChild.Contains(item))
                            {
                                check = true;
                            }
                            if (listGetAllParent.Contains(item))
                            {
                                check = true;
                            }
                        });

                        var nVienKyDanhGia = new NhanVienKyDanhGia();
                        nVienKyDanhGia.ParentId = null;
                        nVienKyDanhGia.Level = 0;
                        nVienKyDanhGia.KyDanhGiaId = kyDanhGia.KyDanhGiaId;
                        nVienKyDanhGia.NguoiDanhGiaId = obj.NguoiDanhGiaId.Value;
                        nVienKyDanhGia.NguoiDuocDanhGiaId = obj.NguoiDuocDanhGiaId.Value;
                        nVienKyDanhGia.QuyLuong = obj.QuyLuong.Value;
                        nVienKyDanhGia.XemLuong = true;
                        nVienKyDanhGia.OrganizationId = obj.OrganizationId.Value;
                        nVienKyDanhGia.RootOrgId = obj.OrganizationId.Value;
                        nVienKyDanhGia.PositionId = Guid.Empty;
                        nVienKyDanhGia.CreatedById = parameter.UserId;
                        nVienKyDanhGia.CreatedDate = DateTime.Now;
                        nVienKyDanhGia.TrangThai = trangThaiGanNguoiDanhGiaPB;
                        listNhanVienKyDanhGia.Add(nVienKyDanhGia);
                    });
                    if (check)
                    {
                        return new TaoKyDanhGiaResult()
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            Message = "Vui lòng kiểm tra lại các phòng ban đã thêm!"
                        };
                    }
                    context.NhanVienKyDanhGia.AddRange(listNhanVienKyDanhGia);

                    #region Thêm file

                    if (parameter.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        parameter.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = parameter.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = kyDanhGia.KyDanhGiaId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {
                            return new TaoKyDanhGiaResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    #endregion

                    context.SaveChanges();
                    trans.Commit();

                    return new TaoKyDanhGiaResult
                    {
                        KyDanhGiaId = kyDanhGia.KyDanhGiaId,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo kỳ đánh giá thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new TaoKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public DeleteKyDanhGiaResult DeleteKyDanhGia(DeleteKyDanhGiaParameter parameter)
        {
            try
            {
                var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                if (checkKyExsit == null)
                {
                    return new DeleteKyDanhGiaResult()
                    {
                        Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                if (checkKyExsit.TrangThaiDanhGia != 0)
                {
                    return new DeleteKyDanhGiaResult()
                    {
                        Message = "Kỳ đánh giá đang ở trạng thái khác mới, không thể xóa!",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                context.KyDanhGia.Remove(checkKyExsit);
                context.SaveChanges();

                return new DeleteKyDanhGiaResult()
                {
                    Message = "Xóa kỳ đánh giá thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new DeleteKyDanhGiaResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public KyDanhGiaDetailResult KyDanhGiaDetail(KyDanhGiaDetailParameter parameter)
        {
            try
            {
                #region check data
                var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                if (user == null)
                {
                    return new KyDanhGiaDetailResult
                    {
                        StatusCode = HttpStatusCode.BadRequest,
                        Message = "Người dùng không tồn tại trong hệ thống",
                    };
                }

                var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                if (checkKyExsit == null)
                {
                    return new KyDanhGiaDetailResult()
                    {
                        Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                //Lấy tên người tạo
                var userCreated = context.User.FirstOrDefault(x => x.UserId == checkKyExsit.CreatedById);
                if (userCreated == null)
                {
                    return new KyDanhGiaDetailResult()
                    {
                        Message = "Không tìm thấy người tạo kỳ đánh giá trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                #endregion

                #region kiểm tra trạng thái

                //Nếu ngày kết thúc < ngày hiện tại => chuyển trạng thái hoàn thành
                var now = DateTime.Now;
                if(checkKyExsit.ThoiGianKetThuc.Value.Date < now.Date)
                {
                    checkKyExsit.TrangThaiDanhGia = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 3).Value;
                    context.KyDanhGia.Update(checkKyExsit);
                    context.SaveChanges();
                }
                #endregion

                #region lấy thông tin cần thiết

                var listAllEmp = context.Employee.Where(x => x.Active == true).Select(x => new EmployeeEntityModel {
                       EmployeeId = x.EmployeeId,
                       EmployeeCode = x.EmployeeCode,
                       EmployeeCodeName = x.EmployeeCode + " - " + x.EmployeeName,
                       PositionId = x.PositionId,
                       OrganizationId = x.OrganizationId,
                }).ToList();

                //Lấy danh sách phòng ban 
                var listPhongBan = context.Organization.Where(x => x.Active == true).Select(x => new OrganizationEntityModel()
                {
                    OrganizationId = x.OrganizationId,
                    OrganizationName = x.OrganizationName,
                    OrganizationCode = x.OrganizationCode,
                    Level = x.Level,
                }).ToList();

                var listThanhVienPhongBan = context.ThanhVienPhongBan.ToList();
                //Lấy list trưởng bộ phận của phòng ban
                var listPhongBanId = listPhongBan.Select(x => x.OrganizationId).ToList();
                var listTruongBoPhan = listThanhVienPhongBan.Where(x => x.IsManager == 1 && listPhongBanId.Contains(x.OrganizationId)).ToList();

                //Lấy thông tin trưởng bộ phận 
                var listTruongBoPhanId = listTruongBoPhan.Select(x => x.EmployeeId).ToList();
                var listEmpInfor = listAllEmp.Where(x => listTruongBoPhanId.Contains(x.EmployeeId.Value)).ToList();
                listPhongBan.ForEach(item =>
                {
                    var obj = listTruongBoPhan.FirstOrDefault(y => y.OrganizationId == item.OrganizationId);
                    if (obj != null)
                    {
                        var nguoiPhuTrach = listEmpInfor.FirstOrDefault(x => x.EmployeeId == obj.EmployeeId);
                        item.NguoiPhuTrachId = obj.EmployeeId;
                        item.NguoiPhuTrachName = nguoiPhuTrach?.EmployeeCode + " - " + nguoiPhuTrach?.EmployeeName;
                    }
                });

                //Phiếu đnáh giá có hiệu lực
                var trangThaiHieuLucPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                var listPhieuDanhGia = context.PhieuDanhGia.Where(x => x.TrangThaiPhieuDanhGia == trangThaiHieuLucPhieuDanhGia).ToList();

                //Lấy thang điểm đánh giá
                var listPhieuDanhGiaId = listPhieuDanhGia.Select(x => x.ThangDiemDanhGiaId).ToList();
                var listThangDiemDanhGia = context.MucDanhGia.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();
                var listMucDanhGia = context.MucDanhGiaDanhGiaMapping.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();

                //lấy list trạng thái phòng ban kỳ đánh giá
                var listTrangThaiPhongBanKDG = GeneralList.GetTrangThais("PhongBanKyDanhGia").ToList();

                var listChucVu = context.Position.Where(x => x.Active == true).Select(x => new PositionModel()
                {
                    PositionId = x.PositionId,
                    PositionCode = x.PositionCode,
                    PositionName = x.PositionName
                }).ToList();

                //Lấy quỹ lương còn lại của năm
                var quyLuongInfor = context.QuyLuong.FirstOrDefault(x => x.Nam == checkKyExsit.ThoiGianKetThuc.Value.Year && x.Active == true);
                if (quyLuongInfor == null)
                {
                    return new KyDanhGiaDetailResult()
                    {
                        Message = "Chưa có cấu hình cho quỹ lương năm " + checkKyExsit.ThoiGianKetThuc.Value.Year + ".",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                var quyLuong = quyLuongInfor.QuyLuong1;
                var listKyNamHienTai = context.KyDanhGia.Where(x => x.ThoiGianKetThuc.Value.Year == DateTime.Now.Year && x.TrangThaiDanhGia == 3).Select(x => x.KyDanhGiaId).ToList(); //3: hoàn thành
                var deXuatTangLuongDaDuyetId = context.DeXuatTangLuong.Where(x => listKyNamHienTai.Contains(x.KyDanhGiaId.Value) && x.TrangThai == 3 && x.Active == true).Select(x => x.DeXuatTangLuongId).ToList();
                var tongSoLuongDaDuocPheDuyet = context.DeXuatTangLuongNhanVien.Where(x => deXuatTangLuongDaDuyetId.Contains(x.DeXuatTangLuongId) && x.TrangThai == 3 && x.Active == true).Sum(x => x.LuongDeXuat);
                var soTienQuyLuongConLai = quyLuong - tongSoLuongDaDuocPheDuyet;

                #endregion

                var kyDanhGia = new KyDanhGiaEntityModel();
                kyDanhGia.KyDanhGiaId = checkKyExsit.KyDanhGiaId;
                kyDanhGia.TenKyDanhGia = checkKyExsit.TenKyDanhGia;
                kyDanhGia.MaKyDanhGia = checkKyExsit.MaKyDanhGia;
                kyDanhGia.ThoiGianBatDau = checkKyExsit.ThoiGianBatDau;
                kyDanhGia.ThoiGianKetThuc = checkKyExsit.ThoiGianKetThuc;
                kyDanhGia.LyDo = checkKyExsit.LyDo;
                kyDanhGia.TrangThaiDanhGia = checkKyExsit.TrangThaiDanhGia;
                kyDanhGia.CreatedDate = checkKyExsit.CreatedDate;
                kyDanhGia.CreatedById = checkKyExsit.CreatedById;
                kyDanhGia.NguoiTaoName = listAllEmp.FirstOrDefault(x => x.EmployeeId == userCreated.EmployeeId)?.EmployeeName;
              
                var listCauHinhPhieuDanhGia = context.NoiDungKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId)
                    .Select(x => new NoiDungKyDanhGiaEntityModel()
                    {
                        NoiDungKyDanhGiaId = x.NoiDungKyDanhGiaId,
                        KyDanhGiaId = x.KyDanhGiaId,
                        PhieuDanhGiaId = x.PhieuDanhGiaId,
                        PositionId = x.PositionId
                    }).ToList();

                //Lấy ra phòng ban kỳ đánh giá
                var listNhanVienKyDanhGia = context.NhanVienKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId)
                    .Select(x => new NhanVienKyDanhGiaEntityModel()
                    {
                        NhanVienKyDanhGiaId = x.NhanVienKyDanhGiaId,
                        ParentId = x.ParentId,
                        Level = x.Level,
                        KyDanhGiaId = x.KyDanhGiaId,
                        NguoiDanhGiaId = x.NguoiDanhGiaId,
                        NguoiDuocDanhGiaId = x.NguoiDuocDanhGiaId,
                        OrganizationId = x.OrganizationId,
                        OrganizationName = listPhongBan.FirstOrDefault(y => y.OrganizationId == x.OrganizationId).OrganizationName,
                        RootOrgId = x.RootOrgId,
                        QuyLuong = x.QuyLuong,
                        XemLuong = x.XemLuong,
                        TrangThaiPBValue = x.TrangThai.Value,
                        TrangThaiPBName = listTrangThaiPhongBanKDG.FirstOrDefault(y => y.Value == x.TrangThai.Value).Name,
                        isEmp = true,
                    }).OrderBy(x => x.Level).ToList();

                //List mucDanhgia (A,B,C,D...)
                var mucDanhGiaCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "MUCDANHGIA").CategoryTypeId;
                var listMucDanhGiaName = context.Category.Where(x => x.CategoryTypeId == mucDanhGiaCategoryTypeId).ToList();

                var listMucDanhGiaApDung = listMucDanhGia
                    .Select(x => new MucDanhGiaDanhGiaMappingEntityModel
                    {
                        MucDanhGiaMasterDataName = listMucDanhGiaName.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName,
                        mucDanhGiaMasterDataNameCustom = listMucDanhGiaName
                            .FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName + "( " + x.DiemTu + " - " + x.DiemDen + " )",
                        DiemTu = x.DiemTu,
                        DiemDen = x.DiemDen,
                        MucDanhGiaId = x.MucDanhGiaId,
                        MucDanhGiaDanhGiaMappingId = x.MucDanhGiaDanhGiaMappingId,
                        MucDanhGiaMasterDataId = x.MucDanhGiaMasterDataId,
                    }).ToList();

                #region Lấy dách file đinh kèm 
                var objectType = "KYDANHGIA";
                var folder = context.Folder.FirstOrDefault(x => x.FolderType == objectType);

                var listFileResult = context.FileInFolder
                                .Where(x => x.ObjectNumber == parameter.KyDanhGiaId && x.FolderId == folder.FolderId).Select(y =>
                                    new FileInFolderEntityModel
                                    {
                                        Size = y.Size,
                                        ObjectId = y.ObjectId,
                                        Active = y.Active,
                                        FileExtension = y.FileExtension,
                                        FileInFolderId = y.FileInFolderId,
                                        FileName = y.FileName,
                                        FolderId = y.FolderId,
                                        ObjectType = y.ObjectType,
                                        ObjectNumber = y.ObjectNumber,
                                        CreatedById = y.CreatedById,
                                        CreatedDate = y.CreatedDate,
                                        UpdatedById = y.UpdatedById,
                                        UpdatedDate = y.UpdatedDate
                                    }).OrderBy(z => z.CreatedDate).ToList();

                listFileResult.ForEach(x =>
                {
                    x.UploadByName = context.User.FirstOrDefault(u => u.UserId == x.CreatedById)?.UserName;
                });
                #endregion

                return new KyDanhGiaDetailResult()
                {
                    Message = "",
                    StatusCode = HttpStatusCode.OK,
                    ListPhieuDanhGia = listPhieuDanhGia,
                    ListChucVu = listChucVu,
                    ListPhongBan = listPhongBan,
                    ListCauHinhPhieuDanhGia = listCauHinhPhieuDanhGia,
                    ListNhanVienKyDanhGia = listNhanVienKyDanhGia,
                    KyDanhGia = kyDanhGia,
                    ListFileInFolder = listFileResult,
                    ListThangDiemDanhGia = listThangDiemDanhGia,
                    ListMucDanhGia = listMucDanhGia,
                    SoTienQuyLuongConLai = soTienQuyLuongConLai,
                };
            }
            catch (Exception e)
            {
                return new KyDanhGiaDetailResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public XoaPhieuDanhGiaCuaKyResult XoaPhieuDanhGiaCuaKy(XoaPhieuDanhGiaCuaKyParameter parameter)
        {
            try
            {
                var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                if (checkKyExsit == null)
                {
                    return new XoaPhieuDanhGiaCuaKyResult()
                    {
                        Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                var listCauHinhPhieu = context.NoiDungKyDanhGia.
                    Where(x => x.PhieuDanhGiaId == parameter.PhieuDanhGiaId && x.KyDanhGiaId == parameter.KyDanhGiaId).ToList();
                context.NoiDungKyDanhGia.RemoveRange(listCauHinhPhieu);
                context.SaveChanges();

                return new XoaPhieuDanhGiaCuaKyResult()
                {
                    Message = "Xóa cấu hình phiếu đánh giá thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new XoaPhieuDanhGiaCuaKyResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public LuuPhieuDanhGiaCuaKyResult LuuPhieuDanhGiaCuaKy(LuuPhieuDanhGiaCuaKyParameter parameter)
        {
            try
            {
                var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                if (checkKyExsit == null)
                {
                    return new LuuPhieuDanhGiaCuaKyResult()
                    {
                        Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }

                //Xóa các nội dung cũ
                var listNoiDungKy = context.NoiDungKyDanhGia
                    .Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId).ToList();
                context.NoiDungKyDanhGia.RemoveRange(listNoiDungKy);

                //Phiếu + vị trí
                var ListNoiDung = new List<NoiDungKyDanhGia>();
                parameter.NoiDungKyDanhGia.ForEach(obj =>
                {
                    var noiDungKyDanhGia = new NoiDungKyDanhGia();
                    noiDungKyDanhGia.KyDanhGiaId = parameter.KyDanhGiaId;
                    noiDungKyDanhGia.PhieuDanhGiaId = obj.PhieuDanhGiaId.Value;
                    noiDungKyDanhGia.PositionId = obj.PositionId;
                    noiDungKyDanhGia.CreatedById = parameter.UserId;
                    noiDungKyDanhGia.CreatedDate = DateTime.Now;
                    ListNoiDung.Add(noiDungKyDanhGia);
                });

                context.NoiDungKyDanhGia.AddRange(ListNoiDung);
                context.SaveChanges();

                return new LuuPhieuDanhGiaCuaKyResult()
                {
                    Message = "Lưu cấu hình phiếu đánh giá thành công.",
                    StatusCode = HttpStatusCode.OK,
                };
            }
            catch (Exception e)
            {
                return new LuuPhieuDanhGiaCuaKyResult()
                {
                    Message = e.Message,
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
        }

        public CapNhatKyDanhGiaResult CapNhatKyDanhGia(CapNhatKyDanhGiaParameter parameter)
        {
            var folder = context.Folder.FirstOrDefault(x => x.FolderType == parameter.FolderType);
            if (folder == null)
            {
                return new CapNhatKyDanhGiaResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    MessageCode = "Thư mục upload không tồn tại"
                };
            }
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGia.KyDanhGiaId);
                    if (checkKyExsit == null)
                    {
                        return new CapNhatKyDanhGiaResult()
                        {
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    checkKyExsit.TenKyDanhGia = parameter.KyDanhGia.TenKyDanhGia;
                    checkKyExsit.ThoiGianBatDau = parameter.KyDanhGia.ThoiGianBatDau;
                    checkKyExsit.ThoiGianKetThuc = parameter.KyDanhGia.ThoiGianKetThuc;
                    checkKyExsit.LyDo = parameter.KyDanhGia.LyDo;
                    checkKyExsit.TrangThaiDanhGia = parameter.KyDanhGia.TrangThaiDanhGia;
                    checkKyExsit.UpdatedById = parameter.UserId;
                    checkKyExsit.UpdatedDate = DateTime.Now;
                    var trangThaiHoanThanh = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 3).Value;
                    var trangThaiDangThucHien = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 2).Value;
                    if (checkKyExsit.TrangThaiDanhGia == trangThaiHoanThanh)
                    {
                        if (parameter.KyDanhGia.ThoiGianKetThuc.Value.Date < DateTime.Now.Date)
                        {
                            checkKyExsit.TrangThaiDanhGia = trangThaiDangThucHien;
                        }
                    }
                    context.KyDanhGia.Update(checkKyExsit);
                    context.SaveChanges();

                    #region Thêm file
                    if (parameter.ListFile?.Count > 0)
                    {
                        var isSave = true;
                        parameter.ListFile?.ForEach(item =>
                        {
                            if (folder == null)
                            {
                                isSave = false;
                            }

                            var folderName = ConvertFolderUrl(folder.Url);
                            var webRootPath = hostingEnvironment.WebRootPath;
                            var newPath = Path.Combine(webRootPath, folderName);

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }

                            if (isSave)
                            {
                                var file = new FileInFolder()
                                {
                                    Active = true,
                                    CreatedById = parameter.UserId,
                                    CreatedDate = DateTime.Now,
                                    UpdatedById = parameter.UserId,
                                    UpdatedDate = DateTime.Now,
                                    FileInFolderId = Guid.NewGuid(),
                                    FileName = $"{item.FileInFolder.FileName}_{Guid.NewGuid()}",
                                    FolderId = folder.FolderId,
                                    ObjectNumber = checkKyExsit.KyDanhGiaId,
                                    ObjectType = item.FileInFolder.ObjectType,
                                    Size = item.FileInFolder.Size,
                                    FileExtension = item.FileSave.FileName.Substring(
                                    item.FileSave.FileName.LastIndexOf(".", StringComparison.Ordinal) + 1),
                                };

                                context.FileInFolder.Add(file);

                                var fileName = $"{file.FileName}.{file.FileExtension}";
                                var fullPath = Path.Combine(newPath, fileName);
                                using (var stream = new FileStream(fullPath, FileMode.Create))
                                {
                                    item.FileSave.CopyTo(stream);
                                }

                            }
                        });

                        if (!isSave)
                        {
                            return new CapNhatKyDanhGiaResult()
                            {
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Bạn phải cấu hình thư mục để lưu"
                            };
                        }
                        context.SaveChanges();
                    }

                    #endregion

                    context.SaveChanges();
                    trans.Commit();

                    return new CapNhatKyDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo kỳ đánh giá thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new CapNhatKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public XoaPhongBanKyDanhGiaResult XoaPhongBanKyDanhGia(XoaPhongBanKyDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                    if (checkKyExsit == null)
                    {
                        return new XoaPhongBanKyDanhGiaResult()
                        {
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }

                    //Xóa phòng ban cùng cấp và cấp dưới
                    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                    List<Guid?> listGetAllChild = new List<Guid?>();
                    listGetAllChild.Add(parameter.OrganizationId);
                    listGetAllChild = getOrganizationChildrenId(parameter.OrganizationId, listGetAllChild);

                    var listNVPhongBanCuaKyDanhGia = context.NhanVienKyDanhGia
                        .Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId && listGetAllChild.Contains(x.OrganizationId)).ToList();
                    context.NhanVienKyDanhGia.RemoveRange(listNVPhongBanCuaKyDanhGia);
                    context.SaveChanges();
                    trans.Commit();

                    return new XoaPhongBanKyDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Xóa phòng ban thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new XoaPhongBanKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public CreateOrAddPhongBanKyDanhGiaResult CreateOrAddPhongBanKyDanhGia(CreateOrAddPhongBanKyDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                    if (checkKyExsit == null)
                    {
                        return new CreateOrAddPhongBanKyDanhGiaResult()
                        {
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var trangThaiGanNguoiDanhGiaPB = GeneralList.GetTrangThais("PhongBanKyDanhGia").FirstOrDefault(x => x.Value == 1).Value;

                    var nVienKyDanhGia = context.NhanVienKyDanhGia
                            .FirstOrDefault(x => x.OrganizationId == parameter.OrganizationId
                                                && x.KyDanhGiaId == parameter.KyDanhGiaId
                                                && x.NguoiDuocDanhGiaId == Guid.Empty
                                                && x.NguoiDanhGiaId == Guid.Empty);
                    //Tạo mới => kiểm tra xem phòng ban mới thêm có con hoặc là con của phòng ban đã được chọn hay không.
                    if (nVienKyDanhGia == null)
                    {
                        var phongBanInfor = context.Organization.FirstOrDefault(x => x.OrganizationId == parameter.OrganizationId);

                        //Lấy list phòng ban con của phòng
                        List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
                        listGetAllChild = getOrganizationChildrenId(parameter.OrganizationId, listGetAllChild);

                        //Lấy listPhong ban cấp trên của phòng
                        List<Guid?> listGetAllParent = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp trên của nó
                        listGetAllParent = getOrganizationParentId(phongBanInfor.ParentId, listGetAllParent);


                        //Lấy list các phòng ban đã add trong kỳ đánh giá
                        var listPhongBanAddedId = context.NhanVienKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId
                                                    && x.NguoiDanhGiaId == Guid.Empty && x.NguoiDuocDanhGiaId == Guid.Empty)
                                                    .Select(x => x.OrganizationId).ToList();
                        var check1 = false;
                        var check2 = false;
                        listPhongBanAddedId.ForEach(item =>
                        {
                            if (listGetAllChild.Contains(item))
                            {
                                check1 = true;
                            }
                            if (listGetAllParent.Contains(item))
                            {
                                check2 = true;
                            }
                        });
                        if(check1 == true)
                        {
                            return new CreateOrAddPhongBanKyDanhGiaResult()
                            {
                                Message = "Phòng ban đang chọn hiện đã có phòng ban cấp dưới tham gia!",
                                StatusCode = HttpStatusCode.ExpectationFailed,
                            };
                        }

                        if (check2 == true)
                        {
                            return new CreateOrAddPhongBanKyDanhGiaResult()
                            {
                                Message = "Phòng ban đang chọn hiện đã có phòng ban cấp trên tham gia!",
                                StatusCode = HttpStatusCode.ExpectationFailed,
                            };
                        }

                        var nVienKyDanhGiaAdd = new NhanVienKyDanhGia();
                        nVienKyDanhGiaAdd.ParentId = null;
                        nVienKyDanhGiaAdd.Level = 0;
                        nVienKyDanhGiaAdd.KyDanhGiaId = parameter.KyDanhGiaId;
                        nVienKyDanhGiaAdd.NguoiDanhGiaId = Guid.Empty;
                        nVienKyDanhGiaAdd.NguoiDuocDanhGiaId = Guid.Empty;
                        nVienKyDanhGiaAdd.QuyLuong = parameter.QuyLuong.Value;
                        nVienKyDanhGiaAdd.XemLuong = true;
                        nVienKyDanhGiaAdd.OrganizationId = parameter.OrganizationId.Value;
                        nVienKyDanhGiaAdd.RootOrgId = parameter.OrganizationId.Value;
                        nVienKyDanhGiaAdd.TrangThai = trangThaiGanNguoiDanhGiaPB;
                        nVienKyDanhGiaAdd.CreatedById = parameter.UserId;
                        nVienKyDanhGiaAdd.CreatedDate = DateTime.Now;
                        context.NhanVienKyDanhGia.Add(nVienKyDanhGiaAdd);
                        context.SaveChanges();
                    }
                    //Cập nhật
                    else
                    {
                        nVienKyDanhGia.ParentId = null;
                        nVienKyDanhGia.Level = 0;
                        nVienKyDanhGia.KyDanhGiaId = parameter.KyDanhGiaId;
                        nVienKyDanhGia.NguoiDanhGiaId = Guid.Empty;
                        nVienKyDanhGia.NguoiDuocDanhGiaId = Guid.Empty;
                        nVienKyDanhGia.QuyLuong = parameter.QuyLuong.Value;
                        nVienKyDanhGia.XemLuong = true;
                        nVienKyDanhGia.OrganizationId = parameter.OrganizationId.Value;
                        nVienKyDanhGia.RootOrgId = parameter.OrganizationId.Value;
                        nVienKyDanhGia.TrangThai = trangThaiGanNguoiDanhGiaPB;
                        nVienKyDanhGia.CreatedById = parameter.UserId;
                        nVienKyDanhGia.CreatedDate = DateTime.Now;
                        context.NhanVienKyDanhGia.Update(nVienKyDanhGia);
                    }
                    context.SaveChanges();
                    trans.Commit();

                    //Trả về id của phòng ban đó
                    var nhanVienKyDanhGiaId = context.NhanVienKyDanhGia.FirstOrDefault(x => 
                            x.KyDanhGiaId == parameter.KyDanhGiaId
                            && x.OrganizationId == parameter.OrganizationId
                            && x.NguoiDuocDanhGiaId == Guid.Empty
                            && x.NguoiDanhGiaId == Guid.Empty)?.NhanVienKyDanhGiaId;

                    return new CreateOrAddPhongBanKyDanhGiaResult
                    {
                        NhanVienKyDanhGiaId = nhanVienKyDanhGiaId.Value,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Thêm phòng ban thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new CreateOrAddPhongBanKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public HoanThanhkyDanhGiaResult HoanThanhkyDanhGia(HoanThanhkyDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                    if (checkKyExsit == null)
                    {
                        return new HoanThanhkyDanhGiaResult()
                        {
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }

                    if (DateTime.Now.Date < checkKyExsit.ThoiGianBatDau.Value.Date)
                    {
                        checkKyExsit.TrangThaiDanhGia = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                    }
                    else if (DateTime.Now.Date >= checkKyExsit.ThoiGianBatDau.Value.Date && DateTime.Now.Date <= checkKyExsit.ThoiGianKetThuc.Value.Date)
                    {
                        checkKyExsit.TrangThaiDanhGia = GeneralList.GetTrangThais("TrangThaiKyDanhGia").FirstOrDefault(x => x.Value == 2).Value;
                    }
                    context.KyDanhGia.Update(checkKyExsit);
                    context.SaveChanges();
                    trans.Commit();
                    return new HoanThanhkyDanhGiaResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Cập nhật trạng thái thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new HoanThanhkyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        private List<NhanVienKyDanhGia> LuuNhanVienKyDanhGia(List<Employee> listEmp, List<Organization> listAllOrganization, List<NhanVienKyDanhGia> listNhanVienKyDanhGia,
            Guid? nguoiDuocDanhGiaId, int kyDanhGiaId, Guid userId, Guid nguoiDanhGiaId, decimal? quyLuong, List<Guid?> listPositionKyDanhGia)
        {
            var empNguoiDuocDanhGia = listEmp.FirstOrDefault(x => x.EmployeeId == nguoiDuocDanhGiaId);
            if(listPositionKyDanhGia.Contains(empNguoiDuocDanhGia.PositionId)){
                var nVienKyDanhGia = new NhanVienKyDanhGia();
                nVienKyDanhGia.ParentId = null;
                nVienKyDanhGia.Level = 0;
                nVienKyDanhGia.KyDanhGiaId = kyDanhGiaId;
                nVienKyDanhGia.NguoiDanhGiaId = nguoiDanhGiaId;
                nVienKyDanhGia.NguoiDuocDanhGiaId = nguoiDuocDanhGiaId.Value;
                nVienKyDanhGia.QuyLuong = quyLuong.Value;
                nVienKyDanhGia.XemLuong = true;
                nVienKyDanhGia.OrganizationId = empNguoiDuocDanhGia.OrganizationId.Value;
                nVienKyDanhGia.PositionId = empNguoiDuocDanhGia.PositionId;
                nVienKyDanhGia.CreatedById = userId;
                nVienKyDanhGia.CreatedDate = DateTime.Now;
                listNhanVienKyDanhGia.Add(nVienKyDanhGia);
            }

            //Lấy list phòng ban con của trưởng phòng
            List<Guid?> listGetAllChild = new List<Guid?>();    //List phòng ban: chính nó và các phòng ban cấp dưới của nó
            if (empNguoiDuocDanhGia.OrganizationId != null)
            {
                listGetAllChild.Add(empNguoiDuocDanhGia.OrganizationId.Value);
                listGetAllChild = getOrganizationChildrenId(empNguoiDuocDanhGia.OrganizationId.Value, listGetAllChild);
            }
            //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
            var listEmployeeCapDuoi = listEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId)))
            .ToList();
            listEmployeeCapDuoi = listEmployeeCapDuoi.Where(x => listPositionKyDanhGia.Contains(x.PositionId)).ToList();
            listEmployeeCapDuoi.ForEach(item =>
            {
                if (item.EmployeeId != nguoiDuocDanhGiaId)//Trưởng phòng đã được add trong list ở trên
                {
                    var newVienKyDanhGia = new NhanVienKyDanhGia();
                    newVienKyDanhGia.ParentId = null;
                    newVienKyDanhGia.Level = listAllOrganization.FirstOrDefault(x => x.OrganizationId == item.OrganizationId.Value).Level - 1; //Cấp trưởng phòng là 0 => nhỏ hơn sơ đồ tổ chức 1 level
                    newVienKyDanhGia.KyDanhGiaId = kyDanhGiaId;
                    newVienKyDanhGia.NguoiDanhGiaId = Guid.Empty;//Chưa được gán người đánh giá
                    newVienKyDanhGia.NguoiDuocDanhGiaId = item.EmployeeId;
                    newVienKyDanhGia.QuyLuong = 0;
                    newVienKyDanhGia.XemLuong = false;
                    newVienKyDanhGia.OrganizationId = item.OrganizationId.Value;
                    newVienKyDanhGia.PositionId = item.PositionId;
                    newVienKyDanhGia.CreatedById = userId;
                    newVienKyDanhGia.CreatedDate = DateTime.Now;
                    listNhanVienKyDanhGia.Add(newVienKyDanhGia);
                }
            });
            //Add phòng ban
            listGetAllChild.ForEach(item =>
            {
                var newVienKyDanhGia = new NhanVienKyDanhGia();
                newVienKyDanhGia.ParentId = null;
                newVienKyDanhGia.Level = listAllOrganization.FirstOrDefault(x => x.OrganizationId == item).Level - 1;
                newVienKyDanhGia.KyDanhGiaId = kyDanhGiaId;
                newVienKyDanhGia.NguoiDanhGiaId = Guid.Empty;
                newVienKyDanhGia.NguoiDuocDanhGiaId = Guid.Empty;
                newVienKyDanhGia.QuyLuong = 0;
                newVienKyDanhGia.XemLuong = false;
                newVienKyDanhGia.OrganizationId = item.Value;
                newVienKyDanhGia.PositionId = Guid.Empty;
                newVienKyDanhGia.CreatedById = userId;
                newVienKyDanhGia.CreatedDate = DateTime.Now;
                listNhanVienKyDanhGia.Add(newVienKyDanhGia);
            });
            return listNhanVienKyDanhGia;
        }

        public UpdateNguoiDanhGiaNhanVienKyResult UpdateNguoiDanhGiaNhanVienKy(UpdateNguoiDanhGiaNhanVienKyParameter parameter)
        {
            var user = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
            if(user == null)
            {
                return new UpdateNguoiDanhGiaNhanVienKyResult()
                {
                    Message = "Tài khoản đăng nhập không tồn tại trên hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var checkKyExsit = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                    if (checkKyExsit == null)
                    {
                        return new UpdateNguoiDanhGiaNhanVienKyResult()
                        {
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }

                    var listUpdateNhanVienKyDanhGia = new List<NhanVienKyDanhGia>();
                    if (parameter.ListNVKyDanhGia.Count > 0)
                    {
                        parameter.ListNVKyDanhGia.ForEach(item =>
                        {
                            var newObj = new NhanVienKyDanhGia();
                            newObj.ParentId = item.ParentId;
                            newObj.RootOrgId = item.RootOrgId; // phòng ban root
                            newObj.Level = item.Level.Value;
                            newObj.KyDanhGiaId = item.KyDanhGiaId.Value;
                            newObj.NguoiDanhGiaId = item.NguoiDanhGiaId == null ? Guid.Empty : item.NguoiDanhGiaId.Value;
                            newObj.NguoiDuocDanhGiaId = item.NguoiDuocDanhGiaId.Value;
                            newObj.OrganizationId = item.OrganizationId.Value;
                            newObj.PositionId = item.PositionId.Value;
                            newObj.XemLuong = item.XemLuong == true ? true : false;
                            newObj.TrangThai = item.TrangThai.Value;
                            newObj.CreatedById = parameter.UserId;
                            newObj.CreatedDate = DateTime.Now;
                            listUpdateNhanVienKyDanhGia.Add(newObj);
                        });
                    }
                    context.NhanVienKyDanhGia.AddRange(listUpdateNhanVienKyDanhGia);
                    //Cập nhật trạng thái phòng ban 
                    var phongBanKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId
                                                    && x.NguoiDuocDanhGiaId == Guid.Empty
                                                    && x.NguoiDanhGiaId == Guid.Empty
                                                    && x.OrganizationId == parameter.ListNVKyDanhGia.First().RootOrgId);
                    phongBanKyDanhGia.TrangThai = GeneralList.GetTrangThais("PhongBanKyDanhGia").FirstOrDefault(x => x.Value == 2).Value;
                    context.NhanVienKyDanhGia.Update(phongBanKyDanhGia);
                    context.SaveChanges();
                    trans.Commit();
                    return new UpdateNguoiDanhGiaNhanVienKyResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Gán nhân viên thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new UpdateNguoiDanhGiaNhanVienKyResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        private void UpdateTrangThaiKeHoachOt(KeHoachOt keHoachOtCheck, List<KeHoachOtPhongBan> listKeHoachOtPhongBan,
            List<CacBuocApDung> listCacBuocApDung, QuyTrinh quyTrinhDangKyOT, CauHinhQuyTrinh cauHinhQuyTrinhDangKyOT,
            CacBuocQuyTrinh buoc1, Guid UserId,
            out bool isContinue, out List<CacBuocApDung> listNewCacBuocApDung, out List<Note> listNewNote)
        {
            isContinue = false;
            listNewCacBuocApDung = new List<CacBuocApDung>();
            listNewNote = new List<Note>();

            var tuNgay = keHoachOtCheck.NgayBatDau.Value.Date.Add(keHoachOtCheck.GioBatDau.Value);
            var denNgay = keHoachOtCheck.NgayKetThuc.Value.Date.Add(keHoachOtCheck.GioKetThuc.Value);

            //Nếu kế hoạch có trạng thái là Chờ phê duyệt và đã hết hạn phê duyệt kế hoạch thì
            //chuyển trạng thái sang Hết hạn phê duyệt kế hoạch OT (6)
            if (keHoachOtCheck.HanPheDuyetKeHoach <= DateTime.Now && keHoachOtCheck.TrangThai == 2)
            {
                keHoachOtCheck.TrangThai = 10;
                context.KeHoachOt.Update(keHoachOtCheck);
                isContinue = true;
                return;
            }

            //Nếu kế hoạch có trạng thái Đăng ký OT (3) và chưa hết Thời hạn phê duyệt đăng ký OT thì
            //chuyển trạng thái sang Chờ phê duyệt đăng ký OT (4)
            if (keHoachOtCheck.HanDangKy <= DateTime.Now && keHoachOtCheck.TrangThai == 3)
            {
                keHoachOtCheck.TrangThai = 4;
                context.KeHoachOt.Update(keHoachOtCheck);

                //Chuyển các phòng ban của kế hoạch về trạng thái chờ phê duyệt: 2
                var listUpdateStatuPhongBanOT = listKeHoachOtPhongBan
                    .Where(x => x.KeHoachOtId == keHoachOtCheck.KeHoachOtId).ToList();
                listUpdateStatuPhongBanOT.ForEach(item => { item.TrangThai = 2; });
                context.KeHoachOtPhongBan.UpdateRange(listUpdateStatuPhongBanOT);

                int count;
                //Áp dụng cho id là kiểu int
                count = listCacBuocApDung.Count(x => x.ObjectNumber == keHoachOtCheck.KeHoachOtId &&
                                                         x.DoiTuongApDung == 13);
                if (count == 0)
                {
                    #region Đăng ký quy trình

                    var cacBuocApDung = new CacBuocApDung();
                    cacBuocApDung.Id = Guid.NewGuid();
                    cacBuocApDung.ObjectId = Guid.Empty;
                    cacBuocApDung.DoiTuongApDung = 13;
                    cacBuocApDung.QuyTrinhId = quyTrinhDangKyOT.Id;
                    cacBuocApDung.CauHinhQuyTrinhId = cauHinhQuyTrinhDangKyOT.Id;
                    cacBuocApDung.CacBuocQuyTrinhId = buoc1.Id;
                    cacBuocApDung.Stt = buoc1.Stt;
                    cacBuocApDung.LoaiPheDuyet = buoc1.LoaiPheDuyet;
                    cacBuocApDung.TrangThai = 0;
                    cacBuocApDung.ObjectNumber = keHoachOtCheck.KeHoachOtId;

                    //Thêm ghi chú
                    Note note = new Note();
                    note.NoteId = Guid.NewGuid();
                    note.ObjectId = Guid.Empty;
                    note.ObjectType = "DKOT";
                    note.Type = "ADD";
                    note.Active = true;
                    note.CreatedById = UserId;
                    note.CreatedDate = DateTime.Now;
                    note.NoteTitle = "Đã thêm ghi chú";
                    note.ObjectNumber = keHoachOtCheck.KeHoachOtId;
                    note.Description = "Đã gửi phê duyệt thành công";

                    listNewCacBuocApDung.Add(cacBuocApDung);
                    listNewNote.Add(note);

                    #endregion
                }
            }

            //Nếu kế hoạch có trạng thái Chờ phê duyệt đăng ký (4) và đã hết hạn Phê duyệt đăng ký OT thì
            //chuyển trạng thái sang Hết hạn phê duyệt đăng ký OT (11)
            if (keHoachOtCheck.HanPheDuyetDangKy < DateTime.Now && keHoachOtCheck.TrangThai == 4)
            {
                keHoachOtCheck.TrangThai = 11;
                context.KeHoachOt.Update(keHoachOtCheck);
                isContinue = true;
                return;
            }

            //Nếu kế hoạch có trạng thái là Chờ phê duyệt đăng ký OT (5) và
            //thời điểm hiện tại nằm trong khoảng (Từ ngày -> Đến ngày) thì
            //chuyển trạng thái sang Đang thực hiện (6)
            if (keHoachOtCheck.TrangThai == 5 &&
                (tuNgay <= DateTime.Now && denNgay >= DateTime.Now))
            {
                keHoachOtCheck.TrangThai = 6;
                context.KeHoachOt.Update(keHoachOtCheck);
            }

            // check xem kế hoạch OT có đang lớn hơn thời gian thực hiện để chuyển trạng thái sang Hoàn thành (7)
            if ((keHoachOtCheck.TrangThai == 6 || keHoachOtCheck.TrangThai == 5) &&
                (denNgay < DateTime.Now))
            {
                keHoachOtCheck.TrangThai = 7;
                context.KeHoachOt.Update(keHoachOtCheck);
            }
        }

        public TaoPhieuTuDanhGiaNhanVienResult TaoPhieuTuDanhGiaNhanVien(TaoPhieuTuDanhGiaNhanVienParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var nhanVienKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.NhanVienKyDanhGiaId == parameter.NhanVienKyDanhGiaId);
                    if (nhanVienKyDanhGia == null)
                    {
                        return new TaoPhieuTuDanhGiaNhanVienResult()
                        {
                            Message = "Nhân viên không tồn tại trong kỳ đánh giá!",
                            StatusCode = HttpStatusCode.ExpectationFailed,
                        };
                    }
                    var danhGiaNhanVien = context.DanhGiaNhanVien.FirstOrDefault(x => x.NhanVienKyDanhGiaId == parameter.NhanVienKyDanhGiaId);
                    if (danhGiaNhanVien != null)
                    {
                        return new TaoPhieuTuDanhGiaNhanVienResult
                        {
                            DanhGiaNhanVienId = danhGiaNhanVien.DanhGiaNhanVienId,
                            StatusCode = HttpStatusCode.OK,
                            Message = ""
                        };
                    }

                    var phieuTuDanhGia = new DanhGiaNhanVien();
                    phieuTuDanhGia.NhanVienKyDanhGiaId = parameter.NhanVienKyDanhGiaId;
                    phieuTuDanhGia.OrganizationId = nhanVienKyDanhGia.OrganizationId;
                    phieuTuDanhGia.PositionId = nhanVienKyDanhGia.PositionId;
                    phieuTuDanhGia.TrangThaiId = GeneralList.GetTrangThais("TrangThaiTuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                    phieuTuDanhGia.MucLuongCu = CommonHelper.GetMucLuongHienTaiByEmployeeId(context, nhanVienKyDanhGia.NguoiDuocDanhGiaId);
                    phieuTuDanhGia.MucLuongDeXuatQuanLy = null;
                    phieuTuDanhGia.MucLuongDeXuatTruongPhong = null;
                    context.DanhGiaNhanVien.Add(phieuTuDanhGia);
                    context.SaveChanges();

                    var kyDanhGia = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == nhanVienKyDanhGia.KyDanhGiaId);
                    var noiDungKyDanhGia = context.NoiDungKyDanhGia
                        .FirstOrDefault(x => x.KyDanhGiaId == kyDanhGia.KyDanhGiaId && x.PositionId == phieuTuDanhGia.PositionId);
                    var phieuDanhGia = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == noiDungKyDanhGia.PhieuDanhGiaId);
                    //Lấy các câu hỏi của phiếu
                    var listCauHoi = context.CauHoiPhieuDanhGiaMapping.Where(x => x.PhieuDanhGiaId == phieuDanhGia.PhieuDanhGiaId).ToList();
                    var listChiTietDanhGiaNhanVien = new List<ChiTietDanhGiaNhanVien>();
                    //Tạo câu tl trống cho nhân viên
                    listCauHoi.ForEach(item =>
                    {
                        var newChiTietDanhGiaNhanVien = new ChiTietDanhGiaNhanVien();
                        newChiTietDanhGiaNhanVien.DanhGiaNhanVienId = phieuTuDanhGia.DanhGiaNhanVienId;
                        newChiTietDanhGiaNhanVien.NguoiDanhGia = item.NguoiDanhGia;
                        newChiTietDanhGiaNhanVien.CauHoiPhieuDanhGiaMappingId = item.CauHoiPhieuDanhGiaMappingId;
                        newChiTietDanhGiaNhanVien.LoaiCauTraLoiId = item.LoaiCauTraLoiId;
                        listChiTietDanhGiaNhanVien.Add(newChiTietDanhGiaNhanVien);
                    });
                    context.ChiTietDanhGiaNhanVien.AddRange(listChiTietDanhGiaNhanVien);
                    context.SaveChanges();

                    trans.Commit();
                    return new TaoPhieuTuDanhGiaNhanVienResult
                    {
                        DanhGiaNhanVienId = phieuTuDanhGia.DanhGiaNhanVienId,
                        StatusCode = HttpStatusCode.OK,
                        Message = ""
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new TaoPhieuTuDanhGiaNhanVienResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public ThucHienDanhGiaDetailResult ThucHienDanhGiaDetail(ThucHienDanhGiaDetailParameter parameter)
        {
            try
            {
                var phieuTuDanhGia = context.DanhGiaNhanVien.FirstOrDefault(x => x.DanhGiaNhanVienId == parameter.DanhGiaNhanVienId);
                if (phieuTuDanhGia == null)
                {
                    return new ThucHienDanhGiaDetailResult()
                    {
                        Message = "Phiếu tự đánh giá không tồn tại trên hệ thống!",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                var nhanVienKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.NhanVienKyDanhGiaId == phieuTuDanhGia.NhanVienKyDanhGiaId);
                if (nhanVienKyDanhGia == null)
                {
                    return new ThucHienDanhGiaDetailResult()
                    {
                        Message = "Nhân viên không tồn tại trong kỳ đánh giá",
                        StatusCode = HttpStatusCode.ExpectationFailed,
                    };
                }
                var listAllEmp = context.Employee.ToList();
                var listAllPosition = context.Position.ToList();
                var listAllOrganization = context.Organization.ToList();
                var listAllCategory = context.Category.ToList();
                var listAllCategoryType = context.CategoryType.ToList();

                var listTrangThai = GeneralList.GetTrangThais("TrangThaiTuDanhGia").ToList();
                var userLogin = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                var empLogin = listAllEmp.FirstOrDefault(x => x.EmployeeId == userLogin.EmployeeId);
                var isNhanVienTuDanhGia = false;
                var isQuanLyDanhGia = false;
                var isTruongPhongDanhGia = false;

                //check xem có phải người đăng nhập là nhân viên tự đánh giá không
                if (userLogin.EmployeeId == nhanVienKyDanhGia.NguoiDuocDanhGiaId)
                {
                    isNhanVienTuDanhGia = true;
                }

                //check xem có phải người đăng nhập là người đánh giá nhân viên không 
                if (nhanVienKyDanhGia.NguoiDanhGiaId == userLogin.EmployeeId)
                {
                    isQuanLyDanhGia = true;
                }

                //Kiểm tra xem có phải người đnáh giá bước cuối không
                var truongBoPhanEmpId = context.ThanhVienPhongBan.Where(x => x.OrganizationId == nhanVienKyDanhGia.RootOrgId && x.IsManager == 1).Select(x => x.EmployeeId).ToList();
                if(truongBoPhanEmpId.Contains(userLogin.EmployeeId.Value))
                {
                    isTruongPhongDanhGia = true;
                }

                if (!isNhanVienTuDanhGia && !isQuanLyDanhGia && !isTruongPhongDanhGia)
                {
                    return new ThucHienDanhGiaDetailResult
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Bạn không phải là nhân viên, người đánh giá, trưởng phòng của để thực hiện thao tác này!"
                    };
                }

                var danhMucTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "ITEMCAUTL")?.CategoryTypeId;
                var listDanhMucItem = listAllCategory.Where(x => x.CategoryTypeId == danhMucTypeId).Select(x => new CategoryEntityModel()
                {
                    CategoryCode = x.CategoryCode,
                    CategoryName = x.CategoryName,
                    CategoryId = x.CategoryId,
                    CategoryTypeId = x.CategoryTypeId
                }).ToList();

                //Lấy câu Tl của nhân viên
                var listCauTl = context.ChiTietDanhGiaNhanVien.Where(x => x.DanhGiaNhanVienId == phieuTuDanhGia.DanhGiaNhanVienId)
                    .Select(x => new ChiTietDanhGiaNhanVienEntityModel()
                    {
                        ChiTietDanhGiaNhanVienId = x.ChiTietDanhGiaNhanVienId,
                        DanhGiaNhanVienId = x.DanhGiaNhanVienId,
                        CauTraLoiText = x.CauTraLoiText,
                        LoaiCauTraLoiId = x.LoaiCauTraLoiId,
                        CauTraLoiLuaChon = x.CauTraLoiLuaChon,
                        DiemTuDanhGia = x.DiemTuDanhGia,
                        NguoiDanhGia = x.NguoiDanhGia,
                        DiemDanhGia = x.DiemDanhGia,
                        KetQua = x.KetQua,
                        CauHoiPhieuDanhGiaMappingId = x.CauHoiPhieuDanhGiaMappingId,
                    }).ToList();

                //Lấy toàn danh mục item câu trả lời của nhân viên
                var listChiTietDanhGiaNhanVienId = listCauTl.Select(x => x.ChiTietDanhGiaNhanVienId).ToList();
                var listDanhMucDaChon = context.DanhMucCauTraLoiDanhGiaMapping.Where(x => listChiTietDanhGiaNhanVienId.Contains(x.ChiTietDanhGiaNhanVienId)).ToList();

                //Lấy listDanhMucItem của phiếu
                var listCauHoiId = listCauTl.Select(x => x.CauHoiPhieuDanhGiaMappingId).ToList();
                var listCauHoiInfor = context.CauHoiPhieuDanhGiaMapping.Where(x => listCauHoiId.Contains(x.CauHoiPhieuDanhGiaMappingId)).ToList();
                var listDanhMucItemNhanVien = context.CauHoiPhieuDanhGiaMappingDanhMucItem.Where(x => listCauHoiId.Contains(x.CauHoiPhieuDanhGiaMappingId)).ToList();

                var dangCauHoiChonDapAnId = GeneralList.GetTrangThais("DangCauTraLoi").FirstOrDefault(x => x.Value == 2).Value;
                //Ghép câu tl với câu hỏi
                listCauTl.ForEach(item =>
                {
                    if (item.LoaiCauTraLoiId == dangCauHoiChonDapAnId)
                    {
                        //Toàn bộ các lựa chọn của câu hỏi.( 2: Chọn đáp án)
                        var listDanhMucId = listDanhMucItemNhanVien.Where(x => x.CauHoiPhieuDanhGiaMappingId == item.CauHoiPhieuDanhGiaMappingId).Select(x => x.DanhMucId).ToList();
                        item.DanhMucItem = listDanhMucItem.Where(x => listDanhMucId.Contains(x.CategoryId.Value)).ToList();
                        //Toàn bộ các lựa chọn đã chọn.( 2: Chọn đáp án)
                        var ListDanhMucItemChoseId = listDanhMucDaChon.Where(x => x.ChiTietDanhGiaNhanVienId == item.ChiTietDanhGiaNhanVienId).Select(x => x.DanhMucId).ToList();
                        item.ListDanhMucItemChose = listDanhMucItem.Where(x => ListDanhMucItemChoseId.Contains(x.CategoryId.Value)).ToList();
                    }
                    var noiDungCauHoi = listCauHoiInfor.FirstOrDefault(x => x.CauHoiPhieuDanhGiaMappingId == item.CauHoiPhieuDanhGiaMappingId);
                    if (noiDungCauHoi != null)
                    {
                        item.NoiDungCauHoi = noiDungCauHoi.NoiDungCauHoi;
                        item.TiLe = noiDungCauHoi.TiLe;
                        item.Stt = noiDungCauHoi.Stt;
                        item.ParentId = noiDungCauHoi.ParentId;
                    }
                });

                var phieuTuDanhGiaModel = new DanhGiaNhanVienEntityModel();
                phieuTuDanhGiaModel.DanhGiaNhanVienId = phieuTuDanhGia.DanhGiaNhanVienId;
                phieuTuDanhGiaModel.NhanVienKyDanhGiaId = phieuTuDanhGia.NhanVienKyDanhGiaId;
                phieuTuDanhGiaModel.OrganizationId = phieuTuDanhGia.OrganizationId;
                phieuTuDanhGiaModel.PositionId = phieuTuDanhGia.PositionId;
                phieuTuDanhGiaModel.TongDiemDanhGia = phieuTuDanhGia.TongDiemDanhGia;
                phieuTuDanhGiaModel.TongDiemTuDanhGia = phieuTuDanhGia.TongDiemTuDanhGia;
                phieuTuDanhGiaModel.TongKetQua = phieuTuDanhGia.TongKetQua;
                phieuTuDanhGiaModel.TrangThaiId = phieuTuDanhGia.TrangThaiId;
                phieuTuDanhGiaModel.MucLuongCu = phieuTuDanhGia.MucLuongCu;
                phieuTuDanhGiaModel.NhanXetTruongPhong = phieuTuDanhGia.NhanXetTruongPhong;
                phieuTuDanhGiaModel.MucLuongDeXuatQuanLy = phieuTuDanhGia.MucLuongDeXuatQuanLy;
                phieuTuDanhGiaModel.MucLuongDeXuatTruongPhong = phieuTuDanhGia.MucLuongDeXuatTruongPhong;
                phieuTuDanhGiaModel.MucDanhGiaMasterDataId = phieuTuDanhGia.MucDanhGiaMasterDataId;

                var positionEmp = listAllPosition.FirstOrDefault(x => x.PositionId == phieuTuDanhGiaModel.PositionId);
                var orgEmp = listAllOrganization.FirstOrDefault(x => x.OrganizationId == phieuTuDanhGiaModel.OrganizationId);
                var mucDanhGia = listAllCategory.FirstOrDefault(x => x.CategoryId == phieuTuDanhGiaModel.MucDanhGiaMasterDataId);
                var employeeInfor = listAllEmp.FirstOrDefault(x => x.EmployeeId == nhanVienKyDanhGia.NguoiDuocDanhGiaId);

                phieuTuDanhGiaModel.PositionName = positionEmp != null ? positionEmp.PositionName : "";
                phieuTuDanhGiaModel.OrganizationName = orgEmp != null ? orgEmp.OrganizationName : "";
                phieuTuDanhGiaModel.MucDanhGiaName = mucDanhGia != null ? mucDanhGia.CategoryName : "";
                phieuTuDanhGiaModel.EmployeeCode = employeeInfor != null ? employeeInfor.EmployeeCode : "";
                phieuTuDanhGiaModel.EmployeeName = employeeInfor != null ? employeeInfor.EmployeeName : "";

               
                var employeeInforNguoiDanhGia = listAllEmp.FirstOrDefault(x => x.EmployeeId == nhanVienKyDanhGia.NguoiDanhGiaId);
                if(employeeInforNguoiDanhGia != null)
                {
                    var positionNguoiDanhGia = listAllPosition.FirstOrDefault(x => x.PositionId == employeeInforNguoiDanhGia.PositionId);
                    var orgEmpNguoiDanhGia = listAllOrganization.FirstOrDefault(x => x.OrganizationId == employeeInforNguoiDanhGia.OrganizationId);
                    phieuTuDanhGiaModel.NguoiDanhGiaName = employeeInforNguoiDanhGia != null ? employeeInforNguoiDanhGia.EmployeeName : "";
                    phieuTuDanhGiaModel.NguoiDanhGiaCode = employeeInforNguoiDanhGia != null ? employeeInforNguoiDanhGia.EmployeeCode : "";
                    phieuTuDanhGiaModel.NguoiDanhGiaPositionName = positionNguoiDanhGia != null ? positionNguoiDanhGia.PositionName : "";
                    phieuTuDanhGiaModel.NguoiDanhGiaOrganizationName = orgEmpNguoiDanhGia != null ? orgEmpNguoiDanhGia.OrganizationName : "";
                }

                //Lấy list thang điểm 
                var listDangCauTL = GeneralList.GetTrangThais("DangCauTraLoi").ToList();
                //List mucDanhgia (A,B,C,D...)
                var mucDanhGiaCategoryTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "MUCDANHGIA").CategoryTypeId;
                var listMucDanhGiaName = listAllCategory.Where(x => x.CategoryTypeId == mucDanhGiaCategoryTypeId).ToList();


                var phieuDanhGia = context.PhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == listCauHoiInfor.First().PhieuDanhGiaId);
                var cachTinhDiem = phieuDanhGia.CachTinhTong;
                var thangDiemDanhGia = context.MucDanhGia.FirstOrDefault(x => x.MucDanhGiaId == phieuDanhGia.ThangDiemDanhGiaId);
                var listMucDanhGia = context.MucDanhGiaDanhGiaMapping.Where(x => x.MucDanhGiaId == thangDiemDanhGia.MucDanhGiaId)
                    .Select(x => new MucDanhGiaDanhGiaMappingEntityModel
                    {
                        MucDanhGiaMasterDataName = listMucDanhGiaName.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName,
                        mucDanhGiaMasterDataNameCustom = listMucDanhGiaName.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName + "( " + x.DiemTu + " - " + x.DiemDen + " )",
                        DiemTu = x.DiemTu,
                        DiemDen = x.DiemDen,
                        MucDanhGiaId = x.MucDanhGiaId,
                        MucDanhGiaMasterDataId = x.MucDanhGiaMasterDataId,
                        MucDanhGiaDanhGiaMappingId = x.MucDanhGiaDanhGiaMappingId,
                    }).ToList();

                return new ThucHienDanhGiaDetailResult
                {
                    ThangDiemDanhGia = thangDiemDanhGia,
                    DanhGiaNhanVien = phieuTuDanhGiaModel,
                    ListCauTraLoiMapping = listCauTl,
                    ListDangCauTraLoi = listDangCauTL,
                    ListItemCauTraLoi = listDanhMucItem,
                    ListMucDanhGia = listMucDanhGia,
                    CachTinhDiem = cachTinhDiem,
                    IsNhanVienTuDanhGia = isNhanVienTuDanhGia,
                    IsQuanLyDanhGia = isQuanLyDanhGia,
                    IsTruongPhongDanhGia = isTruongPhongDanhGia,
                    StatusCode = HttpStatusCode.OK,
                    Message = ""
                };
            }
            catch (Exception e)
            {
                return new ThucHienDanhGiaDetailResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
            
        }

        public LuuOrHoanThanhDanhGiaResult LuuOrHoanThanhDanhGia(LuuOrHoanThanhDanhGiaParameter parameter)
        {
            var actionCode = "HTDANHGIA";
            var message = "Cập nhật đánh giá thành công!";
            var doiTuongModel = new DanhGiaNhanVien();
            var listEmail = new List<string>();
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    //Cập nhật thông tin đánh giá
                    var danhGiaNhanVien = context.DanhGiaNhanVien.FirstOrDefault(x => x.DanhGiaNhanVienId == parameter.DanhGiaNhanVien.DanhGiaNhanVienId);
                    if (danhGiaNhanVien == null)
                    {
                        return new LuuOrHoanThanhDanhGiaResult
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            Message = "Phiếu đánh giá nhân viên không tồn tại trên hệ thống!"
                        };
                    }
                    doiTuongModel = danhGiaNhanVien;
                    var listConTact = context.Contact.ToList();
                    var nhanVienKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.NhanVienKyDanhGiaId == danhGiaNhanVien.NhanVienKyDanhGiaId);
                    var userLogin = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                    var empLogin = context.Employee.FirstOrDefault(x => x.EmployeeId == userLogin.EmployeeId);
                    var listTrangThai = GeneralList.GetTrangThais("TrangThaiTuDanhGia").ToList();
                    var listAllThanhVienPhongBan = context.ThanhVienPhongBan.ToList();
                    var trangThaiHoanThanhTuDanhGia = listTrangThai.FirstOrDefault(x => x.Value == 2).Value;

                    var isNhanVienTuDanhGia = false;
                    var isQuanLyDanhGia = false;
                    var isTruongPhongDanhGia = false;

                    //check xem có phải người đăng nhập là nhân viên tự đánh giá không
                    if (userLogin.EmployeeId == nhanVienKyDanhGia.NguoiDuocDanhGiaId)
                    {
                        isNhanVienTuDanhGia = true;
                    }

                    //check xem có phải người đăng nhập là người đánh giá nhân viên không 
                    if (nhanVienKyDanhGia.NguoiDanhGiaId == userLogin.EmployeeId)
                    {
                        isQuanLyDanhGia = true;
                    }

                    //Kiểm tra xem có phải người đnáh giá bước cuối không
                    var truongBoPhanEmpId = context.ThanhVienPhongBan.Where(x => x.OrganizationId == nhanVienKyDanhGia.RootOrgId && x.IsManager == 1).Select(x => x.EmployeeId).ToList();
                    if (truongBoPhanEmpId.Contains(userLogin.EmployeeId.Value))
                    {
                        isTruongPhongDanhGia = true;
                    }

                    if (!isNhanVienTuDanhGia && !isQuanLyDanhGia && !isTruongPhongDanhGia)
                    {
                        return new LuuOrHoanThanhDanhGiaResult
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            Message = "Bạn không phải là nhân viên, người đánh giá, trưởng phòng của để thực hiện thao tác này!"
                        };
                    }

                    danhGiaNhanVien.TongDiemDanhGia = parameter.DanhGiaNhanVien.TongDiemDanhGia;
                    danhGiaNhanVien.TongDiemTuDanhGia = parameter.DanhGiaNhanVien.TongDiemTuDanhGia;
                    danhGiaNhanVien.TongKetQua = parameter.DanhGiaNhanVien.TongKetQua;
                    danhGiaNhanVien.NhanXetTruongPhong = parameter.DanhGiaNhanVien.NhanXetTruongPhong;
                    danhGiaNhanVien.MucDanhGiaMasterDataId = parameter.DanhGiaNhanVien.MucDanhGiaMasterDataId;

                    //Xóa chi tiết đánh giá nhân viên để tạo lại theo entity trả về
                    var listChiTietDanhGia = context.ChiTietDanhGiaNhanVien.Where(x => x.DanhGiaNhanVienId == danhGiaNhanVien.DanhGiaNhanVienId).ToList();
                    var listChiTietDanhGiaNhanVienId = listChiTietDanhGia.Select(x => x.ChiTietDanhGiaNhanVienId).ToList();
                    var listDanhMucCauTraLoiMapping = context.DanhMucCauTraLoiDanhGiaMapping.Where(x => listChiTietDanhGiaNhanVienId.Contains(x.ChiTietDanhGiaNhanVienId)).ToList();
                    context.ChiTietDanhGiaNhanVien.RemoveRange(listChiTietDanhGia);
                    context.DanhMucCauTraLoiDanhGiaMapping.RemoveRange(listDanhMucCauTraLoiMapping);
                    var listNewDanhMucCauTraLoiDanhGiaMapping = new List<DanhMucCauTraLoiDanhGiaMapping>();
                    parameter.ListCauTraLoi.ForEach(item =>
                    {
                        var newChiTietDanhGiaNhanVien = new ChiTietDanhGiaNhanVien();
                        newChiTietDanhGiaNhanVien.DanhGiaNhanVienId = item.DanhGiaNhanVienId;
                        newChiTietDanhGiaNhanVien.NguoiDanhGia = item.NguoiDanhGia;
                        newChiTietDanhGiaNhanVien.CauHoiPhieuDanhGiaMappingId = item.CauHoiPhieuDanhGiaMappingId;
                        newChiTietDanhGiaNhanVien.LoaiCauTraLoiId = item.LoaiCauTraLoiId;
                        newChiTietDanhGiaNhanVien.CauTraLoiText = item.CauTraLoiText;
                        newChiTietDanhGiaNhanVien.CauTraLoiLuaChon = item.CauTraLoiLuaChon;
                        newChiTietDanhGiaNhanVien.DiemTuDanhGia = item.DiemTuDanhGia;
                        newChiTietDanhGiaNhanVien.DiemDanhGia = item.DiemDanhGia;
                        newChiTietDanhGiaNhanVien.KetQua = item.KetQua;
                        context.ChiTietDanhGiaNhanVien.Add(newChiTietDanhGiaNhanVien);
                        context.SaveChanges();
                        if (item.LoaiCauTraLoiId == 2)
                        {
                            item.ListDanhMucItemChose.ForEach(category =>
                            {
                                var newDanhMucCauTraLoiDanhGiaMapping = new DanhMucCauTraLoiDanhGiaMapping();
                                newDanhMucCauTraLoiDanhGiaMapping.ChiTietDanhGiaNhanVienId = newChiTietDanhGiaNhanVien.ChiTietDanhGiaNhanVienId;
                                newDanhMucCauTraLoiDanhGiaMapping.DanhMucId = category.CategoryId.Value;
                                listNewDanhMucCauTraLoiDanhGiaMapping.Add(newDanhMucCauTraLoiDanhGiaMapping);
                            });
                        }
                    });
                    var emailNvDanhGia = listConTact.FirstOrDefault(x => x.ObjectId == nhanVienKyDanhGia.NguoiDuocDanhGiaId)?.WorkEmail;


                    //Ấn Hoàn thành: Chuyển bước tiếp theo
                    if (parameter.IsClickHoanThanh.Value)
                    {
                        var listTrangThaiDanhGiaNV = GeneralList.GetTrangThais("TrangThaiTuDanhGia").ToList();
                        switch (danhGiaNhanVien.TrangThaiId)
                        {
                            //Mới => Hoàn thành tự đánh giá ( 1 => 2 )
                            case 1:
                                //Nếu người tự đánh giá là trưởng bộ phận => chuyển đến bước trưởng bộ phận đánh giá cho tự đánh giá tiếp
                                if(truongBoPhanEmpId.Contains(nhanVienKyDanhGia.NguoiDuocDanhGiaId))
                                {
                                    var email = listConTact.FirstOrDefault(x => x.ObjectId == userLogin.EmployeeId);
                                    if (!String.IsNullOrWhiteSpace(email.WorkEmail))
                                    {
                                        listEmail.Add(email.WorkEmail);
                                    }
                                    else if (!String.IsNullOrWhiteSpace(email.Email))
                                    {
                                        listEmail.Add(email.Email);
                                    }
                                    danhGiaNhanVien.TrangThaiId = 3;
                                }
                                else
                                {
                                    //Nếu không có người đnáh giá hoặc người đánh giá là trưởng bộ phận thì chuyển luôn sang bước 3
                                    if(nhanVienKyDanhGia.NguoiDanhGiaId == Guid.Empty || truongBoPhanEmpId.Contains(nhanVienKyDanhGia.NguoiDanhGiaId))
                                    {
                                        var email = listConTact.FirstOrDefault(x => x.ObjectId == userLogin.EmployeeId);
                                        if (!String.IsNullOrWhiteSpace(email.WorkEmail))
                                        {
                                            listEmail.Add(email.WorkEmail);
                                        }
                                        else if (!String.IsNullOrWhiteSpace(email.Email))
                                        {
                                            listEmail.Add(email.Email);
                                        }
                                        danhGiaNhanVien.TrangThaiId = 3;
                                    }
                                    //Nếu có người đánh giá thì sang bước tiếp theo
                                    else
                                    {
                                        var email = listConTact.FirstOrDefault(x => x.ObjectId == nhanVienKyDanhGia.NguoiDanhGiaId);
                                        if (!String.IsNullOrWhiteSpace(email.WorkEmail))
                                        {
                                            listEmail.Add(email.WorkEmail);
                                        }
                                        else if (!String.IsNullOrWhiteSpace(email.Email))
                                        {
                                            listEmail.Add(email.Email);
                                        }
                                        danhGiaNhanVien.TrangThaiId = 2;
                                    }
                                }
                                break; 
                            //Hoàn thành tự đánh giá => hoàn thành quản lý đánh giá ( 2 => 3 )
                            case 2:
                                var emailTruongPhong = listConTact.Where(x => truongBoPhanEmpId.Contains(x.ObjectId)).ToList();
                                if(emailTruongPhong != null)
                                {
                                    emailTruongPhong.ForEach(item =>
                                    {
                                        if (!String.IsNullOrWhiteSpace(item.WorkEmail))
                                        {
                                            listEmail.Add(item.WorkEmail);
                                        }
                                        else if (!String.IsNullOrWhiteSpace(item.Email))
                                        {
                                            listEmail.Add(item.Email);
                                        }
                                    });
                                }
                                danhGiaNhanVien.TrangThaiId = 3;
                                break;
                            //Hoàn thành quản lý đánh giá  => hoàn thành đánh giá ( 3 => 4 )
                            case 3:
                                listEmail.Add(emailNvDanhGia);
                                actionCode = "HTDANHGIAFINAL";
                                danhGiaNhanVien.TrangThaiId = 4;
                                break;
                        }
                        message = "Hoàn thành đánh giá thành công!";
                    }
                    context.DanhMucCauTraLoiDanhGiaMapping.AddRange(listNewDanhMucCauTraLoiDanhGiaMapping);
                    context.DanhGiaNhanVien.Update(danhGiaNhanVien);
                    context.SaveChanges();
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new LuuOrHoanThanhDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
            if (parameter.IsClickHoanThanh.Value)
            {
                NotificationHelper.AccessNotification(context, TypeModel.ThucHienDanhGia, actionCode,
                   doiTuongModel, doiTuongModel, true, null, null, listEmail);
            }

            return new LuuOrHoanThanhDanhGiaResult
            {
                StatusCode = HttpStatusCode.OK,
                Message = message
            };
        }

        public GanMucDanhGiaChungResult GanMucDanhGiaChung(GanMucDanhGiaChungParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var listDanhGiaNhanVienId = parameter.ListNhanVien.Select(x => x.DanhGiaNhanVienId).ToList();
                    var listDanhGiaNhanVien = context.DanhGiaNhanVien.Where(x => listDanhGiaNhanVienId.Contains(x.DanhGiaNhanVienId)).ToList();
                    listDanhGiaNhanVien.ForEach(item =>
                    {
                        item.MucDanhGiaMasterDataId = parameter.MucDanhGiaMasterDataId;
                        item.TrangThaiId = 4; //Hoàn thành đánh giá final
                    });
                    context.DanhGiaNhanVien.UpdateRange(listDanhGiaNhanVien);
                    context.SaveChanges();
                    trans.Commit();
                    return new GanMucDanhGiaChungResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Gán mức điểm thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new GanMucDanhGiaChungResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public CapNhatDanhGiaNhanVienRowResult CapNhatDanhGiaNhanVienRow(CapNhatDanhGiaNhanVienRowParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var listDanhGiaNhanVien = context.DanhGiaNhanVien.ToList();
                    var danhGiaNhanVien = listDanhGiaNhanVien.FirstOrDefault(x => x.DanhGiaNhanVienId == parameter.DanhGiaNhanVienId);
                    if (danhGiaNhanVien == null)
                    {
                        return new CapNhatDanhGiaNhanVienRowResult
                        {
                            StatusCode = HttpStatusCode.OK,
                            Message = "Phiếu đánh giá nhân viên không tồn tại!"
                        };
                    }
                    var nhanVienKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.NhanVienKyDanhGiaId == danhGiaNhanVien.NhanVienKyDanhGiaId);

                    //cả nhân viên + phòng ban
                    var listNhanVienPhongBan = context.NhanVienKyDanhGia.Where(x => x.KyDanhGiaId == nhanVienKyDanhGia.KyDanhGiaId &&
                                                                          x.RootOrgId == nhanVienKyDanhGia.RootOrgId).ToList();
                
                    var listNhanVienKyDanhGia = listNhanVienPhongBan.Where(x => x.NguoiDuocDanhGiaId != Guid.Empty).ToList();

                    decimal tongMucTangQuanLy = 0;
                    listNhanVienKyDanhGia.ForEach(item =>
                    {
                        var danhGiaNhanVienItem = listDanhGiaNhanVien.FirstOrDefault(y => y.NhanVienKyDanhGiaId == item.NhanVienKyDanhGiaId);
                        //Nếu nhân viên đa có bản ghi thực hiện tự đánh giá
                        if (danhGiaNhanVienItem != null)
                        {
                            //Nếu là người vừa mới gán lại mức lương mới và tính tổng
                            if (danhGiaNhanVienItem.MucLuongDeXuatQuanLy != null && item.NhanVienKyDanhGiaId == danhGiaNhanVien.NhanVienKyDanhGiaId)
                            {
                                tongMucTangQuanLy = tongMucTangQuanLy + parameter.MucLuongDeXuatQuanLy.Value - danhGiaNhanVienItem.MucLuongCu.Value;
                            }
                            //Nếu không phải thì tính tổng vs mức lương trong bản ghi
                            else if (danhGiaNhanVienItem.MucLuongDeXuatQuanLy != null && item.NhanVienKyDanhGiaId != danhGiaNhanVien.NhanVienKyDanhGiaId)
                            {
                                tongMucTangQuanLy = tongMucTangQuanLy + danhGiaNhanVienItem.MucLuongDeXuatQuanLy.Value - danhGiaNhanVienItem.MucLuongCu.Value;
                            }
                        }
                    });

                    //Tính tổng mức tăng và quỹ lương còn lại của phòng ban
                    //Lấy thông tin phòng ban
                    var quyLuongPhongBan = listNhanVienPhongBan.FirstOrDefault(x => x.KyDanhGiaId == nhanVienKyDanhGia.KyDanhGiaId &&
                                                                            x.RootOrgId == nhanVienKyDanhGia.RootOrgId &&
                                                                            x.NguoiDuocDanhGiaId == Guid.Empty &&
                                                                            x.NguoiDuocDanhGiaId == Guid.Empty).QuyLuong; // không phải phòng ban
                    decimal quyLuongConLai = quyLuongPhongBan - tongMucTangQuanLy;
                    if(quyLuongConLai < 0)
                    {
                        return new CapNhatDanhGiaNhanVienRowResult
                        {
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            Message = "Quỹ lương không đủ!"
                        };
                    }

                    danhGiaNhanVien.MucLuongDeXuatQuanLy = parameter.MucLuongDeXuatQuanLy;
                    context.DanhGiaNhanVien.Update(danhGiaNhanVien);
                    context.SaveChanges();
                    trans.Commit();
                    return new CapNhatDanhGiaNhanVienRowResult
                    {
                        StatusCode = HttpStatusCode.OK,
                        Message = "Gán mức lương đề xuất thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new CapNhatDanhGiaNhanVienRowResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }

        public TaoDeXuatTangLuongKyDanhGiaResult TaoDeXuatTangLuongKyDanhGia(TaoDeXuatTangLuongKyDanhGiaParameter parameter)
        {
            using (var trans = context.Database.BeginTransaction())
            {
                try
                {
                    var kyDanhGia = context.KyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId);
                    if (kyDanhGia == null)
                    {
                        return new TaoDeXuatTangLuongKyDanhGiaResult
                        {
                            StatusCode = HttpStatusCode.OK,
                            Message = "Kỳ đánh giá không tồn tại trên hệ thống!"
                        };
                    }
                    var deXuatTangLuong = context.DeXuatTangLuong.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId && x.PhongBanId == parameter.OrgId);
                    if(deXuatTangLuong != null)
                    {
                        return new TaoDeXuatTangLuongKyDanhGiaResult
                        {
                            DeXuatTangLuongId = deXuatTangLuong.DeXuatTangLuongId,
                            StatusCode = HttpStatusCode.OK,
                            Message = ""
                        };
                    }

                    //Cập nhật lại trạng thái của phòng ban
                    var nhanVienKyDanhGia = context.NhanVienKyDanhGia.FirstOrDefault(x => x.RootOrgId == parameter.OrgId && x.KyDanhGiaId == parameter.KyDanhGiaId
                                && x.NguoiDuocDanhGiaId == Guid.Empty && x.NguoiDanhGiaId == Guid.Empty);
                    nhanVienKyDanhGia.TrangThai = 4; // Đã tạo đề xuất tăng lương
                    context.NhanVienKyDanhGia.Update(nhanVienKyDanhGia);
                    context.SaveChanges();
                    var orgName = context.Organization.FirstOrDefault(x => x.OrganizationId == parameter.OrgId)?.OrganizationName;
                    //Lấy danh sách nhân viên kỳ đánh giá có mức tăng lớn hơn 0 và thuộc phòng ban truyền xuống 
                    //NguoiDuocDanhGiaId == emptyGuid là phòng ban
                    var listNhanVienKyDanhGia = context.NhanVienKyDanhGia
                        .Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId && x.NguoiDuocDanhGiaId != Guid.Empty && x.RootOrgId == parameter.OrgId).ToList();

                    var listNhanVienKyDanhGiaId = listNhanVienKyDanhGia.Select(x => x.NhanVienKyDanhGiaId).ToList();

                    var danhGiaNvTrangThaiHt = GeneralList.GetTrangThais("TrangThaiTuDanhGia").FirstOrDefault(x => x.Value == 4).Value;
                    //Lọc ra các bài đánh giá có mức tăng lớn hơn 0 ( chưa lọc )
                    var listFilterNhanVienKyDanhGiaModel = context.DanhGiaNhanVien.Where(x =>
                    listNhanVienKyDanhGiaId.Contains(x.NhanVienKyDanhGiaId) && x.TrangThaiId == danhGiaNvTrangThaiHt).ToList();

                    var listFilterNhanVienKyDanhGiaId = listFilterNhanVienKyDanhGiaModel.Select(x => x.NhanVienKyDanhGiaId).ToList();

                    var listEmpDeXuatTangLuongModel = listNhanVienKyDanhGia.Where(x => listFilterNhanVienKyDanhGiaId.Contains(x.NhanVienKyDanhGiaId))
                        .Select(x => new NhanVienKyDanhGiaEntityModel()
                        {
                            NhanVienKyDanhGiaId = x.NhanVienKyDanhGiaId,
                            NguoiDuocDanhGiaId = x.NguoiDuocDanhGiaId,
                            PositionId = x.PositionId,
                            OrganizationId = x.OrganizationId,
                            MucLuongDeXuatQuanLy = listFilterNhanVienKyDanhGiaModel.FirstOrDefault(y => y.NhanVienKyDanhGiaId == x.NhanVienKyDanhGiaId).MucLuongDeXuatQuanLy,
                            MucLuongCu = listFilterNhanVienKyDanhGiaModel.FirstOrDefault(y => y.NhanVienKyDanhGiaId == x.NhanVienKyDanhGiaId).MucLuongCu,
                            MucLuongDeXuatTruongPhong = listFilterNhanVienKyDanhGiaModel.FirstOrDefault(y => y.NhanVienKyDanhGiaId == x.NhanVienKyDanhGiaId).MucLuongDeXuatTruongPhong,
                            TrangThaiDanhGia = listFilterNhanVienKyDanhGiaModel.FirstOrDefault(y => y.NhanVienKyDanhGiaId == x.NhanVienKyDanhGiaId).TrangThaiId,
                        }).ToList();
                 
                    var loaiDeXuatDanhGia = GeneralList.GetTrangThais("TrangThaiTuDanhGia").FirstOrDefault(x => x.Value == 2).Value;
                    var newDeXuatTangLuong = new DeXuatTangLuong();
                    newDeXuatTangLuong.TenDeXuat = "Đề xuất tăng lương sau đánh giá: " + kyDanhGia.TenKyDanhGia + " - " + orgName;
                    newDeXuatTangLuong.LoaiDeXuat = (byte)loaiDeXuatDanhGia;
                    newDeXuatTangLuong.NgayDeXuat = DateTime.Now;
                    newDeXuatTangLuong.TrangThai = 1;//Mới
                    var empId = context.User.FirstOrDefault(x => x.UserId == parameter.UserId);
                    newDeXuatTangLuong.NguoiDeXuatId = (Guid)(empId != null ? empId.EmployeeId : Guid.Empty);
                    newDeXuatTangLuong.Active = true;
                    newDeXuatTangLuong.KyDanhGiaId = parameter.KyDanhGiaId;
                    newDeXuatTangLuong.PhongBanId = parameter.OrgId;
                    newDeXuatTangLuong.CreatedById = parameter.UserId;
                    newDeXuatTangLuong.CreatedDate = DateTime.Now;
                    context.DeXuatTangLuong.Add(newDeXuatTangLuong);
                    context.SaveChanges();

                    var listDeXuatTangLuongNv = new List<DeXuatTangLuongNhanVien>();
                    listEmpDeXuatTangLuongModel.ForEach(item =>
                    {
                        var newDeXuatTangLuongNv = new DeXuatTangLuongNhanVien();
                        newDeXuatTangLuongNv.EmployeeId = item.NguoiDuocDanhGiaId.Value;
                        newDeXuatTangLuongNv.DeXuatTangLuongId = newDeXuatTangLuong.DeXuatTangLuongId;
                        newDeXuatTangLuongNv.PhongBanId = item.OrganizationId;
                        newDeXuatTangLuongNv.ChucVuId = item.PositionId;
                        newDeXuatTangLuongNv.LuongHienTai = item.MucLuongCu.Value;
                        newDeXuatTangLuongNv.LuongDeXuat = item.MucLuongDeXuatQuanLy != null ? item.MucLuongDeXuatQuanLy.Value : item.MucLuongCu.Value;
                        newDeXuatTangLuongNv.TrangThai = 1;//Mới
                        newDeXuatTangLuongNv.CreatedById = parameter.UserId;
                        newDeXuatTangLuongNv.CreatedDate = DateTime.Now;
                        newDeXuatTangLuongNv.Active = true;
                        listDeXuatTangLuongNv.Add(newDeXuatTangLuongNv);
                    });
                    context.DeXuatTangLuongNhanVien.AddRange(listDeXuatTangLuongNv);
                    context.SaveChanges();
                    trans.Commit();
                    return new TaoDeXuatTangLuongKyDanhGiaResult
                    {
                        DeXuatTangLuongId = newDeXuatTangLuong.DeXuatTangLuongId,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Tạo đề xuất tăng lương thành công!"
                    };
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    return new TaoDeXuatTangLuongKyDanhGiaResult()
                    {
                        StatusCode = HttpStatusCode.Forbidden,
                        Message = e.Message
                    };
                }
            }
        }
        public GetMasterDateImportEmployeeResult GetMasterDateImportEmployee(GetMasterDateImportEmployeeParameter parameter)
        {
            try
            {
                var listAllEmp = context.Employee.ToList();
                var listAllContact = context.Contact.ToList();
                var listAllUser = context.User.ToList();
                var listAllCategoryType = context.CategoryType.ToList();
                var listAllCategory = context.Category.ToList();

                //Import
                var listCapBac = new List<CategoryEntityModel>();
                var listDeptCode = new List<BaseType>();
                var listSubCode1 = new List<BaseType>();
                var listSubCode2 = new List<BaseType>();
                var listPhongBan = new List<OrganizationEntityModel>();
                var listProvince = new List<ProvinceEntityModel>();
                var listKyNangTayNghe = new List<BaseType>();
                var listBangCap = new List<CategoryEntityModel>();
                var listPTTD = new List<CategoryEntityModel>();
                var listKenhTd = new List<CategoryEntityModel>();
                var listPosition = new List<Position>();

                var listEmpCode = new List<string>();
                var listPhone = new List<string>();
                var listEmail = new List<string>();
                var listWorkEmail = new List<string>();
                var listCodeMayChamCong = new List<string>();

                //Export
                var listEmployeeExport = new List<EmployeeEntityModel>();
                //Nếu là import thì lấy thông tin để validate
                #region List cấp bậc
                var capBacCategoryTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "CAPBAC").CategoryTypeId;
                listCapBac = listAllCategory.Where(x => x.CategoryTypeId == capBacCategoryTypeId).Select(x => new CategoryEntityModel
                {
                    CategoryName = x.CategoryName,
                    CategoryId = x.CategoryId,
                }).ToList();
                #endregion

                #region DeptCode, SubCode1, SubCode2
                listDeptCode = GeneralList.GetDeptCode();
                listSubCode1 = GeneralList.GetSubCode1();
                listSubCode2 = GeneralList.GetSubCode2();
                #endregion

                #region List phòng ban
                listPhongBan = context.Organization.Where(x => x.Active == true).Select(x => new OrganizationEntityModel
                {
                    OrganizationId = x.OrganizationId,
                    OrganizationName = x.OrganizationName,
                    OrganizationCode = x.OrganizationCode,
                }).ToList();
                #endregion

                #region Lấy địa điểm làm việc
                listProvince = context.Province.Where(x => x.IsShowAsset == true).Select(p => new ProvinceEntityModel()
                {
                    ProvinceId = p.ProvinceId,
                    ProvinceName = p.ProvinceName,
                    ProvinceCode = p.ProvinceCode,
                }).OrderBy(p => p.ProvinceName).ToList();
                #endregion

                #region Kỹ năng tay nghề
                listKyNangTayNghe = GeneralList.GetKyNangTayNghe();
                #endregion

                #region List bằng cấp
                var bangCapCategoryTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP").CategoryTypeId;
                listBangCap = listAllCategory.Where(x => x.CategoryTypeId == bangCapCategoryTypeId).Select(x => new CategoryEntityModel
                {
                    CategoryName = x.CategoryName,
                    CategoryId = x.CategoryId,
                }).ToList();
                #endregion

                #region List phương thức tuyển dụng
                var pttdCategoryTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "PTTD").CategoryTypeId;
                listPTTD = listAllCategory.Where(x => x.CategoryTypeId == pttdCategoryTypeId).Select(x => new CategoryEntityModel
                {
                    CategoryName = x.CategoryName,
                    CategoryId = x.CategoryId,
                }).ToList();
                #endregion

                #region List kênh tuyển dụng
                var kenhTdCategoryTypeId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD").CategoryTypeId;
                listKenhTd = listAllCategory.Where(x => x.CategoryTypeId == kenhTdCategoryTypeId).Select(x => new CategoryEntityModel
                {
                    CategoryName = x.CategoryName,
                    CategoryId = x.CategoryId,
                }).ToList();
                #endregion

                #region List chức vụ

                listPosition = context.Position.ToList();
                #endregion

                listEmpCode = listAllEmp.Select(x => x.EmployeeCode.ToUpper().Trim()).ToList();
                listPhone = listAllContact.Where(x => x.Phone != null).Select(x => x.Phone.ToUpper().Trim()).ToList();
                listEmail = listAllContact.Where(x => x.Email != null).Select(x => x.Email.ToUpper().Trim()).ToList();
                listWorkEmail = listAllContact.Where(x => x.WorkEmail != null).Select(x => x.WorkEmail.ToUpper().Trim()).ToList();
                listCodeMayChamCong = listAllEmp.Where(x => x.CodeMayChamCong != null).Select(x => x.CodeMayChamCong.ToUpper().Trim()).ToList();

                //Nếu là export thì lấy data trả về để xuất excel
                if (parameter.Type == 2)
                {
                    var listEmpExport = listAllEmp.Where(x => parameter.ListEmpId.Contains(x.EmployeeId)).ToList();
                    listEmpExport.ForEach(item =>
                    {
                        var phongBan = listPhongBan.FirstOrDefault(x => x.OrganizationId == item.OrganizationId);
                        var chucVu = listPosition.FirstOrDefault(x => x.PositionId == item.PositionId);
                        var contact = listAllContact.FirstOrDefault(x => x.ObjectId == item.EmployeeId && x.ObjectType == "EMP");
                        var user = listAllUser.FirstOrDefault(x => x.EmployeeId.Value == item.EmployeeId);
                        var bangCapCaoNhat = listBangCap.FirstOrDefault(x => x.CategoryId == item.BangCapCaoNhatDatDuocId);
                        var phuongPhapTuyenDung = listPTTD.FirstOrDefault(x => x.CategoryId == item.PhuongThucTuyenDungId);
                        var nguonTuyenDung = listKenhTd.FirstOrDefault(x => x.CategoryId == item.NguonTuyenDungId);
                        var province = listProvince.FirstOrDefault(x => x.ProvinceId == contact.ProvinceId);
                        var contract = listAllCategory.FirstOrDefault(x => x.CategoryId == item.ContractType);
                        var capBac = listCapBac.FirstOrDefault(x => x.CategoryId == item.CapBacId);

                        var empEntityModel = new EmployeeEntityModel();
                        empEntityModel.EmployeeId = item.EmployeeId;
                        empEntityModel.EmployeeCode = item.EmployeeCode;
                        empEntityModel.EmployeeName = item.EmployeeName;
                        empEntityModel.StartedDate = item.StartedDate;
                        empEntityModel.OrganizationName = phongBan != null ? phongBan.OrganizationName : "";
                        empEntityModel.PositionName = chucVu != null ? chucVu.PositionName : "";
                        empEntityModel.IsManager = item.IsManager;
                        empEntityModel.Identity = contact.IdentityId;
                        empEntityModel.Username = user.UserName;
                        empEntityModel.LastName = contact.LastName;
                        empEntityModel.FirstName = contact.FirstName;
                        empEntityModel.DanToc = item.DanToc;
                        empEntityModel.TonGiao = item.TonGiao;
                        empEntityModel.CodeMayChamCong = item.CodeMayChamCong;
                        empEntityModel.TenMayChamCong = item.TenMayChamCong;
                        empEntityModel.HoTenTiengAnh = item.HoTenTiengAnh;
                        empEntityModel.ChuyenNganhHoc = item.ChuyenNganhHoc;
                        empEntityModel.TenTruongHocCaoNhat = item.TenTruongHocCaoNhat;
                        empEntityModel.BangCapCaoNhatDatDuocName = bangCapCaoNhat != null ? bangCapCaoNhat.CategoryName : "";
                        empEntityModel.KyNangTayNghes = item.KyNangTayNghes;
                        empEntityModel.TomTatHocVan = item.TomTatHocVan;
                        empEntityModel.PhuongThucTuyenDungName = phuongPhapTuyenDung != null ? phuongPhapTuyenDung.CategoryName : "";
                        empEntityModel.MucPhi = item.MucPhi;
                        empEntityModel.NguonTuyenDungName = nguonTuyenDung != null ? nguonTuyenDung.CategoryName : "";
                        empEntityModel.BienSo = item.BienSo;
                        empEntityModel.LoaiXe = item.LoaiXe;
                        empEntityModel.MaTest = item.MaTest;
                        empEntityModel.DiemTest = item.DiemTest;
                        empEntityModel.SoSoBHXH = contact.SocialInsuranceNumber;
                        empEntityModel.MaTheBHYT = contact.HealthInsuranceNumber;
                        empEntityModel.BankAddress = contact.BankAddress;
                        empEntityModel.Address = contact.Address;
                        empEntityModel.AddressTiengAnh = contact.AddressTiengAnh;
                        empEntityModel.DeptCodeValue = item.DeptCodeValue;
                        empEntityModel.ProvinceName = province != null ? province.ProvinceName : "";
                        empEntityModel.BankOwnerName = contact.BankOwnerName;
                        empEntityModel.BankAccount = contact.BankAccount;
                        empEntityModel.MaTheBHLoftCare = contact.MaTheBhLoftCare;
                        empEntityModel.ThangNopDangKyGiamTru = item.ThangNopDangKyGiamTru;
                        empEntityModel.ContractName = contract != null ? contract.CategoryName : "";
                        empEntityModel.ContractEndDate = item.ContractEndDate;
                        empEntityModel.ProbationEndDate = item.ProbationEndDate;
                        empEntityModel.ProbationStartDate = item.ProbationStartDate;
                        empEntityModel.TrainingStartDate = item.TrainingStartDate;
                        empEntityModel.DateOfBirth = contact.DateOfBirth;
                        empEntityModel.ChiPhiTheoGio = item.ChiPhiTheoGio;
                        empEntityModel.IsCashier = item.IsCashier;
                        empEntityModel.IsOrder = item.IsOrder;
                        empEntityModel.Email = contact.Email;
                        empEntityModel.Phone = contact.Phone;
                        empEntityModel.QuocTich = item.QuocTich;
                        empEntityModel.SubCode1Name = listDeptCode.FirstOrDefault(x => x.Value == item.SubCode1Value)?.Name;
                        empEntityModel.SubCode2Name = listSubCode1.FirstOrDefault(x => x.Value == item.SubCode2Value)?.Name;
                        empEntityModel.DeptCode = listSubCode2.FirstOrDefault(x => x.Value == item.DeptCodeValue)?.Name;
                        empEntityModel.GradeTesting = item.GradeTesting;
                        empEntityModel.StartDateMayChamCong = item.StartDateMayChamCong;
                        empEntityModel.CapBacName = capBac != null ? capBac.CategoryName : "";
                        empEntityModel.BankName = contact.BankName;
                        empEntityModel.BankCode = contact.BankCode;
                        empEntityModel.Gender = contact.Gender;
                        empEntityModel.HoKhauThuongTruTa = contact.HoKhauThuongTruTa;
                        empEntityModel.HoKhauThuongTruTv = contact.HoKhauThuongTruTv;
                        empEntityModel.IdentityIddateOfIssue = contact.IdentityIddateOfIssue;
                        empEntityModel.IdentityIdplaceOfIssue = contact.IdentityIdplaceOfIssue;
                        empEntityModel.MaSoThueCaNhan = item.MaSoThueCaNhan;
                        empEntityModel.NoiCapCmndtiengAnh = contact.NoiCapCmndtiengAnh;
                        empEntityModel.OtherPhone = contact.OtherPhone;
                        empEntityModel.WorkEmail = contact.WorkEmail;
                        var listThongTinPhuThuoc = listAllContact.Where(x => x.ObjectId == item.EmployeeId && x.ObjectType == "EMP_CON").ToList();
                        empEntityModel.NumberChildren = listThongTinPhuThuoc.Count();
                        listEmployeeExport.Add(empEntityModel);
                    });
                    return new GetMasterDateImportEmployeeResult
                    {
                        ListEmployeeExport = listEmployeeExport,
                        StatusCode = HttpStatusCode.OK,
                        Message = "Lấy thông tin export thành công!"
                    };

                }
                return new GetMasterDateImportEmployeeResult
                {
                    ListCapBac = listCapBac,
                    ListDeptCode = listDeptCode,
                    ListSubCode1 = listSubCode1,
                    ListSubCode2 = listSubCode2,
                    ListPhongBan = listPhongBan,
                    ListProvince = listProvince,
                    ListKyNangTayNghe = listKyNangTayNghe,
                    ListBangCap = listBangCap,
                    ListPTTD = listPTTD,
                    ListKenhTd = listKenhTd,
                    ListEmpCode = listEmpCode,
                    ListPhone = listPhone,
                    ListEmail = listEmail,
                    ListWorkEmail = listWorkEmail,
                    ListCodeMayChamCong = listCodeMayChamCong,
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy thông tin thành công!"
                };
            }
            catch (Exception e)
            {
                return new GetMasterDateImportEmployeeResult()
                {
                    StatusCode = HttpStatusCode.Forbidden,
                    Message = e.Message
                };
            }
        }
        private void SaveListTree_DeNghiTamHoanUngChiTiet(int deNghiTamHoanUngId, Guid userId, int? parentId, List<DeNghiTamHoanUngChiTiet> list, List<DeNghiTamHoanUngChiTiet> listChild)
        {
            if (list.Count > 0 && listChild.Count > 0)
            {
                int currentLevel = listChild.First().Level;

                listChild.ForEach(item =>
                {
                    DeNghiTamHoanUngChiTiet chiTiet = new DeNghiTamHoanUngChiTiet();
                    chiTiet.DeNghiTamHoanUngId = deNghiTamHoanUngId;
                    chiTiet.NoiDung = item.NoiDung;
                    chiTiet.TongTienTruocVat = item.TongTienTruocVat;
                    chiTiet.Vat = item.Vat;
                    chiTiet.TienSauVat = item.TienSauVat;
                    chiTiet.ParentId = parentId;
                    chiTiet.Level = currentLevel;
                    chiTiet.CreatedById = userId;
                    chiTiet.CreatedDate = DateTime.Now;
                    chiTiet.UpdatedById = userId;
                    chiTiet.UpdatedDate = DateTime.Now;
                    context.DeNghiTamHoanUngChiTiet.Add(chiTiet);
                    context.SaveChanges();
                    var _listChild = list.Where(x => x.ParentId == item.DeNghiTamHoanUngChiTietId).ToList();
                    SaveListTree_DeNghiTamHoanUngChiTiet(deNghiTamHoanUngId, userId,
                        chiTiet.DeNghiTamHoanUngChiTietId, list, _listChild);
                });
            }
        }
        public GetAllVacanciesForOtherResult GetAllVacanciesForOther()
        {
            List<EmployeeVacanciesForOtherEntityModel> listViTriTuyenDung = new List<EmployeeVacanciesForOtherEntityModel>();
            // Danh sach chiến dịch
            var lstAllRec = context.RecruitmentCampaign;
            if (lstAllRec != null)
            {
                listViTriTuyenDung = context.Vacancies.Select(x => new EmployeeVacanciesForOtherEntityModel
                {
                    RecruitmentCampaignId = x.RecruitmentCampaignId,
                    RecruitmentCampaignName = lstAllRec.FirstOrDefault(a => a.RecruitmentCampaignId == x.RecruitmentCampaignId).RecruitmentCampaignName,
                    VacanciesId = x.VacanciesId,
                    VacanciesName = x.VacanciesName
                }).ToList();
            }

            return new GetAllVacanciesForOtherResult
            {
                ListViTriTuyenDung = listViTriTuyenDung,
                StatusCode = HttpStatusCode.OK,
            };
        }

        public ImportEmployeeResult ImportEmployee(ImportEmployeeParameter parameter)
        {
            var passDefault = context.SystemParameter.FirstOrDefault(x => x.SystemKey == "DefaultUserPassword")
                     ?.SystemValueString?.Trim();
            if (string.IsNullOrWhiteSpace(passDefault))
            {
                return new ImportEmployeeResult()
                {
                    Message = "Chưa cấu hình mật khẩu mặc định trên hệ thống",
                    StatusCode = HttpStatusCode.ExpectationFailed,
                };
            }
            var listAllEmp = context.Employee.ToList();
            var listAllContact = context.Contact.ToList();
            var listAllUser = context.User.ToList();

            var empExistCount = 0;
            var listEmp = new List<Employee>();
            try
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    var listAllProVince = context.Province.Where(x => x.IsShowAsset == true).ToList();
                    parameter.ListEmp.ForEach(item =>
                    {
                        var tenGoi = LocDau(item.FirstName);
                        var hoTenDem = LocDau(item.LastName);
                        item.Username = tenGoi + hoTenDem;
                        item.Username = String.Concat(item.Username.Where(c => !Char.IsWhiteSpace(c)));
                        var duplicateUser = listAllUser.FirstOrDefault(x => x.UserName == item.Username);
                        if (duplicateUser != null)
                        {
                            var lstUserNameSame = listAllUser.Where(x => x.UserName.Contains(item.Username)).ToList();
                            if (lstUserNameSame.Count() > 0)
                            {
                                item.Username = item.Username + lstUserNameSame.Count().ToString();
                            }
                        }

                        //Check exist in DB
                        var listPhone = listAllContact.Where(x => x.Phone != null && x.Phone.ToUpper().Trim() == item.Phone.ToUpper().Trim()).ToList();
                        var listEmail = listAllContact.Where(x => x.Email != null && x.Email.ToUpper().Trim() == item.Email.ToUpper().Trim()).ToList();
                        var listWorkEmail = listAllContact.Where(x => x.WorkEmail != null && x.WorkEmail.ToUpper().Trim() == (item.Username + "@loft3di.com.vn").ToUpper().Trim()).ToList();
                        var listCodeMayChamCong = listAllEmp.Where(x => x.CodeMayChamCong != null && x.CodeMayChamCong.ToUpper().Trim() == item.CodeMayChamCong.ToUpper().Trim()).ToList();

                        if (listPhone.Count > 0 || listEmail.Count > 0 ||
                            listWorkEmail.Count > 0 || listCodeMayChamCong.Count > 0)
                        {
                            empExistCount++;
                        }
                        else
                        {
                            var emp = new Employee();
                            emp.EmployeeId = Guid.NewGuid();
                            emp.EmployeeName = item.FirstName?.Trim() + " " + item.LastName?.Trim();
                            emp.HoTenTiengAnh = item.HoTenTiengAnh;
                            emp.CreatedDate = DateTime.Now;
                            emp.CreatedById = parameter.UserId;
                            emp.IsManager = false;
                            emp.EmployeeCode = item.EmployeeCode;
                            emp.MucPhi = item.MucPhi != null ? item.MucPhi.Value : 0;
                            emp.BangCapCaoNhatDatDuocId = item.BangCapCaoNhatDatDuocId.Value;
                            emp.BienSo = item.BienSo;
                            emp.ChuyenNganhHoc = item.ChuyenNganhHoc;
                            emp.CodeMayChamCong = item.CodeMayChamCong;
                            emp.DanToc = item.DanToc;
                            emp.DeptCodeValue = item.DeptCodeValue;
                            emp.DiemTest = item.DiemTest;
                            emp.GradeTesting = item.GradeTesting;
                            emp.KyNangTayNghes = item.KyNangTayNghes;
                            emp.LoaiXe = item.LoaiXe;
                            emp.MaSoThueCaNhan = item.MaSoThueCaNhan;
                            emp.MaTest = item.MaTest;
                            emp.NguonTuyenDungId = item.NguonTuyenDungId.Value;
                            emp.OrganizationId = item.OrganizationId;
                            emp.QuocTich = item.QuocTich;
                            emp.SubCode1Value = item.SubCode1;
                            emp.SubCode2Value = item.SubCode2;
                            emp.TenMayChamCong = item.TenMayChamCong;
                            emp.TenTruongHocCaoNhat = item.TenTruongHocCaoNhat;
                            emp.TomTatHocVan = item.TomTatHocVan;
                            emp.DiaDiemLamviec = listAllProVince.FirstOrDefault(x => x.ProvinceId == item.ProvinceId.Value)?.ProvinceName;
                            emp.TonGiao = item.TonGiao;
                            emp.SoNgayDaNghiPhep = item.SoPhepDaSuDung;
                            emp.SoNgayPhepConLai = item.SoPhepConLai; 

                            #region Các phòng ban mà nhân viên trực thuộc
                            if (item.OrganizationId != null)
                            {
                                var listThanhVienPhongBan = new List<ThanhVienPhongBan>();
                                var thanhVienPhongBan = new ThanhVienPhongBan();
                                thanhVienPhongBan.Id = Guid.NewGuid();
                                thanhVienPhongBan.EmployeeId = emp.EmployeeId;
                                thanhVienPhongBan.OrganizationId = item.OrganizationId.Value;
                                listThanhVienPhongBan.Add(thanhVienPhongBan);
                                context.ThanhVienPhongBan.AddRange(listThanhVienPhongBan);
                                emp.OrganizationId = item.OrganizationId.Value;
                            }
                            #endregion

                            var newUserName = item.Username.Trim();
                            listEmp.Add(emp);

                            var contact = new Contact();
                            contact.ContactId = Guid.NewGuid();
                            contact.FirstName = item.FirstName?.Trim();
                            contact.LastName = item.LastName?.Trim();
                            contact.IdentityId = item.IdentityId != null ? item.IdentityId.Trim() : null;
                            contact.Email = item.Email == null ? null : item.Email.Trim();
                            contact.ObjectId = emp.EmployeeId;
                            contact.ObjectType = ObjectType.EMPLOYEE;
                            contact.CreatedDate = DateTime.Now;
                            contact.CreatedById = parameter.UserId;
                            contact.Address = item.Address;
                            contact.AddressTiengAnh = item.AddressTiengAnh;
                            contact.BankAccount = item.BankAccount;
                            contact.BankCode = item.BankCode;
                            contact.BankName = item.BankName;
                            contact.BankOwnerName = item.BankOwnerName;
                            contact.DateOfBirth = item.DateOfBirth;
                            contact.Gender = item.Gender;
                            contact.HealthInsuranceNumber = item.HealthInsuranceNumber;
                            contact.HoKhauThuongTruTa = item.HoKhauThuongTruTa;
                            contact.HoKhauThuongTruTv = item.HoKhauThuongTruTv;
                            contact.IdentityIddateOfIssue = item.IdentityIddateOfIssue;
                            contact.IdentityIdplaceOfIssue = item.IdentityIdplaceOfIssue;
                            //contact.KinhNghiemLamViec = item.KinhNghiemLamViec;
                            contact.NoiCapCmndtiengAnh = item.NoiCapCmndtiengAnh;
                            contact.OtherPhone = item.OtherPhone;
                            contact.Phone = item.Phone;
                            contact.ProvinceId = item.ProvinceId.Value;
                            contact.SocialInsuranceNumber = item.SocialInsuranceNumber;
                            contact.WorkEmail = item.Username + "@loft3di.com.vn";

                            var user = new User();
                            user.EmployeeId = emp.EmployeeId;
                            user.UserName = newUserName;
                            user.Password = AuthUtil.GetHashingPassword(passDefault);
                            user.CreatedDate = DateTime.Now;
                            user.Active = true;
                            user.CreatedById = parameter.UserId;

                            context.Employee.Add(emp);
                            context.Contact.Add(contact);
                            context.User.Add(user);
                            listAllUser.Add(user);
                            context.SaveChanges();
                        }
                    });
                    transaction.Commit();
                }
            }
            catch (Exception e)
            {
                return new ImportEmployeeResult
                {
                    Message = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }

            if (empExistCount > 0)
            {
                return new ImportEmployeeResult
                {
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    Message = "Dữ liệu nhân viên bị trùng!",
                };
            }

            #region SEND MAIL
            //gửi mail tới nhân viên được tạo
            listEmp.ForEach(employee =>
            {
                NotificationHelper.AccessNotification(context, "EMPLOYEE", "CRE", new Employee(), employee, true);
            });
            #endregion

         

            return new ImportEmployeeResult
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                Message = "Import nhân viên thành công!",
            };

        }

        public DownloadTemplateImportResult DownloadTemplateImportEmployee(DownloadTemplateImportParameter parameter)
        {
            try
            {
                string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
                string fileName = @"Template_Import_Nhap_Employee.xlsx";

                string newFilePath = Path.Combine(rootFolder, fileName);
                byte[] data = File.ReadAllBytes(newFilePath);

                return new DownloadTemplateImportResult
                {
                    TemplateExcel = data,
                    Message = string.Format("Đã dowload file Template_Import_Nhap_Employee"),
                    FileName = "Template_Import_Nhap_Employee",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DownloadTemplateImportResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }
        public GetDataDashboardHomeResult GetDataDashboardHome(GetDataDashboardHomeParameter parameter)
        {
            try
            {
                #region Data chung
                var listAllCategoryType = context.CategoryType.ToList();
                var listAllCategory = context.Category.ToList();
                var listAllProvince = context.Province.Where(x => x.IsShowAsset == true).ToList();
                var listAllTaiSan = context.TaiSan.ToList();
                var categoryTypeHDLDId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS").CategoryTypeId;
                var listSubCode1 = GeneralList.GetSubCode1();
                var listAllHopDongNhanSu = context.HopDongNhanSu.ToList();
                var listAllUser = context.User.ToList();
                var listAllContact = context.Contact.ToList();
                var listAllEmp = context.Employee.Select(x => new EmployeeEntityModel { 
                                    EmployeeId = x.EmployeeId,
                                    EmployeeName = x.EmployeeName,
                                    StartDateMayChamCong = x.StartDateMayChamCong,
                                    ViTriLamViec = x.DiaDiemLamviec,
                                    SubCode1 = x.SubCode1Value,
                                    NgayNghiViec = x.NgayNghiViec,
                                    DateOfBirth = listAllContact.FirstOrDefault(y => y.ObjectId == x.EmployeeId && y.ObjectType == "EMP").DateOfBirth,
                                }).ToList();

                listAllEmp.ForEach(emp =>
                {
                    var trangThaiId = 0;
                    var user = listAllUser.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                    if (emp.Active == true || user.Active == true)
                    {
                        trangThaiId = 1; //Đang hoạt động 
                    }
                    else
                    {
                        trangThaiId = 2; //Ngừng hoạt động
                    }
                    emp.TrangThaiId = trangThaiId;
                });

                var thoiDiemHienTai = DateTime.Now.Date;
                DateTime? lastDayOfMonth = null;
                if (parameter.PieCharDate != null)
                {
                    //Ngày cuối cùng của tháng đã chọn
                    var paramDate = parameter.PieCharDate.Value;
                    lastDayOfMonth = new DateTime(paramDate.Year, paramDate.Month, DateTime.DaysInMonth(paramDate.Year, paramDate.Month));
                }

                #endregion


                #region Thống kê nhân sự
                var dataThongKeNhanSu = new List<DataPieChartModel>();
                listSubCode1.ForEach(subCode1 =>
                {
                    listAllProvince.ForEach(diaDiem =>
                    {
                        var tenViTriLamViec = "";
                        switch (diaDiem.ProvinceCode)
                        {
                            case "01":
                                tenViTriLamViec = "HN";
                                break;
                            case "48":
                                tenViTriLamViec = "DN";
                                break;
                        }
                        var obj = new DataPieChartModel();
                        obj.Name = subCode1.Name + "-" + tenViTriLamViec;
                        obj.Y = listAllEmp.Where(x => x.ViTriLamViec == diaDiem.ProvinceName 
                                                    && x.SubCode1 == subCode1.Value 
                                                    && (
                                                        (x.StartDateMayChamCong != null 
                                                            && x.StartDateMayChamCong.Value.Date <= lastDayOfMonth.Value.Date
                                                            && x.TrangThaiId == 1)
                                                        || (x.NgayNghiViec != null
                                                                && x.NgayNghiViec.Value.Date >= lastDayOfMonth.Value.Date
                                                                && x.TrangThaiId == 2)
                                                       )
                                                    ).Count();
                        dataThongKeNhanSu.Add(obj);
                    });
                });
                #endregion

                #region Thống kê nhân sự sinh nhật trong tháng
                var dataThongKeNhanSuSinhNhat = new List<DataPieChartModel>();
                listAllProvince.ForEach(diaDiem =>
                {
                    var tenViTriLamViec = "";
                    switch (diaDiem.ProvinceCode)
                    {
                        case "01":
                            tenViTriLamViec = "HN";
                            break;
                        case "48":
                            tenViTriLamViec = "DN";
                            break;
                    }

                    var obj = new DataPieChartModel();
                    obj.Name = tenViTriLamViec;
                    obj.Drilldown = tenViTriLamViec;
                    obj.Y = listAllEmp.Where(x => x.ViTriLamViec == diaDiem.ProvinceName
                                            && x.TrangThaiId == 1 && x.DateOfBirth.Value.Month == DateTime.Now.Month).Count();
                    dataThongKeNhanSuSinhNhat.Add(obj);
                });
                #endregion

                var listHopDongNhanSu = new List<HopDongNhanSu>();
                listAllEmp.ForEach(item =>
                {
                    if(item.TrangThaiId == 1)//Nhân viên có trạng thái ngừng hoạt động
                    {
                        var nhdns = listAllHopDongNhanSu.Where(x => x.EmployeeId == item.EmployeeId).OrderByDescending(x => x.NgayKyHopDong).ToList();
                        if (nhdns.Count() > 0)
                        {
                            listHopDongNhanSu.Add(nhdns.First());
                        }
                    }
                });

                #region Thống kê nhân sự sắp hết hạn hợp đồng ( trước thời hạn khoảng 30 ngày ) đối với HDLD
                //Lấy các loại hợp đồng lao động. Trong code có HĐLĐ
                var dataThongKeNhanSuSapHetHanHD = new List<DataPieChartModel>();
                var listLoaiHDLDId = listAllCategory.Where(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode.StartsWith("HÐLÐ"))
                                    .Select(x => x.CategoryId).ToList();
                var listEmpSapHetHanHDId = listHopDongNhanSu.Where(x => x.NgayKetThucHopDong != null && x.Active == true
                    && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 30
                    && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                    && listLoaiHDLDId.Contains(x.LoaiHopDongId)
                    ).Select(x => x.EmployeeId).ToList();
                var listEmpSapHetHanHD = listAllEmp.Where(x => listEmpSapHetHanHDId.Contains(x.EmployeeId.Value)).ToList();

                listSubCode1.ForEach(subCode1 =>
                {
                    listAllProvince.ForEach(diaDiem =>
                    {
                        var tenViTriLamViec = "";
                        switch (diaDiem.ProvinceCode)
                        {
                            case "01":
                                tenViTriLamViec = "HN";
                                break;
                            case "48":
                                tenViTriLamViec = "DN";
                                break;
                        }

                        var obj = new DataPieChartModel();
                        obj.Name = subCode1.Name + "-" + tenViTriLamViec;
                        obj.Drilldown = subCode1.Name + "-" + tenViTriLamViec;
                        obj.Y = listEmpSapHetHanHD.Where(x => x.ViTriLamViec == diaDiem.ProvinceName && x.SubCode1 == subCode1.Value).Count();
                        dataThongKeNhanSuSapHetHanHD.Add(obj);
                    });
                });

                #endregion

                #region Thống kê nhân sự sắp hết hạn thử việc
                //Lấy các loại hợp đồng lao động. Trong code có HĐLĐ
                var dataThongKeNhanSuSapHetHanThuViec = new List<DataPieChartModel>();

                var listLoaiHDDTId = listAllCategory.Where(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode.StartsWith("HĐĐT"))
                                    .Select(x => x.CategoryId).ToList();

                var hDDT1ThangId = listAllCategory.FirstOrDefault(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode == "HĐĐT1");
                var hDDT2ThangId = listAllCategory.FirstOrDefault(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode == "HĐĐT2");


                //Thử việc 1 tháng báo trước 5 ngày. thử việc 2 tháng báo trước 10 ngày
                var listEmpSapHetHanThuViecId = listHopDongNhanSu.Where(x => x.NgayKetThucHopDong != null && x.Active == true
                    && (((x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 5
                    && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                    && hDDT1ThangId.CategoryId == x.LoaiHopDongId)

                    || ((x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 10
                    && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                    && hDDT2ThangId.CategoryId == x.LoaiHopDongId))
                    ).Select(x => x.EmployeeId).Distinct().ToList();

                var listEmpSapHetHanThuViec = listAllEmp.Where(x => listEmpSapHetHanThuViecId.Contains(x.EmployeeId.Value)).ToList();

                listSubCode1.ForEach(subCode1 =>
                {
                    listAllProvince.ForEach(diaDiem =>
                    {
                        var tenViTriLamViec = "";
                        switch (diaDiem.ProvinceCode)
                        {
                            case "01":
                                tenViTriLamViec = "HN";
                                break;
                            case "48":
                                tenViTriLamViec = "DN";
                                break;
                        }


                        var obj = new DataPieChartModel();
                        obj.Name = subCode1.Name + "-" + tenViTriLamViec;
                        obj.Drilldown = subCode1.Name + "-" + tenViTriLamViec;
                        obj.Y = listEmpSapHetHanThuViec.Where(x => x.ViTriLamViec == diaDiem.ProvinceName && x.SubCode1 == subCode1.Value).Count();
                        dataThongKeNhanSuSapHetHanThuViec.Add(obj);
                    });
                });
                #endregion

                #region Thống kê tài sản
                var listTenTaiSan = listAllTaiSan.Select(x => x.MaTaiSan.Trim().ToLower()).Distinct().ToList();
                var dataThongKeTaiSan = new List<ThongKeTaiSanChartModel>();
                listAllProvince.ForEach(diaDiem =>
                {
                    var tenViTriLamViec = "";
                    switch (diaDiem.ProvinceCode)
                    {
                        case "01":
                            tenViTriLamViec = "HN";
                            break;
                        case "48":
                            tenViTriLamViec = "DN";
                            break;
                    }

                    var newObjDangSuDung = new ThongKeTaiSanChartModel();
                    newObjDangSuDung.Name = "Đang sử dụng - " + tenViTriLamViec;
                    newObjDangSuDung.Stack = tenViTriLamViec;
                    newObjDangSuDung.Data = new List<int>();

                    var newObjKhongSuDung = new ThongKeTaiSanChartModel();
                    newObjKhongSuDung.Name = "Không sử dụng - " + tenViTriLamViec;
                    newObjKhongSuDung.Stack = tenViTriLamViec;
                    newObjKhongSuDung.Data = new List<int>();

                    listTenTaiSan.ForEach(taiSan =>
                    {
                        var assetInUse = listAllTaiSan.Where(x => x.MaTaiSan.Trim().ToLower() == taiSan && x.HienTrangTaiSan == 0
                                && x.KhuVucTaiSanId == diaDiem.ProvinceId).Count();
                        var assetNotInUse = listAllTaiSan.Where(x => x.MaTaiSan.Trim().ToLower() == taiSan
                                && x.HienTrangTaiSan == 1 && x.KhuVucTaiSanId == diaDiem.ProvinceId).Count();
                        newObjDangSuDung.Data.Add(assetInUse);
                        newObjKhongSuDung.Data.Add(assetNotInUse);
                    });
                    dataThongKeTaiSan.Add(newObjDangSuDung);
                    dataThongKeTaiSan.Add(newObjKhongSuDung);
                });
                #endregion

                return new GetDataDashboardHomeResult
                {
                    ListTenTaiSan = listTenTaiSan,
                    DataThongKeNhanSu = dataThongKeNhanSu,
                    DataThongKeNhanSuSapHetHanHD = dataThongKeNhanSuSapHetHanHD,
                    DataThongKeNhanSuSapHetHanThuViec = dataThongKeNhanSuSapHetHanThuViec,
                    DataThongKeTaiSan = dataThongKeTaiSan,
                    DataThongKeNhanSuSinhNhat = dataThongKeNhanSuSinhNhat,
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new GetDataDashboardHomeResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }
        public SynchronizeCandidateDataFromCMSResult SynchronizeCandidateDataFromCMS(SynchronizeCandidateDataFromCMSParameter parameter)
        {
            using (var transaction = context.Database.BeginTransaction())
            {
                try
                {
                    if (parameter.Candidate != null && parameter.Candidate.VacanciesId != null && parameter.Candidate.VacanciesId != Guid.Empty)
                    {
                        var viTriTD = context.Vacancies.FirstOrDefault(x => x.VacanciesId == parameter.Candidate.VacanciesId);
                        if (viTriTD != null)
                        {
                            var empId = context.Employee.FirstOrDefault(x => x.IsManager == true).EmployeeId;
                            var userId = context.User.FirstOrDefault(x => x.EmployeeId == empId).UserId;
                            // Nguồn ứng tuyển từ website
                            var cateTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "KENHTD")?.CategoryTypeId;
                            var cateId = context.Category.FirstOrDefault(x => x.CategoryTypeId == cateTypeId && x.CategoryCode == "WS")?.CategoryId;

                            Candidate ca = new Candidate
                            {
                                CandidateId = Guid.NewGuid(),
                                FullName = parameter.Candidate.FullName,
                                DateOfBirth = parameter.Candidate.DateOfBirth,
                                Email = parameter.Candidate.Email,
                                Phone = parameter.Candidate.Phone,
                                Status = 1,
                                CreatedDate = DateTime.Now,
                                CreatedById = userId,
                                ApplicationDate = DateTime.Now,
                                RecruitmentChannelId = cateId
                            };

                            context.Candidate.Add(ca);
                            context.SaveChanges();

                            // Mapping Vị trí với ứng viên
                            CandidateVacanciesMapping mappingCan = new CandidateVacanciesMapping
                            {
                                CandidateVacanciesMappingId = Guid.NewGuid(),
                                VacanciesId = parameter.Candidate.VacanciesId,
                                CandidateId = ca.CandidateId,
                                CreatedDate = DateTime.Now,
                                CreatedById = userId
                            };
                            context.CandidateVacanciesMapping.Add(mappingCan);
                            context.SaveChanges();

                            transaction.Commit();

                            // Copy file
                            var folder = context.Folder.FirstOrDefault(x => x.FolderType == "CANDIDATE");
                            string folderName = ConvertFolderUrl(folder.Url);
                            string webRootPath = hostingEnvironment.WebRootPath;
                            string newPath = Path.Combine(webRootPath, folderName);
                            bool isSave = true;

                            if (!Directory.Exists(newPath))
                            {
                                isSave = false;
                            }
                            if (isSave)
                            {
                                if (folder != null)
                                {
                                    if (IsUrlExist(parameter.Candidate.UrlFile))
                                    {
                                        var req = System.Net.WebRequest.Create(parameter.Candidate.UrlFile);
                                        using (Stream stream = req.GetResponse().GetResponseStream())
                                        {
                                            var fileName = parameter.Candidate.UrlFile.Substring(parameter.Candidate.UrlFile.LastIndexOf("/") + 1, parameter.Candidate.UrlFile.Length - parameter.Candidate.UrlFile.LastIndexOf("/") - 1);

                                            var file = new FileInFolder()
                                            {
                                                Active = true,
                                                CreatedById = parameter.UserId,
                                                CreatedDate = DateTime.Now,
                                                FileInFolderId = Guid.NewGuid(),
                                                FileName = fileName.Substring(0, fileName.LastIndexOf(".") - 1) + "_" + Guid.NewGuid().ToString(),
                                                FolderId = folder.FolderId,
                                                ObjectId = ca.CandidateId,
                                                ObjectType = "CANDIDATE",
                                                Size = "",
                                                FileExtension = fileName.Substring(fileName.LastIndexOf(".") + 1)
                                            };

                                            string fullPath = Path.Combine(newPath, file.FileName + "." + file.FileExtension);
                                            using (var streamCopy = new FileStream(fullPath, FileMode.Create))
                                            {
                                                stream.CopyTo(streamCopy);
                                            }

                                            context.FileInFolder.Add(file);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                            }

                            // Gửi email cho người phụ trách vị trí tuyển dụng
                            if (parameter.Candidate.VacanciesId != null && parameter.Candidate.VacanciesId != Guid.Empty)
                            {
                                var nguoiPhuTrachTDId = context.Vacancies.FirstOrDefault(x => x.VacanciesId == parameter.Candidate.VacanciesId).PersonInChargeId;
                                if (nguoiPhuTrachTDId != null && nguoiPhuTrachTDId != Guid.Empty)
                                {
                                    var emp = context.Employee.FirstOrDefault(x => x.EmployeeId == nguoiPhuTrachTDId);

                                    NotificationHelper.AccessNotification(context, "CANDIDATE_CMS", "", ca, emp, true);
                                }
                            }
                            return new SynchronizeCandidateDataFromCMSResult
                            {
                                StatusCode = HttpStatusCode.OK
                            };
                        }
                        else
                            return new SynchronizeCandidateDataFromCMSResult
                            {
                                Message = "Không tìm thấy vị trí tuyển dụng trong hệ thống. Vui lòng đồng bộ dữ liệu trước khi thao tác.",
                                StatusCode = HttpStatusCode.FailedDependency
                            };
                    }
                    else
                    {
                        return new SynchronizeCandidateDataFromCMSResult
                        {
                            Message = "Đã có lỗi xảy ra trong quá trình đồng bộ.",
                            StatusCode = HttpStatusCode.FailedDependency
                        };
                    }

                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return new SynchronizeCandidateDataFromCMSResult
                    {
                        Message = "Đã có lỗi xảy ra trong quá trình đồng bộ.",
                        StatusCode = HttpStatusCode.FailedDependency
                    };
                }
            }
        }
        public GetListBaoCaoNhanSuResult GetListBaoCaoNhanSu(GetListBaoCaoNhanSuParameter parameter)
        {
            try
            {
                var listProvince = new List<ProvinceEntityModel>();//khu vực làm việc
                var listOrganization = new List<OrganizationEntityModel>();//phòng ban
                var listPosition = new List<PositionModel>();//chức vụ
                var listDeptCode = new List<BaseType>();
                var listSubCode1 = new List<BaseType>();
                var listSubCode2 = new List<BaseType>();
                var listCapBac = new List<CategoryEntityModel>();
                var listBangCap = new List<CategoryEntityModel>();//trình độ học vấn
                var listKyNangTayNghe = new List<BaseType>();//trình độ chuyên môn

                var listEmployee = new List<EmployeeEntityModel>();

                listProvince = context.Province.Where(x => x.IsShowAsset == true)
                    .Select(p => new ProvinceEntityModel()
                    {
                        ProvinceId = p.ProvinceId,
                        ProvinceName = p.ProvinceName,
                        ProvinceCode = p.ProvinceCode,
                    }).OrderBy(p => p.ProvinceName).ToList();

                listOrganization = context.Organization
                    .Select(x => new OrganizationEntityModel
                    {
                        OrganizationId = x.OrganizationId,
                        OrganizationName = x.OrganizationName
                    }).ToList();

                listPosition = context.Position
                    .Select(y => new PositionModel
                    {
                        PositionId = y.PositionId,
                        PositionCode = y.PositionCode,
                        PositionName = y.PositionName
                    }).ToList();

                listDeptCode = GeneralList.GetDeptCode();
                listSubCode1 = GeneralList.GetSubCode1();
                listSubCode2 = GeneralList.GetSubCode2();

                var capBacType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "CAPBAC");
                if (capBacType != null)
                {
                    listCapBac = context.Category.Where(x => x.CategoryTypeId == capBacType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryName = y.CategoryName
                        }).OrderBy(z => z.CategoryName).ToList();
                }

                var bangCapType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP");

                listBangCap = context.Category
                        .Where(x => x.CategoryTypeId == bangCapType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();

                listKyNangTayNghe = GeneralList.GetKyNangTayNghe();


                listEmployee = context.Employee
                        .Select(e => new EmployeeEntityModel
                        {
                            EmployeeId = e.EmployeeId,
                            EmployeeCode = e.EmployeeCode,
                            EmployeeName = e.EmployeeName,
                            OrganizationId = e.OrganizationId,
                            OrganizationName = listOrganization.FirstOrDefault(x => x.OrganizationId == e.OrganizationId).OrganizationName ?? "",
                            PositionId = e.PositionId,
                            PositionName = listPosition.FirstOrDefault(x => x.PositionId == e.PositionId).PositionName ?? "",
                            CapBacId = e.CapBacId,
                            CapBacName = listCapBac.FirstOrDefault(x => x.CategoryId == e.CapBacId).CategoryName ?? "",
                            DeptCodeValue = e.DeptCodeValue,
                            DeptCode = listDeptCode.FirstOrDefault(x => x.Value == e.DeptCodeValue).Name ?? "",
                            SubCode1 = e.SubCode1Value,
                            SubCode1Name = listSubCode1.FirstOrDefault(x => x.Value == e.SubCode1Value).Name ?? "",
                            SubCode2 = e.SubCode2Value,
                            SubCode2Name = listSubCode2.FirstOrDefault(x => x.Value == e.SubCode2Value).Name ?? "",
                            StartDateMayChamCong = e.StartDateMayChamCong,
                            BangCapCaoNhatDatDuocId = e.BangCapCaoNhatDatDuocId,
                            BangCapCaoNhatDatDuocName = listBangCap.FirstOrDefault(x => x.CategoryId == e.BangCapCaoNhatDatDuocId).CategoryName ?? "",
                            KyNangTayNghes = e.KyNangTayNghes,
                            KyNangTayNghesName = listKyNangTayNghe.FirstOrDefault(x => x.Value == e.KyNangTayNghes).Name ?? "",
                            CreatedById = e.CreatedById,
                            CreatedDate = e.CreatedDate,
                            Active = e.Active,
                            //ActiveUser = u.Active
                        }).ToList();
                //&&
                //userEmployeeIds.Contains(e.EmployeeId) &&
                //(e.EmployeeCode.ToLower()
                //    .Contains(parameter.IdentityId.ToLower().Trim()) ||
                //parameter.IdentityId == null ||
                //parameter.IdentityId.Trim() == "") &&
                //(parameter.FromContractExpiryDate == null ||
                //parameter.FromContractExpiryDate == DateTime.MinValue ||
                //parameter.FromContractExpiryDate.Value.Date <=
                //e.ContractEndDate.Value.Date) &&
                //(parameter.ToContractExpiryDate == null ||
                //parameter.ToContractExpiryDate == DateTime.MinValue ||
                //parameter.ToContractExpiryDate.Value.Date >=
                //e.ContractEndDate.Value.Date) &&
                //(listGetAllChild == null || listGetAllChild.Count == 0 ||
                //e.OrganizationId == null ||
                //listGetAllChild.Contains(e.OrganizationId.Value)) &&
                //(parameter.ListPosition.Count == 0 ||
                //parameter.ListPosition.Contains(e.PositionId.Value) ||
                //e.PositionId == null)
                var listAllContact = context.Contact.Where(x => x.ObjectType == "EMP").ToList();
                var listAllUser = context.User.ToList();
                listEmployee.ForEach(emp =>
                {
                    var contact = listAllContact.FirstOrDefault(x => x.ObjectId == emp.EmployeeId);
                    if (contact != null)
                    {
                        emp.ProvinceId = contact.ProvinceId;
                        emp.ProvinceName = listProvince.FirstOrDefault(x => x.ProvinceId == emp.ProvinceId)?.ProvinceName;
                        emp.DateOfBirth = contact.DateOfBirth;
                        emp.Gender = contact.Gender;
                        emp.Age = contact.DateOfBirth != null ? GetAge((DateTime)contact.DateOfBirth) : 0;
                    }

                    emp.SoNamLamViec = emp.StartDateMayChamCong != null ? GetAge((DateTime)emp.StartDateMayChamCong) : 0;

                    var trangThaiId = 0;
                    var user = listAllUser.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                    if (emp.Active == true && user.Active == true)
                    {
                        trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                    }
                    else if (emp.Active == true && user.Active == false)
                    {
                        trangThaiId = 2; //Đang hoạt động - Không được truy cập
                    }
                    else
                    {
                        trangThaiId = 3; //Ngừng hoạt động
                        emp.SoNamLamViec = 0;
                    }
                    emp.TrangThaiId = trangThaiId;
                });


                return new GetListBaoCaoNhanSuResult
                {
                    StatusCode = HttpStatusCode.OK,
                    ListProvince = listProvince,
                    ListOrganization = listOrganization,
                    ListPosition = listPosition,
                    ListDeptCode = listDeptCode,
                    ListSubCode1 = listSubCode1,
                    ListSubCode2 = listSubCode2,
                    ListCapBac = listCapBac,
                    ListBangCap = listBangCap,
                    ListKyNangTayNghe = listKyNangTayNghe,
                    ListEmployee = listEmployee
                };
            }
            catch (Exception ex)
            {
                return new GetListBaoCaoNhanSuResult
                {
                    Message = ex.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetBieuDoThongKeNhanSuResult GetBieuDoThongKeNhanSu(GetBieuDoThongKeNhanSuParameter parameter)
        {
            try
            {
                #region Data chung
                var listAllCategoryType = context.CategoryType.ToList();
                var listAllCategory = context.Category.ToList();
                var listAllEmp = context.Employee.ToList();
                var listAllContact = context.Contact.ToList();
                var listSubCode1 = GeneralList.GetSubCode1();
                var listBangCap = new List<CategoryEntityModel>();//trình độ học vấn
                var listKyNangTayNghe = new List<BaseType>();//trình độ chuyên môn

                var bangCapType = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "BANGCAP");

                listBangCap = context.Category
                        .Where(x => x.CategoryTypeId == bangCapType.CategoryTypeId)
                        .Select(y => new CategoryEntityModel
                        {
                            CategoryId = y.CategoryId,
                            CategoryCode = y.CategoryCode,
                            CategoryName = y.CategoryName
                        }).ToList();

                listKyNangTayNghe = GeneralList.GetKyNangTayNghe();

                List<DateTime> lstCategoriesChart = new List<DateTime>();
                List<String> categoriesChart = new List<String>();
                if (parameter.FromDate != null && parameter.ToDate != null)
                {
                    if (parameter.Type == 3 || parameter.Type == 6 || parameter.Type == 8 || parameter.Type == 10)
                    {
                        //tìm list các tháng được chọn cùng năm (1/2022, 2/2022, 3/2022,..)
                        lstCategoriesChart.Add(parameter.FromDate.Value);
                        categoriesChart.Add(parameter.FromDate.Value.ToString("M/yyyy"));

                        //Ngày cuối cùng của 2 tháng đã chọn
                        var paramDateFrom = parameter.FromDate.Value;
                        var paramDateTo = parameter.ToDate.Value;
                        var lastDayFromOfMonth = new DateTime(paramDateFrom.Year, paramDateFrom.Month, DateTime.DaysInMonth(paramDateFrom.Year, paramDateFrom.Month));
                        var lastDayToOfMonth = new DateTime(paramDateTo.Year, paramDateTo.Month, DateTime.DaysInMonth(paramDateTo.Year, paramDateTo.Month));

                        while (lastDayFromOfMonth.Month < lastDayToOfMonth.Month)
                        {
                            lastDayFromOfMonth = lastDayFromOfMonth.AddMonths(1);
                            lstCategoriesChart.Add(lastDayFromOfMonth);
                            categoriesChart.Add(lastDayFromOfMonth.ToString("M/yyyy"));
                        }
                    }
                    else if (parameter.Type == 12)
                    {
                        
                    }
                    else {
                        //tìm list các tháng cùng kỳ của các năm (1/2020, 1/2021, 1/2022,...)
                        lstCategoriesChart.Add(parameter.FromDate.Value);
                        categoriesChart.Add(parameter.FromDate.Value.ToString("M/yyyy"));

                        //Ngày cuối cùng của 2 tháng đã chọn
                        var paramDateFrom = parameter.FromDate.Value;
                        var paramDateTo = parameter.ToDate.Value;
                        var lastDayFromOfMonth = new DateTime(paramDateFrom.Year, paramDateFrom.Month, DateTime.DaysInMonth(paramDateFrom.Year, paramDateFrom.Month));
                        var lastDayToOfMonth = new DateTime(paramDateTo.Year, paramDateTo.Month, DateTime.DaysInMonth(paramDateTo.Year, paramDateTo.Month));

                        while (lastDayFromOfMonth.Year < lastDayToOfMonth.Year)
                        {
                            lastDayFromOfMonth = lastDayFromOfMonth.AddYears(1);
                            lstCategoriesChart.Add(lastDayFromOfMonth);
                            categoriesChart.Add(lastDayFromOfMonth.ToString("M/yyyy"));
                        }
                    }
                }
                #endregion


                var dataThongKeNhanSu = new List<ThongKeNhanSuChartModel>();
                var dataThongKeNhanSuPieChart = new List<DataPieChartModel>();

                #region Thống kê nhân sự theo SUB CODE 1
                if (parameter.Type == 2 || parameter.Type == 3)
                {
                    listSubCode1.ForEach(subCode1 =>
                    {
                        var obj = new ThongKeNhanSuChartModel();
                        obj.Name = subCode1.Name;
                        obj.Data = new List<int>();
                        lstCategoriesChart.ForEach(time =>
                        {
                            int countEmp = listAllEmp.Where(x => x.SubCode1Value == subCode1.Value
                                                        && ((x.Active == true && x.StartDateMayChamCong != null && x.StartDateMayChamCong.Value <= time)
                                                        || (x.Active == false && x.StartDateMayChamCong != null && x.StartDateMayChamCong.Value <= time && x.NgayNghiViec != null && x.NgayNghiViec.Value > time)))
                                                        .Count();
                            obj.Data.Add(countEmp);
                        });
                        dataThongKeNhanSu.Add(obj);
                    });
                }
                #endregion

                #region Thống kê nhân sự theo thâm niên
                if (parameter.Type == 4)
                {
                    var listAllEmpActive = listAllEmp.Where(x => x.Active == true).ToList();
                    var lstDataChart = new List<BaseType>()
                    {
                        new BaseType() { Value = 1, Name = "<= 1 year" },
                        new BaseType() { Value = 2, Name = "> 1 to <= 2 year" },
                        new BaseType() { Value = 3, Name = "> 2 year" }
                    };

                    lstDataChart.ForEach(item =>
                    {
                        var obj = new DataPieChartModel();
                        obj.Name = item.Name;
                        switch (item.Value)
                        {
                            case 1:
                                obj.Y = listAllEmpActive.Where(x => (x.StartDateMayChamCong != null && GetAge(x.StartDateMayChamCong.Value) <= 1)).Count();
                                break;
                            case 2:
                                obj.Y = listAllEmpActive.Where(x => (x.StartDateMayChamCong != null && GetAge(x.StartDateMayChamCong.Value) > 1 && GetAge(x.StartDateMayChamCong.Value) <= 2)).Count();
                                break;
                            case 3:
                                obj.Y = listAllEmpActive.Where(x => (x.StartDateMayChamCong != null && GetAge(x.StartDateMayChamCong.Value) > 2)).Count();
                                break;
                        }

                        dataThongKeNhanSuPieChart.Add(obj);
                    });
                }

                #endregion

                #region Thống kê nhân sự theo giới tính
                if (parameter.Type == 5 || parameter.Type == 6)
                {
                    var lstDataChart = new List<BaseType>()
                    {
                        new BaseType() { Key = "NAM", Name = "Male" },
                        new BaseType() { Key = "NU", Name = "Female" }
                    };

                    lstDataChart.ForEach(gender =>
                    {
                        var obj = new ThongKeNhanSuChartModel();
                        obj.Name = gender.Name;
                        obj.Data = new List<int>();
                        lstCategoriesChart.ForEach(time =>
                        {
                            int countEmp = (from e in listAllEmp
                                            join c in listAllContact on e.EmployeeId equals c.ObjectId
                                            where ( c.Gender != null && c.Gender == gender.Key && 
                                                    ((e.Active == true && e.StartDateMayChamCong != null && e.StartDateMayChamCong.Value <= time)
                                                    || (e.Active == false && e.StartDateMayChamCong != null && e.StartDateMayChamCong.Value <= time && e.NgayNghiViec != null && e.NgayNghiViec.Value > time))
                                                  )
                                            select new Employee { EmployeeId = e.EmployeeId }).Count();
                            obj.Data.Add(countEmp);
                        });
                        dataThongKeNhanSu.Add(obj);
                    });
                }
                #endregion

                #region Thống kê nhân sự theo độ tuổi
                if (parameter.Type == 7 || parameter.Type == 8)
                {
                    var lstDataChart = new List<DoTuoi>()
                    {
                        new DoTuoi() { Value1 = 19, Value2 = 23, Name = "19-23" },
                        new DoTuoi() { Value1 = 24, Value2 = 28, Name = "24-28" },
                        new DoTuoi() { Value1 = 29, Value2 = 33, Name = "29-33" },
                        new DoTuoi() { Value1 = 34, Value2 = 38, Name = "34-38" },
                        new DoTuoi() { Value1 = 39, Value2 = 43, Name = "39-43" }
                    };

                    List<int> lstAge = new List<int>();
                    listAllContact.ForEach(item =>
                    {
                        if(item.DateOfBirth != null)
                        {
                            int age = GetAge(item.DateOfBirth.Value);
                            lstAge.Add(age);
                        }
                        
                    });

                    lstDataChart.ForEach(age =>
                    {
                        var obj = new ThongKeNhanSuChartModel();
                        obj.Name = age.Name;
                        obj.Data = new List<int>();
                        lstCategoriesChart.ForEach(time =>
                        {
                            int countEmp = (from e in listAllEmp
                                            join c in listAllContact on e.EmployeeId equals c.ObjectId
                                            where (c.DateOfBirth != null && GetAge(c.DateOfBirth.Value) >= age.Value1 && GetAge(c.DateOfBirth.Value) <= age.Value2 &&
                                                    ((e.Active == true && e.StartDateMayChamCong != null && e.StartDateMayChamCong.Value <= time)
                                                    || (e.Active == false && e.StartDateMayChamCong != null && e.StartDateMayChamCong.Value <= time && e.NgayNghiViec != null && e.NgayNghiViec.Value > time))
                                                  )
                                            select new Employee { EmployeeId = e.EmployeeId }).Count();
                            obj.Data.Add(countEmp);
                        });
                        dataThongKeNhanSu.Add(obj);
                    });
                }
                #endregion

                #region Thống kê nhân sự theo trình độ học vấn
                if (parameter.Type == 9 || parameter.Type == 10)
                {
                    listBangCap.ForEach(bangCap =>
                    {
                        var obj = new ThongKeNhanSuChartModel();
                        obj.Name = bangCap.CategoryName;
                        obj.Data = new List<int>();
                        lstCategoriesChart.ForEach(time =>
                        {
                            int countEmp = listAllEmp.Where(x => x.BangCapCaoNhatDatDuocId == bangCap.CategoryId
                                                        && ((x.Active == true && x.StartDateMayChamCong != null && x.StartDateMayChamCong.Value <= time)
                                                        || (x.Active == false && x.StartDateMayChamCong != null && x.StartDateMayChamCong.Value <= time && x.NgayNghiViec != null && x.NgayNghiViec.Value > time)))
                                                        .Count();
                            obj.Data.Add(countEmp);
                        });
                        dataThongKeNhanSu.Add(obj);
                    });
                }
                #endregion

                #region Thống kê nhân sự theo chuyên môn
                if (parameter.Type == 11)
                {
                    var listAllEmpActive = listAllEmp.Where(x => x.Active == true).ToList();

                    listKyNangTayNghe.ForEach(item =>
                    {
                        var obj = new DataPieChartModel();
                        obj.Name = item.Name;
                        obj.Y = listAllEmpActive.Where(x => x.KyNangTayNghes == item.Value).Count();       
                        dataThongKeNhanSuPieChart.Add(obj);
                    });
                }

                #endregion

                #region Thống kê nhân sự đã nghỉ việc
                if (parameter.Type == 12)
                {
                    listSubCode1.ForEach(subCode1 =>
                    {
                        categoriesChart.Add(subCode1.Name);
                    });
                    var paramDateFrom = parameter.FromDate.Value;
                    var paramDateTo = parameter.ToDate.Value;
                    List<int> listYear = new List<int>();
                    if (paramDateFrom.Year == paramDateTo.Year)
                    {
                        listYear.Add(paramDateFrom.Year);
                        listYear.ForEach(year =>
                        {
                            var obj = new ThongKeNhanSuChartModel();
                            obj.Name = year.ToString();
                            obj.Data = new List<int>();

                            var firstDayOfMonth = new DateTime(paramDateFrom.Year, paramDateFrom.Month, 1);//ngày đầu tiên trong tháng
                            var lastDayOfMonth = new DateTime(paramDateTo.Year, paramDateTo.Month, DateTime.DaysInMonth(paramDateTo.Year, paramDateTo.Month));//ngày cuối cùng trong tháng

                            listSubCode1.ForEach(subCode1 =>
                            {
                                int countEmp = listAllEmp.Where(x => x.SubCode1Value == subCode1.Value
                                                            && (x.Active == false && x.NgayNghiViec != null && x.NgayNghiViec.Value <= lastDayOfMonth && x.NgayNghiViec.Value >= firstDayOfMonth))
                                                            .Count();
                                obj.Data.Add(countEmp);
                                
                            });
                            dataThongKeNhanSu.Add(obj);
                        });
                        
                    }
                    else
                    {
                        var paramDateFromValue = paramDateFrom;
                        while (paramDateFromValue.Year < paramDateTo.Year)
                        {
                            paramDateFromValue = paramDateFromValue.AddYears(1);
                            listYear.Add(paramDateFromValue.Year);
                        }

                        listYear.ForEach(year =>
                        {
                            var obj = new ThongKeNhanSuChartModel();
                            obj.Name = year.ToString();
                            obj.Data = new List<int>();

                            DateTime firstDayOfMonth;
                            DateTime lastDayOfMonth;
                            if(year == paramDateFrom.Year)
                            {
                                firstDayOfMonth = new DateTime(paramDateFrom.Year, paramDateFrom.Month, 1);//ngày đầu tiên trong tháng của FromDate
                                lastDayOfMonth = new DateTime(year, 12, 31);//ngày cuối cùng trong năm của FromDate
                            } else if(year == paramDateTo.Year)
                            {
                                firstDayOfMonth = new DateTime(year, 1, 1);//ngày đầu tiên trong năm của ToDate
                                lastDayOfMonth = new DateTime(paramDateTo.Year, paramDateTo.Month, DateTime.DaysInMonth(paramDateTo.Year, paramDateTo.Month));//ngày cuối cùng trong tháng của ToDate
                            } else
                            {
                                firstDayOfMonth = new DateTime(year, 1, 1);//ngày đầu tiên trong năm hiện tại
                                lastDayOfMonth = new DateTime(year, 12, 31);//ngày cuối cùng trong năm hiện tại
                            }
                            

                            listSubCode1.ForEach(subCode1 =>
                            {
                                int countEmp = listAllEmp.Where(x => x.SubCode1Value == subCode1.Value
                                                            && (x.Active == false && x.NgayNghiViec != null && x.NgayNghiViec.Value <= lastDayOfMonth && x.NgayNghiViec.Value >= firstDayOfMonth))
                                                            .Count();
                                obj.Data.Add(countEmp);

                            });
                            dataThongKeNhanSu.Add(obj);
                        });
                    }

                    
                }
                #endregion

                return new GetBieuDoThongKeNhanSuResult
                {
                    StatusCode = HttpStatusCode.OK,
                    CategoriesChart = categoriesChart,
                    ChartThongKeNhanSu = dataThongKeNhanSu,
                    PieChartThongKeNhanSu = dataThongKeNhanSuPieChart
                };
            }
            catch (Exception ex)
            {
                return new GetBieuDoThongKeNhanSuResult
                {
                    Message = ex.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public int GetAge(DateTime date)
        {
            // Save today's date.
            var today = DateTime.Today;

            // Calculate the age.
            var age = today.Year - date.Year;

            // Go back to the year in which the person was born in case of a leap year
            if (date.Date > today.AddYears(-age)) age--;
            return age;
        }
        private Guid GetTruongBoPhanId(Guid NguoiDuocDanhGiaOrganizationId, List<Organization> organizations, List<ThanhVienPhongBan> thanhVienPhongBans)
        {
            //lấy phòng ban lv 1
            var listPhongBanLv1 = organizations.Where(x => x.Level == 1).Select(x => x.OrganizationId).ToList();
            //lấy các trưởng bộ phận lv 1
            var listTruongBoPhanlv1 = thanhVienPhongBans.Where(x => x.IsManager == 1 && listPhongBanLv1.Contains(x.OrganizationId)).ToList();
            var truongBoPhanEmpId = Guid.Empty;
            listTruongBoPhanlv1.ForEach(item =>
            {
                var listGetAllChild = new List<Guid?>();
                listGetAllChild.Add(item.OrganizationId);
                listGetAllChild = getOrganizationChildrenId(item.OrganizationId, listGetAllChild);
                //Nếu trưởng bộ phận quản lý user thì trả về kết quả
                if (listGetAllChild.Contains(NguoiDuocDanhGiaOrganizationId))
                {
                    truongBoPhanEmpId = item.EmployeeId;
                }
            });
            return truongBoPhanEmpId;
        }


        public DashboardHomeViewDetailResult DashboardHomeViewDetail(DashboardHomeViewDetailParameter parameter)
        {
            try
            {
                #region Data chung
                var listDataDetail = new List<EmployeeEntityModel>();

                var listAllCategoryType = context.CategoryType.ToList();
                var listAllCategory = context.Category.ToList();
                var categoryTypeHDLDId = listAllCategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS").CategoryTypeId;
                var listSubCode1 = GeneralList.GetSubCode1();
                var listAllOrg = context.Organization.ToList();
                var listAllPosition = context.Position.ToList();
                var thoiDiemHienTai = DateTime.Now.Date;
                var listAllContact = context.Contact.ToList();
                var listAllHopDongNhanSu = context.HopDongNhanSu.ToList();
                var listAllUser = context.User.ToList();
                var listAllProvince = context.Province.Where(x => x.IsShowAsset == true).Select(x => x.ProvinceId).ToList();
                var listAllEmp = context.Employee.Select(x => new EmployeeEntityModel
                {
                    EmployeeId = x.EmployeeId,
                    EmployeeName = x.EmployeeName,
                    EmployeeCode = x.EmployeeCode,
                    StartDateMayChamCong = x.StartDateMayChamCong,
                    ViTriLamViec = x.DiaDiemLamviec,
                    SubCode1 = x.SubCode1Value,
                    NgayNghiViec = x.NgayNghiViec,
                    DateOfBirth = listAllContact.FirstOrDefault(y => y.ObjectId == x.EmployeeId && y.ObjectType == "EMP").DateOfBirth,
                    ProvinceId = listAllContact.FirstOrDefault(y => y.ObjectId == x.EmployeeId && y.ObjectType == "EMP").ProvinceId,
                    OrganizationName = listSubCode1.FirstOrDefault(y => y.Value == x.SubCode1Value).Name,
                    PositionName = x.PositionId != null ? listAllPosition.FirstOrDefault(y => y.PositionId == x.PositionId).PositionName : "",
                }).ToList();

                listAllEmp = listAllEmp.Where(x => x.ProvinceId != null && listAllProvince.Contains(x.ProvinceId.Value)).ToList();

                listAllEmp.ForEach(emp =>
                {
                    var trangThaiId = 0;
                    var user = listAllUser.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                    if (emp.Active == true || user.Active == true)
                    {
                        trangThaiId = 1; //Đang hoạt động 
                    }
                    else
                    {
                        trangThaiId = 2; //Ngừng hoạt động
                    }
                    emp.TrangThaiId = trangThaiId;
                });

                #endregion

                #region Thống kê nhân sự sinh nhật trong tháng
                if (parameter.Type == 0)
                {
                    //Lấy ra nhân viên có sinh nhật cùng tháng chuyền về. 
                    listDataDetail = listAllEmp.Where(x => x.DateOfBirth != null && x.TrangThaiId == 1 && x.DateOfBirth.Value.Month == DateTime.Now.Month).ToList();
                }
                #endregion


                var listHopDongNhanSu = new List<HopDongNhanSu>();
                listAllEmp.ForEach(item =>
                {
                    if (item.TrangThaiId == 1)//Nhân viên có trạng thái ngừng hoạt động
                    {
                        var nhdns = listAllHopDongNhanSu.Where(x => x.EmployeeId == item.EmployeeId).OrderByDescending(x => x.NgayKyHopDong).ToList();
                        if (nhdns.Count() > 0)
                        {
                            listHopDongNhanSu.Add(nhdns.First());
                        }
                    }
                });

                #region Thống kê nhân sự sắp hết hạn hợp đồng ( trước thời hạn khoảng 30 ngày ) đối với HDLD
                if (parameter.Type == 1)
                {
                    //Lấy các loại hợp đồng lao động. Trong code có HĐLĐ
                    var dataThongKeNhanSuSapHetHanHD = new List<DataPieChartModel>();
                    var listLoaiHDLDId = listAllCategory.Where(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode.StartsWith("HÐLÐ"))
                                        .Select(x => x.CategoryId).ToList();

                    var listEmpSapHetHanHDId = listHopDongNhanSu.Where(x => x.NgayKetThucHopDong != null && x.Active == true
                        && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 30
                        && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                        && listLoaiHDLDId.Contains(x.LoaiHopDongId)
                        ).Select(x => x.EmployeeId).ToList();

                    listDataDetail = listAllEmp.Where(x => listEmpSapHetHanHDId.Contains(x.EmployeeId.Value)).ToList();
                    listDataDetail.ForEach(item =>
                    {
                        var hopDong = listHopDongNhanSu.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                        if (hopDong != null)
                        {
                            item.LoaiHopDongName = listAllCategory.FirstOrDefault(x => x.CategoryId == hopDong.LoaiHopDongId)?.CategoryName;
                            item.NgayKyHopDong = hopDong?.NgayKyHopDong;
                            item.NgayBatDau = hopDong?.NgayBatDauLamViec;
                            item.NgayKetThuc = hopDong?.NgayKetThucHopDong;
                        }
                    });
                }
                #endregion


                if (parameter.Type == 2)
                {
                    #region Thống kê nhân sự sắp hết hạn thử việc
                    //Lấy các loại hợp đồng lao động. Trong code có HĐLĐ
                    var dataThongKeNhanSuSapHetHanThuViec = new List<DataPieChartModel>();

                    var listLoaiHDDTId = listAllCategory.Where(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode.StartsWith("HĐĐT"))
                                        .Select(x => x.CategoryId).ToList();

                    var hDDT1ThangId = listAllCategory.FirstOrDefault(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode == "HĐĐT1");
                    var hDDT2ThangId = listAllCategory.FirstOrDefault(x => x.CategoryTypeId == categoryTypeHDLDId && x.CategoryCode == "HĐĐT2");

                    //Thử việc 1 tháng báo trước 5 ngày. thử việc 2 tháng báo trước 10 ngày
                    var listEmpSapHetHanThuViecId = listHopDongNhanSu.Where(x => x.NgayKetThucHopDong != null && x.Active == true
                        && (((x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 5
                        && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                        && hDDT1ThangId.CategoryId == x.LoaiHopDongId)

                        || ((x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays <= 10
                        && (x.NgayKetThucHopDong.Value.Date - thoiDiemHienTai).TotalDays > 0
                        && hDDT2ThangId.CategoryId == x.LoaiHopDongId))
                        ).Select(x => x.EmployeeId).Distinct().ToList();

                    listDataDetail = listAllEmp.Where(x => listEmpSapHetHanThuViecId.Contains(x.EmployeeId.Value)).ToList();
                    listDataDetail.ForEach(item =>
                    {
                        var hopDong = listHopDongNhanSu.FirstOrDefault(x => x.EmployeeId == item.EmployeeId);
                        if (hopDong != null)
                        {
                            item.LoaiHopDongName = listAllCategory.FirstOrDefault(x => x.CategoryId == hopDong.LoaiHopDongId)?.CategoryName;
                            item.NgayKyHopDong = hopDong?.NgayKyHopDong;
                            item.NgayBatDau = hopDong?.NgayBatDauLamViec;
                            item.NgayKetThuc = hopDong?.NgayKetThucHopDong;
                        }
                    });
                    #endregion
                }
                return new DashboardHomeViewDetailResult
                {
                    ListDataDetail = listDataDetail,
                    Type = parameter.Type,
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DashboardHomeViewDetailResult
                {
                    Message = "Lấy thông tin không thành công",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public bool IsUrlExist(string url, int timeOutMs = 1000)
        {
            WebRequest webRequest = WebRequest.Create(url);
            webRequest.Method = "HEAD";
            webRequest.Timeout = timeOutMs;

            try
            {
                var response = webRequest.GetResponse();
                /* response is `200 OK` */
                response.Close();
            }
            catch
            {
                /* Any other response */
                return false;
            }

            return true;
        }

        public GiaHanPheDuyetKeHoachOTResult GiaHanPheDuyetKeHoachOT(GiaHanPheDuyetKeHoachOTParameter parameter)
        {
            try
            {
                var keHoachOt = context.KeHoachOt.FirstOrDefault(x => x.KeHoachOtId == parameter.KeHoachOtId);
                if(keHoachOt == null)
                {
                    return new GiaHanPheDuyetKeHoachOTResult
                    {
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        Message = "Kế hoạch OT không tồn tại trên hệ thống",
                    };
                }
                var nowDate = DateTime.Now;
                var tuNgay = keHoachOt.NgayBatDau.Value.Date.Add(keHoachOt.GioBatDau.Value);

                if (parameter.HanPheDuyetKeHoachOt > tuNgay ||
                    parameter.HanPheDuyetKeHoachOt < nowDate)
                {
                    return new GiaHanPheDuyetKeHoachOTResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Hạn phê duyệt kế hoạch phải sau thời điểm hiện tại và trước Thời gian bắt đầu OT"
                    };
                }

                if (parameter.HanDangKyKeHoachOT > tuNgay ||
                    parameter.HanDangKyKeHoachOT < parameter.HanPheDuyetKeHoachOt)
                {
                    return new GiaHanPheDuyetKeHoachOTResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Hạn đăng ký OT phải sau Hạn phê duyệt kế hoạch và trước Thời gian bắt đầu OT"
                    };
                }

                if (parameter.HanPheDuyetDangKyOt > tuNgay ||
                    parameter.HanPheDuyetDangKyOt < parameter.HanDangKyKeHoachOT)
                {
                    return new GiaHanPheDuyetKeHoachOTResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Hạn phê duyệt đăng ký OT phải sau Hạn đăng ký OT và trước Thời gian bắt đầu OT"
                    };
                }

                keHoachOt.HanDangKy = parameter.HanDangKyKeHoachOT;
                keHoachOt.HanPheDuyetKeHoach = parameter.HanPheDuyetKeHoachOt;
                keHoachOt.HanPheDuyetDangKy = parameter.HanPheDuyetDangKyOt;

                //Chuyển trạng thái kế hoạch thành chờ phê duyệt kế hoạch OT
                var trangThaiChoPheDuyet = GeneralList.GetTrangThais("TrangThaiKeHoachOt").FirstOrDefault(x => x.Value == 2).Value;
                keHoachOt.TrangThai = (byte?)trangThaiChoPheDuyet;

                context.KeHoachOt.Update(keHoachOt);
                context.SaveChanges();
            }
            catch (Exception e)
            {
                return new GiaHanPheDuyetKeHoachOTResult
                {
                    Message = e.Message,
                    StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                };
            }

            return new GiaHanPheDuyetKeHoachOTResult
            {
                StatusCode = System.Net.HttpStatusCode.OK,
                Message = "Gia hạn thành công!",
            };

        }

        public HoanThanhHoSoCongTacResult HoanThanhHoSoCongTac(HoanThanhHoSoCongTacParameter parameter)
        {
            try
            {
                var hoSoCt = context.HoSoCongTac.FirstOrDefault(x => x.HoSoCongTacId == parameter.HoSoCongTacId);
                if (hoSoCt == null)
                {
                    return new HoanThanhHoSoCongTacResult()
                    {
                        StatusCode = HttpStatusCode.NotFound,
                        Message = "Hồ sơ công tác không tồn tại trên hệ thống",
                    };
                }

                hoSoCt.TrangThai = 1;
                context.HoSoCongTac.Update(hoSoCt);
                context.SaveChanges();

                return new HoanThanhHoSoCongTacResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Hoàn thành thành công",
                };
            }
            catch (Exception e)
            {
                return new HoanThanhHoSoCongTacResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    Message = e.Message,
                };
            }
        }

        private List<EmployeeEntityModel> GetAllEmpHoatDong(List<EmployeeEntityModel> listEmp, List<User> listUser)
        {
            var listResult = new List<EmployeeEntityModel>();
            listEmp.ForEach(emp =>
            {
                var trangThaiId = 0;
                var user = listUser.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);
                if (emp.Active == true && user.Active == true)
                {
                    trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                    listResult.Add(emp);
                }
                else if (emp.Active == true && user.Active == false)
                {
                    trangThaiId = 2; //Đang hoạt động - Không được truy cập
                    listResult.Add(emp);
                }           
            });

            return listResult;
        }

        public SaveGhiChuNhanVienKeHoachOTResult SaveGhiChuNhanVienKeHoachOT(SaveGhiChuNhanVienKeHoachOTParameter parameter)
        {
            try
            {
                var nhanVienDangKyOt = context.KeHoachOtThanhVien.FirstOrDefault(x => x.ThanVienOtId == parameter.ThanhVienOtId);
                if (nhanVienDangKyOt == null)
                {
                    return new SaveGhiChuNhanVienKeHoachOTResult()
                    {
                        StatusCode = HttpStatusCode.InternalServerError,
                        Message = "Không tìm thấy nhân viên trong danh sách đăng ký OT!",
                    };
                }
                nhanVienDangKyOt.GhiChu = parameter.GhiChu;
                context.KeHoachOtThanhVien.Update(nhanVienDangKyOt);
                context.SaveChanges();
                return new SaveGhiChuNhanVienKeHoachOTResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Hoàn thành thành công",
                };
            }
            catch (Exception e)
            {
                return new SaveGhiChuNhanVienKeHoachOTResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    Message = e.Message,
                };
            }
        }

        public LayNhanVienCungCapVaCapDuoiOrgResult LayNhanVienCungCapVaCapDuoiOrg(LayNhanVienCungCapVaCapDuoiOrgParameter parameter)
        {
            try
            {
                var isShowTaoDeXuatTangLuong = false;
                var listEmp = new List<EmployeeEntityModel>();
                var listNhanVienKyDanhGia = new List<NhanVienKyDanhGiaEntityModel>();
                decimal tongMucTangQuanLy = 0;
                decimal quyLuongConLai = 0;
                var listAllThanhVienPhongBan = context.ThanhVienPhongBan.ToList();
                var empIdTruongPhong = listAllThanhVienPhongBan.Where(x => x.OrganizationId == parameter.OrgId && x.IsManager == 1).Select(x => x.EmployeeId).ToList();
                var listAllOrg = context.Organization.ToList();
                var listAllPos = context.Position.ToList();
                var listAllEmp = context.Employee.ToList();
                var listAllUser = context.User.ToList();
                var isShowQuyLuongVaMucTang = false;

                var isTruongPhong = false;
                var empIdLogin = context.User.FirstOrDefault(x => x.UserId == parameter.UserId)?.EmployeeId;
                if(empIdTruongPhong.Contains(empIdLogin.Value))
                {
                    isTruongPhong = true;
                }

                //Đang gán người đánh giá
                if (parameter.TrangThai == 1)
                {
                    //nếu không phải là trưởng phòng 
                    if (isTruongPhong == false)
                    {
                        return new LayNhanVienCungCapVaCapDuoiOrgResult()
                        {
                            IsTruongPhong = isTruongPhong,
                            ListEmp = listEmp,
                            ListNhanVienKyDanhGia = listNhanVienKyDanhGia,
                            StatusCode = HttpStatusCode.ExpectationFailed,
                            Message = "Phòng ban đang trong quá trình gán người đánh giá, chỉ trưởng bộ phận phòng ban mới được truy cập!",
                        };
                    }

                    //Lấy list phòng ban con của user
                    List<Guid?> listGetAllChild = new List<Guid?>();
                    listGetAllChild.Add(parameter.OrgId);
                    listGetAllChild = getOrganizationChildrenId(parameter.OrgId, listGetAllChild);

                    //Lấy danh sách nhân viên EmployyeeId mà user phụ trách
                    listEmp = listAllEmp.Where(x => (listGetAllChild == null || listGetAllChild.Count == 0 || listGetAllChild.Contains(x.OrganizationId)))
                        .Select(x => new EmployeeEntityModel
                        {
                            EmployeeId = x.EmployeeId,
                            EmployeeCode = x.EmployeeCode,
                            EmployeeName = x.EmployeeName,
                            EmployeeCodeName = x.EmployeeCode + " - " + x.EmployeeName,
                            OrganizationId = x.OrganizationId,
                            OrganizationName = x.OrganizationId != null ? listAllOrg.FirstOrDefault(y => y.OrganizationId == x.OrganizationId).OrganizationName : "",
                            PositionId = x.PositionId,
                            OrganizationLevel = x.OrganizationId != null ? listAllOrg.FirstOrDefault(y => y.OrganizationId == x.OrganizationId).Level : 0,
                            PositionName = x.PositionId != null ? listAllPos.FirstOrDefault(y => y.PositionId == x.PositionId).PositionName : "",
                            ThamGiaDanhGia = true,
                            XemLuong = false,
                            Active = x.Active,
                        }).OrderBy(x => x.OrganizationLevel).ToList();

                    listEmp.ForEach(emp =>
                    {
                        var trangThaiId = 0;
                        var user = listAllUser.FirstOrDefault(x => x.EmployeeId == emp.EmployeeId);

                        if (emp.Active == true && user.Active == true)
                        {
                            trangThaiId = 1; //Đang hoạt động - Được phê duyệt
                        }
                        else if (emp.Active == true && user.Active == false)
                        {
                            trangThaiId = 2; //Đang hoạt động - Không được truy cập
                        }
                        else
                        {
                            trangThaiId = 3; //Ngừng hoạt động
                        }
                        emp.TrangThaiId = trangThaiId;
                    });
                    listEmp = listEmp.Where(x => x.TrangThaiId == 1).ToList(); // đang hoạc động và được truy cập
                }

                //Đang đánh giá
                if (parameter.TrangThai == 2 || parameter.TrangThai == 3 || parameter.TrangThai == 4)
                {
                    var listNhanVienPhongBan = context.NhanVienKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId &&
                                                                           x.RootOrgId == parameter.OrgId).ToList();

                    var listDanhGiaNhanVien = context.DanhGiaNhanVien.ToList();
                    var listCauHinhPhieuDanhGia = context.NoiDungKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId)
                   .Select(x => new NoiDungKyDanhGiaEntityModel()
                   {
                       NoiDungKyDanhGiaId = x.NoiDungKyDanhGiaId,
                       KyDanhGiaId = x.KyDanhGiaId,
                       PhieuDanhGiaId = x.PhieuDanhGiaId,
                       PositionId = x.PositionId
                   }).ToList();


                    //Phiếu đnáh giá có hiệu lực
                    var trangThaiHieuLucPhieuDanhGia = GeneralList.GetTrangThais("PhieuDanhGia").FirstOrDefault(x => x.Value == 1).Value;
                    var listPhieuDanhGia = context.PhieuDanhGia.Where(x => x.TrangThaiPhieuDanhGia == trangThaiHieuLucPhieuDanhGia).ToList();

                    //lấy list trạng thái phòng ban kỳ đánh giá
                    var TrangThaiTuDanhGia = GeneralList.GetTrangThais("PhongBanKyDanhGia").ToList();


                    //List mucDanhgia (A,B,C,D...)
                    var mucDanhGiaCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "MUCDANHGIA").CategoryTypeId;
                    var listMucDanhGiaName = context.Category.Where(x => x.CategoryTypeId == mucDanhGiaCategoryTypeId).ToList();

                    //Lấy thang điểm đánh giá
                    var listPhieuDanhGiaId = listPhieuDanhGia.Select(x => x.ThangDiemDanhGiaId).ToList();
                    var listThangDiemDanhGia = context.MucDanhGia.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();
                    var listMucDanhGia = context.MucDanhGiaDanhGiaMapping.Where(x => listPhieuDanhGiaId.Contains(x.MucDanhGiaId)).ToList();


                    var listMucDanhGiaApDung = listMucDanhGia
                        .Select(x => new MucDanhGiaDanhGiaMappingEntityModel
                        {
                            MucDanhGiaMasterDataName = listMucDanhGiaName.FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName,
                            mucDanhGiaMasterDataNameCustom = listMucDanhGiaName
                                .FirstOrDefault(y => y.CategoryId == x.MucDanhGiaMasterDataId).CategoryName + "( " + x.DiemTu + " - " + x.DiemDen + " )",
                            DiemTu = x.DiemTu,
                            DiemDen = x.DiemDen,
                            MucDanhGiaId = x.MucDanhGiaId,
                            MucDanhGiaDanhGiaMappingId = x.MucDanhGiaDanhGiaMappingId,
                            MucDanhGiaMasterDataId = x.MucDanhGiaMasterDataId,
                        }).ToList();


                    //Lấy nhân viên kỳ đánh giá thuộc phòng ban chuyền xuống
                    listNhanVienKyDanhGia = listNhanVienPhongBan.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId &&
                                                                            x.RootOrgId == parameter.OrgId &&
                                                                            x.NguoiDuocDanhGiaId != Guid.Empty) // không phải phòng ban
                    .Select(x => new NhanVienKyDanhGiaEntityModel()
                    {
                        NhanVienKyDanhGiaId = x.NhanVienKyDanhGiaId,
                        ParentId = x.ParentId,
                        Level = x.Level,
                        KyDanhGiaId = x.KyDanhGiaId,
                        NguoiDanhGiaId = x.NguoiDanhGiaId,
                        NguoiDuocDanhGiaId = x.NguoiDuocDanhGiaId,
                        OrganizationId = x.OrganizationId,
                        RootOrgId = x.RootOrgId,
                        XemLuong = x.XemLuong,
                        TrangThai = x.TrangThai,
                    }).OrderBy(x => x.Level).ToList();


                    listNhanVienKyDanhGia.ForEach(item =>
                    {
                        //Người đăng nhâp là người đánh giá ( không phải trưởng bộ phận)
                        if (empIdLogin == item.NguoiDanhGiaId)
                        {
                            item.IsNguoiDanhGia = true;
                        }

                        item.OrganizationName = listAllOrg.FirstOrDefault(y => y.OrganizationId == item.OrganizationId).OrganizationName;
                      
                        var nguoiDuocDanhGia = listAllEmp.FirstOrDefault(c => c.EmployeeId == item.NguoiDuocDanhGiaId);
                     
                        var NguoiDanhGia = listAllEmp.FirstOrDefault(y => y.EmployeeId == item.NguoiDanhGiaId);
                        item.NguoiDanhGiaName = NguoiDanhGia?.EmployeeCode + " - " + NguoiDanhGia?.EmployeeName;
                    
                        item.NguoiDuocDanhGiaName = nguoiDuocDanhGia?.EmployeeCode + " - " + nguoiDuocDanhGia?.EmployeeName;

                        var chucVu = listAllPos.FirstOrDefault(y => y.PositionId == nguoiDuocDanhGia.PositionId);
                        item.ChucVu = chucVu?.PositionName;
                        item.PositionId = chucVu?.PositionId;
                        var danhGiaNhanVien = listDanhGiaNhanVien.FirstOrDefault(y => y.NhanVienKyDanhGiaId == item.NhanVienKyDanhGiaId);
                        //Nếu nhân viên đa có bản ghi thực hiện tự đánh giá
                        if (danhGiaNhanVien != null)
                        {
                            if(danhGiaNhanVien.MucLuongDeXuatQuanLy != null && danhGiaNhanVien.TrangThaiId > 2 && danhGiaNhanVien.MucLuongDeXuatQuanLy > danhGiaNhanVien.MucLuongCu)
                            {
                                tongMucTangQuanLy = tongMucTangQuanLy + danhGiaNhanVien.MucLuongDeXuatQuanLy.Value - danhGiaNhanVien.MucLuongCu.Value;
                            }

                            item.DanhGiaNhanVienId = danhGiaNhanVien.DanhGiaNhanVienId;
                            item.TrangThaiDanhGia = danhGiaNhanVien.TrangThaiId;

                            //lấy thang điểm của nhân viên được áp dụng
                            item.MucDanhGiaMasterDataId = danhGiaNhanVien.MucDanhGiaMasterDataId;
                            var phieuDanhGiaId = listCauHinhPhieuDanhGia.FirstOrDefault(x => x.PositionId == item.PositionId)?.PhieuDanhGiaId;
                            var mucDanhGiaId = listPhieuDanhGia.FirstOrDefault(x => x.PhieuDanhGiaId == phieuDanhGiaId)?.ThangDiemDanhGiaId;
                            item.ListMucDanhGia = listMucDanhGiaApDung.Where(x => x.MucDanhGiaId == mucDanhGiaId).ToList();
                            item.MucDanhGiaApDung = item.ListMucDanhGia.FirstOrDefault(x => x.MucDanhGiaMasterDataId == item.MucDanhGiaMasterDataId);

                            if (danhGiaNhanVien.TrangThaiId > 1)// chỉ hiện thị điểm sau khi nhân viên hoàn thành tự đánh giá 
                            {
                                item.TongDiemTuDanhGia = danhGiaNhanVien.TongDiemTuDanhGia;
                                var diemTuDanhGiaName = item.ListMucDanhGia.FirstOrDefault(x => x.DiemTu <= item.TongDiemTuDanhGia && item.TongDiemTuDanhGia <= x.DiemDen);
                                item.TongDiemTuDanhGiaName = diemTuDanhGiaName?.MucDanhGiaMasterDataName + "(" + item.TongDiemTuDanhGia.ToString() + ")";
                            }
                            if (danhGiaNhanVien.TrangThaiId > 2 && item.NguoiDanhGiaId != Guid.Empty && !empIdTruongPhong.Contains(item.NguoiDanhGiaId.Value))// chỉ hiện thị điểm sau khi nhân viên hoàn thành tự đánh giá  và có người đánh giá hoặc người đnáh giá không là trưởng phòng
                            {
                                item.TongDiemDanhGia = danhGiaNhanVien.TongDiemDanhGia;
                                var diemDanhGiaName = item.ListMucDanhGia.FirstOrDefault(x => x.DiemTu <= item.TongDiemDanhGia && item.TongDiemDanhGia <= x.DiemDen);
                                item.TongDiemDanhGiaName = diemDanhGiaName?.MucDanhGiaMasterDataName + "(" + item.TongDiemDanhGia.ToString() + ")"; ;
                            }
                            if (danhGiaNhanVien.TrangThaiId > 3)// chỉ hiện thị điểm sau khi nhân viên hoàn thành tự đánh giá 
                            {
                                item.TongKetQua = danhGiaNhanVien.TongKetQua;
                                item.TongKetQuaName = item.MucDanhGiaApDung != null ? item.MucDanhGiaApDung.MucDanhGiaMasterDataName : "";
                              
                            }

                            //Nếu người đánh giá có quyền xem lương hoặc là trưởng phòng => show mức lương cũ
                            if((item.IsNguoiDanhGia == true && item.XemLuong == true) || isTruongPhong == true)
                            {
                                item.MucLuongCu = danhGiaNhanVien.MucLuongCu;
                                item.MucLuongDeXuatQuanLy = danhGiaNhanVien.MucLuongDeXuatQuanLy;
                                isShowQuyLuongVaMucTang = true;
                            }
                        }
                    });

                    //Nếu không phải trưởng phòng thì lấy các bản ghi với người đăng nhập là: người đánh giá hoặc người được đánh giá
                    if (isTruongPhong == false)
                    {
                        listNhanVienKyDanhGia = listNhanVienKyDanhGia.Where(x => x.NguoiDanhGiaId == empIdLogin || x.NguoiDuocDanhGiaId == empIdLogin).ToList();
                        if (listNhanVienKyDanhGia.Count() == 0)
                        {
                            return new LayNhanVienCungCapVaCapDuoiOrgResult()
                            {
                                IsTruongPhong = isTruongPhong,
                                ListEmp = listEmp,
                                ListNhanVienKyDanhGia = listNhanVienKyDanhGia,
                                StatusCode = HttpStatusCode.ExpectationFailed,
                                Message = "Chỉ trưởng phòng, người đánh giá, người tự đánh giá mới được truy cập dữ liệu này!",
                            };
                        }
                    }

                    //Tính tổng mức tăng và quỹ lương còn lại của phòng ban

                    //Lấy thông tin phòng ban
                    var quyLuongPhongBan = listNhanVienPhongBan.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId &&
                                                                            x.RootOrgId == parameter.OrgId &&
                                                                            x.NguoiDuocDanhGiaId == Guid.Empty &&
                                                                            x.NguoiDuocDanhGiaId == Guid.Empty).QuyLuong; // không phải phòng ban
                    quyLuongConLai = quyLuongPhongBan - tongMucTangQuanLy;

                }
                return new LayNhanVienCungCapVaCapDuoiOrgResult()
                {
                    IsTruongPhong = isTruongPhong,
                    ListEmp = listEmp,
                    ListNhanVienKyDanhGia = listNhanVienKyDanhGia,
                    QuyLuongConLai = quyLuongConLai,
                    TongMucTangQuanLy = tongMucTangQuanLy,
                    IsShowQuyLuongVaMucTang = isShowQuyLuongVaMucTang,
                    StatusCode = HttpStatusCode.OK,
                    Message = "Lấy nhân viên thành công",
                };
            }
            catch (Exception e)
            {
                return new LayNhanVienCungCapVaCapDuoiOrgResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    Message = e.Message,
                };
            }
        }


        public HoanThanhDanhGiaPhongBanResult HoanThanhDanhGiaPhongBan(HoanThanhDanhGiaPhongBanParameter parameter)
        {
            try
            {
                
                var listNhanVienKyDanhGia = context.NhanVienKyDanhGia.Where(x => x.KyDanhGiaId == parameter.KyDanhGiaId && x.RootOrgId == parameter.OrgId).ToList();

                var phongBanKyDanhGia = listNhanVienKyDanhGia.FirstOrDefault(x => x.KyDanhGiaId == parameter.KyDanhGiaId
                                                                                       && x.NguoiDanhGiaId == Guid.Empty
                                                                                       && x.NguoiDuocDanhGiaId == Guid.Empty
                                                                                       && x.OrganizationId == parameter.OrgId);

                var listNhanVienKyDanhGiaId = listNhanVienKyDanhGia.Where(x =>
                        x.NguoiDanhGiaId != Guid.Empty 
                        && x.NguoiDuocDanhGiaId != Guid.Empty).Select(x => x.NhanVienKyDanhGiaId).ToList();

                var listDanhGiaNhanVien = context.DanhGiaNhanVien.Where(x => listNhanVienKyDanhGiaId.Contains(x.NhanVienKyDanhGiaId)).ToList();

                //Kiểm tra xem nhân viên kỳ đánh giá đã hoàn thành phiếu hết chưa: trạng thái đánh giá == 4 ( bảng đánh giá nhân viên: trangThaiId)
                var nhanVienChuaHoanThanhKyDanhGia = listDanhGiaNhanVien.FirstOrDefault(x => x.TrangThaiId != 4);
                if(nhanVienChuaHoanThanhKyDanhGia != null)
                {
                    return new HoanThanhDanhGiaPhongBanResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Bạn cần hoàn thành đánh gia cho tất cả nhân viên trong danh sách",
                    };
                }
               
                if (phongBanKyDanhGia.TrangThai == 1)
                {
                    return new HoanThanhDanhGiaPhongBanResult()
                    {
                        StatusCode = HttpStatusCode.ExpectationFailed,
                        Message = "Phòng ban đang trong giai đoạn gán người đánh giá, không thể hoàn thành đánh giá cho phòng ban",
                    };
                }
                var trangThaiHoanThanhPbKyDanhGia = GeneralList.GetTrangThais("PhongBanKyDanhGia").FirstOrDefault(x => x.Value == 3).Value;
                phongBanKyDanhGia.TrangThai = trangThaiHoanThanhPbKyDanhGia;
                context.NhanVienKyDanhGia.Update(phongBanKyDanhGia);
                context.SaveChanges();
                return new HoanThanhDanhGiaPhongBanResult()
                {
                    StatusCode = HttpStatusCode.OK,
                    Message = "Hoàn thành đánh giá",
                };
            }
            catch (Exception e)
            {
                return new HoanThanhDanhGiaPhongBanResult()
                {
                    StatusCode = HttpStatusCode.ExpectationFailed,
                    Message = e.Message,
                };
            }
        }

        private static readonly string[] VietNamChar = new string[]
       {
            "aAeEoOuUiIdDyY",
            "áàạảãâấầậẩẫăắằặẳẵ",
            "ÁÀẠẢÃÂẤẦẬẨẪĂẮẰẶẲẴ",
            "éèẹẻẽêếềệểễ",
            "ÉÈẸẺẼÊẾỀỆỂỄ",
            "óòọỏõôốồộổỗơớờợởỡ",
            "ÓÒỌỎÕÔỐỒỘỔỖƠỚỜỢỞỠ",
            "úùụủũưứừựửữ",
            "ÚÙỤỦŨƯỨỪỰỬỮ",
            "íìịỉĩ",
            "ÍÌỊỈĨ",
            "đ",
            "Đ",
            "ýỳỵỷỹ",
            "ÝỲỴỶỸ"
       };

        public static string LocDau(string str)
        {
            //Thay thế và lọc dấu từng char      
            for (int i = 1; i < VietNamChar.Length; i++)
            {
                for (int j = 0; j < VietNamChar[i].Length; j++)
                    str = str.Replace(VietNamChar[i][j], VietNamChar[0][i - 1]);
            }
            return str;
        }

        public DownloadTemplateImportHDNSResult DownloadTemplateImportHDNS(DownloadTemplateImportHDNSParameter parameter)
        {
            try
            {
                string rootFolder = hostingEnvironment.WebRootPath + "\\ExcelTemplate";
                string fileName = @"Template_Import_HopDongNhanSu.xlsx";

                string newFilePath = Path.Combine(rootFolder, fileName);
                byte[] data = File.ReadAllBytes(newFilePath);

                return new DownloadTemplateImportHDNSResult
                {
                    TemplateExcel = data,
                    Message = string.Format("Đã dowload file Template_Import_HopDongNhanSu"),
                    FileName = "Template_Import_HopDongNhanSu",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new DownloadTemplateImportHDNSResult
                {
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public GetMasterDateImportHDNSResult GetMasterDateImportHDNS(GetMasterDateImportHDNSParameter parameter)
        {
            try
            {
                var listHopDong = context.HopDongNhanSu.ToList();
                var listEmployeeCode = context.Employee.Select(x => x.EmployeeCode).ToList();
                var loaiHopDongCategoryTypeId = context.CategoryType.FirstOrDefault(x => x.CategoryTypeCode == "LHDNS").CategoryTypeId;
                var listLoaiHopDong = context.Category.Where(x => x.CategoryTypeId == loaiHopDongCategoryTypeId).Select(
                    x => new CategoryEntityModel
                    {
                        CategoryId = x.CategoryId,
                        CategoryName = x.CategoryName
                    }).ToList();
                var listChucVu = context.Position.ToList();
                return new GetMasterDateImportHDNSResult
                {
                    ListEmployeeCode = listEmployeeCode,
                    ListHopDong = listHopDong,
                    ListChucVu = listChucVu,
                    ListLoaiHopDong = listLoaiHopDong,
                    Message = "Đã có lỗi xảy ra trong quá trình download",
                    StatusCode = HttpStatusCode.OK
                };
            }
            catch (Exception ex)
            {
                return new GetMasterDateImportHDNSResult
                {
                    Message = ex.Message,
                    StatusCode = HttpStatusCode.Forbidden
                };
            }
        }

        public ImportHDNSResult ImportHDNS(ImportHDNSParameter parameter)
        {

            using (var transaction = context.Database.BeginTransaction())
            {
                var listAllHopDongNhanSu = context.HopDongNhanSu.ToList();
                var listAllEmp= context.Employee.ToList();

                var listDeXuat = context.DeXuatThayDoiChucVu.Where(x => x.TrangThai == 3).ToList(); //lấy đề xuất chức vụ đã duyệt
                var listDeXuatId = listDeXuat.Select(x => x.DeXuatThayDoiChucVuId).ToList();
                var listNhanVienDeXuat = context.NhanVienDeXuatThayDoiChucVu.Where(x => listDeXuatId.Contains(x.DeXuatThayDoiChucVuId)).ToList();
                
                var empSoHDCount = 0;
                var empSoPhuLucCount = 0;
                var empNgayKyHopDongCount = 0;
                var isCapNhatNgayKeThucGanNhat = false;
                var isCheckNgayKetThucBatDau = false;
                var isGiaoNhau = false;
                var listHopDongNhanSu = new List<HopDongNhanSu>();
                try
                {
                    parameter.ListHopDong.ForEach(item =>
                    {
                        //lấy danh sách hợp đồng của của employeeCode
                        var employee = listAllEmp.FirstOrDefault(x => x.EmployeeCode == item.EmployeeCode);
                        var listAllHSNS = listAllHopDongNhanSu.FindAll(x => x.EmployeeId == employee.EmployeeId).ToList();

                        //Check exist in DB
                        var existSoPhuLuc = listAllHSNS.Where(x => x.SoPhuLuc.ToUpper().Trim() == item.SoPhuLuc.ToUpper().Trim()).ToList();
                        var existSoHD = listAllHSNS.Where(x => x.SoHopDong.ToUpper().Trim() == item.SoHopDong.ToUpper().Trim()).ToList();
                        //Ngày ký hợp đồng không được trùng với ngày ký hợp đồng đã tạo
                        var existNgayKyHD = listAllHSNS.Count(x => x.NgayKyHopDong.Date == item.NgayKyHopDong.Date);

                        //Lấy hợp đồng gần nhất
                        var hopDongGanNhat = listAllHSNS.OrderByDescending(z => z.NgayKyHopDong)
                            .FirstOrDefault();

                        var listHopDongCuaNhanVien = listAllHSNS
                            .OrderBy(x => x.NgayKyHopDong).ToList();

                        //Kiểm tra xem các hợp đồng có giao nhau hay k
                        if (item.NgayKetThucHopDong != null)
                        {
                            listHopDongCuaNhanVien.ForEach(hopDong =>
                            {
                                if (hopDong.NgayKetThucHopDong == null || (hopDong.NgayKetThucHopDong != null && hopDong.NgayKyHopDong.Date <= item.NgayKetThucHopDong.Value.Date &&
                                    hopDong.NgayKetThucHopDong.Value.Date >= item.NgayKyHopDong.Date))
                                {
                                    isGiaoNhau = true;
                                }
                            });
                        }
                        else
                        {
                            if (hopDongGanNhat != null &&
                                item.NgayKyHopDong.Date <= hopDongGanNhat.NgayKetThucHopDong.Value.Date)
                            {
                                isGiaoNhau = true;
                            }
                        }

                        if (hopDongGanNhat != null && hopDongGanNhat.NgayKetThucHopDong == null)
                        {
                                isCapNhatNgayKeThucGanNhat = true;
                        }
                        else if (item.NgayKyHopDong != null && item.NgayKetThucHopDong != null && (item.NgayKyHopDong.Date > item.NgayKetThucHopDong.Value.Date))
                        {
                                isCheckNgayKetThucBatDau = true;
                        }
                        else if (existSoHD.Count > 0)
                        {
                            empSoHDCount++;
                        }
                        else if (existSoPhuLuc.Count() > 0 )
                        {
                            empSoPhuLucCount++;
                        }
                        else if (existNgayKyHD > 0)
                        {
                            empNgayKyHopDongCount++;
                        }
                        else
                        {
                            var hopDong = new HopDongNhanSu();
                            hopDong.LoaiHopDongId = item.LoaiHopDongId;
                            hopDong.SoHopDong = item.SoHopDong;
                            hopDong.SoPhuLuc = item.SoPhuLuc;
                            hopDong.NgayKyHopDong = item.NgayKyHopDong;
                            hopDong.NgayBatDauLamViec = item.NgayBatDauLamViec;
                            hopDong.NgayKetThucHopDong = item.NgayKetThucHopDong;
                            hopDong.PositionId = item.PositionId;
                            hopDong.MucLuong = item.MucLuong;
                            hopDong.Active = true;
                            hopDong.CreatedById = parameter.UserId;
                            hopDong.CreatedDate = DateTime.Now;
                            hopDong.EmployeeId = employee.EmployeeId;
                            context.HopDongNhanSu.Add(hopDong);
                            listAllHopDongNhanSu.Add(hopDong);
                            //lấy đề xuất chức vụ đã duyệt mới nhất của nhân viên
                            var deXuatChucVu = (from DX in listDeXuat
                                                join NvDX in listNhanVienDeXuat on DX.DeXuatThayDoiChucVuId equals NvDX.DeXuatThayDoiChucVuId
                                                where NvDX.EmployeeId == employee.EmployeeId
                                                select new NhanVienDeXuatThayDoiChucVu
                                                {
                                                    ChucVuDeXuatId = NvDX.ChucVuDeXuatId,
                                                    CreatedDate = DX.NgayApDung //Ngày áp dụng
                                                }).OrderByDescending(x => x.CreatedDate).FirstOrDefault();
                            #region Kiểm tra và thay đổi ngày vào + chức vụ nhân viên khi tạo hợp đồng

                            //kiểm tra xem hợp đồng mới tạo có phải là hợp đồng mới nhất của nhân viên
                            var hopDongNhanSuNew = listAllHopDongNhanSu.OrderByDescending(x => x.NgayKyHopDong).FirstOrDefault();
                            if (hopDongNhanSuNew.HopDongNhanSuId == hopDong.HopDongNhanSuId)
                            {
                                if (deXuatChucVu != null && deXuatChucVu.CreatedDate != null)
                                {
                                    if (deXuatChucVu.CreatedDate.Value.Date > hopDong.NgayKyHopDong.Date && deXuatChucVu.CreatedDate.Value.Date < DateTime.Now.Date)
                                    {
                                        employee.PositionId = deXuatChucVu.ChucVuDeXuatId;
                                    }
                                    else
                                    {
                                        employee.PositionId = hopDong.PositionId;
                                    }
                                }
                                else
                                {
                                    employee.PositionId = hopDong.PositionId;
                                }
                            }

                            //kiểm tra xem hợp đồng mới tạo có phải là hợp đồng cũ nhất của nhân viên
                            var hopDongNhanSuOld = context.HopDongNhanSu.Where(x => x.EmployeeId == hopDong.EmployeeId).OrderBy(x => x.NgayKyHopDong).FirstOrDefault();
                            if (hopDongNhanSuOld.HopDongNhanSuId == hopDong.HopDongNhanSuId)
                            {
                                employee.StartDateMayChamCong = hopDong?.NgayBatDauLamViec;
                            }
                            #endregion
                        }
                    });
                    context.SaveChanges();
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult
                    {
                        Message = e.Message,
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                };

                if (empSoPhuLucCount > 0)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult
                    {
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        Message = "Số phụ lục bị trùng!",
                    };
                }

                if (empSoHDCount > 0)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult
                    {
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                        Message = "Số hợp đồng bị trùng!",
                    };
                }

                if (isGiaoNhau)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult()
                    {
                        Message = "Ngày bắt đầu - Ngày kết thúc của các hợp đồng không được giao nhau",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                if(empNgayKyHopDongCount > 0)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult()
                    {
                        Message = "Ngày ký hợp đồng đã tồn tại!",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                if (isCheckNgayKetThucBatDau)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult()
                    {
                        Message = "Ngày kết thúc hợp đồng không được bé hơn Ngày ký hợp đồng",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                if (isCapNhatNgayKeThucGanNhat)
                {
                    transaction.Rollback();
                    return new ImportHDNSResult()
                    {
                        Message = "Bạn cần cập nhật ngày kết thúc cho hợp đồng hiện tại trước khi tạo hợp đồng mới",
                        StatusCode = System.Net.HttpStatusCode.ExpectationFailed,
                    };
                }

                transaction.Commit();
                return new ImportHDNSResult
                {
                    StatusCode = System.Net.HttpStatusCode.OK,
                    Message = "Import hợp đồng nhân sự thành công!",
                };
            }
        }
    }
}
